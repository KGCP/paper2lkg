{
  "iri": "Paper-Learning_SHACL_shapes_from_knowledge_graphs",
  "title": "Learning SHACL shapes from knowledge graphs",
  "authors": [
    "Pouya Ghiasnezhad Omran",
    "Kerry Taylor",
    "Sergio Rodr\u00edguez M\u00e9ndez",
    "Armin Haller"
  ],
  "keywords": [
    "HACL shape learning",
    "hapes constraint language",
    "knowledge graph",
    "inverse open path rule"
  ],
  "sections": [
    {
      "iri": "Section-1",
      "subtitle": "Abstract",
      "paragraphs": [
        {
          "iri": "Section-1-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-1-Paragraph-1-Sentence-1",
              "text": "Knowledge Graphs (KGs) have proliferated on the Web since the introduction of knowledge panels to Google search in 2012."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-2",
              "text": "KGs are large data-first graph databases with weak inference rules and weakly-constraining data schemes."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-3",
              "text": "SHACL, the Shapes Constraint Language, is a W3C recommendation for expressing constraints on graph data as shapes."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-4",
              "text": "SHACL shapes serve to validate a KG, to underpin manual KG editing tasks, and to offer insight into KG structure."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-5",
              "text": "Often in practice, large KGs have no available shape constraints and so cannot obtain these benefits for ongoing maintenance and extension."
            }
          ]
        },
        {
          "iri": "Section-1-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-1-Paragraph-2-Sentence-1",
              "text": "We introduce Inverse Open Path (IOP) rules, a predicate logic formalism which presents specific shapes in the form of paths over connected entities that are present in a KG."
            },
            {
              "iri": "Section-1-Paragraph-2-Sentence-2",
              "text": "IOP rules express simple shape patterns that can be augmented with minimum cardinality constraints and also used as a building block for more complex shapes, such as trees and other rule patterns."
            },
            {
              "iri": "Section-1-Paragraph-2-Sentence-3",
              "text": "We define formal quality measures for IOP rules and propose a novel method to learn high-quality rules from KGs."
            },
            {
              "iri": "Section-1-Paragraph-2-Sentence-4",
              "text": "We show how to build high-quality tree shapes from the IOP rules."
            },
            {
              "iri": "Section-1-Paragraph-2-Sentence-5",
              "text": "Our learning method, SHACLEARNER, is adapted from a state-of-the-art embedding-based open path rule learner."
            }
          ]
        },
        {
          "iri": "Section-1-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-1-Paragraph-3-Sentence-1",
              "text": "We evaluate SHACLEARNER on some real-world massive KGs, including YAGO2s with 4 million facts, DBpedia 3.8 with 11 million facts, and Wikidata with 8 million facts."
            },
            {
              "iri": "Section-1-Paragraph-3-Sentence-2",
              "text": "The experiments show that our SHACLEARNER can effectively learn informative and intuitive shapes from massive KGs."
            },
            {
              "iri": "Section-1-Paragraph-3-Sentence-3",
              "text": "The shapes are diverse in structural features such as depth and width, and also in quality measures that indicate confidence and generality."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-2",
      "subtitle": "Introduction",
      "paragraphs": [
        {
          "iri": "Section-2-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-1-Sentence-1",
              "text": "While public knowledge graphs (KGs) became popular with the development of DBpedia and Yago more than a decade ago, interest in enterprise knowledge graphs has taken off since the inclusion of knowledge panels on the Google Search engine in 2012, driven by its internal knowledge graph."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-2",
              "text": "Although these KGs are massive and diverse, they are typically incomplete."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-3",
              "text": "Regardless of the method that is used to build a KG, whether collaboratively or individually, manually or automatically, it will be incomplete because of the evolving nature of human knowledge, cultural bias, and resource constraints."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-4",
              "text": "Consider Wikidata, for example, where there is more complete information for some types of entities, such as pop stars, while less for others, like opera singers."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-5",
              "text": "Even for the same type of entity, such as computer scientists, there are different depths of detail for similarly accomplished scientists, depending on their country of residence."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-2-Sentence-1",
              "text": "However, the power of KGs comes from their data-first approach, enabling contributors to extend a KG in a relatively arbitrary manner."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-2",
              "text": "By contrast, a relational database typically employs not-null and other schema-based constraints that require some attributes to be instantiated in a defined way at all times."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-3",
              "text": "Large KGs are typically populated by automatic and semi-automatic methods using non-structured sources such as Wikipedia that are prone to errors of omission and commission."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-4",
              "text": "Both kinds of errors can be highlighted for correction by a careful application of schema constraints."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-5",
              "text": "However, such constraints are commonly unavailable and, if available, uncertain and frequently violated in a KG for valid reasons, arising from the intended data-first approach of KG applications."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-3-Sentence-1",
              "text": "SHACL was formally recommended by the W3C in 2017 to express such constraints on a KG as shapes."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-2",
              "text": "For example, SHACL can be used to express that a person in a specific use case needs to have a name, birth date, and place of birth, and that these attributes have particular types: a string, a date, and a location."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-3",
              "text": "The shapes are used to guide the population of a KG, although they are not necessarily enforced."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-4",
              "text": "Typically, SHACL shapes are manually specified."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-5",
              "text": "However, as for multidimensional relational database schemes, shapes could, in principle, be inferred from KG data."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-6",
              "text": "As frequent patterns, the shapes characterize a KG and can be used for subsequent data cleaning or ongoing data entry."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-7",
              "text": "There is scant previous research on this topic."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-4-Sentence-1",
              "text": "While basic SHACL and its advanced features allow the modeling of diverse shapes including rules and constraints, most of these shapes are previously well known when expressed by alternative formalisms, including closed rules, trees, existential rules, and graph functional dependencies."
            },
            {
              "iri": "Section-2-Paragraph-4-Sentence-2",
              "text": "We claim that the common underlying form of all these shapes is the path, over which additional constraints induce alternative shapes."
            },
            {
              "iri": "Section-2-Paragraph-4-Sentence-3",
              "text": "For example, in DBpedia we see the following path: if an entity x is a song, then x is in an album y which has a record label z."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-5-Sentence-1",
              "text": "Since the satisfaction of a less-constrained shape is a necessary condition for satisfaction of a more complex shape but not a sufficient condition, in this paper we focus on learning paths, the least constrained shape for our purposes."
            },
            {
              "iri": "Section-2-Paragraph-5-Sentence-2",
              "text": "In addition, we learn cardinality constraints that can express, for example, that a song has at least 2 producers."
            },
            {
              "iri": "Section-2-Paragraph-5-Sentence-3",
              "text": "We also investigate the process of constructing one kind of more complex shape, that is a tree, out of paths."
            },
            {
              "iri": "Section-2-Paragraph-5-Sentence-4",
              "text": "For example, we discover a tree about an entity which has song as its type."
            },
            {
              "iri": "Section-2-Paragraph-5-Sentence-5",
              "text": "In a KG context, the tree suggests that if we have an entity of type song in the KG, then we would expect to have the associated facts too."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-6-Sentence-1",
              "text": "In this paper, we present a system, SHACLEARNER, that mines shapes from KG data."
            },
            {
              "iri": "Section-2-Paragraph-6-Sentence-2",
              "text": "For this purpose, we propose a predicate calculus formalism in which rules have one body atom and a chain of conjunctive atoms in the head with a specific variable binding pattern."
            },
            {
              "iri": "Section-2-Paragraph-6-Sentence-3",
              "text": "Since these rules are an inverse version of open path rules, we call them inverse open path (IOP) rules."
            },
            {
              "iri": "Section-2-Paragraph-6-Sentence-4",
              "text": "To learn IOP rules, we adapt an embedding-based open path rule learner."
            },
            {
              "iri": "Section-2-Paragraph-6-Sentence-5",
              "text": "We define quality measures to express the validity of IOP rules in a KG."
            },
            {
              "iri": "Section-2-Paragraph-6-Sentence-6",
              "text": "SHACLEARNER uses the mined IOP rules to subsequently discover more complex tree shapes."
            },
            {
              "iri": "Section-2-Paragraph-6-Sentence-7",
              "text": "Each IOP rule or tree is a SHACL shape, in the sense that it can be syntactically rewritten in SHACL."
            },
            {
              "iri": "Section-2-Paragraph-6-Sentence-8",
              "text": "Our mined shapes are augmented with a novel numerical confidence measure to express the strength of evidence in the KG for each shape."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-7",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-7-Sentence-1",
              "text": "In summary, the main contributions of this paper are: we introduce a new formalism called Inverse Open Path rules, that serves as a building block for more complex shapes such as trees, together with cardinality constraints and quality measurements; we extend the Open Path rule learning method to learn IOP rules annotated with cardinality constraints, while introducing unary predicates that can act as class or type constraints; and we propose a method to aggregate IOP rules to produce tree shapes."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-8",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-8-Sentence-1",
              "text": "This paper is organized as follows: after presenting some foundations in Section 2, we describe our SHACL learning method in Section 3, including the formalism of IOP rules, the embedding-based method that discovers IOP rules from a KG, and the method for aggregating IOP rules into trees."
            },
            {
              "iri": "Section-2-Paragraph-8-Sentence-2",
              "text": "In Section 4, we present related work."
            },
            {
              "iri": "Section-2-Paragraph-8-Sentence-3",
              "text": "We discuss results of an experimental evaluation in Section 5 before we conclude in Section 6."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-3",
      "subtitle": "Preliminaries: Closed-path rules",
      "paragraphs": [
        {
          "iri": "Section-3-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-1-Sentence-1",
              "text": "The presentation of closed path rules and open path rules in this section is adapted and extended."
            }
          ]
        },
        {
          "iri": "Section-3-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-2-Sentence-1",
              "text": "An entity e is an identifier for an object such as a place or a person."
            },
            {
              "iri": "Section-3-Paragraph-2-Sentence-2",
              "text": "A fact (also known as a link) is an RDF triple (e, P, e'), written here as P(e, e'), meaning that the subject entity e is related to an object entity e' via the binary predicate (also known as a property), P."
            },
            {
              "iri": "Section-3-Paragraph-2-Sentence-3",
              "text": "In addition, we allow unary predicates of the form P(e), also equivalently written here as the binary fact P(e, e)."
            },
            {
              "iri": "Section-3-Paragraph-2-Sentence-4",
              "text": "We model unary predicates as self-loops to have a unary predicate act as the label of a link in the graph, as shown in Fig. 1, just as for binary predicates."
            },
            {
              "iri": "Section-3-Paragraph-2-Sentence-5",
              "text": "Unary predicates may, but are not limited to, represent class assertions expressed in an RDF triple as (e, rdf:type, P) where P is a class or a datatype."
            },
            {
              "iri": "Section-3-Paragraph-2-Sentence-6",
              "text": "A knowledge graph (KG) is a pair K = (E, F), where E is a set of entities and F is a set of facts and all the entities occurring in F also occur in E."
            }
          ]
        },
        {
          "iri": "Section-3-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-3-Sentence-1",
              "text": "2.1. Closed-path rules"
            },
            {
              "iri": "Section-3-Paragraph-3-Sentence-2",
              "text": "KG rule learning systems employ various rule languages to express rules."
            },
            {
              "iri": "Section-3-Paragraph-3-Sentence-3",
              "text": "RLvLR and SCALEKB use so-called closed path (CP) rules."
            },
            {
              "iri": "Section-3-Paragraph-3-Sentence-4",
              "text": "Each consists of a head at the front of the implication arrow and a body at the tail."
            },
            {
              "iri": "Section-3-Paragraph-3-Sentence-5",
              "text": "We say the rule is about the predicate of the head."
            },
            {
              "iri": "Section-3-Paragraph-3-Sentence-6",
              "text": "The rule forms a closed path, or single unbroken loop of links between the variables."
            },
            {
              "iri": "Section-3-Paragraph-3-Sentence-7",
              "text": "It has the following general form."
            }
          ]
        },
        {
          "iri": "Section-3-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-4-Sentence-1",
              "text": "Pt(x, y) <- P1(x, z1) ^ P2(z1, z2) ^ ... ^ Pn(zn-1, y). (1)"
            }
          ]
        },
        {
          "iri": "Section-3-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-5-Sentence-1",
              "text": "We interpret these kinds of rules with universal quantification of all variables at the outside, and so we can infer a fact that instantiates the head of the rule by finding an instantiation of the body of the rule in the KG."
            },
            {
              "iri": "Section-3-Paragraph-5-Sentence-2",
              "text": "For example, from the rule citizenOf(x, y) <- livesIn(x, z) ^ locatedIn(z, y) and the facts in the KG: livesIn(Mary, Canberra) and locatedIn(Canberra, Australia), we can infer and assert the new fact: citizenOf(Mary, Australia)."
            }
          ]
        },
        {
          "iri": "Section-3-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-6-Sentence-1",
              "text": "Rules are considered more use if they generalise well, that is, they explain many facts."
            },
            {
              "iri": "Section-3-Paragraph-6-Sentence-2",
              "text": "To quantify this idea we recall measures support, head coverage and standard confidence that are used in some major approaches to rule learning."
            }
          ]
        },
        {
          "iri": "Section-3-Paragraph-7",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-7-Sentence-1",
              "text": "Definition 1 (satisfies, support)."
            },
            {
              "iri": "Section-3-Paragraph-7-Sentence-2",
              "text": "Let r be a CP rule of the form (1)."
            },
            {
              "iri": "Section-3-Paragraph-7-Sentence-3",
              "text": "A pair of entities (e, e') satisfies the body of r, denoted body_r(e, e'), if there exist entities e1, ..., e(n-1) in the KG such that all of {P1(e, e1), P2(e1, e2), ..., Pn(e(n-1), e')} are facts in the KG."
            },
            {
              "iri": "Section-3-Paragraph-7-Sentence-4",
              "text": "Further (e, e') satisfies the head of r, denoted Pt(e, e'), if Pt(e, e') is a fact in the KG."
            },
            {
              "iri": "Section-3-Paragraph-7-Sentence-5",
              "text": "Then the support of r counts the rule instances for which the body and the head are both satisfied in the KG."
            },
            {
              "iri": "Section-3-Paragraph-7-Sentence-6",
              "text": "suppr = |{ (e, e') : body_r(e, e') and Pt(e, e') }|"
            }
          ]
        },
        {
          "iri": "Section-3-Paragraph-8",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-8-Sentence-1",
              "text": "Standard confidence (SC) and head coverage (HC) offer standardised measures for comparing rule quality."
            },
            {
              "iri": "Section-3-Paragraph-8-Sentence-2",
              "text": "SC describes how frequently the rule is true, i.e., of the number of entity pairs that satisfy the body in the KG, what proportion of the inferred head instances are satisfied?"
            },
            {
              "iri": "Section-3-Paragraph-8-Sentence-3",
              "text": "It is closely related to confidence widely used in association rule mining."
            },
            {
              "iri": "Section-3-Paragraph-8-Sentence-4",
              "text": "HC measures the explanatory power of the rule, i.e., what proportion of the facts satisfying the head of the rule could be inferred by satisfying the rule body?"
            },
            {
              "iri": "Section-3-Paragraph-8-Sentence-5",
              "text": "It is closely related to cover which is widely used for rule learning in inductive logic programming."
            },
            {
              "iri": "Section-3-Paragraph-8-Sentence-6",
              "text": "A non-recursive rule that has both 100% SC and HC is redundant with respect to the KG, and every KG fact that is an instance of the rule head is redundant with respect to the rule."
            }
          ]
        },
        {
          "iri": "Section-3-Paragraph-9",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-9-Sentence-1",
              "text": "Definition 2 (standard confidence, head coverage)."
            },
            {
              "iri": "Section-3-Paragraph-9-Sentence-2",
              "text": "Let r, e, e', body_r be as given in Definition 1."
            },
            {
              "iri": "Section-3-Paragraph-9-Sentence-3",
              "text": "Then standard confidence is SC(r) = suppr / |{ (e, e') : body_r(e, e') }|"
            },
            {
              "iri": "Section-3-Paragraph-9-Sentence-4",
              "text": "and head coverage is HC(r) = suppr / |{ (e, e') : Pt(e, e') }|"
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-4",
      "subtitle": "Preliminaries: Open-path rules: Rules with open variables",
      "paragraphs": [
        {
          "iri": "Section-4-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-1-Sentence-1",
              "text": "Unlike earlier work in rule mining for KG completion, OPRL for active knowledge graph completion defines open path (OP) rules of the form:"
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-2",
              "text": "P1(z0, z1) \u2227 P2(z1, z2) \u2227 ... \u2227 Pn(zn\u22121, y) \u2192 \u2203x Pt(x, z0)."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-3",
              "text": "Here, Pi is a predicate in the KG, each of {x, zi, y} are entity variables, and all free variables are universally quantified at the outside."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-2-Sentence-1",
              "text": "We call a variable closed if it occurs in at least two distinct predicate terms, such as z0 here, and otherwise it is open."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-2",
              "text": "If all variables of a rule are closed then the rule is closed."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-3",
              "text": "An OP rule has two open variables, y and x."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-4",
              "text": "OP rules are used since they imply the existence of a fact, like spouse(x, y) \u2192 \u2203z child(x, z)."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-5",
              "text": "Unlike CP rules, OP rules do not necessarily form a loop, but a straightforward variable unification transforms an OP rule to a CP rule."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-6",
              "text": "Every entity-instantiation of a CP rule is also an entity-instantiation of the related OP rule, but not vice versa."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-3-Sentence-1",
              "text": "To assess the quality of OP rules, we use open path standard confidence (OPSC) and open path head coverage (OPHC), which are derived from the closed path forms."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-4-Sentence-1",
              "text": "Definition 3 (open path: OPsupp, OPSC, OPHC)."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-2",
              "text": "Let r be an OP rule of the given form."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-3",
              "text": "A pair of entities (e, e') satisfies the body of r, denoted as body_r(e, e'), if there exist entities e1, ..., en\u22121 in the KG such that P1(e, e1), P2(e1, e2), ..., Pn(en\u22121, e') are facts in the KG."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-4",
              "text": "Also, (e', e) satisfies the head of r, denoted Pt(e', e), if Pt(e', e) is a fact in the KG."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-5-Sentence-1",
              "text": "The open path support, open path standard confidence, and open path head coverage of r are given respectively by:"
            },
            {
              "iri": "Section-4-Paragraph-5-Sentence-2",
              "text": "OPsupp(r) = |{e : \u2203e', e'' such that body_r(e, e') and Pt(e'', e)}|."
            },
            {
              "iri": "Section-4-Paragraph-5-Sentence-3",
              "text": "OPSC(r) = OPsupp(r) / |{e : \u2203e' such that body_r(e, e')}|."
            },
            {
              "iri": "Section-4-Paragraph-5-Sentence-4",
              "text": "OPHC(r) = OPsupp(r) / |{e : \u2203e' such that Pt(e', e)}|."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-5",
      "subtitle": "Preliminaries: SHACL shapes",
      "paragraphs": [
        {
          "iri": "Section-5-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-5-Paragraph-1-Sentence-1",
              "text": "A KG is a schema-free database and does not need to be augmented with schema information natively."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-2",
              "text": "However, many KGs are augmented with type information that can be used to understand and validate data and can also be very helpful for inference processes on the KG."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-3",
              "text": "In 2017 the Shapes Constraint Language (SHACL) was introduced as a W3C recommendation to define schema information for KGs stored as an RDF graph."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-4",
              "text": "SHACL defines constraints for graphs as shapes."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-5",
              "text": "KGs can then be validated against a set of shapes."
            }
          ]
        },
        {
          "iri": "Section-5-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-5-Paragraph-2-Sentence-1",
              "text": "Shapes can serve two main purposes: validating the quality of a KG and characterising the frequent patterns in a KG."
            },
            {
              "iri": "Section-5-Paragraph-2-Sentence-2",
              "text": "In Fig. 2, we illustrate an example of a shape from Wikidata, where x and z_i are variables that are instantiated by entities."
            },
            {
              "iri": "Section-5-Paragraph-2-Sentence-3",
              "text": "Although the shape is originally expressed in ShEx, we translate it to SHACL in the following."
            }
          ]
        },
        {
          "iri": "Section-5-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-5-Paragraph-3-Sentence-1",
              "text": "SHACL, together with SHACL advanced features is extensive."
            },
            {
              "iri": "Section-5-Paragraph-3-Sentence-2",
              "text": "Here we focus on the core of SHACL in which node shapes constrain a target predicate (e.g., the unary predicate human in Fig. 2), with property shapes expressing constraints over facts related to the target predicate."
            },
            {
              "iri": "Section-5-Paragraph-3-Sentence-3",
              "text": "We particularly focus on property shapes which act to constrain an argument of the target predicate."
            },
            {
              "iri": "Section-5-Paragraph-3-Sentence-4",
              "text": "In Fig. 2 the shape expresses that each entity x which satisfies human(x) should satisfy the following paths: (1) citizenOf(x, z1) ^ country(z1), (2) father(x, z2) ^ human(z2), and (3) nativeLanguage(x, z3) ^ language(z3)."
            }
          ]
        },
        {
          "iri": "Section-5-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-5-Paragraph-4-Sentence-1",
              "text": "Various formalisms with corresponding shapes have been proposed to express diverse kinds of patterns exhibited in KGs, such as k-cliques, Closed rules (CR) (that include closed path rules), Functional Graph Dependency (FGD), and trees."
            },
            {
              "iri": "Section-5-Paragraph-4-Sentence-2",
              "text": "CRs are used for inferring new facts."
            },
            {
              "iri": "Section-5-Paragraph-4-Sentence-3",
              "text": "FGDs define constraints like the type of entities in the domain and range of predicates, or the number of entities to which an entity can be related by a specific predicate."
            },
            {
              "iri": "Section-5-Paragraph-4-Sentence-4",
              "text": "These constraints are deployed to make the KG consistent."
            },
            {
              "iri": "Section-5-Paragraph-4-Sentence-5",
              "text": "Regardless of differences between the formalisms, they share a key feature in their syntax."
            },
            {
              "iri": "Section-5-Paragraph-4-Sentence-6",
              "text": "The building block for expressing all of these shape constraints is a sequence of predicates."
            }
          ]
        },
        {
          "iri": "Section-5-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-5-Paragraph-5-Sentence-1",
              "text": "We focus on such path shapes for our shape learning system."
            },
            {
              "iri": "Section-5-Paragraph-5-Sentence-2",
              "text": "A path is a sequence of predicates connected by closed intermediate variables but terminating with open variables at both ends."
            },
            {
              "iri": "Section-5-Paragraph-5-Sentence-3",
              "text": "Although shapes in the form of a path are less constrained than some more complex shapes, they are a more general template for more complex shapes like closed rules or trees, which are also paths (with further restrictions)."
            },
            {
              "iri": "Section-5-Paragraph-5-Sentence-4",
              "text": "We will define Inverse Open Path rules induced from paths that have a straightforward interpretation as shapes, and also propose a method to mine such rules from a KG."
            },
            {
              "iri": "Section-5-Paragraph-5-Sentence-5",
              "text": "To demonstrate the potential for these kinds of shapes to serve as building blocks for more complex trees, we then propose a method that builds trees out of mined rules, and briefly discuss the application of such trees to KG completion."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-6",
      "subtitle": "SHACL learning: Rules with open variables or uncertain shapes",
      "paragraphs": [
        {
          "iri": "Section-6-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-1-Sentence-1",
              "text": "We observe that the converse of OP rules, which we call inverse open path rules (IOP), correspond to SHACL shapes."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-2",
              "text": "For example, a shape can be derived from the following three IOP rules: human(x, x) -> citizenOf(x, z1) ^ country(z1, z1), human(x, x) -> father(x, z2) ^ human(z2, z2), and human(x, x) -> nativeLanguage(x, z3) ^ language(z3, z3)."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-2-Sentence-1",
              "text": "The general form of an IOP rule is given by Pt'(x, z0) -> exists(z1, ..., z(n-1), y) P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y). (3)"
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-2",
              "text": "Here each P'i is either a predicate in the KG or its reverse with subject and object bindings swapped, and free variables are universally quantified at the outside."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-3",
              "text": "We often omit the quantifiers when writing IOP rules."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-4",
              "text": "In an IOP rule, the body of the rule is Pt, and its head is the sequence of predicates P1 ^ P2 ^ ... ^ Pn."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-5",
              "text": "Hence we instantiate the atomic body to predict an instance of the head."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-6",
              "text": "IOP rules are not Horn."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-7",
              "text": "The pattern of existential variables in the head and universal variables in the body has been investigated in the literature as existential rules."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-3-Sentence-1",
              "text": "To assess the quality of IOP rules, we follow a style of quality measures similar to those used for OP rules."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-4-Sentence-1",
              "text": "Definition 4 (inverse open path: IOPsupp, IOPSC, IOPHC)."
            },
            {
              "iri": "Section-6-Paragraph-4-Sentence-2",
              "text": "Let r be an IOP rule of the form (3)."
            },
            {
              "iri": "Section-6-Paragraph-4-Sentence-3",
              "text": "Then a pair of entities (e, e') satisfies the head of r, denoted head_r(e, e'), if there exist entities e1, ..., e(n-1) in the KG such that P1(e, e1), P2(e1, e2), ..., Pn(e(n-1), e') are facts in the KG."
            },
            {
              "iri": "Section-6-Paragraph-4-Sentence-4",
              "text": "A pair of entities (e'', e) satisfies the body of r, denoted Pt(e'', e), if Pt(e'', e) is a fact in the KG."
            },
            {
              "iri": "Section-6-Paragraph-4-Sentence-5",
              "text": "The inverse open path support, inverse open path standard confidence, and inverse open path head coverage of r are given respectively by"
            },
            {
              "iri": "Section-6-Paragraph-4-Sentence-6",
              "text": "IOPsupp(r) = |{ (e', e'') : there exists e', e'' such that head_r(e, e') and Pt(e'', e) }|"
            },
            {
              "iri": "Section-6-Paragraph-4-Sentence-7",
              "text": "IOPSC(r) = IOPsupp(r) / |{ e' : Pt(e', e) }|"
            },
            {
              "iri": "Section-6-Paragraph-4-Sentence-8",
              "text": "IOPHC(r) = IOPsupp(r) / |{ e : there exists e' such that head_r(e, e') }|"
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-5-Sentence-1",
              "text": "Notably, because any instantiated open path in a KG includes both an OP and IOP rule, the support for an IOP rule is the same as the corresponding OPSC."
            },
            {
              "iri": "Section-6-Paragraph-5-Sentence-2",
              "text": "This close relationship between OP and IOP rules helps us to mine both OP and IOP rules in one process."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-6-Sentence-1",
              "text": "We show the relationship between an OP rule and its converse IOP version in the following example."
            },
            {
              "iri": "Section-6-Paragraph-6-Sentence-2",
              "text": "Consider the OP rule P1(x, z0) <- P2(z0, z1) ^ P3(z1, z2)."
            },
            {
              "iri": "Section-6-Paragraph-6-Sentence-3",
              "text": "Assume we have three entities (e3, e4, e5) which can instantiate z0 and satisfy both P1(x, z0) and P2(z0, z1) ^ P3(z1, z2)."
            },
            {
              "iri": "Section-6-Paragraph-6-Sentence-4",
              "text": "Assume the number of entities that can instantiate z0 to satisfy the head part is 5 ({e1, e2, e3, e4, e5}) and the number of entities that can instantiate z0 to satisfy the body part is 7 ({e2, e4, e5, e6, e7, e8, e9})."
            },
            {
              "iri": "Section-6-Paragraph-6-Sentence-5",
              "text": "Hence, for this rule OPsupp = 3, OPSC = 3/7, and OPHC = 3/5."
            },
            {
              "iri": "Section-6-Paragraph-6-Sentence-6",
              "text": "For the IOP version of the same rule, P1(x, z0) -> P2(z0, z1) ^ P3(z1, z2), the same entities instantiate z0, but now the body and head predicates are swapped."
            },
            {
              "iri": "Section-6-Paragraph-6-Sentence-7",
              "text": "Hence, we have IOPsupp = 3, IOPSC = 3/5, and IOPHC = 3/7."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-7",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-7-Sentence-1",
              "text": "In many cases, we need rules to express not only the necessity of a chain of facts (the facts in the head of the IOP rule), but also the number of different chains which should exist."
            },
            {
              "iri": "Section-6-Paragraph-7-Sentence-2",
              "text": "For example, we may need a rule to express that each human has at least two parents."
            },
            {
              "iri": "Section-6-Paragraph-7-Sentence-3",
              "text": "Thus, we introduce IOP rules annotated with a cardinality Car, giving the following form."
            },
            {
              "iri": "Section-6-Paragraph-7-Sentence-4",
              "text": "IOPSC, IOPHC, Car : Pt'(x, z0) -> P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y). (4)"
            },
            {
              "iri": "Section-6-Paragraph-7-Sentence-5",
              "text": "Here IOPSC and IOPHC belong to [0, 1] and denote the qualities of the rule, while Car is an integer >= 1."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-8",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-8-Sentence-1",
              "text": "Definition 5 (Cardinality of an IOP rule, Car)."
            },
            {
              "iri": "Section-6-Paragraph-8-Sentence-2",
              "text": "Let r be an annotated IOP rule of the form (4), and let Car(r) be the cardinality annotation for r."
            },
            {
              "iri": "Section-6-Paragraph-8-Sentence-3",
              "text": "Then r satisfies Car(r) if and only if, for each entity e such that Pt(e', e) holds, the number of distinct instantiations of head_r(e, e') is at least Car(r)."
            },
            {
              "iri": "Section-6-Paragraph-8-Sentence-4",
              "text": "In other words, the cardinality expresses a lower bound on the number of head paths that are satisfied in the KG for every instantiation linking the body to the head."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-9",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-9-Sentence-1",
              "text": "Rules with the same head and the same body may have different cardinalities."
            },
            {
              "iri": "Section-6-Paragraph-9-Sentence-2",
              "text": "While a rule might have a certain cardinality c1, lower-cardinality versions of that rule may have the same or higher IOPSC values, since a larger required cardinality places a stricter lower bound on the number of instances of the head in the KB."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-10",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-10-Sentence-1",
              "text": "Lemma 1 (IOPSC is non-increasing with length)."
            },
            {
              "iri": "Section-6-Paragraph-10-Sentence-2",
              "text": "Let r be an IOP rule of the form (3) with n >= 2, and let r' be the same rule shortened by removing the last head predicate."
            },
            {
              "iri": "Section-6-Paragraph-10-Sentence-3",
              "text": "Then IOPSC(r) <= IOPSC(r')."
            },
            {
              "iri": "Section-6-Paragraph-10-Sentence-4",
              "text": "This result follows because the denominator of IOPSC(r) is not affected by the head of the rule, yet the numerator can only decrease when additional head predicates are included."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-11",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-11-Sentence-1",
              "text": "This lemma is useful for rule learning, because it shows that if we discard a rule due to its low IOPSC, we do not need to check versions of the rule extended with additional head atoms, since their IOPSC values would be at most as low."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-12",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-12-Sentence-1",
              "text": "Algorithm 1: SHACLearner"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-2",
              "text": "Input: a KG K, a target predicate Pt"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-3",
              "text": "Parameters: max rule length l, max rule cardinality MCar, MinIOPSC, MinIOPHC, and MinTreeSC"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-4",
              "text": "Output: a set of IOP rules R and Tree"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-5",
              "text": "1: K' := Sampling(K, Pt)"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-6",
              "text": "2: (P, A) := Embeddings(K')"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-7",
              "text": "3: R' := empty"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-8",
              "text": "4: for k from 2 to l do"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-9",
              "text": "   Add PathFinding(K', Pt, P, A, k) to R'"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-10",
              "text": "end for"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-11",
              "text": "7: R := Ev(R', K, MCar, MinIOPSC, MinIOPHC)"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-12",
              "text": "8: Tree := GreedySearch(R, MinTreeSC)"
            },
            {
              "iri": "Section-6-Paragraph-12-Sentence-13",
              "text": "9: return Tree and R"
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-7",
      "subtitle": "SHACL learning: IOP learning through representation learning",
      "paragraphs": [
        {
          "iri": "Section-7-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-7-Paragraph-1-Sentence-1",
              "text": "To mine IOP rules, we start with the open path rule learner OPRL and adapt its embedding-based OP rule learning to learn annotated IOP rules."
            },
            {
              "iri": "Section-7-Paragraph-1-Sentence-2",
              "text": "We call this new IOP rule learner SHACLEARNER, shown in Algorithm 1."
            },
            {
              "iri": "Section-7-Paragraph-1-Sentence-3",
              "text": "SHACLEARNER uses a sampling method Sampling, shown in Algorithm 2, to prune the entities and predicates that are less relevant to the target predicate to obtain a sampled knowledge graph."
            },
            {
              "iri": "Section-7-Paragraph-1-Sentence-4",
              "text": "The sample is fed to an embedding learner, RESCAL, in Embeddings."
            },
            {
              "iri": "Section-7-Paragraph-1-Sentence-5",
              "text": "Then in PathFinding, SHACLEARNER uses the computed embedding representations of predicates and entities in heuristic functions that inform the generation of IOP rules bounded by a maximum length."
            },
            {
              "iri": "Section-7-Paragraph-1-Sentence-6",
              "text": "Then, potential IOP rules are evaluated, annotated, and filtered in Ev to produce annotated IOP rules."
            },
            {
              "iri": "Section-7-Paragraph-1-Sentence-7",
              "text": "Eventually, a tree is discovered for each argument of each target predicate by aggregating mined IOP rules in GreedySearch."
            }
          ]
        },
        {
          "iri": "Section-7-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-7-Paragraph-2-Sentence-1",
              "text": "While the overall algorithm structure of SHACLEARNER is similar to OPRL, as is the embedding-based scoring function, the following elements are novel in SHACLEARNER:"
            },
            {
              "iri": "Section-7-Paragraph-2-Sentence-2",
              "text": "OPRL cannot handle unary predicates while SHACLEARNER admits unary predicates both in the head and the body of IOP rules."
            },
            {
              "iri": "Section-7-Paragraph-2-Sentence-3",
              "text": "SHACLEARNER can discover and evaluate IOP rules with minimum cardinality constraints in the head of the IOP rule, while OPRL is effectively limited to learning the special case of minimum cardinality 1 for all rules."
            },
            {
              "iri": "Section-7-Paragraph-2-Sentence-4",
              "text": "For this reason, the evaluation method of SHACLEARNER, Ev, differs from the OPRL evaluation module."
            },
            {
              "iri": "Section-7-Paragraph-2-Sentence-5",
              "text": "The aggregation module that produces trees out of learnt IOP rules, ready for translation to SHACL, is novel in SHACLEARNER."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-8",
      "subtitle": "SHACL learning: Sampling",
      "paragraphs": [
        {
          "iri": "Section-8-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-8-Paragraph-1-Sentence-1",
              "text": "In more detail, the Sampling() method in line 1 of Algorithm 1 computes a fragment of the KG K', consisting of a bounded number of entities that are related to the target predicate Pt."
            },
            {
              "iri": "Section-8-Paragraph-1-Sentence-2",
              "text": "This sampling is essential since embedding learners (e.g., HOLE and RESCAL) cannot handle massive KGs with millions of entities (e.g., YAGO2)."
            },
            {
              "iri": "Section-8-Paragraph-1-Sentence-3",
              "text": "The sampling method, first introduced, is shown in Algorithm 2."
            },
            {
              "iri": "Section-8-Paragraph-1-Sentence-4",
              "text": "Since we search for IOP rules with up to l atoms (including the specific body target predicate, Pt), the entity set Esample and corresponding fact set K' contains the information needed for learning such rules."
            },
            {
              "iri": "Section-8-Paragraph-1-Sentence-5",
              "text": "Predicates less relevant to the target predicate are pruned in the sampling process and no facts about those predicates remain in K'."
            }
          ]
        },
        {
          "iri": "Section-8-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-8-Paragraph-2-Sentence-1",
              "text": "This simple approach reduces the size of the problem significantly, as discussed."
            },
            {
              "iri": "Section-8-Paragraph-2-Sentence-2",
              "text": "For a KG K with entities E and facts F, the set of sampled entities for a target predicate will be of size 2l|F||E| in the worst case."
            },
            {
              "iri": "Section-8-Paragraph-2-Sentence-3",
              "text": "Hence, the complexity of the sampling algorithm is O(|K|) where |K| = |E||F|."
            },
            {
              "iri": "Section-8-Paragraph-2-Sentence-4",
              "text": "In the worst case, the sampled KG is the same as the original KG, but real-world KGs are sparse with only a very small proportion of entities associated with any predicate within distance l."
            },
            {
              "iri": "Section-8-Paragraph-2-Sentence-5",
              "text": "In practice, the sampled KG is far smaller than the original KG."
            }
          ]
        },
        {
          "iri": "Section-8-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-8-Paragraph-3-Sentence-1",
              "text": "Algorithm 2: Sampling"
            },
            {
              "iri": "Section-8-Paragraph-3-Sentence-2",
              "text": "Input: a KG K, a target predicate Pt"
            },
            {
              "iri": "Section-8-Paragraph-3-Sentence-3",
              "text": "Parameters: max rule length l"
            },
            {
              "iri": "Section-8-Paragraph-3-Sentence-4",
              "text": "Output: K' a subgraph of the input graph"
            },
            {
              "iri": "Section-8-Paragraph-3-Sentence-5",
              "text": "1: E1 = { e | there exists e': Pt(e, e') or Pt(e', e) }"
            },
            {
              "iri": "Section-8-Paragraph-3-Sentence-6",
              "text": "2: for 2 <= k <= l do"
            },
            {
              "iri": "Section-8-Paragraph-3-Sentence-7",
              "text": "3:   Ek = { e | there exists e': e' in E(k-1) and (Pi(e, e') or Pi(e', e)) }"
            },
            {
              "iri": "Section-8-Paragraph-3-Sentence-8",
              "text": "4: end for"
            },
            {
              "iri": "Section-8-Paragraph-3-Sentence-9",
              "text": "5: Esample = union (from i=1 to l) of Ei"
            },
            {
              "iri": "Section-8-Paragraph-3-Sentence-10",
              "text": "6: K' = { Pi(e, e') | (e in Esample) and (e' in Esample) }"
            },
            {
              "iri": "Section-8-Paragraph-3-Sentence-11",
              "text": "7: return K'"
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-9",
      "subtitle": "SHACL learning: Embeddings",
      "paragraphs": [
        {
          "iri": "Section-9-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-9-Paragraph-1-Sentence-1",
              "text": "After sampling, in line 2 Embeddings(), we compute predicate embeddings as well as subject and object argument embeddings for all predicates in the sampled K'."
            },
            {
              "iri": "Section-9-Paragraph-1-Sentence-2",
              "text": "The embedding is obtained from RESCAL as it can provide an extensive representation of predicates and entities as shown in previous heuristic rule learners."
            },
            {
              "iri": "Section-9-Paragraph-1-Sentence-3",
              "text": "Briefly, we use RESCAL to embed each entity e_i to a vector E_i in R^d and each predicate P_k to a matrix P_k in R^(d x d), where R is the set of real numbers and d is an integer parameter of RESCAL."
            },
            {
              "iri": "Section-9-Paragraph-1-Sentence-4",
              "text": "For each given fact P0(e1, e2), the following scoring function is computed: f(e1, P0, e2) = E1^T . P0 . E2."
            },
            {
              "iri": "Section-9-Paragraph-1-Sentence-5",
              "text": "The scoring function indicates the plausibility of the fact that e1 has relation P0 with e2."
            }
          ]
        },
        {
          "iri": "Section-9-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-9-Paragraph-2-Sentence-1",
              "text": "In Embeddings() we additionally compute argument embeddings."
            },
            {
              "iri": "Section-9-Paragraph-2-Sentence-2",
              "text": "To compute the subject (respectively object) argument embeddings of a predicate P_k, we aggregate the embeddings of entities that occur as the subject (respectively object) of P_k in the KG."
            },
            {
              "iri": "Section-9-Paragraph-2-Sentence-3",
              "text": "Hence, for each predicate P_k we have two vectors, P1_k and P2_k, that represent the subject argument and object argument of P_k respectively."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-10",
      "subtitle": "SHACL learning: Generating and pruning rules",
      "paragraphs": [
        {
          "iri": "Section-10-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-10-Paragraph-1-Sentence-1",
              "text": "After that, in line 3 to line 7 of Algorithm 1, PathFinding() produces candidate IOP rules based on the embedding representation of the predicates involved in each rule."
            },
            {
              "iri": "Section-10-Paragraph-1-Sentence-2",
              "text": "The candidate rules are pruned by the scoring function heuristic for OP rules."
            },
            {
              "iri": "Section-10-Paragraph-1-Sentence-3",
              "text": "Due to the close relationship between OP and IOP rules, a high-scoring candidate OP rule suggests both a good OP rule and a good IOP rule."
            }
          ]
        },
        {
          "iri": "Section-10-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-10-Paragraph-2-Sentence-1",
              "text": "An IOP rule Pt(x, y) -> P1(y, z) ^ P2(z, t) acts to connect entities satisfying the subject argument of the body predicate, Pt, to entities forming the object argument of the last predicate, P2, along a path of entities that satisfy a chain of predicates in the rule."
            },
            {
              "iri": "Section-10-Paragraph-2-Sentence-2",
              "text": "There is a relationship between the logical statement of the rule and certain properties in the embedding space."
            }
          ]
        },
        {
          "iri": "Section-10-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-10-Paragraph-3-Sentence-1",
              "text": "1. The predicate arguments that have the same variable in the rule should have similar argument embeddings."
            },
            {
              "iri": "Section-10-Paragraph-3-Sentence-2",
              "text": "For example, we should have the following similarities: P2_t ~ P1_1 and P2_1 ~ P2_1."
            }
          ]
        },
        {
          "iri": "Section-10-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-10-Paragraph-4-Sentence-1",
              "text": "2. The whole path forms a composite predicate, like P*(x, t) = Pt(x, y) ^ P1(y, z) ^ P2(z, t)."
            },
            {
              "iri": "Section-10-Paragraph-4-Sentence-2",
              "text": "We compute the embedding representation of the composite predicate based on its components: P*(x, t) = Pt(x, y) . P1(y, z) . P2(z, t)."
            },
            {
              "iri": "Section-10-Paragraph-4-Sentence-3",
              "text": "Now we could check the plausibility of P*(x, t) for any pair of entities using the scoring function introduced earlier."
            },
            {
              "iri": "Section-10-Paragraph-4-Sentence-4",
              "text": "However, since we are interested in the existence of an entity-free rule, the following similarity will hold: 1 approx P1_t . Pt . P1 . P2 . P2_2."
            }
          ]
        },
        {
          "iri": "Section-10-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-10-Paragraph-5-Sentence-1",
              "text": "Based on the above two properties, two scoring functions are defined to help heuristically mine the space of all possible IOP rules, producing a reduced set of candidate IOP rules."
            },
            {
              "iri": "Section-10-Paragraph-5-Sentence-2",
              "text": "The ultimate evaluation of an IOP rule will be done in the next step as described below."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-11",
      "subtitle": "SHACL learning: Efficient computation of quality measures",
      "paragraphs": [
        {
          "iri": "Section-11-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-11-Paragraph-1-Sentence-1",
              "text": "Now we focus our attention on the efficient matrix-computation of the quality measures that are novel for SHACLearner."
            },
            {
              "iri": "Section-11-Paragraph-1-Sentence-2",
              "text": "Ev() in Algorithm 1 first evaluates candidate rules on the small sampled KG, and selects only the rules with IOPsupp(r) >= 1."
            },
            {
              "iri": "Section-11-Paragraph-1-Sentence-3",
              "text": "They may still include a large number of redundant and low quality rules and so are further downselected based on their IOPSC and IOPHC calculated over the full KG."
            },
            {
              "iri": "Section-11-Paragraph-1-Sentence-4",
              "text": "We show next how to efficiently compute these measures over massive KGs using an adjacency matrix representation of the KG."
            }
          ]
        },
        {
          "iri": "Section-11-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-11-Paragraph-2-Sentence-1",
              "text": "Let K = (E, F) with E = {e1, ..., en} be the set of all entities and P = {P1, ..., Pm} be the set of all predicates in F."
            },
            {
              "iri": "Section-11-Paragraph-2-Sentence-2",
              "text": "We represent K as a set of square n x n adjacency matrices by defining the function A."
            },
            {
              "iri": "Section-11-Paragraph-2-Sentence-3",
              "text": "Specifically, the [i, j]-th element A(Pk)[i, j] is 1 if the fact Pk(ei, ej) is in F, and 0 otherwise."
            },
            {
              "iri": "Section-11-Paragraph-2-Sentence-4",
              "text": "Thus, A(Pk) is a matrix of binary values, and the set {A(Pk) | k in 1..m} represents K."
            }
          ]
        },
        {
          "iri": "Section-11-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-11-Paragraph-3-Sentence-1",
              "text": "We illustrate the computation of IOPSC and IOPHC through an example."
            },
            {
              "iri": "Section-11-Paragraph-3-Sentence-2",
              "text": "Consider the IOP rule r: Pt(x, z0) -> P1(z0, x) ^ P2(z1, y)."
            },
            {
              "iri": "Section-11-Paragraph-3-Sentence-3",
              "text": "Let E = {e1, e2, e3} and F = {P1(e1, e2), P1(e2, e1), P1(e2, e3), P1(e3, e1), P2(e1, e2), P2(e3, e2), P2(e3, e3), P1(e1, e3), Pt(e3, e2), Pt(e3, e3)}."
            }
          ]
        },
        {
          "iri": "Section-11-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-11-Paragraph-4-Sentence-1",
              "text": "The adjacency matrices for the predicates P1, P2, and Pt are:"
            },
            {
              "iri": "Section-11-Paragraph-4-Sentence-2",
              "text": "A(P1) = [0 1 0; 1 0 1; 0 0 0],"
            },
            {
              "iri": "Section-11-Paragraph-4-Sentence-3",
              "text": "A(P2) = [0 1 0; 0 0 0; 0 1 1],"
            },
            {
              "iri": "Section-11-Paragraph-4-Sentence-4",
              "text": "A(Pt) = [0 0 0; 0 0 0; 0 1 1]."
            }
          ]
        },
        {
          "iri": "Section-11-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-11-Paragraph-5-Sentence-1",
              "text": "For IOPSC and IOPHC (Definition 4), we need to calculate:"
            },
            {
              "iri": "Section-11-Paragraph-5-Sentence-2",
              "text": "1) The number of entities that satisfy the body of the rule, i.e. the count of e' such that there exists e'' with Pt(e'', e')."
            },
            {
              "iri": "Section-11-Paragraph-5-Sentence-3",
              "text": "2) The number of entities that satisfy the head of the rule, i.e. the count of e' such that there exists e'' with head_r(e'', e')."
            },
            {
              "iri": "Section-11-Paragraph-5-Sentence-4",
              "text": "3) The number of entities that join the head of the rule to its body, i.e. the count of e' for which there exist e'', e''' such that head_r(e'', e') and Pt(e''', e')."
            }
          ]
        },
        {
          "iri": "Section-11-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-11-Paragraph-6-Sentence-1",
              "text": "For (1), we can read the pairs (e', e) directly from the matrix A(Pt)."
            },
            {
              "iri": "Section-11-Paragraph-6-Sentence-2",
              "text": "To find distinct e's we sum each column and transpose to obtain the vector V^2(Pt)."
            },
            {
              "iri": "Section-11-Paragraph-6-Sentence-3",
              "text": "Each non-zero element indicates a satisfying e, and the number of distinct e's is the count of non-zero elements."
            },
            {
              "iri": "Section-11-Paragraph-6-Sentence-4",
              "text": "In the example, the only non-zero element in A(Pt) is A(Pt)[1, 3], and after summing columns and transposing we have V^2(Pt) = [0 1 2]^T, so {e2, e3} satisfies the head with count 2."
            }
          ]
        },
        {
          "iri": "Section-11-Paragraph-7",
          "sentences": [
            {
              "iri": "Section-11-Paragraph-7-Sentence-1",
              "text": "For (2), the pairs (e, e') satisfying the head are connected by the path P1, P2, ..., Pm."
            },
            {
              "iri": "Section-11-Paragraph-7-Sentence-2",
              "text": "They can be obtained from the matrix product A(P1)*A(P2)*...*A(Pm), taking elements with a value >= Car for rules with cardinality Car."
            },
            {
              "iri": "Section-11-Paragraph-7-Sentence-3",
              "text": "We find distinct e's by summing each row of this product to obtain the vector V^1(A(P1)*A(P2)*...*A(Pm))."
            },
            {
              "iri": "Section-11-Paragraph-7-Sentence-4",
              "text": "Each element with value >= Car indicates a satisfying e, and the count of distinct e's is the count of non-zero elements in that vector."
            },
            {
              "iri": "Section-11-Paragraph-7-Sentence-5",
              "text": "In the example, A(P1)*A(P2) = [[0,0,0],[0,2,1],[1,0,0]], and V^1(P1, P2) = [0,3,1]."
            },
            {
              "iri": "Section-11-Paragraph-7-Sentence-6",
              "text": "Thus, for Car=1 we have satisfying entities e2 and e3 with a count of 2."
            },
            {
              "iri": "Section-11-Paragraph-7-Sentence-7",
              "text": "For Car=2, only e2 satisfies the rule, so the count is 1."
            }
          ]
        },
        {
          "iri": "Section-11-Paragraph-8",
          "sentences": [
            {
              "iri": "Section-11-Paragraph-8-Sentence-1",
              "text": "Computing (3) is then straightforward."
            },
            {
              "iri": "Section-11-Paragraph-8-Sentence-2",
              "text": "The row index of non-zero elements of V^2(Pt) indicates entities that satisfy the second argument of the body, and the row index of elements with value >= Car of V^1(A(P1)*A(P2)*...*A(Pm)) indicates entities that satisfy the first argument of the head."
            },
            {
              "iri": "Section-11-Paragraph-8-Sentence-3",
              "text": "We find the entities satisfying both conditions by pairwise multiplication of those vectors."
            },
            {
              "iri": "Section-11-Paragraph-8-Sentence-4",
              "text": "For the example, when Car=1, the set of such entities is {e2, e3} with count 2."
            },
            {
              "iri": "Section-11-Paragraph-8-Sentence-5",
              "text": "When Car=2, the set is {e2} with count 1."
            }
          ]
        },
        {
          "iri": "Section-11-Paragraph-9",
          "sentences": [
            {
              "iri": "Section-11-Paragraph-9-Sentence-1",
              "text": "Hence, we could have three versions of r, namely r1, r2, and r3, with three different Car values 1, 2, and 3 respectively."
            },
            {
              "iri": "Section-11-Paragraph-9-Sentence-2",
              "text": "For Car=1, IOPsupp(r1) = |{e2, e3}| = 2."
            },
            {
              "iri": "Section-11-Paragraph-9-Sentence-3",
              "text": "From Definition 4, IOPHC(r1) = 2/2 and IOPSC(r1) = 2/2."
            },
            {
              "iri": "Section-11-Paragraph-9-Sentence-4",
              "text": "For Car=2, IOPsupp(r2) = |{e2}| = 1, IOPHC(r2) = 1/1, and IOPSC(r2) = 1/2."
            },
            {
              "iri": "Section-11-Paragraph-9-Sentence-5",
              "text": "In this case, for Car=3 we get the same values as for Car=2."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-12",
      "subtitle": "SHACL learning: From IOP rules to tree shapes",
      "paragraphs": [
        {
          "iri": "Section-12-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-12-Paragraph-1-Sentence-1",
              "text": "Now in line 8 of Algorithm 1 we turn to deriving SHACL trees, as illustrated in Fig. 3, from annotated IOP rules."
            },
            {
              "iri": "Section-12-Paragraph-1-Sentence-2",
              "text": "This procedure is used in SHACLearner."
            },
            {
              "iri": "Section-12-Paragraph-1-Sentence-3",
              "text": "We use a greedy search to aggregate the IOP rules for the subject argument and the object argument of each target predicate."
            },
            {
              "iri": "Section-12-Paragraph-1-Sentence-4",
              "text": "For example, the shape of Fig. 2 has the following tree: human(x, x) -> citizenOf(x, z1) ^ country(z1, z1) ^ father(x, z2) ^ human(z2, z2) ^ nativeLanguage(x, z3) ^ language(z3, z3)."
            }
          ]
        },
        {
          "iri": "Section-12-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-12-Paragraph-2-Sentence-1",
              "text": "The general form of a tree is given by P't(x, z0) -> exists(z*s, y*s) P'1( z0, z1 ) ^ P'1_1(z1, z2 ) ^ ... ^ P'n_1(z(n-1), y1 ) ^ P'1_2( z0, z1 ) ^ P'2_2(z1, z2 ) ^ ... ^ P'm_2(z(m-1), y2 ) ... ^ P'1^q(z0, z1^q ) ^ P'2^q(z1^q, z2^q ) ^ ... ^ P't^q(z(q-1)^q, y^q)."
            },
            {
              "iri": "Section-12-Paragraph-2-Sentence-2",
              "text": "Here each P'i is either a predicate in the KG or its reverse with the subject and object bindings swapped."
            },
            {
              "iri": "Section-12-Paragraph-2-Sentence-3",
              "text": "Free variables are universally quantified at the outside."
            },
            {
              "iri": "Section-12-Paragraph-2-Sentence-4",
              "text": "In a tree we say the body of the shape is Pt and its head is the sequence of paths or branches, Path1 ^ Path2 ^ ... ^ Pathq."
            },
            {
              "iri": "Section-12-Paragraph-2-Sentence-5",
              "text": "Hence we instantiate the atomic body to predict an instance of the head."
            },
            {
              "iri": "Section-12-Paragraph-2-Sentence-6",
              "text": "All head branches and the body join in one shared variable, z0."
            },
            {
              "iri": "Section-12-Paragraph-2-Sentence-7",
              "text": "To assess the quality of a tree we follow the quality measures for IOP rules."
            }
          ]
        },
        {
          "iri": "Section-12-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-12-Paragraph-3-Sentence-1",
              "text": "Definition 6 (Tree: Treesupp, TreeSC)."
            },
            {
              "iri": "Section-12-Paragraph-3-Sentence-2",
              "text": "Let r be a tree of the above form."
            },
            {
              "iri": "Section-12-Paragraph-3-Sentence-3",
              "text": "Then a set of pairs of entities (e, e1), ..., (e, eq) satisfies the head of r, denoted headr(e), if there exist sequences of entities e1, ..., e(n-1), e1', ..., e(m-1), e1^q, e(q-1)' in the KG such that P1(e, e1), P2(e1, e2), ..., Pt(e(q-1)', eq) are facts in the KG."
            },
            {
              "iri": "Section-12-Paragraph-3-Sentence-4",
              "text": "A pair of entities (e'', e) satisfies the body of r, denoted Pt(e'', e), if Pt(e'', e) is a fact in the KG."
            },
            {
              "iri": "Section-12-Paragraph-3-Sentence-5",
              "text": "The tree support and tree standard confidence of r are given respectively by Treesupp(r) = |{ e : there exists e' such that headr(e) and Pt(e', e) }| and TreeSC(r) = Treesupp(r) / |{ e' : Pt(e'', e') }|."
            }
          ]
        },
        {
          "iri": "Section-12-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-12-Paragraph-4-Sentence-1",
              "text": "To learn each tree we employ a greedy search, GreedySearch, in line 8 of Algorithm 1."
            },
            {
              "iri": "Section-12-Paragraph-4-Sentence-2",
              "text": "To do so, we sort all rules that bind the subject argument (for the left-hand tree in Fig. 3) in a non-increasing order with respect to IOPSC."
            },
            {
              "iri": "Section-12-Paragraph-4-Sentence-3",
              "text": "Then we iteratively try to add the first rule in the list to the tree and compute the TreeSC."
            },
            {
              "iri": "Section-12-Paragraph-4-Sentence-4",
              "text": "If the TreeSC drops below the defined threshold (TreeSCMIN) we dismiss the rule; otherwise we add it to the tree."
            },
            {
              "iri": "Section-12-Paragraph-4-Sentence-5",
              "text": "For the right-hand tree we do the same with the rules that bind the object argument of the target predicate."
            },
            {
              "iri": "Section-12-Paragraph-4-Sentence-6",
              "text": "Since a conjunction of IOP rules forms a tree, TreeSC is bounded above by the minimum IOPSC of its constituent IOP rules."
            }
          ]
        },
        {
          "iri": "Section-12-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-12-Paragraph-5-Sentence-1",
              "text": "These uncertain shapes can be presented as standard SHACL shapes by ignoring those that fail to satisfy minimum quality thresholds and deleting the quality annotations."
            },
            {
              "iri": "Section-12-Paragraph-5-Sentence-2",
              "text": "Aside from the cardinality, the tree may be straightforwardly interpreted as a set of SHACL shapes by reading off every path from the target predicate terminating at a node in the tree."
            },
            {
              "iri": "Section-12-Paragraph-5-Sentence-3",
              "text": "The body predicate is declared as sh:nodeShape and the path of head predicates as nested sh:path declarations within a sh:property declaration."
            },
            {
              "iri": "Section-12-Paragraph-5-Sentence-4",
              "text": "Cardinality of a path is read from the annotation of the branch at the terminating node, and declared by sh:minCount within the property declaration."
            }
          ]
        },
        {
          "iri": "Section-12-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-12-Paragraph-6-Sentence-1",
              "text": "SHACLearner supports all the SHACL Core features (node and property shapes)."
            },
            {
              "iri": "Section-12-Paragraph-6-Sentence-2",
              "text": "The limitations of SHACLearner with respect to SHACL Core are: (1) it treats all properties, both object and datatype properties, as plain predicates so there is no distinction; (2) it does not perform any kind of data type validation; and (3) of cardinality expressions, only min cardinality is handled."
            },
            {
              "iri": "Section-12-Paragraph-6-Sentence-3",
              "text": "SHACLearner does not mine SPARQL-like constraints (SHACL-SPARQL)."
            }
          ]
        },
        {
          "iri": "Section-12-Paragraph-7",
          "sentences": [
            {
              "iri": "Section-12-Paragraph-7-Sentence-1",
              "text": "3.7.1. Tree shapes are useful for human interaction"
            }
          ]
        },
        {
          "iri": "Section-12-Paragraph-8",
          "sentences": [
            {
              "iri": "Section-12-Paragraph-8-Sentence-1",
              "text": "Shapes offer KG documentation as readable patterns and also provide a way to validate a KG."
            },
            {
              "iri": "Section-12-Paragraph-8-Sentence-2",
              "text": "Our novel tree shapes can additionally be used for KG-completion."
            },
            {
              "iri": "Section-12-Paragraph-8-Sentence-3",
              "text": "While there are several methods proposed to complete KGs automatically by predicting missing facts, these methods traverse the KG in a breadth-first manner."
            },
            {
              "iri": "Section-12-Paragraph-8-Sentence-4",
              "text": "Our proposed tree shapes instead provide an opportunity to work sequentially along a path of dependent questions such as birthPlace(Trump, ?) followed by capitalOf(?, ?)."
            },
            {
              "iri": "Section-12-Paragraph-8-Sentence-5",
              "text": "The latter question cannot even be asked until we have an answer for the former question, and the existence of an answer to the former gives us the confidence to proceed to the next question along the path."
            },
            {
              "iri": "Section-12-Paragraph-8-Sentence-6",
              "text": "This completion strategy is depth-first as it works through a shape tree."
            },
            {
              "iri": "Section-12-Paragraph-8-Sentence-7",
              "text": "Importantly, when we want to ask such completion questions of a human, this depth-first questioning strategy will reduce the cognitive load due to the contextual connections between successive questions."
            },
            {
              "iri": "Section-12-Paragraph-8-Sentence-8",
              "text": "This strategy for human-KG-completion is applied in a smart KG editor using trees that can be generated by SHACLearner."
            }
          ]
        },
        {
          "iri": "Section-12-Paragraph-9",
          "sentences": [
            {
              "iri": "Section-12-Paragraph-9-Sentence-1",
              "text": "Tree shapes can also help a human expert extract a more intuitive concise sub-tree out of a deeper, more complex tree when desired for human interpretability."
            },
            {
              "iri": "Section-12-Paragraph-9-Sentence-2",
              "text": "If a tree with confidence TreeSCorig is pruned either by removing a branch or by removing an entire path of shape predicates, it remains a valid tree with a new TreeSCnew, with the property that TreeSCnew >= TreeSCorig."
            },
            {
              "iri": "Section-12-Paragraph-9-Sentence-3",
              "text": "Hence, by pruning a tree we obtain a simpler tree with higher confidence in the KG."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-13",
      "subtitle": "Related work",
      "paragraphs": [
        {
          "iri": "Section-13-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-13-Paragraph-1-Sentence-1",
              "text": "There are some exploratory attempts to address learning SHACL shapes from KGs."
            },
            {
              "iri": "Section-13-Paragraph-1-Sentence-2",
              "text": "They are procedural methods without logical foundations and are not shown to be scalable to handle real-world KGs."
            },
            {
              "iri": "Section-13-Paragraph-1-Sentence-3",
              "text": "They work with a small amount of data and the representation formalism they use for their output is difficult to compare with the IOP rules which we use in this paper."
            }
          ]
        },
        {
          "iri": "Section-13-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-13-Paragraph-2-Sentence-1",
              "text": "One approach carries out the task in a semi-automatic manner: it provides a sample of data to an off-the-shelf graph structure learner and provides the output in an interactive interface for a human user to create SHACL shapes."
            }
          ]
        },
        {
          "iri": "Section-13-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-13-Paragraph-3-Sentence-1",
              "text": "Another work provides an interactive framework to define SHACL shapes with different complexities, including nested patterns that are similar to the trees that we use."
            },
            {
              "iri": "Section-13-Paragraph-3-Sentence-2",
              "text": "A formalisation of the approach is given, but there are no shape quality measures that are essential for large scale shape mining."
            },
            {
              "iri": "Section-13-Paragraph-3-Sentence-3",
              "text": "Because the paper does not provide a system that discovers patterns from massive KGs, we cannot deploy their method for comparison purposes."
            }
          ]
        },
        {
          "iri": "Section-13-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-13-Paragraph-4-Sentence-1",
              "text": "There are some works that use existing ontologies for KGs to generate SHACL shapes."
            },
            {
              "iri": "Section-13-Paragraph-4-Sentence-2",
              "text": "One work uses two different kinds of knowledge to automatically generate SHACL shapes: ontology constraint patterns as well as input ontologies."
            },
            {
              "iri": "Section-13-Paragraph-4-Sentence-3",
              "text": "In our work, we use the KG itself to discover the shapes, without relying on external modelling artefacts."
            }
          ]
        },
        {
          "iri": "Section-13-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-13-Paragraph-5-Sentence-1",
              "text": "From an application point of view, there are papers which investigate the application of SHACL shapes to the validation of RDF databases, but these do not contribute to the discovery of shapes."
            }
          ]
        },
        {
          "iri": "Section-13-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-13-Paragraph-6-Sentence-1",
              "text": "One proposal suggests an extended validation framework for the interaction between inference rules and SHACL shapes in KGs."
            },
            {
              "iri": "Section-13-Paragraph-6-Sentence-2",
              "text": "When a set of rules and shapes are provided, a method is proposed to detect which shapes could be violated by applying a rule."
            }
          ]
        },
        {
          "iri": "Section-13-Paragraph-7",
          "sentences": [
            {
              "iri": "Section-13-Paragraph-7-Sentence-1",
              "text": "There are some attempts to provide logical foundations for the semantics of the SHACL language, including one that presents the semantics of recursive SHACL shapes."
            },
            {
              "iri": "Section-13-Paragraph-7-Sentence-2",
              "text": "By contrast, in our work we approach SHACL semantics in the reverse direction."
            },
            {
              "iri": "Section-13-Paragraph-7-Sentence-3",
              "text": "We start with logical formalisms with both well-defined semantics and motivating use cases to derive shapes that can be trivially expressed in a fragment of SHACL."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-14",
      "subtitle": "Experiments: Transforming KGs with type predicates for experiments",
      "paragraphs": [
        {
          "iri": "Section-14-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-14-Paragraph-1-Sentence-1",
              "text": "We have implemented our SHACLEARNER based on Algorithm 1 and conducted experiments to assess it."
            },
            {
              "iri": "Section-14-Paragraph-1-Sentence-2",
              "text": "Our experiments are designed to prove the effectiveness of our SHACLEARNER at capturing shapes with varying confidence, length, and cardinality from various real-world massive knowledge graphs (KGs)."
            },
            {
              "iri": "Section-14-Paragraph-1-Sentence-3",
              "text": "Since our proposed system is the first method to learn shapes from massive KGs automatically, we have no benchmark with which to compare."
            },
            {
              "iri": "Section-14-Paragraph-1-Sentence-4",
              "text": "However, the performance of our system shows that it can handle the task satisfactorily and can be applied in practice."
            }
          ]
        },
        {
          "iri": "Section-14-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-14-Paragraph-2-Sentence-1",
              "text": "We demonstrate that SHACLEARNER is scalable so it can handle real-world massive KGs including DBpedia with over 11 million facts."
            },
            {
              "iri": "Section-14-Paragraph-2-Sentence-2",
              "text": "SHACLEARNER can learn several shapes each for various target predicates."
            },
            {
              "iri": "Section-14-Paragraph-2-Sentence-3",
              "text": "SHACLEARNER can discover diverse shapes with respect to the quality measurements of IOPSC and IOPHC."
            },
            {
              "iri": "Section-14-Paragraph-2-Sentence-4",
              "text": "SHACLEARNER discovers shapes of varying complexity and diversity with respect to length and cardinality."
            },
            {
              "iri": "Section-14-Paragraph-2-Sentence-5",
              "text": "SHACLEARNER discovers every high-quality rule (with IOPSC greater than or equal to 0.9) for a small complete KG, by comparison with an ideal learner."
            },
            {
              "iri": "Section-14-Paragraph-2-Sentence-6",
              "text": "SHACLEARNER discovers more complex shapes (trees) by aggregating learned IOP rules efficiently."
            }
          ]
        },
        {
          "iri": "Section-14-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-14-Paragraph-3-Sentence-1",
              "text": "Our four benchmark KGs are described in Table 1."
            },
            {
              "iri": "Section-14-Paragraph-3-Sentence-2",
              "text": "Three benchmarks, namely YAGO2s, Wikidata, and DBpedia, are common KGs and have been used in rule learning experiments previously."
            },
            {
              "iri": "Section-14-Paragraph-3-Sentence-3",
              "text": "The fourth is a small synthetic KG, Poker, for analyzing the completeness of our algorithm."
            },
            {
              "iri": "Section-14-Paragraph-3-Sentence-4",
              "text": "The Poker KG was adapted from the classic version to be a rich and correct KG for evaluation experiments."
            },
            {
              "iri": "Section-14-Paragraph-3-Sentence-5",
              "text": "Each poker hand comprises five playing cards drawn from a deck with thirteen ranks and four suits."
            },
            {
              "iri": "Section-14-Paragraph-3-Sentence-6",
              "text": "Each card is described using two attributes: suit and rank."
            },
            {
              "iri": "Section-14-Paragraph-3-Sentence-7",
              "text": "Each hand is assigned to any or all of nine different ranks, including High Card, One Pair, Two Pair, etc."
            },
            {
              "iri": "Section-14-Paragraph-3-Sentence-8",
              "text": "We randomly generate five hundred poker hands and all facts related to them to build a small but complete and correct KG."
            },
            {
              "iri": "Section-14-Paragraph-3-Sentence-9",
              "text": "Twenty-eight out of thirty-five predicates are unary predicates, such as fullHouse(x) where x is a specific poker hand."
            }
          ]
        },
        {
          "iri": "Section-14-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-14-Paragraph-4-Sentence-1",
              "text": "All experiments were conducted on an Intel Xeon CPU E5-2650 v4 at 2.20 GHz, with 66 GB RAM and running CentOS 8."
            }
          ]
        },
        {
          "iri": "Section-14-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-14-Paragraph-5-Sentence-1",
              "text": "Transforming KGs with type predicates for experiments is necessary since real-world KG models treat predicates and entities in a variety of ways."
            },
            {
              "iri": "Section-14-Paragraph-5-Sentence-2",
              "text": "We require a common representation for this work that clearly distinguishes entities and predicates."
            },
            {
              "iri": "Section-14-Paragraph-5-Sentence-3",
              "text": "We employ an abstract model that is used in Description Logic ontologies, where classes and types are named unary predicates, and roles (also called properties) are named binary predicates."
            }
          ]
        },
        {
          "iri": "Section-14-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-14-Paragraph-6-Sentence-1",
              "text": "Presenting the class and type information as unary predicates also allows us to learn fully abstracted (entity-free) shapes instead of partially instantiated shapes."
            },
            {
              "iri": "Section-14-Paragraph-6-Sentence-2",
              "text": "This feature is important since learning partially instantiated shapes can cause an explosion in the space of possible shapes."
            },
            {
              "iri": "Section-14-Paragraph-6-Sentence-3",
              "text": "Using self-loop links for unary predicates is convenient syntactic sugar to keep the presentation in the triple format, as for the original input KGs."
            }
          ]
        },
        {
          "iri": "Section-14-Paragraph-7",
          "sentences": [
            {
              "iri": "Section-14-Paragraph-7-Sentence-1",
              "text": "In real-world KGs, concept or class membership may be modeled as entity instances of a binary fact."
            },
            {
              "iri": "Section-14-Paragraph-7-Sentence-2",
              "text": "For example, DBpedia contains predicates where the second arguments of these predicates are types or classes."
            },
            {
              "iri": "Section-14-Paragraph-7-Sentence-3",
              "text": "Instead, we choose to model types and classes with unary predicates."
            },
            {
              "iri": "Section-14-Paragraph-7-Sentence-4",
              "text": "To do so, we make new predicates from facts in the form, where x is the name of an album."
            },
            {
              "iri": "Section-14-Paragraph-7-Sentence-5",
              "text": "Then we produce new unary facts based on the new predicate and related facts."
            }
          ]
        },
        {
          "iri": "Section-14-Paragraph-8",
          "sentences": [
            {
              "iri": "Section-14-Paragraph-8-Sentence-1",
              "text": "We use the two type-like predicates from DBpedia 3.8 and the one from Wikidata to generate our unary predicates and facts."
            },
            {
              "iri": "Section-14-Paragraph-8-Sentence-2",
              "text": "These predicates each have a class as their second argument."
            },
            {
              "iri": "Section-14-Paragraph-8-Sentence-3",
              "text": "To prune the classes with few instances for which learning may be pointless, we consider only our unary predicates which have at least one hundred facts."
            },
            {
              "iri": "Section-14-Paragraph-8-Sentence-4",
              "text": "We retain the original predicates and facts in the KG as well as extending it with our new ones."
            },
            {
              "iri": "Section-14-Paragraph-8-Sentence-5",
              "text": "In Table 1, we report the specifications of two benchmarks where we have added the unary predicates and facts."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-15",
      "subtitle": "Experiments: Learning IOP rules",
      "paragraphs": [
        {
          "iri": "Section-15-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-15-Paragraph-1-Sentence-1",
              "text": "We follow the established approach for evaluating KG rule-learning methods, that is, measuring the quantity and quality of distinct rules learnt."
            },
            {
              "iri": "Section-15-Paragraph-1-Sentence-2",
              "text": "Rule quality is measured by Inverse open path standard confidence (IOPSC) and Inverse open path head coverage (IOPHC)."
            },
            {
              "iri": "Section-15-Paragraph-1-Sentence-3",
              "text": "We randomly select 50 target predicates from Wikidata and DBPedia unary predicates (157 and 355 respectively)."
            },
            {
              "iri": "Section-15-Paragraph-1-Sentence-4",
              "text": "We use all binary predicates of YAGO2s (i.e., 37) as target predicates."
            },
            {
              "iri": "Section-15-Paragraph-1-Sentence-5",
              "text": "Each binary target predicate serves as two target predicates, once in the straight form (where the object argument of the predicate is the common variable to connect the head) and secondly in its reverse form (where the subject argument serves to connect)."
            },
            {
              "iri": "Section-15-Paragraph-1-Sentence-6",
              "text": "In this manner, we ensure that the results of SHACLEARNER on YAGO2s with its binary predicates as targets is comparable with the results for Wikidata and DBpedia that have unary predicates as targets."
            },
            {
              "iri": "Section-15-Paragraph-1-Sentence-7",
              "text": "Hence for YAGO2s we have 74 target predicates."
            },
            {
              "iri": "Section-15-Paragraph-1-Sentence-8",
              "text": "A 10 hour limit is set for learning each target predicate."
            }
          ]
        },
        {
          "iri": "Section-15-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-15-Paragraph-2-Sentence-1",
              "text": "Table 2 shows the number of rules, the average numbers of quality IOP rules found, the proportion of target predicates for which at least one IOP rule was found, and the running times in hours, averaged over the targets."
            },
            {
              "iri": "Section-15-Paragraph-2-Sentence-2",
              "text": "Only high quality rules meeting minimum quality thresholds are included in these figures, that is, with IOPSC greater than or equal to 0.1 and IOPHC greater than or equal to 0.01, thresholds established in comparative work."
            },
            {
              "iri": "Section-15-Paragraph-2-Sentence-3",
              "text": "These thresholds are quite low, so rules of low quality are also included."
            },
            {
              "iri": "Section-15-Paragraph-2-Sentence-4",
              "text": "Generally, selecting a low threshold at the time of learning is a safe choice since the rules can be further pruned by applying stricter quality thresholds later on."
            }
          ]
        },
        {
          "iri": "Section-15-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-15-Paragraph-3-Sentence-1",
              "text": "SHACLEARNER shows satisfactory performance in terms of both the runtime and the numbers of quality rules mined."
            },
            {
              "iri": "Section-15-Paragraph-3-Sentence-2",
              "text": "Note that rules found have a variety of lengths and cardinalities."
            },
            {
              "iri": "Section-15-Paragraph-3-Sentence-3",
              "text": "To better present the quality performance of rules, we illustrate the distribution of rules with respect to the features, IOPSC, IOPHC, cardinality and length, and also IOPSC vs length."
            },
            {
              "iri": "Section-15-Paragraph-3-Sentence-4",
              "text": "In the following, the proportion of mined rules having the various feature values is presented, to more evenly demonstrate the quality of performance over the three very different KGs."
            }
          ]
        },
        {
          "iri": "Section-15-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-15-Paragraph-4-Sentence-1",
              "text": "The distribution of mined rules with respect to their IOPSC and IOPHC is shown in the figures."
            },
            {
              "iri": "Section-15-Paragraph-4-Sentence-2",
              "text": "In the left-hand chart we observe a consistent decrease in the proportion of quality rules as the IOPSC increases."
            },
            {
              "iri": "Section-15-Paragraph-4-Sentence-3",
              "text": "In the right hand chart we see a similar pattern for increasing IOPHC, but the decrease is not as consistent, showing there must be many relevant rules with many covered head instances."
            },
            {
              "iri": "Section-15-Paragraph-4-Sentence-4",
              "text": "Over all benchmarks, the majority of learned rules have lower IOPSC and IOPHC."
            },
            {
              "iri": "Section-15-Paragraph-4-Sentence-5",
              "text": "This is expected because the statistical likelihood of poor quality rules is much higher."
            },
            {
              "iri": "Section-15-Paragraph-4-Sentence-6",
              "text": "Indeed, we show experimentally that our pruning techniques, that are necessary for scalability, prune away predominantly lower quality rules."
            }
          ]
        },
        {
          "iri": "Section-15-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-15-Paragraph-5-Sentence-1",
              "text": "With respect to IOPSC, proportionally more quality rules are learnt from DBpedia than from the other KGs, with Wikidata coming second, ahead of YAGO2s."
            },
            {
              "iri": "Section-15-Paragraph-5-Sentence-2",
              "text": "This phenomenon might be a result of our deliberate selection of type-like unary predicates as targets for DBPedia and Wikidata, whereas for YAGO2s we use every one of the 37 binary predicates as a target."
            }
          ]
        },
        {
          "iri": "Section-15-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-15-Paragraph-6-Sentence-1",
              "text": "The distribution of mined rules with respect to their cardinalities shows that the largest proportion of rules has a cardinality of 1, as expected, as they have the least stringent requirements to be met in the KG."
            },
            {
              "iri": "Section-15-Paragraph-6-Sentence-2",
              "text": "We observe an expected decrease with greater cardinalities as they demand tighter restrictions to be satisfied."
            },
            {
              "iri": "Section-15-Paragraph-6-Sentence-3",
              "text": "YAGO2 demonstrates a tendency towards higher cardinalities than the other KGs, possibly a result of its more curated development."
            }
          ]
        },
        {
          "iri": "Section-15-Paragraph-7",
          "sentences": [
            {
              "iri": "Section-15-Paragraph-7-Sentence-1",
              "text": "The distribution of mined rules with respect to their lengths shows that as the length increases, the number of rules would increase since the space of possible rules grows, and this is what we see."
            }
          ]
        },
        {
          "iri": "Section-15-Paragraph-8",
          "sentences": [
            {
              "iri": "Section-15-Paragraph-8-Sentence-1",
              "text": "For a concrete example of SHACL learning, we show the following three IOP rules mined from DBpedia in the experiments."
            },
            {
              "iri": "Section-15-Paragraph-8-Sentence-2",
              "text": "The IOPSC, IOPHC, and Cardinality annotations respectively prefix each rule."
            },
            {
              "iri": "Section-15-Paragraph-8-Sentence-3",
              "text": "The first rule indicates x should belong to an album that has y as record label."
            },
            {
              "iri": "Section-15-Paragraph-8-Sentence-4",
              "text": "The second rule requires a song (x) to have at least one producer while the third rule requires a song to have at least two producers, and these two rules are distinguished by the cardinality annotation."
            },
            {
              "iri": "Section-15-Paragraph-8-Sentence-5",
              "text": "As we discussed, the third rule is more constraining than the second, so the confidence of the third rule is lower than the confidence of the second, based on the KG data."
            }
          ]
        },
        {
          "iri": "Section-15-Paragraph-9",
          "sentences": [
            {
              "iri": "Section-15-Paragraph-9-Sentence-1",
              "text": "Using rules found in the experiments, we further illustrate the practical meaning of the IOPSC and IOPHC qualities."
            },
            {
              "iri": "Section-15-Paragraph-9-Sentence-2",
              "text": "While IOPSC determines the confidence of a rule based on counting the proportion of target predicate instances for which the rule holds true in the KG, IOPHC indicates the proportion of rule consequent instances that are justified by target predicate instances in the KG, thereby indicating the relevance of the rule to the target."
            },
            {
              "iri": "Section-15-Paragraph-9-Sentence-3",
              "text": "In Wikidata+UP, all unary predicates are occupations such as singer or entrepreneur, so all the entities which have these types turn out to be persons even though there is no explicit person type in our KG."
            },
            {
              "iri": "Section-15-Paragraph-9-Sentence-4",
              "text": "Thus, the occupations all have very similar IOP rules about each of them with high IOPSC and low IOPHC."
            },
            {
              "iri": "Section-15-Paragraph-9-Sentence-5",
              "text": "On the other hand, for these unary occupation predicates there are also some IOP rules with high IOPHC that apply only to one specific unary predicate."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-16",
      "subtitle": "Experiments: Completeness analysis of IOP rule learning",
      "paragraphs": [
        {
          "iri": "Section-16-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-16-Paragraph-1-Sentence-1",
              "text": "SHACLEARNER uses two tricks to significantly reduce the search space for IOP rules in PathFinding of Algorithm 1, namely the prior Sampling and the heuristic pruning used inside PathFinding that uses the embedding-based scoring function."
            },
            {
              "iri": "Section-16-Paragraph-1-Sentence-2",
              "text": "We conduct experiments to explore how these two pruning methods affect SHACLEARNER with regard to the quality and quantity of learnt rules."
            },
            {
              "iri": "Section-16-Paragraph-1-Sentence-3",
              "text": "To do so, we create three variants of SHACLEARNER as follows."
            }
          ]
        },
        {
          "iri": "Section-16-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-16-Paragraph-2-Sentence-1",
              "text": "(-S+H): SHACLEARNER that does not sample and so uses the complete input KG in all components, including embedding learning, heuristic pruning, and ultimate evaluation."
            },
            {
              "iri": "Section-16-Paragraph-2-Sentence-2",
              "text": "(+S-H): SHACLEARNER that samples but does not use heuristic pruning and so generates rules based on the sampled KG and evaluates rules on the complete KG."
            },
            {
              "iri": "Section-16-Paragraph-2-Sentence-3",
              "text": "(-S-H): SHACLEARNER that does not use sampling nor heuristic pruning."
            },
            {
              "iri": "Section-16-Paragraph-2-Sentence-4",
              "text": "This system is an ideal IOP rule learner that generates and evaluates all possible rules up to the maximum length parameter."
            },
            {
              "iri": "Section-16-Paragraph-2-Sentence-5",
              "text": "Since this method is a brute-force search, it cannot handle any real-world KG such as those we used in the performance evaluation."
            },
            {
              "iri": "Section-16-Paragraph-2-Sentence-6",
              "text": "(+S+H): SHACLEARNER with its full functionality."
            }
          ]
        },
        {
          "iri": "Section-16-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-16-Paragraph-3-Sentence-1",
              "text": "Since we use only the small Poker KG for this experiment, we can handle the task without sampling or heuristic mechanisms."
            },
            {
              "iri": "Section-16-Paragraph-3-Sentence-2",
              "text": "We use all 28 unary predicates as the target predicates."
            },
            {
              "iri": "Section-16-Paragraph-3-Sentence-3",
              "text": "The first row shows the number of IOP rules that are learnt by ideal, modified SHACLEARNER (-S-H) with no pruning, for all target predicates, separated into various IOPSC intervals."
            },
            {
              "iri": "Section-16-Paragraph-3-Sentence-4",
              "text": "The latter rows show, for each variant, the percentage difference in the number of rules found, relative to the first row."
            },
            {
              "iri": "Section-16-Paragraph-3-Sentence-5",
              "text": "The last row corresponds to unmodified SHACLEARNER of Algorithm 1."
            }
          ]
        },
        {
          "iri": "Section-16-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-16-Paragraph-4-Sentence-1",
              "text": "For example, consider the first column (the number of learnt rules with IOPSC in range of [0.1, 0.3))."
            },
            {
              "iri": "Section-16-Paragraph-4-Sentence-2",
              "text": "In the first row, we have 163 rules learnt by ideal rule learner (SHACLEARNER (-S-H)) that is inefficient yet complete."
            },
            {
              "iri": "Section-16-Paragraph-4-Sentence-3",
              "text": "In the second row, we have the performance of the SHACLEARNER (-S+H), the system without sampling, but with the heuristic rule learning module, in comparison with the ideal rule learner (SHACLEARNER (-S-H)), given as -10%."
            },
            {
              "iri": "Section-16-Paragraph-4-Sentence-4",
              "text": "That means SHACLEARNER (-S+H) learns 146 rules with IOPSC in range of [0.1, 0.3): 17 or 10% fewer rules than the ideal learner."
            }
          ]
        },
        {
          "iri": "Section-16-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-16-Paragraph-5-Sentence-1",
              "text": "We observe that SHACLEARNER does not miss any rules of the highest quality, i.e., with IOPSC greater than or equal to 0.9."
            },
            {
              "iri": "Section-16-Paragraph-5-Sentence-2",
              "text": "SHACLEARNER\u2019s pruning methods cause it to fail to discover more rules of lower quality, with the number of missing rules increasing as quality decreases."
            },
            {
              "iri": "Section-16-Paragraph-5-Sentence-3",
              "text": "This is a reassuring property, since the goal of pruning is to improve the computational performance without missing high-quality rules."
            },
            {
              "iri": "Section-16-Paragraph-5-Sentence-4",
              "text": "In real applications, we will typically retain and action only the highest quality rules."
            }
          ]
        },
        {
          "iri": "Section-16-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-16-Paragraph-6-Sentence-1",
              "text": "We observe that, unlike the other pruning variants, using heuristic pruning alone in (-S+H) does not uniformly increase in effectiveness with decreasing rule quality."
            },
            {
              "iri": "Section-16-Paragraph-6-Sentence-2",
              "text": "This may be because using the complete KG for learning rules about all target predicates could harm the quality of the learnt embeddings used in the scoring function of SHACLEARNER."
            },
            {
              "iri": "Section-16-Paragraph-6-Sentence-3",
              "text": "The better quality of embeddings extracted from the sampled KG arises from our sampling method that creates a KG that is customised for the target predicate."
            },
            {
              "iri": "Section-16-Paragraph-6-Sentence-4",
              "text": "All entities in the sampled KG are either directly related to the target predicate or close neighbours of directly related entities."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-17",
      "subtitle": "Experiments: Learning trees from IOP rules",
      "paragraphs": [
        {
          "iri": "Section-17-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-17-Paragraph-1-Sentence-1",
              "text": "Now we turn to presenting results for the trees that are built based on the IOP rules discovered in the experiments."
            },
            {
              "iri": "Section-17-Paragraph-1-Sentence-2",
              "text": "We report the characteristics of discovered trees and use a value of 0.1 for the TreeSCMIN parameter, showing average TreeSC for each KG, along with the average number of branches in the trees and the average tree-building runtime."
            },
            {
              "iri": "Section-17-Paragraph-1-Sentence-3",
              "text": "The number of trees for each KG is defined by the number of target predicates for which we have at least one IOP rule."
            }
          ]
        },
        {
          "iri": "Section-17-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-17-Paragraph-2-Sentence-1",
              "text": "The results show the running time for aggregating IOP rules into trees is lower than the initial IOP mining time by a factor greater than 10."
            },
            {
              "iri": "Section-17-Paragraph-2-Sentence-2",
              "text": "If, on the other hand, we wanted to discover such complex shapes from scratch, it would be exhaustively time-consuming due to the sensitivity of rule learners to the maximum length of rules."
            },
            {
              "iri": "Section-17-Paragraph-2-Sentence-3",
              "text": "The number of potential rules in the search space grows exponentially with the maximum number of predicates of the rules."
            }
          ]
        },
        {
          "iri": "Section-17-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-17-Paragraph-3-Sentence-1",
              "text": "The average number of branches in the mined trees are 50%, 31%, and 56% of the corresponding number of mined rules."
            },
            {
              "iri": "Section-17-Paragraph-3-Sentence-2",
              "text": "Hence, by imposing the additional tree-shaped constraint over the basic IOP-shaped constraint, at least 44% of IOP rules are pruned."
            }
          ]
        },
        {
          "iri": "Section-17-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-17-Paragraph-4-Sentence-1",
              "text": "For an example of tree shape learning, we show a fragment of a 39-branched tree mined from DBpedia by aggregating IOP rules in the experiments."
            },
            {
              "iri": "Section-17-Paragraph-4-Sentence-2",
              "text": "Here, the first annotation value (0.13) presents the SC of the tree and the subsequent values at the beginning of each branch indicate the branch cardinality."
            },
            {
              "iri": "Section-17-Paragraph-4-Sentence-3",
              "text": "This tree can be read as saying that a song has an album with a record label, an album with two producers, an album with a genre, and an artist who is a musical artist."
            }
          ]
        },
        {
          "iri": "Section-17-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-17-Paragraph-5-Sentence-1",
              "text": "As can be seen here, there remains an opportunity for improving tree shapes for simplicity and easier interpretation by unifying some variables that occur in predicates that occur in multiple branches."
            },
            {
              "iri": "Section-17-Paragraph-5-Sentence-2",
              "text": "We plan to investigate this potential post-processing step in future work."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-18",
      "subtitle": "Conclusion",
      "paragraphs": [
        {
          "iri": "Section-18-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-18-Paragraph-1-Sentence-1",
              "text": "In this paper we propose a method to learn SHACL shapes from KGs as a way to describe KG patterns, to validate KGs, and also to support new data entry."
            },
            {
              "iri": "Section-18-Paragraph-1-Sentence-2",
              "text": "For entities that satisfy target predicates, our shapes describe conjunctive paths of constraints over properties, enhanced with minimum cardinality constraints."
            },
            {
              "iri": "Section-18-Paragraph-1-Sentence-3",
              "text": "We reduce the SHACL learning problem to learning a novel kind of rules, Inverse Open Path rules (IOP)."
            },
            {
              "iri": "Section-18-Paragraph-1-Sentence-4",
              "text": "We introduce rule quality measures IOP Standard Confidence, IOP Head Coverage, and Cardinality which augment the rules."
            }
          ]
        },
        {
          "iri": "Section-18-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-18-Paragraph-2-Sentence-1",
              "text": "IOPSC effectively extends SHACL with shapes, representing the quantified uncertainty of a candidate shape to be selected for interestingness or for KG verification."
            },
            {
              "iri": "Section-18-Paragraph-2-Sentence-2",
              "text": "We also propose a method to aggregate learnt IOP rules in order to discover more complex shapes, that is, trees."
            },
            {
              "iri": "Section-18-Paragraph-2-Sentence-3",
              "text": "The shapes support efficient and interpretable human validation in a depth-first manner and are employed, for example, in an editor called Schimatos for manual knowledge graph completion."
            },
            {
              "iri": "Section-18-Paragraph-2-Sentence-4",
              "text": "The shapes can also be used to complete information triggered by entities with only a type or class declaration by automatically generating dynamic data entry forms."
            }
          ]
        },
        {
          "iri": "Section-18-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-18-Paragraph-3-Sentence-1",
              "text": "In this manual mode, they can also be used more traditionally to complete missing facts for a target predicate, as well as other predicates related to the target, while enabling the acquisition of facts about entities that are entirely missing from the KG."
            },
            {
              "iri": "Section-18-Paragraph-3-Sentence-2",
              "text": "To learn such shapes we adapt an embedding-based Open Path Rule Learner (OPRL) by introducing the following novel components: (1) we propose an IOP rule language that allows us to mine rules with open variables, with one predicate forming the body and a chain of predicates as the head; (2) we introduce cardinality constraints and tree shapes for more expressive patterns; and (3) we propose an efficient method to evaluate IOP rules and trees by exactly computing the quality measures of each rule using fast matrix and vector operations."
            }
          ]
        },
        {
          "iri": "Section-18-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-18-Paragraph-4-Sentence-1",
              "text": "Our experiments show that SHACLearner can mine IOP rules of various lengths, cardinalities, and qualities from three massive real-world benchmark KGs including Yago, Wikidata, and DBpedia."
            },
            {
              "iri": "Section-18-Paragraph-4-Sentence-2",
              "text": "Learning shape constraints from schema-free knowledge bases, such as most modern KGs, is a challenging task, beginning with the formalism of constraints that determine the scope of knowledge that can be acquired."
            },
            {
              "iri": "Section-18-Paragraph-4-Sentence-3",
              "text": "The next challenge is designing an efficient learning method, where dealing with uncertainty in the constraints and the learning process adds an extra dimension of challenge but also adds utility."
            },
            {
              "iri": "Section-18-Paragraph-4-Sentence-4",
              "text": "A good learning algorithm should scale gracefully so that discovered constraints are relatively more certain than those that are missed, and SHACLearner establishes a benchmark for this problem."
            }
          ]
        },
        {
          "iri": "Section-18-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-18-Paragraph-5-Sentence-1",
              "text": "In future work, we will validate the shapes we learn with SHACLearner via formal human-expert evaluation and further extend the expressivity of the shapes we can discover."
            },
            {
              "iri": "Section-18-Paragraph-5-Sentence-2",
              "text": "We also propose to redesign the SHACLearner algorithm for a MapReduce implementation to handle extremely massive KGs with tens of billions of facts, such as the most recent version of Wikidata."
            }
          ]
        }
      ]
    }
  ],
  "times": [
    0.0007982254028320312,
    936.2983260154724,
    1668.4630348682404,
    1817.768385887146,
    4.174052000045776,
    0.00582122802734375,
    0.010469913482666016,
    12509.165246963501,
    16802.897058963776,
    148.51095509529114,
    209.51759219169617,
    1.0412509441375732,
    0.03889799118041992,
    4754.818094730377,
    0.015111923217773438,
    2.0997538566589355,
    303.2837829589844,
    112.02100706100464,
    1525.0110058784485,
    1645.017441034317,
    8536.965746879578,
    198.88004302978516,
    13872.046274900436,
    269.5774259567261,
    0.2860889434814453,
    0.9355020523071289
  ],
  "nodes": {
    "Entity-a_method_to_learn_shacl_shape_from_kg": {
      "node_id": "a_method_to_learn_shacl_shape_from_kg",
      "disambiguation_index": 0,
      "label": "a method to learn SHACL shapes from KGs",
      "aliases": [
        "a method to learn SHACL shapes from KGs"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A method to learn SHACL shapes from KGs refers to the SHACLEARNER approach, which utilizes Inverse Open Path rules to extract and define structural constraints from knowledge graphs, enabling the validation and enhancement of these graphs through the discovery of informative and intuitive shape patterns.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-1",
          "local_name": "a method to learn SHACL shapes from KGs",
          "local_types": [
            "method"
          ],
          "iri": "Entity-a_method_to_learn_shacl_shape_from_kg-Mention-1"
        }
      ],
      "relevance": 0.7890625
    },
    "Entity-kg_k": {
      "node_id": "kg_k",
      "disambiguation_index": 0,
      "label": "KG K",
      "aliases": [
        "KG K"
      ],
      "types": [
        "knowledge graph",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "KG K refers to a specific knowledge graph that serves as the input data structure for the SHACLEARNER algorithm, which is designed to learn inverse open path rules for deriving SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-2",
          "local_name": "KG K",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg_k-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "KG K",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg_k-Mention-2"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "KG K",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg_k-Mention-3"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-2",
          "local_name": "KG K",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg_k-Mention-4"
        }
      ],
      "relevance": 0.759765625
    },
    "Entity-a_kg_k": {
      "node_id": "a_kg_k",
      "disambiguation_index": 0,
      "label": "a KG K",
      "aliases": [
        "a KG K"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "a KG K refers to a specific knowledge graph that serves as the input data source for learning inverse open path rules and shapes in the context of the SHACL shape learning process.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-2",
          "local_name": "a KG K",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-a_kg_k-Mention-1"
        }
      ],
      "relevance": 0.7470703125
    },
    "Entity-open_path_in_a_kg": {
      "node_id": "open_path_in_a_kg",
      "disambiguation_index": 0,
      "label": "open path in a KG",
      "aliases": [
        "open path in a KG"
      ],
      "types": [
        "concept",
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An open path in a knowledge graph (KG) refers to a sequence of predicates that connect entities within the KG, allowing for the expression of relationships and constraints, and is closely related to inverse open path rules which serve as a formalism for defining shapes in the context of the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-5-Sentence-1",
          "local_name": "open path in a KG",
          "local_types": [
            "concept",
            "knowledge graph"
          ],
          "iri": "Entity-open_path_in_a_kg-Mention-1"
        }
      ],
      "relevance": 0.74169921875
    },
    "Entity-kg_rule-learning_method": {
      "node_id": "kg_rule-learning_method",
      "disambiguation_index": 0,
      "label": "KG rule-learning methods",
      "aliases": [
        "KG rule-learning methods"
      ],
      "types": [
        "knowledge graph",
        "method",
        "evaluation technique",
        "research method",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "KG rule-learning methods refer to techniques used to extract and evaluate rules from knowledge graphs, focusing on the quantity and quality of distinct rules learned, often employing metrics such as Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC) to assess their effectiveness.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-1",
          "local_name": "KG rule-learning methods",
          "local_types": [
            "knowledge graph",
            "method",
            "evaluation technique",
            "research method",
            "methodology"
          ],
          "iri": "Entity-kg_rule-learning_method-Mention-1"
        }
      ],
      "relevance": 0.7392578125
    },
    "Entity-our_proposed_system": {
      "node_id": "our_proposed_system",
      "disambiguation_index": 0,
      "label": "our proposed system",
      "aliases": [
        "our proposed system"
      ],
      "types": [
        "system",
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Our proposed system refers to SHACLEARNER, a novel method designed to automatically learn shapes from massive knowledge graphs (KGs) using Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-3",
          "local_name": "our proposed system",
          "local_types": [
            "system",
            "method"
          ],
          "iri": "Entity-our_proposed_system-Mention-1"
        }
      ],
      "relevance": 0.7373046875
    },
    "Entity-learning_shacl_shape_from_kg": {
      "node_id": "learning_shacl_shape_from_kg",
      "disambiguation_index": 0,
      "label": "learning SHACL shapes from KGs",
      "aliases": [
        "learning SHACL shapes",
        "learning SHACL shapes from KGs"
      ],
      "types": [
        "learning",
        "KG",
        "SHACL",
        "SHACL shapes",
        "concept",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The process of learning SHACL shapes from KGs refers to the methodology of deriving structural constraints for knowledge graphs using the Shapes Constraint Language (SHACL) based on the patterns and relationships found within the data of the knowledge graphs themselves.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-1-Sentence-1",
          "local_name": "learning SHACL shapes from KGs",
          "local_types": [
            "process",
            "SHACL",
            "KG"
          ],
          "iri": "Entity-learning_shacl_shape_from_kg-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-1",
          "local_name": "learning SHACL shapes",
          "local_types": [
            "SHACL",
            "learning",
            "SHACL shapes",
            "concept"
          ],
          "iri": "Entity-learning_shacl_shape_from_kg-Mention-2"
        }
      ],
      "relevance": 0.73046875
    },
    "Entity-algorithm_1__shaclearner": {
      "node_id": "algorithm_1__shaclearner",
      "disambiguation_index": 0,
      "label": "Algorithm 1: SHACLearner",
      "aliases": [
        "Algorithm 1: SHACLearner"
      ],
      "types": [
        "computational method",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "SHACLearner is a computational method designed to learn inverse open path rules from knowledge graphs, producing a set of rules and a tree structure that express constraints on graph data using the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-1",
          "local_name": "Algorithm 1: SHACLearner",
          "local_types": [
            "computational method",
            "algorithm"
          ],
          "iri": "Entity-algorithm_1__shaclearner-Mention-1"
        }
      ],
      "relevance": 0.72900390625
    },
    "Entity-iop_rule_learner": {
      "node_id": "iop_rule_learner",
      "disambiguation_index": 0,
      "label": "IOP rule learner",
      "aliases": [
        "IOP rule learner",
        "this new IOP rule learner"
      ],
      "types": [
        "rule learner",
        "machine learning model",
        "learning model",
        "learner",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The IOP rule learner, referred to as SHACLEARNER, is a machine learning algorithm designed to learn annotated Inverse Open Path (IOP) rules from knowledge graphs, enhancing the capabilities of existing open path rule learners by accommodating unary predicates and minimum cardinality constraints.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-2",
          "local_name": "IOP rule learner",
          "local_types": [
            "algorithm",
            "machine learning model"
          ],
          "iri": "Entity-iop_rule_learner-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-4",
          "local_name": "IOP rule learner",
          "local_types": [
            "rule learner",
            "machine learning model",
            "learning model",
            "learner",
            "algorithm"
          ],
          "iri": "Entity-iop_rule_learner-Mention-2"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-2",
          "local_name": "this new IOP rule learner",
          "local_types": [
            "algorithm",
            "learner"
          ],
          "iri": "Entity-iop_rule_learner-Mention-3"
        }
      ],
      "relevance": 0.7265625
    },
    "Entity-kg_pattern": {
      "node_id": "kg_pattern",
      "disambiguation_index": 0,
      "label": "KG patterns",
      "aliases": [
        "KG patterns"
      ],
      "types": [
        "knowledge graph",
        "data pattern",
        "pattern",
        "knowledge representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "KG patterns refer to the specific structural and relational configurations within knowledge graphs that can be described and validated using SHACL shapes, facilitating data entry and maintenance.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-1",
          "local_name": "KG patterns",
          "local_types": [
            "knowledge graph",
            "data pattern",
            "pattern",
            "knowledge representation"
          ],
          "iri": "Entity-kg_pattern-Mention-1"
        }
      ],
      "relevance": 0.72607421875
    },
    "Entity-the_experiment_(1)": {
      "node_id": "the_experiment_(1)",
      "disambiguation_index": 1,
      "label": "the experiments",
      "aliases": [
        "the experiments"
      ],
      "types": [
        "experiment",
        "experiments"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The experiments refer to the evaluation of the SHACLEARNER method, which involves mining and analyzing Inverse Open Path (IOP) rules from real-world knowledge graphs such as DBpedia, YAGO2s, and Wikidata to demonstrate the effectiveness and quality of learned shapes for knowledge graph validation.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-1",
          "local_name": "the experiments",
          "local_types": [
            "experiments"
          ],
          "iri": "Entity-the_experiment_(1)-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-1",
          "local_name": "the experiments",
          "local_types": [
            "experiment"
          ],
          "iri": "Entity-the_experiment_(1)-Mention-2"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-1",
          "local_name": "the experiments",
          "local_types": [
            "experiments"
          ],
          "iri": "Entity-the_experiment_(1)-Mention-3"
        }
      ],
      "relevance": 0.724609375
    },
    "Entity-open_path_rule_learning_method": {
      "node_id": "open_path_rule_learning_method",
      "disambiguation_index": 0,
      "label": "Open Path rule learning method",
      "aliases": [
        "Open Path rule learning",
        "Open Path rule learning method"
      ],
      "types": [
        "method",
        "algorithm",
        "learning method",
        "learning technique",
        "learning algorithm"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "The Open Path rule learning method is an algorithm used to discover and learn rules from knowledge graphs, which can be adapted to generate Inverse Open Path rules that serve as foundational elements for constructing more complex shapes and constraints in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "Open Path rule learning method",
          "local_types": [
            "method",
            "algorithm",
            "learning method",
            "learning technique",
            "learning algorithm"
          ],
          "iri": "Entity-open_path_rule_learning_method-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "Open Path rule learning",
          "local_types": [
            "method",
            "learning technique"
          ],
          "iri": "Entity-open_path_rule_learning_method-Mention-2"
        }
      ],
      "relevance": 0.7236328125
    },
    "Entity-iop_rule_r": {
      "node_id": "iop_rule_r",
      "disambiguation_index": 0,
      "label": "IOP rules R",
      "aliases": [
        "IOP rules R"
      ],
      "types": [
        "rules",
        "output"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "IOP rules R refers to a collection of inverse open path rules that are generated as output by the SHACLEARNER algorithm, which learns high-quality rules from knowledge graphs to express specific shapes and constraints on graph data.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-4",
          "local_name": "IOP rules R",
          "local_types": [
            "rules",
            "output"
          ],
          "iri": "Entity-iop_rule_r-Mention-1"
        }
      ],
      "relevance": 0.72265625
    },
    "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically": {
      "node_id": "the_first_method_to_learn_shape_from_massive_kg_automatically",
      "disambiguation_index": 0,
      "label": "the first method to learn shapes from massive KGs automatically",
      "aliases": [
        "the first method to learn shapes from massive KGs automatically"
      ],
      "types": [
        "method",
        "learning"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The first method to learn shapes from massive KGs automatically refers to SHACLEARNER, a novel learning system that utilizes Inverse Open Path rules to automatically derive high-quality shape constraints from large knowledge graphs without the need for predefined benchmarks.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-3",
          "local_name": "the first method to learn shapes from massive KGs automatically",
          "local_types": [
            "method",
            "learning"
          ],
          "iri": "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically-Mention-1"
        }
      ],
      "relevance": 0.7197265625
    },
    "Entity-each_kg": {
      "node_id": "each_kg",
      "disambiguation_index": 0,
      "label": "each KG",
      "aliases": [
        "each KG"
      ],
      "types": [
        "knowledge graph",
        "KG"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'each KG' refers to individual knowledge graphs that are analyzed and evaluated for their structural characteristics and tree-building properties based on the discovered Inverse Open Path (IOP) rules.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "each KG",
          "local_types": [
            "knowledge graph",
            "KG"
          ],
          "iri": "Entity-each_kg-Mention-1"
        }
      ],
      "relevance": 0.71875
    },
    "Entity-section_3": {
      "node_id": "section_3",
      "disambiguation_index": 0,
      "label": "Section 3",
      "aliases": [
        "Section 3"
      ],
      "types": [
        "document part",
        "section",
        "reference",
        "document section",
        "part of paper"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Section 3 of the paper details the SHACL learning method, focusing on the formalism of Inverse Open Path rules, the embedding-based approach for discovering these rules from knowledge graphs, and the aggregation of IOP rules into tree structures.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "Section 3",
          "local_types": [
            "document part",
            "section",
            "reference",
            "document section",
            "part of paper"
          ],
          "iri": "Entity-section_3-Mention-1"
        }
      ],
      "relevance": 0.7138671875
    },
    "Entity-input_kg": {
      "node_id": "input_kg",
      "disambiguation_index": 0,
      "label": "input KGs",
      "aliases": [
        "input KGs",
        "the original input KGs",
        "original input KGs"
      ],
      "types": [
        "knowledge graph",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Input KGs refer to the original knowledge graphs that are utilized as the foundational data structures for the experiments and methods described in the paper, specifically for learning shapes and constraints using the SHACLEARNER system.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-3",
          "local_name": "input KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-input_kg-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-6-Sentence-3",
          "local_name": "original input KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-input_kg-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-6-Sentence-3",
          "local_name": "the original input KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-input_kg-Mention-3"
        }
      ],
      "relevance": 0.71337890625
    },
    "Entity-shacl_learning_problem": {
      "node_id": "shacl_learning_problem",
      "disambiguation_index": 0,
      "label": "SHACL learning problem",
      "aliases": [
        "SHACL learning problem",
        "the SHACL learning problem"
      ],
      "types": [
        "problem",
        "learning",
        "computational problem",
        "SHACL",
        "semantic web"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The SHACL learning problem refers to the challenge of learning shape constraints for knowledge graphs using the Shapes Constraint Language (SHACL), specifically by reducing it to the task of learning Inverse Open Path rules that describe patterns and constraints over graph data.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-3",
          "local_name": "SHACL learning problem",
          "local_types": [
            "problem",
            "SHACL",
            "computational problem",
            "semantic web"
          ],
          "iri": "Entity-shacl_learning_problem-Mention-1"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-3",
          "local_name": "the SHACL learning problem",
          "local_types": [
            "problem",
            "learning"
          ],
          "iri": "Entity-shacl_learning_problem-Mention-2"
        }
      ],
      "relevance": 0.71142578125
    },
    "Entity-the_mined_iop_rule": {
      "node_id": "the_mined_iop_rule",
      "disambiguation_index": 0,
      "label": "the mined IOP rules",
      "aliases": [
        "the mined IOP rules"
      ],
      "types": [
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The mined IOP rules refer to the Inverse Open Path rules that are extracted from knowledge graphs by the SHACLEARNER system, serving as foundational elements for constructing more complex shapes, such as trees, within the framework of the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-6",
          "local_name": "the mined IOP rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-the_mined_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.71142578125
    },
    "Entity-learned_rule": {
      "node_id": "learned_rule",
      "disambiguation_index": 0,
      "label": "learned rules",
      "aliases": [
        "learned rules"
      ],
      "types": [
        "rules",
        "model",
        "algorithm",
        "data model",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'learned rules' refers to the high-quality rules extracted from knowledge graphs using the SHACLEARNER method, which are evaluated based on their Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC) metrics.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-4",
          "local_name": "learned rules",
          "local_types": [
            "rules",
            "model",
            "algorithm",
            "data model",
            "rule"
          ],
          "iri": "Entity-learned_rule-Mention-1"
        }
      ],
      "relevance": 0.71044921875
    },
    "Entity-these_kg": {
      "node_id": "these_kg",
      "disambiguation_index": 0,
      "label": "these KGs",
      "aliases": [
        "these KGs"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "These KGs refer to large and diverse knowledge graphs that are often incomplete, which have gained popularity in both public and enterprise contexts since the introduction of knowledge panels in Google Search.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-2",
          "local_name": "these KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-these_kg-Mention-1"
        }
      ],
      "relevance": 0.71044921875
    },
    "Entity-massive_kg": {
      "node_id": "massive_kg",
      "disambiguation_index": 0,
      "label": "massive KGs",
      "aliases": [
        "extremely massive KGs",
        "massive KGs"
      ],
      "types": [
        "knowledge graph",
        "KG",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "massive KGs refers to large-scale knowledge graphs that contain millions of facts, such as YAGO2s, DBpedia, and Wikidata, which are used for evaluating the SHACLEARNER method in the context of learning shapes and constraints from graph data.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-1",
          "local_name": "massive KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-massive_kg-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-3-Sentence-2",
          "local_name": "massive KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-massive_kg-Mention-2"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-2",
          "local_name": "massive KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-massive_kg-Mention-3"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-3",
          "local_name": "massive KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-massive_kg-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-4",
          "local_name": "massive KGs",
          "local_types": [
            "knowledge graph",
            "KG"
          ],
          "iri": "Entity-massive_kg-Mention-5"
        },
        {
          "reference": "Section-18-Paragraph-5-Sentence-2",
          "local_name": "extremely massive KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-massive_kg-Mention-6"
        }
      ],
      "relevance": 0.7099609375
    },
    "Entity-it_constituent_iop_rule": {
      "node_id": "it_constituent_iop_rule",
      "disambiguation_index": 0,
      "label": "its constituent IOP rules",
      "aliases": [
        "its constituent IOP rules"
      ],
      "types": [
        "concept",
        "IOP rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'its constituent IOP rules' refers to the individual Inverse Open Path rules that, when combined, create a tree structure used in the SHACLearner algorithm to define and assess the quality of shapes in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-6",
          "local_name": "its constituent IOP rules",
          "local_types": [
            "concept",
            "IOP rules"
          ],
          "iri": "Entity-it_constituent_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.7099609375
    },
    "Entity-the_full_kg": {
      "node_id": "the_full_kg",
      "disambiguation_index": 0,
      "label": "the full KG",
      "aliases": [
        "the full KG"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The full KG refers to the complete knowledge graph being analyzed, which encompasses all entities and facts used for evaluating the quality measures IOPSC and IOPHC in the context of the SHACLEARNER method.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-3",
          "local_name": "the full KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-the_full_kg-Mention-1"
        }
      ],
      "relevance": 0.70751953125
    },
    "Entity-the_converse_of_op_rule": {
      "node_id": "the_converse_of_op_rule",
      "disambiguation_index": 0,
      "label": "the converse of OP rules",
      "aliases": [
        "the converse of OP rules"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The converse of OP rules, referred to as inverse open path rules (IOP), are a formalism in predicate logic that represent specific shapes in knowledge graphs, corresponding to SHACL shapes, by expressing relationships between entities through paths defined by predicates and their reverses.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-1-Sentence-1",
          "local_name": "the converse of OP rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_converse_of_op_rule-Mention-1"
        }
      ],
      "relevance": 0.70654296875
    },
    "Entity-annotated_iop_rule": {
      "node_id": "annotated_iop_rule",
      "disambiguation_index": 0,
      "label": "annotated IOP rules",
      "aliases": [
        "annotated IOP rules",
        "an annotated IOP rule"
      ],
      "types": [
        "guidelines",
        "IOP rule",
        "rules",
        "rule",
        "data mining concept",
        "IOP"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Annotated IOP rules are a refined set of Inverse Open Path rules that have been evaluated and labeled to enhance the learning process of shape patterns from knowledge graphs, specifically tailored for use in the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-1",
          "local_name": "annotated IOP rules",
          "local_types": [
            "rules",
            "rule",
            "data mining concept"
          ],
          "iri": "Entity-annotated_iop_rule-Mention-1"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-6",
          "local_name": "annotated IOP rules",
          "local_types": [
            "guidelines",
            "rules",
            "IOP"
          ],
          "iri": "Entity-annotated_iop_rule-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-2",
          "local_name": "an annotated IOP rule",
          "local_types": [
            "rule",
            "IOP rule",
            "IOP"
          ],
          "iri": "Entity-annotated_iop_rule-Mention-3"
        }
      ],
      "relevance": 0.70458984375
    },
    "Entity-learnt_iop_rule": {
      "node_id": "learnt_iop_rule",
      "disambiguation_index": 0,
      "label": "learnt IOP rules",
      "aliases": [
        "learnt IOP rules",
        "learned IOP rules"
      ],
      "types": [
        "rules",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'learnt IOP rules' refers to the specific shape patterns derived from knowledge graphs using the SHACLEARNER algorithm, which are designed to be aggregated into tree structures for translation into the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-2-Sentence-5",
          "local_name": "learnt IOP rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-learnt_iop_rule-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-6",
          "local_name": "learned IOP rules",
          "local_types": [
            "rule",
            "rules"
          ],
          "iri": "Entity-learnt_iop_rule-Mention-2"
        }
      ],
      "relevance": 0.70458984375
    },
    "Entity-kg_structure": {
      "node_id": "kg_structure",
      "disambiguation_index": 0,
      "label": "KG structure",
      "aliases": [
        "KG structure"
      ],
      "types": [
        "knowledge graph",
        "graph structure",
        "knowledge representation",
        "data structure",
        "data organization",
        "structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "KG structure refers to the organizational framework and relationships within a knowledge graph, which can be analyzed and validated using SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-4",
          "local_name": "KG structure",
          "local_types": [
            "knowledge graph",
            "graph structure",
            "knowledge representation",
            "data structure",
            "data organization",
            "structure"
          ],
          "iri": "Entity-kg_structure-Mention-1"
        }
      ],
      "relevance": 0.7041015625
    },
    "Entity-the_rule_(3)": {
      "node_id": "the_rule_(3)",
      "disambiguation_index": 3,
      "label": "the rules",
      "aliases": [
        "the rules"
      ],
      "types": [
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The rules refer to the Inverse Open Path (IOP) rules used in the SHACLearner algorithm to derive tree shapes from knowledge graphs, which express specific patterns and constraints on the relationships between entities in the graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-5",
          "local_name": "the rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-the_rule_(3)-Mention-1"
        }
      ],
      "relevance": 0.70263671875
    },
    "Entity-iop_rule": {
      "node_id": "iop_rule",
      "disambiguation_index": 0,
      "label": "IOP rules",
      "aliases": [
        "IOP rules",
        "IOP rule",
        "the IOP rules"
      ],
      "types": [
        "algorithm output",
        "learning principles",
        "method",
        "rule set",
        "algorithmic concept",
        "formalism",
        "framework",
        "quality metric",
        "data specification",
        "rule",
        "mathematical rule",
        "decision-making framework",
        "formal structure",
        "pattern",
        "guidelines",
        "regulatory framework",
        "constraint",
        "concept",
        "rules",
        "algorithm",
        "mathematical rules",
        "logical rule",
        "theoretical concept",
        "IOP",
        "formal system",
        "logic formalism",
        "standards",
        "knowledge representation",
        "data processing",
        "data structure",
        "logic",
        "guideline",
        "mathematical concept",
        "logic rule",
        "data mining concept",
        "learning concept",
        "logical framework",
        "data mining",
        "annotation",
        "formal rule",
        "rule system",
        "logical construct",
        "evaluation criterion",
        "discovery method",
        "validation framework",
        "shape pattern",
        "quality measure",
        "regulation",
        "metric",
        "methodology"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "IOP rules, or Inverse Open Path rules, are a predicate logic formalism introduced in this paper that serve as a foundational building block for constructing complex shapes in knowledge graphs, allowing for the expression of specific paths over connected entities and the incorporation of cardinality constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "method",
            "concept",
            "rules",
            "formalism"
          ],
          "iri": "Entity-iop_rule-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-3",
          "local_name": "IOP rules",
          "local_types": [
            "methodology",
            "concept",
            "rules",
            "framework"
          ],
          "iri": "Entity-iop_rule-Mention-2"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "knowledge representation",
            "concept",
            "rules",
            "rule",
            "data mining concept"
          ],
          "iri": "Entity-iop_rule-Mention-3"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-3",
          "local_name": "IOP rules",
          "local_types": [
            "IOP",
            "concept",
            "rule",
            "logical rule"
          ],
          "iri": "Entity-iop_rule-Mention-4"
        },
        {
          "reference": "Section-1-Paragraph-2-Sentence-2",
          "local_name": "IOP rules",
          "local_types": [
            "rule system",
            "logic formalism",
            "concept",
            "rules",
            "shape pattern",
            "rule",
            "pattern"
          ],
          "iri": "Entity-iop_rule-Mention-5"
        },
        {
          "reference": "Section-1-Paragraph-2-Sentence-3",
          "local_name": "IOP rules",
          "local_types": [
            "rule",
            "knowledge representation"
          ],
          "iri": "Entity-iop_rule-Mention-6"
        },
        {
          "reference": "Section-1-Paragraph-2-Sentence-4",
          "local_name": "IOP rules",
          "local_types": [
            "guidelines",
            "rules",
            "regulatory framework"
          ],
          "iri": "Entity-iop_rule-Mention-7"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-4",
          "local_name": "IOP rules",
          "local_types": [
            "methodology",
            "rules",
            "formalism"
          ],
          "iri": "Entity-iop_rule-Mention-8"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-5",
          "local_name": "IOP rules",
          "local_types": [
            "rule",
            "knowledge representation"
          ],
          "iri": "Entity-iop_rule-Mention-9"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-6",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "methodology"
          ],
          "iri": "Entity-iop_rule-Mention-10"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-7",
          "local_name": "IOP rule",
          "local_types": [
            "constraint",
            "rule"
          ],
          "iri": "Entity-iop_rule-Mention-11"
        },
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "rule",
            "concept",
            "rules",
            "theoretical concept"
          ],
          "iri": "Entity-iop_rule-Mention-12"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "rule",
            "logic"
          ],
          "iri": "Entity-iop_rule-Mention-13"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "IOP rule",
          "local_types": [
            "rule",
            "theoretical concept",
            "logical construct",
            "logic"
          ],
          "iri": "Entity-iop_rule-Mention-14"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-3",
          "local_name": "IOP rules",
          "local_types": [
            "rule",
            "guidelines",
            "rules"
          ],
          "iri": "Entity-iop_rule-Mention-15"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-4",
          "local_name": "IOP rule",
          "local_types": [
            "rule",
            "formal system",
            "logical rule"
          ],
          "iri": "Entity-iop_rule-Mention-16"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-6",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "theoretical concept"
          ],
          "iri": "Entity-iop_rule-Mention-17"
        },
        {
          "reference": "Section-6-Paragraph-3-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "methodology",
            "rule",
            "rules",
            "logic"
          ],
          "iri": "Entity-iop_rule-Mention-18"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-2",
          "local_name": "IOP rule",
          "local_types": [
            "rule",
            "theoretical concept",
            "logic"
          ],
          "iri": "Entity-iop_rule-Mention-19"
        },
        {
          "reference": "Section-6-Paragraph-5-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "rule",
            "logic"
          ],
          "iri": "Entity-iop_rule-Mention-20"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-1",
          "local_name": "IOP rule",
          "local_types": [
            "logical framework",
            "rule",
            "logical construct",
            "logic"
          ],
          "iri": "Entity-iop_rule-Mention-21"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "formal structure",
            "rule",
            "logic"
          ],
          "iri": "Entity-iop_rule-Mention-22"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-2",
          "local_name": "IOP rule",
          "local_types": [
            "rule",
            "annotation"
          ],
          "iri": "Entity-iop_rule-Mention-23"
        },
        {
          "reference": "Section-6-Paragraph-10-Sentence-2",
          "local_name": "IOP rule",
          "local_types": [
            "logical construct",
            "rule",
            "mathematical rule",
            "logic"
          ],
          "iri": "Entity-iop_rule-Mention-24"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-4",
          "local_name": "IOP rules",
          "local_types": [
            "guidelines",
            "rule",
            "rules",
            "logic"
          ],
          "iri": "Entity-iop_rule-Mention-25"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-5",
          "local_name": "IOP rules",
          "local_types": [
            "logical framework",
            "rule",
            "rules"
          ],
          "iri": "Entity-iop_rule-Mention-26"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-6",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "guidelines"
          ],
          "iri": "Entity-iop_rule-Mention-27"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-7",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "rule",
            "data mining"
          ],
          "iri": "Entity-iop_rule-Mention-28"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-2",
          "local_name": "IOP rules",
          "local_types": [
            "knowledge representation",
            "concept",
            "rules",
            "rule",
            "logical framework",
            "logical rule"
          ],
          "iri": "Entity-iop_rule-Mention-29"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-5",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "framework"
          ],
          "iri": "Entity-iop_rule-Mention-30"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "IOP rules",
          "local_types": [
            "concept",
            "rules",
            "logic",
            "rule",
            "logical framework"
          ],
          "iri": "Entity-iop_rule-Mention-31"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "logical construct",
            "rules",
            "data structure",
            "rule",
            "logic rule"
          ],
          "iri": "Entity-iop_rule-Mention-32"
        },
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "IOP rule",
          "local_types": [
            "formal rule",
            "rule",
            "logical construct",
            "logical rule"
          ],
          "iri": "Entity-iop_rule-Mention-33"
        },
        {
          "reference": "Section-10-Paragraph-5-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "decision-making framework",
            "rule",
            "logical construct",
            "guideline"
          ],
          "iri": "Entity-iop_rule-Mention-34"
        },
        {
          "reference": "Section-10-Paragraph-5-Sentence-2",
          "local_name": "IOP rule",
          "local_types": [
            "rule",
            "evaluation criterion"
          ],
          "iri": "Entity-iop_rule-Mention-35"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "IOP rule",
          "local_types": [
            "concept",
            "rule",
            "theoretical concept"
          ],
          "iri": "Entity-iop_rule-Mention-36"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "data processing",
            "rules",
            "framework",
            "data specification",
            "IOP"
          ],
          "iri": "Entity-iop_rule-Mention-37"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-3",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "framework"
          ],
          "iri": "Entity-iop_rule-Mention-38"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-7",
          "local_name": "IOP rules",
          "local_types": [
            "guidelines",
            "data processing",
            "rules",
            "mathematical concept",
            "IOP"
          ],
          "iri": "Entity-iop_rule-Mention-39"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-6",
          "local_name": "IOP rules",
          "local_types": [
            "data processing",
            "rule set",
            "rules",
            "IOP",
            "theoretical concept"
          ],
          "iri": "Entity-iop_rule-Mention-40"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-3",
          "local_name": "IOP rules",
          "local_types": [
            "guidelines",
            "standards",
            "validation framework",
            "rules",
            "framework",
            "methodology"
          ],
          "iri": "Entity-iop_rule-Mention-41"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-6",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "learning principles"
          ],
          "iri": "Entity-iop_rule-Mention-42"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "quality metric",
            "methodology",
            "rule",
            "quality measure"
          ],
          "iri": "Entity-iop_rule-Mention-43"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "rule",
            "rules",
            "quality measure",
            "data structure"
          ],
          "iri": "Entity-iop_rule-Mention-44"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-4",
          "local_name": "IOP rules",
          "local_types": [
            "logical construct",
            "quality measure",
            "guideline",
            "metric",
            "rule",
            "regulation"
          ],
          "iri": "Entity-iop_rule-Mention-45"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-5",
          "local_name": "IOP rules",
          "local_types": [
            "rule",
            "logical rule"
          ],
          "iri": "Entity-iop_rule-Mention-46"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "algorithmic concept",
            "rule",
            "rules",
            "data structure"
          ],
          "iri": "Entity-iop_rule-Mention-47"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-4",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "rule",
            "data structure"
          ],
          "iri": "Entity-iop_rule-Mention-48"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "data structure",
            "logic",
            "rule",
            "learning concept"
          ],
          "iri": "Entity-iop_rule-Mention-49"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "discovery method",
            "rules",
            "rule",
            "data mining concept",
            "methodology"
          ],
          "iri": "Entity-iop_rule-Mention-50"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-3",
          "local_name": "IOP rule",
          "local_types": [
            "rule",
            "logical rule"
          ],
          "iri": "Entity-iop_rule-Mention-51"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "algorithm",
            "data structure",
            "rule",
            "data mining concept"
          ],
          "iri": "Entity-iop_rule-Mention-52"
        },
        {
          "reference": "Section-17-Paragraph-3-Sentence-2",
          "local_name": "IOP rules",
          "local_types": [
            "algorithm output",
            "rules",
            "mathematical rules",
            "data structure",
            "rule",
            "data mining concept",
            "IOP"
          ],
          "iri": "Entity-iop_rule-Mention-53"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "rules",
            "algorithm",
            "rule",
            "data mining concept",
            "data mining"
          ],
          "iri": "Entity-iop_rule-Mention-54"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-2",
          "local_name": "IOP rules",
          "local_types": [
            "guidelines",
            "rules",
            "framework"
          ],
          "iri": "Entity-iop_rule-Mention-55"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-1",
          "local_name": "IOP rules",
          "local_types": [
            "rule",
            "rules",
            "data structure",
            "knowledge representation"
          ],
          "iri": "Entity-iop_rule-Mention-56"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-3",
          "local_name": "the IOP rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-iop_rule-Mention-57"
        }
      ],
      "relevance": 0.7021484375
    },
    "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_": {
      "node_id": "the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_",
      "disambiguation_index": 0,
      "label": "the number of learnt rules with IOPSC in range of [0.1, 0.3)",
      "aliases": [
        "the number of learnt rules with IOPSC in range of [0.1, 0.3)"
      ],
      "types": [
        "data",
        "rules",
        "metric",
        "rule learning",
        "IOPSC"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The number of learnt rules with Inverse Open Path Shape Constraints (IOPSC) in the range of [0.1, 0.3) refers to the count of rules generated by the SHACLEARNER system that exhibit a specific quality measure, indicating their effectiveness in representing shape patterns within knowledge graphs, where the IOPSC value falls between 0.1 and 0.3.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-1",
          "local_name": "the number of learnt rules with IOPSC in range of [0.1, 0.3)",
          "local_types": [
            "data",
            "rules",
            "metric",
            "rule learning",
            "IOPSC"
          ],
          "iri": "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_-Mention-1"
        }
      ],
      "relevance": 0.7021484375
    },
    "Entity-pattern_from_massive_kg": {
      "node_id": "pattern_from_massive_kg",
      "disambiguation_index": 0,
      "label": "patterns from massive KGs",
      "aliases": [
        "patterns from massive KGs"
      ],
      "types": [
        "pattern",
        "knowledge graph"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'patterns from massive KGs' refers to the specific structural and logical patterns that can be extracted from large-scale knowledge graphs, which are utilized to define SHACL shapes for validating and enhancing the organization of graph data.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "patterns from massive KGs",
          "local_types": [
            "pattern",
            "knowledge graph"
          ],
          "iri": "Entity-pattern_from_massive_kg-Mention-1"
        }
      ],
      "relevance": 0.70068359375
    },
    "Entity-quality_and_quantity_of_learnt_rule": {
      "node_id": "quality_and_quantity_of_learnt_rule",
      "disambiguation_index": 0,
      "label": "quality and quantity of learnt rules",
      "aliases": [
        "quality and quantity of learnt rules"
      ],
      "types": [
        "quality",
        "quantity",
        "rules"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'quality and quantity of learnt rules' refers to the effectiveness and number of Inverse Open Path (IOP) rules generated by the SHACLEARNER algorithm, which are evaluated based on their structural features and performance in learning from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-1-Sentence-2",
          "local_name": "quality and quantity of learnt rules",
          "local_types": [
            "quality",
            "quantity",
            "rules"
          ],
          "iri": "Entity-quality_and_quantity_of_learnt_rule-Mention-1"
        }
      ],
      "relevance": 0.7001953125
    },
    "Entity-four_benchmark_kg": {
      "node_id": "four_benchmark_kg",
      "disambiguation_index": 0,
      "label": "four benchmark KGs",
      "aliases": [
        "Our four benchmark KGs",
        "four benchmark KGs"
      ],
      "types": [
        "knowledge graph",
        "benchmark"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'four benchmark KGs' refer to the three well-known knowledge graphs YAGO2s, Wikidata, and DBpedia, along with a small synthetic knowledge graph named Poker, which is used for evaluating the performance of the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-1",
          "local_name": "four benchmark KGs",
          "local_types": [
            "knowledge graph",
            "benchmark"
          ],
          "iri": "Entity-four_benchmark_kg-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-1",
          "local_name": "Our four benchmark KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-four_benchmark_kg-Mention-2"
        }
      ],
      "relevance": 0.69970703125
    },
    "Entity-search_space_(1)": {
      "node_id": "search_space_(1)",
      "disambiguation_index": 1,
      "label": "search space",
      "aliases": [
        "search space"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "In the context of the paper, 'search space' refers to the set of all possible Inverse Open Path (IOP) rules that can be generated and evaluated by the SHACLEARNER algorithm when learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-1-Sentence-1",
          "local_name": "search space",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-search_space_(1)-Mention-1"
        }
      ],
      "relevance": 0.69970703125
    },
    "Entity-oprl": {
      "node_id": "oprl",
      "disambiguation_index": 0,
      "label": "OPRL",
      "aliases": [
        "OPRL"
      ],
      "types": [
        "evaluation module",
        "rule learner",
        "knowledge graph completion method",
        "tool",
        "machine learning model",
        "method",
        "algorithm",
        "model",
        "theory",
        "learning system",
        "system",
        "rule type"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "OPRL refers to the open path rule learner, a machine learning model used for learning rules from knowledge graphs, which serves as the foundational algorithm that is adapted in the development of the SHACLEARNER method for mining Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-1",
          "local_name": "OPRL",
          "local_types": [
            "machine learning model",
            "rule learner",
            "method",
            "algorithm"
          ],
          "iri": "Entity-oprl-Mention-1"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-1",
          "local_name": "OPRL",
          "local_types": [
            "machine learning model",
            "algorithm",
            "rule learner",
            "model"
          ],
          "iri": "Entity-oprl-Mention-2"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-2",
          "local_name": "OPRL",
          "local_types": [
            "theory",
            "system",
            "algorithm"
          ],
          "iri": "Entity-oprl-Mention-3"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-3",
          "local_name": "OPRL",
          "local_types": [
            "learning system",
            "algorithm",
            "tool"
          ],
          "iri": "Entity-oprl-Mention-4"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-4",
          "local_name": "OPRL",
          "local_types": [
            "evaluation module",
            "system",
            "algorithm"
          ],
          "iri": "Entity-oprl-Mention-5"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-1",
          "local_name": "OPRL",
          "local_types": [
            "knowledge graph completion method",
            "method",
            "rule type",
            "algorithm"
          ],
          "iri": "Entity-oprl-Mention-6"
        }
      ],
      "relevance": 0.69921875
    },
    "Entity-the_other_kg": {
      "node_id": "the_other_kg",
      "disambiguation_index": 0,
      "label": "the other KGs",
      "aliases": [
        "the other KGs"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'the other KGs' refers to knowledge graphs other than YAGO2, specifically including DBpedia and Wikidata, which are used in the context of evaluating the performance of the SHACLEARNER method for learning shape constraints.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-6-Sentence-3",
          "local_name": "the other KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-the_other_kg-Mention-1"
        }
      ],
      "relevance": 0.69921875
    },
    "Entity-interaction_between_inference_rule_and_shacl_shape": {
      "node_id": "interaction_between_inference_rule_and_shacl_shape",
      "disambiguation_index": 0,
      "label": "interaction between inference rules and SHACL shapes",
      "aliases": [
        "interaction between inference rules and SHACL shapes",
        "the interaction between inference rules and SHACL shapes"
      ],
      "types": [
        "inference rule",
        "SHACL shape",
        "interaction"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The interaction between inference rules and SHACL shapes refers to a proposed framework that aims to validate how inference rules can affect the compliance of shapes defined in the Shapes Constraint Language (SHACL) when applied to knowledge graphs (KGs).",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "interaction between inference rules and SHACL shapes",
          "local_types": [
            "interaction"
          ],
          "iri": "Entity-interaction_between_inference_rule_and_shacl_shape-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "the interaction between inference rules and SHACL shapes",
          "local_types": [
            "interaction",
            "inference rule",
            "SHACL shape"
          ],
          "iri": "Entity-interaction_between_inference_rule_and_shacl_shape-Mention-2"
        }
      ],
      "relevance": 0.69873046875
    },
    "Entity-discovery_of_shape": {
      "node_id": "discovery_of_shape",
      "disambiguation_index": 0,
      "label": "discovery of shapes",
      "aliases": [
        "the discovery of shapes",
        "discovery of shapes"
      ],
      "types": [
        "discovery",
        "process",
        "shape"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'discovery of shapes' refers to the process of identifying and defining structural patterns within knowledge graphs using the Shapes Constraint Language (SHACL), particularly through the application of Inverse Open Path rules to learn high-quality shapes directly from the graph data.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "discovery of shapes",
          "local_types": [
            "process"
          ],
          "iri": "Entity-discovery_of_shape-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "the discovery of shapes",
          "local_types": [
            "discovery",
            "shape"
          ],
          "iri": "Entity-discovery_of_shape-Mention-2"
        }
      ],
      "relevance": 0.697265625
    },
    "Entity-this_paper": {
      "node_id": "this_paper",
      "disambiguation_index": 0,
      "label": "this paper",
      "aliases": [
        "this paper",
        "This paper"
      ],
      "types": [
        "document",
        "paper"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "This paper presents a system called SHACLEARNER that focuses on learning paths as the least constrained shapes in knowledge graphs, utilizing a new formalism known as Inverse Open Path rules to mine and construct more complex shapes such as trees.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-1",
          "local_name": "this paper",
          "local_types": [
            "document"
          ],
          "iri": "Entity-this_paper-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-1",
          "local_name": "this paper",
          "local_types": [
            "document"
          ],
          "iri": "Entity-this_paper-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "this paper",
          "local_types": [
            "paper"
          ],
          "iri": "Entity-this_paper-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "This paper",
          "local_types": [
            "document",
            "paper"
          ],
          "iri": "Entity-this_paper-Mention-4"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-3",
          "local_name": "this paper",
          "local_types": [
            "document",
            "paper"
          ],
          "iri": "Entity-this_paper-Mention-5"
        }
      ],
      "relevance": 0.697265625
    },
    "Entity-small_poker_kg": {
      "node_id": "small_poker_kg",
      "disambiguation_index": 0,
      "label": "small Poker KG",
      "aliases": [
        "the small Poker KG",
        "small Poker KG"
      ],
      "types": [
        "knowledge graph",
        "dataset"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The small Poker KG refers to a compact knowledge graph specifically utilized in experiments for the SHACLEARNER system, allowing for efficient learning of IOP rules without the need for sampling or heuristic pruning.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-1",
          "local_name": "small Poker KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-small_poker_kg-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-1",
          "local_name": "the small Poker KG",
          "local_types": [
            "knowledge graph",
            "dataset"
          ],
          "iri": "Entity-small_poker_kg-Mention-2"
        }
      ],
      "relevance": 0.69677734375
    },
    "Entity-knowledge_graph__kg_": {
      "node_id": "knowledge_graph__kg_",
      "disambiguation_index": 0,
      "label": "Knowledge Graphs (KGs)",
      "aliases": [
        "Knowledge Graphs (KGs)"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Knowledge Graphs (KGs) are large, data-first graph databases that organize and represent knowledge in a structured format, enabling the integration and retrieval of information through weak inference rules and weakly-constraining data schemes.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-1",
          "local_name": "Knowledge Graphs (KGs)",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-knowledge_graph__kg_-Mention-1"
        }
      ],
      "relevance": 0.69580078125
    },
    "Entity-entity_(3)": {
      "node_id": "entity_(3)",
      "disambiguation_index": 3,
      "label": "entities",
      "aliases": [
        "entities"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of this paper, 'entities' refers to the individual items or nodes within a knowledge graph (KG) that can be described, validated, and enriched through the application of learned SHACL shapes and Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-1",
          "local_name": "entities",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-entity_(3)-Mention-1"
        }
      ],
      "relevance": 0.69482421875
    },
    "Entity-highest_quality_rule": {
      "node_id": "highest_quality_rule",
      "disambiguation_index": 0,
      "label": "highest quality rules",
      "aliases": [
        "highest quality rules"
      ],
      "types": [
        "rule",
        "rules",
        "quality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'highest quality rules' refers to the most reliable and effective rules identified through the SHACLEARNER method, characterized by a high Inverse Open Path Shape Confidence (IOPSC) score, which are prioritized for retention and application in knowledge graph management.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-5-Sentence-4",
          "local_name": "highest quality rules",
          "local_types": [
            "rule",
            "rules",
            "quality"
          ],
          "iri": "Entity-highest_quality_rule-Mention-1"
        }
      ],
      "relevance": 0.6943359375
    },
    "Entity-iop_rule_and_tree": {
      "node_id": "iop_rule_and_tree",
      "disambiguation_index": 0,
      "label": "IOP rules and trees",
      "aliases": [
        "IOP rules and trees"
      ],
      "types": [
        "tree",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "IOP rules and trees refer to a formalism for expressing and learning shape constraints in knowledge graphs, where IOP rules are predicate logic constructs that define paths over connected entities, and trees represent more complex structural patterns derived from these rules, enhancing the expressivity and validation capabilities of the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "IOP rules and trees",
          "local_types": [
            "tree",
            "rule"
          ],
          "iri": "Entity-iop_rule_and_tree-Mention-1"
        }
      ],
      "relevance": 0.69287109375
    },
    "Entity-shaclearner_algorithm": {
      "node_id": "shaclearner_algorithm",
      "disambiguation_index": 0,
      "label": "SHACLearner algorithm",
      "aliases": [
        "SHACLearner algorithm"
      ],
      "types": [
        "algorithm"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The SHACLearner algorithm is a novel method designed to learn SHACL shapes from knowledge graphs, enabling the extraction of informative and intuitive shape constraints that can validate and enhance the structure of large, schema-free knowledge bases.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-5-Sentence-2",
          "local_name": "SHACLearner algorithm",
          "local_types": [
            "algorithm"
          ],
          "iri": "Entity-shaclearner_algorithm-Mention-1"
        }
      ],
      "relevance": 0.6923828125
    },
    "Entity-the_kg_data": {
      "node_id": "the_kg_data",
      "disambiguation_index": 0,
      "label": "the KG data",
      "aliases": [
        "the KG data"
      ],
      "types": [
        "data"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The KG data refers to the information and relationships represented within knowledge graphs, which are structured as large graph databases containing entities and their interconnections, used for deriving rules and insights in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-5",
          "local_name": "the KG data",
          "local_types": [
            "data"
          ],
          "iri": "Entity-the_kg_data-Mention-1"
        }
      ],
      "relevance": 0.69140625
    },
    "Entity-method": {
      "node_id": "method",
      "disambiguation_index": 0,
      "label": "method",
      "aliases": [
        "method",
        "methods"
      ],
      "types": [
        "approach",
        "method",
        "technique"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'method' refers to a proposed approach for mining Inverse Open Path rules from knowledge graphs, which serve as building blocks for defining shapes that can be used in the context of the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-4",
          "local_name": "method",
          "local_types": [
            "approach",
            "method",
            "technique"
          ],
          "iri": "Entity-method-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-3",
          "local_name": "methods",
          "local_types": [
            "technique",
            "method",
            "approach"
          ],
          "iri": "Entity-method-Mention-2"
        },
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "method",
          "local_types": [
            "approach",
            "technique"
          ],
          "iri": "Entity-method-Mention-3"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-2",
          "local_name": "method",
          "local_types": [
            "approach",
            "technique"
          ],
          "iri": "Entity-method-Mention-4"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-5",
          "local_name": "method",
          "local_types": [
            "technique",
            "approach"
          ],
          "iri": "Entity-method-Mention-5"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-2",
          "local_name": "method",
          "local_types": [
            "technique",
            "approach"
          ],
          "iri": "Entity-method-Mention-6"
        }
      ],
      "relevance": 0.689453125
    },
    "Entity-learnt_rule": {
      "node_id": "learnt_rule",
      "disambiguation_index": 0,
      "label": "learnt rules",
      "aliases": [
        "learnt rules"
      ],
      "types": [
        "output",
        "rules",
        "knowledge representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'learnt rules' refer to the specific shape patterns derived from knowledge graphs using the SHACLEARNER method, which are evaluated for their quality and quantity in the context of learning IOP rules.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-1-Sentence-2",
          "local_name": "learnt rules",
          "local_types": [
            "output",
            "rules",
            "knowledge representation"
          ],
          "iri": "Entity-learnt_rule-Mention-1"
        }
      ],
      "relevance": 0.689453125
    },
    "Entity-the_number_of_tree_for_each_kg": {
      "node_id": "the_number_of_tree_for_each_kg",
      "disambiguation_index": 0,
      "label": "the number of trees for each KG",
      "aliases": [
        "the number of trees for each KG"
      ],
      "types": [
        "knowledge graph",
        "quantity",
        "KG",
        "count",
        "tree"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The number of trees for each KG refers to the count of distinct target predicates in a knowledge graph for which at least one Inverse Open Path (IOP) rule has been identified, indicating the structural complexity and diversity of the shapes that can be derived from the graph.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-1-Sentence-3",
          "local_name": "the number of trees for each KG",
          "local_types": [
            "knowledge graph",
            "quantity",
            "KG",
            "count",
            "tree"
          ],
          "iri": "Entity-the_number_of_tree_for_each_kg-Mention-1"
        }
      ],
      "relevance": 0.68896484375
    },
    "Entity-three_massive_real-world_benchmark_kg": {
      "node_id": "three_massive_real-world_benchmark_kg",
      "disambiguation_index": 0,
      "label": "three massive real-world benchmark KGs",
      "aliases": [
        "three massive real-world benchmark KGs"
      ],
      "types": [
        "knowledge graph",
        "benchmark"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'three massive real-world benchmark KGs' refers to the large-scale knowledge graphs Yago, Wikidata, and DBpedia, which are utilized in the paper to evaluate the SHACLEARNER method for learning SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-1",
          "local_name": "three massive real-world benchmark KGs",
          "local_types": [
            "knowledge graph",
            "benchmark"
          ],
          "iri": "Entity-three_massive_real-world_benchmark_kg-Mention-1"
        }
      ],
      "relevance": 0.68798828125
    },
    "Entity-iopsc_interval": {
      "node_id": "iopsc_interval",
      "disambiguation_index": 0,
      "label": "IOPSC intervals",
      "aliases": [
        "IOPSC intervals"
      ],
      "types": [
        "interval",
        "data categorization",
        "data range"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "IOPSC intervals refer to the ranges of Inverse Open Path Shape Constraints that categorize the quality of rules learned by the SHACLEARNER algorithm from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "IOPSC intervals",
          "local_types": [
            "interval",
            "data categorization",
            "data range"
          ],
          "iri": "Entity-iopsc_interval-Mention-1"
        }
      ],
      "relevance": 0.6875
    },
    "Entity-the_shape_we_can_discover": {
      "node_id": "the_shape_we_can_discover",
      "disambiguation_index": 0,
      "label": "the shapes we can discover",
      "aliases": [
        "the shapes we can discover"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The shapes we can discover refer to the various structural patterns and constraints that can be learned and expressed using the Shapes Constraint Language (SHACL) from knowledge graphs, particularly through the application of Inverse Open Path rules to enhance the validation and interpretation of graph data.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-5-Sentence-1",
          "local_name": "the shapes we can discover",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-the_shape_we_can_discover-Mention-1"
        }
      ],
      "relevance": 0.6875
    },
    "Entity-shacl_tree": {
      "node_id": "shacl_tree",
      "disambiguation_index": 0,
      "label": "SHACL trees",
      "aliases": [
        "SHACL trees"
      ],
      "types": [
        "graph structure",
        "SHACL",
        "concept",
        "data structure",
        "tree",
        "semantic web"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "SHACL trees are structured representations derived from annotated Inverse Open Path rules that express constraints on knowledge graphs, serving as a means to validate and document the structure of the graph data.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-1",
          "local_name": "SHACL trees",
          "local_types": [
            "graph structure",
            "SHACL",
            "concept",
            "data structure",
            "tree",
            "semantic web"
          ],
          "iri": "Entity-shacl_tree-Mention-1"
        }
      ],
      "relevance": 0.6865234375
    },
    "Entity-a_system_(1)": {
      "node_id": "a_system_(1)",
      "disambiguation_index": 1,
      "label": "a system",
      "aliases": [
        "a system"
      ],
      "types": [
        "system"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "SHACLEARNER is a system designed to mine shapes from knowledge graph data using a formalism of Inverse Open Path rules, enabling the discovery of complex tree shapes and the application of quality measures to validate these shapes.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-1",
          "local_name": "a system",
          "local_types": [
            "system"
          ],
          "iri": "Entity-a_system_(1)-Mention-1"
        }
      ],
      "relevance": 0.6845703125
    },
    "Entity-problem": {
      "node_id": "problem",
      "disambiguation_index": 0,
      "label": "problem",
      "aliases": [
        "problem"
      ],
      "types": [
        "issue",
        "challenge"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'problem' refers to the complexity and size of the knowledge graph (KG) that needs to be managed and sampled for effective learning of Inverse Open Path (IOP) rules.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-1",
          "local_name": "problem",
          "local_types": [
            "issue",
            "challenge"
          ],
          "iri": "Entity-problem-Mention-1"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-4",
          "local_name": "problem",
          "local_types": [
            "issue",
            "challenge"
          ],
          "iri": "Entity-problem-Mention-2"
        }
      ],
      "relevance": 0.68408203125
    },
    "Entity-iop-shaped_constraint": {
      "node_id": "iop-shaped_constraint",
      "disambiguation_index": 0,
      "label": "IOP-shaped constraint",
      "aliases": [
        "IOP-shaped constraint",
        "the basic IOP-shaped constraint"
      ],
      "types": [
        "algorithm parameter",
        "constraint",
        "mathematical concept",
        "IOP"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The IOP-shaped constraint refers to a foundational rule structure derived from Inverse Open Path rules that defines specific shape patterns in knowledge graphs, which can be further refined or constrained to enhance the quality and interpretability of tree structures formed from these rules.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-2",
          "local_name": "IOP-shaped constraint",
          "local_types": [
            "algorithm parameter",
            "constraint",
            "mathematical concept"
          ],
          "iri": "Entity-iop-shaped_constraint-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-3-Sentence-2",
          "local_name": "the basic IOP-shaped constraint",
          "local_types": [
            "constraint",
            "IOP"
          ],
          "iri": "Entity-iop-shaped_constraint-Mention-2"
        }
      ],
      "relevance": 0.68408203125
    },
    "Entity-to_validate_kg": {
      "node_id": "to_validate_kg",
      "disambiguation_index": 0,
      "label": "to validate KGs",
      "aliases": [
        "to validate KGs"
      ],
      "types": [
        "validation"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "To validate KGs refers to the process of using SHACL shapes to ensure that the data within knowledge graphs adheres to specified constraints and patterns, thereby enhancing data integrity and supporting tasks such as data entry and verification.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-1",
          "local_name": "to validate KGs",
          "local_types": [
            "validation"
          ],
          "iri": "Entity-to_validate_kg-Mention-1"
        }
      ],
      "relevance": 0.68408203125
    },
    "Entity-learning_a_novel_kind_of_rule": {
      "node_id": "learning_a_novel_kind_of_rule",
      "disambiguation_index": 0,
      "label": "learning a novel kind of rules",
      "aliases": [
        "learning a novel kind of rules"
      ],
      "types": [
        "learning",
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'learning a novel kind of rules' refers to the process of deriving Inverse Open Path (IOP) rules, which are specific logical constructs used to define and validate shapes in knowledge graphs, particularly in the context of the SHACL learning problem.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-3",
          "local_name": "learning a novel kind of rules",
          "local_types": [
            "learning",
            "rules"
          ],
          "iri": "Entity-learning_a_novel_kind_of_rule-Mention-1"
        }
      ],
      "relevance": 0.68408203125
    },
    "Entity-ideal_rule_learner__shaclearner__-s-h__": {
      "node_id": "ideal_rule_learner__shaclearner__-s-h__",
      "disambiguation_index": 0,
      "label": "ideal rule learner (SHACLEARNER (-S-H))",
      "aliases": [
        "the ideal rule learner (SHACLEARNER (-S-H))",
        "ideal rule learner (SHACLEARNER (-S-H))"
      ],
      "types": [
        "learner",
        "algorithm",
        "system"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The ideal rule learner (SHACLEARNER (-S-H)) is a complete and inefficient variant of the SHACLEARNER algorithm that generates and evaluates all possible Inverse Open Path (IOP) rules without employing sampling or heuristic pruning, making it suitable for exhaustive rule learning in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "ideal rule learner (SHACLEARNER (-S-H))",
          "local_types": [
            "system",
            "algorithm"
          ],
          "iri": "Entity-ideal_rule_learner__shaclearner__-s-h__-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-2",
          "local_name": "ideal rule learner (SHACLEARNER (-S-H))",
          "local_types": [
            "learner",
            "algorithm"
          ],
          "iri": "Entity-ideal_rule_learner__shaclearner__-s-h__-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "the ideal rule learner (SHACLEARNER (-S-H))",
          "local_types": [
            "learner",
            "system",
            "algorithm"
          ],
          "iri": "Entity-ideal_rule_learner__shaclearner__-s-h__-Mention-3"
        }
      ],
      "relevance": 0.6826171875
    },
    "Entity-rule_pattern": {
      "node_id": "rule_pattern",
      "disambiguation_index": 0,
      "label": "rule patterns",
      "aliases": [
        "rule patterns"
      ],
      "types": [
        "pattern",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Rule patterns refer to complex shapes in knowledge graphs that are constructed using Inverse Open Path (IOP) rules, which serve as foundational elements for defining and augmenting simple shape patterns with additional constraints.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-2",
          "local_name": "rule patterns",
          "local_types": [
            "pattern",
            "rule"
          ],
          "iri": "Entity-rule_pattern-Mention-1"
        }
      ],
      "relevance": 0.681640625
    },
    "Entity-our_work": {
      "node_id": "our_work",
      "disambiguation_index": 0,
      "label": "our work",
      "aliases": [
        "our work"
      ],
      "types": [
        "research"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In our work, we propose a method that utilizes the knowledge graph (KG) directly to discover SHACL shapes, eliminating the need for external modeling artifacts.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-3",
          "local_name": "our work",
          "local_types": [
            "research"
          ],
          "iri": "Entity-our_work-Mention-1"
        }
      ],
      "relevance": 0.6806640625
    },
    "Entity-complete_kg": {
      "node_id": "complete_kg",
      "disambiguation_index": 0,
      "label": "complete KG",
      "aliases": [
        "the complete KG",
        "complete KG"
      ],
      "types": [
        "knowledge graph",
        "KG",
        "complete"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'complete KG' refers to the entire knowledge graph utilized by the SHACLEARNER system for learning rules about all target predicates without any sampling or heuristic pruning.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-6-Sentence-2",
          "local_name": "complete KG",
          "local_types": [
            "knowledge graph",
            "KG"
          ],
          "iri": "Entity-complete_kg-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-2",
          "local_name": "complete KG",
          "local_types": [
            "knowledge graph",
            "complete"
          ],
          "iri": "Entity-complete_kg-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-2",
          "local_name": "the complete KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-complete_kg-Mention-3"
        }
      ],
      "relevance": 0.6796875
    },
    "Entity-shacl_learning_method": {
      "node_id": "shacl_learning_method",
      "disambiguation_index": 0,
      "label": "SHACL learning method",
      "aliases": [
        "SHACL learning method",
        "SHACL learning"
      ],
      "types": [
        "learning",
        "learning technique",
        "method",
        "learning method",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The SHACL learning method refers to a systematic approach for discovering and constructing SHACL shapes from knowledge graphs using Inverse Open Path rules and an embedding-based learning technique.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "SHACL learning method",
          "local_types": [
            "method",
            "learning method",
            "methodology",
            "learning technique"
          ],
          "iri": "Entity-shacl_learning_method-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-1",
          "local_name": "SHACL learning",
          "local_types": [
            "learning"
          ],
          "iri": "Entity-shacl_learning_method-Mention-2"
        }
      ],
      "relevance": 0.67919921875
    },
    "Entity-iop": {
      "node_id": "iop",
      "disambiguation_index": 0,
      "label": "IOP",
      "aliases": [
        "IOP version",
        "IOP",
        "IOPS"
      ],
      "types": [
        "rule learner",
        "predicate",
        "method",
        "operation",
        "abbreviation",
        "concept",
        "entity",
        "rule",
        "acronym",
        "performance metric",
        "logical framework",
        "logical rule",
        "theoretical concept"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "IOP refers to Inverse Open Path rules, a predicate logic formalism used to express specific shapes as paths over connected entities in knowledge graphs, which can be augmented with constraints and serve as foundational elements for more complex shape patterns.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-3",
          "local_name": "IOP",
          "local_types": [
            "method",
            "rule"
          ],
          "iri": "Entity-iop-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "predicate",
            "concept",
            "rule",
            "acronym"
          ],
          "iri": "Entity-iop-Mention-2"
        },
        {
          "reference": "Section-1-Paragraph-2-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "abbreviation",
            "concept"
          ],
          "iri": "Entity-iop-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-5"
        },
        {
          "reference": "Section-6-Paragraph-3-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-2",
          "local_name": "IOP",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-5-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "operation",
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-8"
        },
        {
          "reference": "Section-6-Paragraph-5-Sentence-2",
          "local_name": "IOP",
          "local_types": [
            "entity",
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-9"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-10"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-12"
        },
        {
          "reference": "Section-6-Paragraph-10-Sentence-2",
          "local_name": "IOP",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-13"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-4",
          "local_name": "IOP",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-iop-Mention-14"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-3",
          "local_name": "IOP",
          "local_types": [
            "rule",
            "concept"
          ],
          "iri": "Entity-iop-Mention-15"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-7",
          "local_name": "IOP",
          "local_types": [
            "rule",
            "predicate"
          ],
          "iri": "Entity-iop-Mention-16"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-6",
          "local_name": "IOPS",
          "local_types": [
            "performance metric",
            "predicate",
            "rule",
            "theoretical concept"
          ],
          "iri": "Entity-iop-Mention-17"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-4",
          "local_name": "IOP",
          "local_types": [
            "method",
            "rule learner"
          ],
          "iri": "Entity-iop-Mention-18"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "method",
            "rule"
          ],
          "iri": "Entity-iop-Mention-19"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "method",
            "rule"
          ],
          "iri": "Entity-iop-Mention-20"
        },
        {
          "reference": "Section-17-Paragraph-3-Sentence-2",
          "local_name": "IOP",
          "local_types": [
            "method",
            "rule"
          ],
          "iri": "Entity-iop-Mention-21"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-1",
          "local_name": "IOP",
          "local_types": [
            "method",
            "rule"
          ],
          "iri": "Entity-iop-Mention-22"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-1",
          "local_name": "IOP version",
          "local_types": [
            "predicate",
            "rule",
            "theoretical concept",
            "logical rule"
          ],
          "iri": "Entity-iop-Mention-23"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "IOP version",
          "local_types": [
            "rule",
            "logical framework"
          ],
          "iri": "Entity-iop-Mention-24"
        }
      ],
      "relevance": 0.6787109375
    },
    "Entity-full_kg": {
      "node_id": "full_kg",
      "disambiguation_index": 0,
      "label": "full KG",
      "aliases": [
        "full KG"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'full KG' refers to the complete knowledge graph that encompasses all entities and relationships within a specific dataset, which is used for evaluating the quality measures of rules in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-3",
          "local_name": "full KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-full_kg-Mention-1"
        }
      ],
      "relevance": 0.6787109375
    },
    "Entity-p3__z1__z2_": {
      "node_id": "p3__z1__z2_",
      "disambiguation_index": 0,
      "label": "P3(z1, z2)",
      "aliases": [
        "P3(z1, z2)"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "P3(z1, z2) is a predicate in the context of inverse open path rules (IOP) that represents a relationship between two entities z1 and z2 within a knowledge graph, contributing to the validation of shapes defined by the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "P3(z1, z2)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p3__z1__z2_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "P3(z1, z2)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p3__z1__z2_-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "P3(z1, z2)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p3__z1__z2_-Mention-3"
        }
      ],
      "relevance": 0.67822265625
    },
    "Entity-inverse_open_path__iop__rule": {
      "node_id": "inverse_open_path__iop__rule",
      "disambiguation_index": 0,
      "label": "inverse open path (IOP) rules",
      "aliases": [
        "inverse open path (IOP) rules",
        "Inverse Open Path (IOP) rules",
        "IOP rules",
        "inverse open path rules (IOP)",
        "these rules",
        "Inverse Open Path rules (IOP)",
        "the IOP rules"
      ],
      "types": [
        "method",
        "concept",
        "rules",
        "formalism",
        "data structure",
        "predicate logic",
        "logic",
        "theoretical framework",
        "logical rule",
        "learning method",
        "rule",
        "methodology",
        "IOP",
        "theoretical concept"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Inverse open path (IOP) rules are a formalism in predicate logic that represent specific shapes as paths over connected entities in knowledge graphs, serving as foundational elements for constructing more complex shapes and incorporating cardinality constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-3",
          "local_name": "inverse open path (IOP) rules",
          "local_types": [
            "concept",
            "rules",
            "formalism",
            "rule",
            "methodology",
            "logical rule"
          ],
          "iri": "Entity-inverse_open_path__iop__rule-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-2-Sentence-1",
          "local_name": "Inverse Open Path (IOP) rules",
          "local_types": [
            "concept",
            "rules",
            "formalism",
            "logic",
            "predicate logic",
            "theoretical framework",
            "rule"
          ],
          "iri": "Entity-inverse_open_path__iop__rule-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-1",
          "local_name": "inverse open path rules (IOP)",
          "local_types": [
            "concept",
            "rule",
            "theoretical concept",
            "logical rule"
          ],
          "iri": "Entity-inverse_open_path__iop__rule-Mention-3"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-3",
          "local_name": "Inverse Open Path rules (IOP)",
          "local_types": [
            "method",
            "concept",
            "data structure",
            "rules",
            "learning method",
            "rule",
            "IOP"
          ],
          "iri": "Entity-inverse_open_path__iop__rule-Mention-4"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-3",
          "local_name": "these rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-inverse_open_path__iop__rule-Mention-5"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-3",
          "local_name": "IOP rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-inverse_open_path__iop__rule-Mention-6"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-1",
          "local_name": "the IOP rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-inverse_open_path__iop__rule-Mention-7"
        }
      ],
      "relevance": 0.67626953125
    },
    "Entity-rule_quality_measure": {
      "node_id": "rule_quality_measure",
      "disambiguation_index": 0,
      "label": "rule quality measures",
      "aliases": [
        "rule quality measures"
      ],
      "types": [
        "evaluation criterion",
        "measure",
        "measurement",
        "evaluation metric",
        "quality",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Rule quality measures refer to specific metrics, namely IOP Standard Confidence, IOP Head Coverage, and Cardinality, that evaluate the effectiveness and reliability of Inverse Open Path rules in the context of learning SHACL shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-4",
          "local_name": "rule quality measures",
          "local_types": [
            "evaluation criterion",
            "measure",
            "measurement",
            "evaluation metric",
            "quality",
            "metric"
          ],
          "iri": "Entity-rule_quality_measure-Mention-1"
        }
      ],
      "relevance": 0.67578125
    },
    "Entity-p2_": {
      "node_id": "p2_",
      "disambiguation_index": 0,
      "label": "P2'",
      "aliases": [
        "P2'"
      ],
      "types": [
        "function",
        "predicate",
        "logical symbol",
        "logical expression",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P2' refers to a predicate in the context of inverse open path (IOP) rules, which are used to express relationships between entities in knowledge graphs as part of the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "P2'",
          "local_types": [
            "predicate",
            "logical symbol"
          ],
          "iri": "Entity-p2_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "P2'",
          "local_types": [
            "function",
            "predicate",
            "logical expression",
            "mathematical notation"
          ],
          "iri": "Entity-p2_-Mention-2"
        }
      ],
      "relevance": 0.67529296875
    },
    "Entity-quality_rule": {
      "node_id": "quality_rule",
      "disambiguation_index": 0,
      "label": "quality rules",
      "aliases": [
        "quality rules"
      ],
      "types": [
        "criteria",
        "standards",
        "rule set",
        "rule",
        "quality",
        "data mining concept",
        "data quality"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Quality rules refer to the high-quality rules mined from knowledge graphs, evaluated based on specific metrics such as Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC), which indicate the reliability and relevance of the rules in the context of knowledge graph learning.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-1",
          "local_name": "quality rules",
          "local_types": [
            "rule",
            "quality",
            "data mining concept"
          ],
          "iri": "Entity-quality_rule-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-2",
          "local_name": "quality rules",
          "local_types": [
            "criteria",
            "standards",
            "rule",
            "data quality"
          ],
          "iri": "Entity-quality_rule-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-1",
          "local_name": "quality rules",
          "local_types": [
            "data quality",
            "rule set"
          ],
          "iri": "Entity-quality_rule-Mention-3"
        }
      ],
      "relevance": 0.67529296875
    },
    "Entity-high-quality_rule": {
      "node_id": "high-quality_rule",
      "disambiguation_index": 0,
      "label": "high-quality rules",
      "aliases": [
        "high-quality rule",
        "high-quality rules"
      ],
      "types": [
        "criteria",
        "knowledge representation",
        "rules",
        "rule",
        "quality",
        "data quality standard"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "High-quality rules refer to the well-defined and effective shape patterns derived from knowledge graphs using Inverse Open Path rules, which are evaluated based on formal quality measures to ensure their reliability and applicability in validating and structuring knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-3",
          "local_name": "high-quality rules",
          "local_types": [
            "rule",
            "knowledge representation"
          ],
          "iri": "Entity-high-quality_rule-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-5",
          "local_name": "high-quality rule",
          "local_types": [
            "rule",
            "data quality standard",
            "knowledge representation"
          ],
          "iri": "Entity-high-quality_rule-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-3",
          "local_name": "high-quality rules",
          "local_types": [
            "criteria",
            "rules",
            "rule",
            "quality"
          ],
          "iri": "Entity-high-quality_rule-Mention-3"
        }
      ],
      "relevance": 0.6748046875
    },
    "Entity-mine_such_rule_from_a_kg": {
      "node_id": "mine_such_rule_from_a_kg",
      "disambiguation_index": 0,
      "label": "mine such rules from a KG",
      "aliases": [
        "mine such rules from a KG"
      ],
      "types": [
        "action",
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'mine such rules from a KG' refers to the process of extracting Inverse Open Path rules from a knowledge graph, which are used to define shapes that can serve as foundational elements for more complex structures in the context of validating and characterizing the data within the graph.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-4",
          "local_name": "mine such rules from a KG",
          "local_types": [
            "action",
            "knowledge graph"
          ],
          "iri": "Entity-mine_such_rule_from_a_kg-Mention-1"
        }
      ],
      "relevance": 0.67138671875
    },
    "Entity-validating_the_quality_of_a_kg": {
      "node_id": "validating_the_quality_of_a_kg",
      "disambiguation_index": 0,
      "label": "validating the quality of a KG",
      "aliases": [
        "validating the quality of a KG"
      ],
      "types": [
        "purpose",
        "quality assessment"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Validating the quality of a KG refers to the process of assessing and ensuring that a knowledge graph adheres to defined constraints and standards, typically expressed through shapes in the Shapes Constraint Language (SHACL), which helps maintain the integrity and reliability of the data within the graph.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-2-Sentence-1",
          "local_name": "validating the quality of a KG",
          "local_types": [
            "purpose",
            "quality assessment"
          ],
          "iri": "Entity-validating_the_quality_of_a_kg-Mention-1"
        }
      ],
      "relevance": 0.669921875
    },
    "Entity-kg_itself": {
      "node_id": "kg_itself",
      "disambiguation_index": 0,
      "label": "KG itself",
      "aliases": [
        "KG itself"
      ],
      "types": [
        "KG"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "KG itself refers to the knowledge graph being analyzed and utilized in the research to discover shapes for SHACL without the need for external modeling artifacts.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-3",
          "local_name": "KG itself",
          "local_types": [
            "KG"
          ],
          "iri": "Entity-kg_itself-Mention-1"
        }
      ],
      "relevance": 0.6689453125
    },
    "Entity-shaclearner": {
      "node_id": "shaclearner",
      "disambiguation_index": 0,
      "label": "SHACLEARNER",
      "aliases": [
        "SHACLEARNER",
        "SHACLearner"
      ],
      "types": [
        "rule learner",
        "tool",
        "machine learning framework",
        "learning tool",
        "machine learning model",
        "learner",
        "method",
        "algorithm",
        "model",
        "computational method",
        "learning model",
        "theory",
        "benchmark",
        "software",
        "learning method",
        "learning system",
        "system",
        "evaluation method"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "SHACLEARNER is a novel learning method designed to extract high-quality shape constraints from knowledge graphs, adapted from an advanced embedding-based open path rule learner.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-5",
          "local_name": "SHACLEARNER",
          "local_types": [
            "learner",
            "method",
            "learning method",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-3-Sentence-1",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "method",
            "learner",
            "model",
            "algorithm",
            "learning method",
            "system"
          ],
          "iri": "Entity-shaclearner-Mention-2"
        },
        {
          "reference": "Section-1-Paragraph-3-Sentence-2",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "model",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-1",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "tool",
            "software"
          ],
          "iri": "Entity-shaclearner-Mention-4"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-6",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "algorithm",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-5"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-1",
          "local_name": "SHACLearner",
          "local_types": [
            "computational method",
            "algorithm",
            "tool",
            "model"
          ],
          "iri": "Entity-shaclearner-Mention-6"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-2",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "learner",
            "algorithm",
            "rule learner"
          ],
          "iri": "Entity-shaclearner-Mention-7"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "method",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-8"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-5",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "method",
            "algorithm",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-9"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-1",
          "local_name": "SHACLEARNER",
          "local_types": [
            "rule learner",
            "machine learning model",
            "learner",
            "algorithm",
            "model"
          ],
          "iri": "Entity-shaclearner-Mention-10"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-2",
          "local_name": "SHACLEARNER",
          "local_types": [
            "theory",
            "system",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-11"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-3",
          "local_name": "SHACLEARNER",
          "local_types": [
            "learning system",
            "algorithm",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-12"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-4",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "method",
            "algorithm",
            "evaluation method"
          ],
          "iri": "Entity-shaclearner-Mention-13"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-5",
          "local_name": "SHACLEARNER",
          "local_types": [
            "software",
            "tool",
            "system"
          ],
          "iri": "Entity-shaclearner-Mention-14"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-1",
          "local_name": "SHACLearner",
          "local_types": [
            "software",
            "system",
            "tool",
            "machine learning framework"
          ],
          "iri": "Entity-shaclearner-Mention-15"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-2",
          "local_name": "SHACLearner",
          "local_types": [
            "software",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-16"
        },
        {
          "reference": "Section-12-Paragraph-6-Sentence-1",
          "local_name": "SHACLearner",
          "local_types": [
            "software",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-17"
        },
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "SHACLearner",
          "local_types": [
            "software",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-18"
        },
        {
          "reference": "Section-12-Paragraph-6-Sentence-3",
          "local_name": "SHACLearner",
          "local_types": [
            "software",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-19"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-8",
          "local_name": "SHACLearner",
          "local_types": [
            "software",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-20"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-1",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "algorithm",
            "model"
          ],
          "iri": "Entity-shaclearner-Mention-21"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "SHACLEARNER",
          "local_types": [
            "model",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-22"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-1",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "system",
            "algorithm",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-23"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-2",
          "local_name": "SHACLEARNER",
          "local_types": [
            "learning model",
            "model",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-24"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-3",
          "local_name": "SHACLEARNER",
          "local_types": [
            "software",
            "algorithm",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-25"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-4",
          "local_name": "SHACLEARNER",
          "local_types": [
            "algorithm",
            "tool",
            "model"
          ],
          "iri": "Entity-shaclearner-Mention-26"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-5",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "algorithm",
            "learning model"
          ],
          "iri": "Entity-shaclearner-Mention-27"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-6",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "algorithm",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-28"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-6",
          "local_name": "SHACLEARNER",
          "local_types": [
            "tool",
            "method",
            "algorithm",
            "learning method",
            "system"
          ],
          "iri": "Entity-shaclearner-Mention-29"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-1",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "algorithm",
            "tool",
            "model"
          ],
          "iri": "Entity-shaclearner-Mention-30"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-1",
          "local_name": "SHACLEARNER",
          "local_types": [
            "tool",
            "machine learning model",
            "method",
            "algorithm",
            "system"
          ],
          "iri": "Entity-shaclearner-Mention-31"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-2",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "algorithm",
            "model"
          ],
          "iri": "Entity-shaclearner-Mention-32"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-3",
          "local_name": "SHACLEARNER",
          "local_types": [
            "model",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-33"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-1",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "learner",
            "algorithm",
            "model",
            "system"
          ],
          "iri": "Entity-shaclearner-Mention-34"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-2",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "algorithm",
            "model"
          ],
          "iri": "Entity-shaclearner-Mention-35"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-3",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "algorithm",
            "model"
          ],
          "iri": "Entity-shaclearner-Mention-36"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-6",
          "local_name": "SHACLEARNER",
          "local_types": [
            "software",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-37"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-5",
          "local_name": "SHACLEARNER",
          "local_types": [
            "algorithm",
            "model"
          ],
          "iri": "Entity-shaclearner-Mention-38"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-2",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "algorithm",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-39"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-40"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-4",
          "local_name": "SHACLEARNER",
          "local_types": [
            "learning model",
            "algorithm",
            "model"
          ],
          "iri": "Entity-shaclearner-Mention-41"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-1",
          "local_name": "SHACLEARNER",
          "local_types": [
            "tool",
            "machine learning model",
            "algorithm",
            "model",
            "system"
          ],
          "iri": "Entity-shaclearner-Mention-42"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-2",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "method",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-43"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-2",
          "local_name": "SHACLEARNER",
          "local_types": [
            "machine learning model",
            "learning model",
            "algorithm",
            "model",
            "system"
          ],
          "iri": "Entity-shaclearner-Mention-44"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-1",
          "local_name": "SHACLearner",
          "local_types": [
            "learning tool",
            "software",
            "algorithm",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-45"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-4",
          "local_name": "SHACLearner",
          "local_types": [
            "software",
            "algorithm",
            "benchmark",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-46"
        },
        {
          "reference": "Section-18-Paragraph-5-Sentence-1",
          "local_name": "SHACLearner",
          "local_types": [
            "software",
            "algorithm",
            "tool"
          ],
          "iri": "Entity-shaclearner-Mention-47"
        },
        {
          "reference": "Section-18-Paragraph-5-Sentence-2",
          "local_name": "SHACLearner",
          "local_types": [
            "software",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-48"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "SHACLEARNER",
          "local_types": [
            "system",
            "algorithm"
          ],
          "iri": "Entity-shaclearner-Mention-49"
        }
      ],
      "relevance": 0.66845703125
    },
    "Entity-iop_mining": {
      "node_id": "iop_mining",
      "disambiguation_index": 0,
      "label": "IOP mining",
      "aliases": [
        "IOP mining"
      ],
      "types": [
        "data mining process",
        "rule discovery"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "IOP mining refers to the process of discovering Inverse Open Path rules from knowledge graphs, which are used to define specific shape patterns for graph data and facilitate the construction of tree structures based on these rules.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "IOP mining",
          "local_types": [
            "data mining process",
            "rule discovery"
          ],
          "iri": "Entity-iop_mining-Mention-1"
        }
      ],
      "relevance": 0.66845703125
    },
    "Entity-each_rule_(1)": {
      "node_id": "each_rule_(1)",
      "disambiguation_index": 1,
      "label": "each rule",
      "aliases": [
        "each rule"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Each rule refers to the individual shape patterns defined by Inverse Open Path (IOP) rules, which express constraints on knowledge graph data and are evaluated based on their quality metrics such as Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC).",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-2",
          "local_name": "each rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-each_rule_(1)-Mention-1"
        }
      ],
      "relevance": 0.66845703125
    },
    "Entity-_e1__e2__e3__e4__e5_": {
      "node_id": "_e1__e2__e3__e4__e5_",
      "disambiguation_index": 0,
      "label": "{e1, e2, e3, e4, e5}",
      "aliases": [
        "{e1, e2, e3, e4, e5}"
      ],
      "types": [
        "entity set"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '{e1, e2, e3, e4, e5}' refers to a specific set of five entities in a knowledge graph that can be used to instantiate a variable in the context of inverse open path rules, which are formal rules used to derive SHACL shapes for validating graph data.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "{e1, e2, e3, e4, e5}",
          "local_types": [
            "entity set"
          ],
          "iri": "Entity-_e1__e2__e3__e4__e5_-Mention-1"
        }
      ],
      "relevance": 0.66748046875
    },
    "Entity-each_tree": {
      "node_id": "each_tree",
      "disambiguation_index": 0,
      "label": "each tree",
      "aliases": [
        "each tree"
      ],
      "types": [
        "tree"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'each tree' refers to a specific structure derived from annotated Inverse Open Path (IOP) rules that represents a hierarchical arrangement of predicates and entities in a knowledge graph, utilized for learning and validating shapes in the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-1",
          "local_name": "each tree",
          "local_types": [
            "tree"
          ],
          "iri": "Entity-each_tree-Mention-1"
        }
      ],
      "relevance": 0.666015625
    },
    "Entity-input_kg_(1)": {
      "node_id": "input_kg_(1)",
      "disambiguation_index": 1,
      "label": "input KG",
      "aliases": [
        "input KG"
      ],
      "types": [
        "knowledge graph",
        "input"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'input KG' refers to the complete knowledge graph utilized by the SHACLEARNER system for various components such as embedding learning, heuristic pruning, and evaluation without any sampling.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-1",
          "local_name": "input KG",
          "local_types": [
            "knowledge graph",
            "input"
          ],
          "iri": "Entity-input_kg_(1)-Mention-1"
        }
      ],
      "relevance": 0.666015625
    },
    "Entity-a_system_that_discovers_pattern_from_massive_kg": {
      "node_id": "a_system_that_discovers_pattern_from_massive_kg",
      "disambiguation_index": 0,
      "label": "a system that discovers patterns from massive KGs",
      "aliases": [
        "a system that discovers patterns from massive KGs"
      ],
      "types": [
        "system",
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'a system that discovers patterns from massive KGs' refers to a method or framework designed to automatically learn and extract structural patterns, specifically SHACL shapes, from large-scale knowledge graphs without relying on external models or constraints.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "a system that discovers patterns from massive KGs",
          "local_types": [
            "system",
            "method"
          ],
          "iri": "Entity-a_system_that_discovers_pattern_from_massive_kg-Mention-1"
        }
      ],
      "relevance": 0.66552734375
    },
    "Entity-line_8_of_algorithm_1": {
      "node_id": "line_8_of_algorithm_1",
      "disambiguation_index": 0,
      "label": "line 8 of Algorithm 1",
      "aliases": [
        "line 8 of Algorithm 1"
      ],
      "types": [
        "line",
        "algorithm"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Line 8 of Algorithm 1 refers to the specific step in the SHACLEARNER algorithm where a greedy search method is employed to aggregate Inverse Open Path (IOP) rules for constructing SHACL tree shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-1",
          "local_name": "line 8 of Algorithm 1",
          "local_types": [
            "line",
            "algorithm"
          ],
          "iri": "Entity-line_8_of_algorithm_1-Mention-1"
        }
      ],
      "relevance": 0.66455078125
    },
    "Entity-shacl_shape": {
      "node_id": "shacl_shape",
      "disambiguation_index": 0,
      "label": "SHACL shapes",
      "aliases": [
        "SHACL shape",
        "SHACL shapes"
      ],
      "types": [
        "validation",
        "format",
        "shape",
        "SHACL",
        "concept",
        "data structure",
        "validation framework",
        "framework",
        "model",
        "standard",
        "data validation",
        "structure",
        "semantic web technology",
        "shape language",
        "data modeling",
        "semantic web",
        "specification",
        "semantic web standard"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "SHACL shapes are a formal specification used in the SHACL (Shapes Constraint Language) framework to define constraints and validation rules for data structures in knowledge graphs, ensuring that the data adheres to specified formats and standards.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-4",
          "local_name": "SHACL shapes",
          "local_types": [
            "validation",
            "validation framework",
            "data structure",
            "shape"
          ],
          "iri": "Entity-shacl_shape-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-4",
          "local_name": "SHACL shapes",
          "local_types": [
            "validation framework",
            "data structure",
            "shape"
          ],
          "iri": "Entity-shacl_shape-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-7",
          "local_name": "SHACL shape",
          "local_types": [
            "SHACL",
            "data validation",
            "data structure",
            "shape"
          ],
          "iri": "Entity-shacl_shape-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-1",
          "local_name": "SHACL shapes",
          "local_types": [
            "shape",
            "concept",
            "data structure",
            "framework",
            "model",
            "data validation",
            "semantic web",
            "specification"
          ],
          "iri": "Entity-shacl_shape-Mention-4"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-1",
          "local_name": "SHACL shapes",
          "local_types": [
            "standard",
            "SHACL",
            "data structure",
            "shape"
          ],
          "iri": "Entity-shacl_shape-Mention-5"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "SHACL shapes",
          "local_types": [
            "data validation",
            "semantic web"
          ],
          "iri": "Entity-shacl_shape-Mention-6"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-1",
          "local_name": "SHACL shapes",
          "local_types": [
            "shape",
            "SHACL",
            "validation framework",
            "data structure",
            "data validation",
            "structure",
            "semantic web"
          ],
          "iri": "Entity-shacl_shape-Mention-7"
        },
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "SHACL shapes",
          "local_types": [
            "format",
            "shape",
            "validation framework",
            "SHACL",
            "data structure",
            "data validation",
            "structure",
            "semantic web",
            "semantic web standard"
          ],
          "iri": "Entity-shacl_shape-Mention-8"
        },
        {
          "reference": "Section-13-Paragraph-3-Sentence-1",
          "local_name": "SHACL shapes",
          "local_types": [
            "shape",
            "validation framework",
            "SHACL",
            "data structure",
            "data validation",
            "structure",
            "semantic web standard",
            "specification"
          ],
          "iri": "Entity-shacl_shape-Mention-9"
        },
        {
          "reference": "Section-13-Paragraph-4-Sentence-1",
          "local_name": "SHACL shapes",
          "local_types": [
            "shape",
            "validation framework",
            "SHACL",
            "data structure",
            "data validation",
            "structure",
            "data modeling",
            "semantic web standard"
          ],
          "iri": "Entity-shacl_shape-Mention-10"
        },
        {
          "reference": "Section-13-Paragraph-4-Sentence-2",
          "local_name": "SHACL shapes",
          "local_types": [
            "SHACL",
            "semantic web",
            "data structure",
            "shape"
          ],
          "iri": "Entity-shacl_shape-Mention-11"
        },
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "SHACL shapes",
          "local_types": [
            "shape",
            "SHACL",
            "validation framework",
            "data structure",
            "data validation",
            "structure",
            "semantic web technology",
            "validation"
          ],
          "iri": "Entity-shacl_shape-Mention-12"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "SHACL shapes",
          "local_types": [
            "shape",
            "validation framework",
            "SHACL",
            "data structure",
            "data validation",
            "structure",
            "shape language"
          ],
          "iri": "Entity-shacl_shape-Mention-13"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-1",
          "local_name": "SHACL shapes",
          "local_types": [
            "shape",
            "SHACL",
            "validation framework",
            "data structure",
            "data validation",
            "structure"
          ],
          "iri": "Entity-shacl_shape-Mention-14"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-1",
          "local_name": "SHACL shapes",
          "local_types": [
            "shape",
            "SHACL",
            "validation framework",
            "data structure",
            "semantic web"
          ],
          "iri": "Entity-shacl_shape-Mention-15"
        }
      ],
      "relevance": 0.6640625
    },
    "Entity-modified_shaclearner__-s-h_": {
      "node_id": "modified_shaclearner__-s-h_",
      "disambiguation_index": 0,
      "label": "modified SHACLEARNER (-S-H)",
      "aliases": [
        "modified SHACLEARNER (-S-H)",
        "ideal, modified SHACLEARNER (-S-H)"
      ],
      "types": [
        "learning model",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The modified SHACLEARNER (-S-H) is an ideal variant of the SHACLEARNER algorithm that performs a complete brute-force search for learning Inverse Open Path (IOP) rules from knowledge graphs without employing any sampling or heuristic pruning techniques.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "modified SHACLEARNER (-S-H)",
          "local_types": [
            "algorithm",
            "learning model"
          ],
          "iri": "Entity-modified_shaclearner__-s-h_-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "ideal, modified SHACLEARNER (-S-H)",
          "local_types": [
            "algorithm"
          ],
          "iri": "Entity-modified_shaclearner__-s-h_-Mention-2"
        }
      ],
      "relevance": 0.6640625
    },
    "Entity-pathfinding__k___pt__p__a__k_": {
      "node_id": "pathfinding__k___pt__p__a__k_",
      "disambiguation_index": 0,
      "label": "PathFinding(K', Pt, P, A, k)",
      "aliases": [
        "PathFinding(K', Pt, P, A, k)"
      ],
      "types": [
        "algorithm",
        "process"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "PathFinding(K', Pt, P, A, k) refers to an algorithmic process used in the SHACLEARNER method to identify and generate inverse open path rules from a sampled knowledge graph K', targeting a specific predicate Pt, utilizing embeddings P and A, and iterating up to a maximum rule length k.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-9",
          "local_name": "PathFinding(K', Pt, P, A, k)",
          "local_types": [
            "algorithm",
            "process"
          ],
          "iri": "Entity-pathfinding__k___pt__p__a__k_-Mention-1"
        }
      ],
      "relevance": 0.6640625
    },
    "Entity-these_measure": {
      "node_id": "these_measure",
      "disambiguation_index": 0,
      "label": "these measures",
      "aliases": [
        "these measures"
      ],
      "types": [
        "measures"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "These measures refer to the formal quality metrics IOPSC (Inverse Open Path Shape Confidence) and IOPHC (Inverse Open Path Shape Cardinality) that are used to evaluate the quality of candidate rules in the context of learning SHACL shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-4",
          "local_name": "these measures",
          "local_types": [
            "measures"
          ],
          "iri": "Entity-these_measure-Mention-1"
        }
      ],
      "relevance": 0.6640625
    },
    "Entity-number_of_quality_rule_mined": {
      "node_id": "number_of_quality_rule_mined",
      "disambiguation_index": 0,
      "label": "numbers of quality rules mined",
      "aliases": [
        "numbers of quality rules mined"
      ],
      "types": [
        "metric",
        "quality rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'numbers of quality rules mined' refers to the count of distinct high-quality Inverse Open Path (IOP) rules that have been successfully extracted from knowledge graphs using the SHACLEARNER method, which evaluates the effectiveness of rule-learning in terms of both quantity and quality.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-1",
          "local_name": "numbers of quality rules mined",
          "local_types": [
            "metric",
            "quality rule"
          ],
          "iri": "Entity-number_of_quality_rule_mined-Mention-1"
        }
      ],
      "relevance": 0.66259765625
    },
    "Entity-shaclearner__s_pruning_method": {
      "node_id": "shaclearner__s_pruning_method",
      "disambiguation_index": 0,
      "label": "SHACLEARNER\u2019s pruning methods",
      "aliases": [
        "SHACLEARNER\u2019s pruning methods"
      ],
      "types": [
        "method",
        "algorithm"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "SHACLEARNER\u2019s pruning methods refer to the techniques employed by the SHACLEARNER algorithm to reduce the search space for learning Inverse Open Path rules from knowledge graphs, specifically through prior sampling and heuristic pruning, which aim to enhance computational efficiency while maintaining the discovery of high-quality rules.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-5-Sentence-2",
          "local_name": "SHACLEARNER\u2019s pruning methods",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-shaclearner__s_pruning_method-Mention-1"
        }
      ],
      "relevance": 0.662109375
    },
    "Entity-the_third_rule": {
      "node_id": "the_third_rule",
      "disambiguation_index": 0,
      "label": "the third rule",
      "aliases": [
        "the third rule"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The third rule refers to a specific Inverse Open Path (IOP) rule in the context of knowledge graph shape learning, which imposes a higher cardinality constraint compared to a preceding rule, resulting in lower confidence based on the data from the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-5",
          "local_name": "the third rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_third_rule-Mention-1"
        }
      ],
      "relevance": 0.66015625
    },
    "Entity-iopsc": {
      "node_id": "iopsc",
      "disambiguation_index": 0,
      "label": "IOPSC",
      "aliases": [
        "IOPSC"
      ],
      "types": [
        "method",
        "mathematical function",
        "framework",
        "quality metric",
        "technology",
        "prefix",
        "rule",
        "organization",
        "mathematical notation",
        "feature",
        "mathematical term",
        "concept",
        "algorithm",
        "model",
        "data attribute",
        "evaluation metric",
        "performance measure",
        "acronym",
        "theoretical concept",
        "definition",
        "threshold",
        "entity",
        "mathematical concept",
        "quality",
        "system",
        "theorem",
        "quality measurement",
        "annotation",
        "function",
        "performance indicator",
        "statistical measure",
        "rule attribute",
        "evaluation criterion",
        "computation",
        "measure",
        "confidence",
        "measurement",
        "variable",
        "quality measure",
        "parameter",
        "term",
        "metric",
        "methodology",
        "extension"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "IOPSC refers to the inverse open path standard confidence, a quality measure used to evaluate the effectiveness of inverse open path rules in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-5",
          "local_name": "IOPSC",
          "local_types": [
            "entity",
            "variable",
            "parameter",
            "quality",
            "acronym"
          ],
          "iri": "Entity-iopsc-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-10-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "measure",
            "mathematical term",
            "concept",
            "mathematical concept",
            "metric",
            "theorem"
          ],
          "iri": "Entity-iopsc-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "computation",
            "measure",
            "concept",
            "quality measure",
            "evaluation metric",
            "acronym",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-3"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "definition",
            "entity",
            "measure",
            "concept",
            "quality measure",
            "evaluation metric",
            "acronym",
            "metric",
            "organization"
          ],
          "iri": "Entity-iopsc-Mention-4"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-3",
          "local_name": "IOPSC",
          "local_types": [
            "quality metric",
            "measurement",
            "quality measurement",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-5"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "confidence",
            "framework",
            "quality measure",
            "evaluation metric",
            "acronym",
            "metric",
            "system"
          ],
          "iri": "Entity-iopsc-Mention-6"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-2",
          "local_name": "IOPSC",
          "local_types": [
            "annotation",
            "confidence",
            "quality measure",
            "evaluation metric",
            "prefix",
            "rule",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-7"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "confidence",
            "concept",
            "quality measure",
            "evaluation metric",
            "quality",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-8"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "IOPSC",
          "local_types": [
            "method",
            "algorithm",
            "acronym",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-9"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-4",
          "local_name": "IOPSC",
          "local_types": [
            "method",
            "algorithm",
            "model",
            "parameter",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-10"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "method",
            "framework",
            "technology",
            "methodology",
            "extension"
          ],
          "iri": "Entity-iopsc-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "statistical measure",
            "measure",
            "term",
            "acronym",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-12"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-7",
          "local_name": "IOPSC",
          "local_types": [
            "mathematical notation",
            "function"
          ],
          "iri": "Entity-iopsc-Mention-13"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-7",
          "local_name": "IOPSC",
          "local_types": [
            "statistical measure",
            "measure",
            "variable",
            "parameter",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-14"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "IOPSC",
          "local_types": [
            "rule attribute",
            "entity",
            "measure",
            "quality measure",
            "parameter",
            "acronym"
          ],
          "iri": "Entity-iopsc-Mention-15"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "IOPSC",
          "local_types": [
            "measure"
          ],
          "iri": "Entity-iopsc-Mention-16"
        },
        {
          "reference": "Section-6-Paragraph-10-Sentence-3",
          "local_name": "IOPSC",
          "local_types": [
            "mathematical notation",
            "theoretical concept"
          ],
          "iri": "Entity-iopsc-Mention-17"
        },
        {
          "reference": "Section-6-Paragraph-11-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "measure",
            "metric",
            "evaluation criterion"
          ],
          "iri": "Entity-iopsc-Mention-18"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-3",
          "local_name": "IOPSC",
          "local_types": [
            "evaluation criterion",
            "measure",
            "quality measure",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-19"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-3",
          "local_name": "IOPSC",
          "local_types": [
            "function",
            "measure",
            "quality measure",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-20"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-4",
          "local_name": "IOPSC",
          "local_types": [
            "mathematical function",
            "statistical measure"
          ],
          "iri": "Entity-iopsc-Mention-21"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-2",
          "local_name": "IOPSC",
          "local_types": [
            "performance measure",
            "metric",
            "evaluation criterion"
          ],
          "iri": "Entity-iopsc-Mention-22"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-5",
          "local_name": "IOPSC",
          "local_types": [
            "evaluation criterion",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-23"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-2",
          "local_name": "IOPSC",
          "local_types": [
            "confidence",
            "evaluation metric",
            "metric",
            "quality measure"
          ],
          "iri": "Entity-iopsc-Mention-24"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-2",
          "local_name": "IOPSC",
          "local_types": [
            "performance indicator",
            "threshold",
            "confidence",
            "quality measure",
            "evaluation metric",
            "quality metric",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-25"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-3",
          "local_name": "IOPSC",
          "local_types": [
            "feature",
            "confidence",
            "data attribute",
            "quality measure",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-26"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "statistical measure",
            "confidence",
            "quality measure",
            "parameter",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-27"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-2",
          "local_name": "IOPSC",
          "local_types": [
            "metric",
            "measurement"
          ],
          "iri": "Entity-iopsc-Mention-28"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-4",
          "local_name": "IOPSC",
          "local_types": [
            "performance measure",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-29"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-4",
          "local_name": "IOPSC",
          "local_types": [
            "performance indicator",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-30"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "IOPSC",
          "local_types": [
            "evaluation criterion",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-31"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "evaluation criterion",
            "method",
            "algorithm",
            "performance measure",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-32"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-1",
          "local_name": "IOPSC",
          "local_types": [
            "performance measure",
            "evaluation criterion",
            "performance indicator",
            "metric"
          ],
          "iri": "Entity-iopsc-Mention-33"
        }
      ],
      "relevance": 0.65966796875
    },
    "Entity-learning": {
      "node_id": "learning",
      "disambiguation_index": 0,
      "label": "learning",
      "aliases": [
        "learning"
      ],
      "types": [
        "education",
        "methodology",
        "cognitive activity",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'learning' refers to the process of acquiring knowledge or rules from knowledge graphs (KGs) through the SHACLEARNER method, which is designed to extract informative and intuitive shapes from the data.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "learning",
          "local_types": [
            "process",
            "methodology"
          ],
          "iri": "Entity-learning-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-1",
          "local_name": "learning",
          "local_types": [
            "process",
            "cognitive activity"
          ],
          "iri": "Entity-learning-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-8",
          "local_name": "learning",
          "local_types": [
            "process",
            "cognitive activity"
          ],
          "iri": "Entity-learning-Mention-3"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-4",
          "local_name": "learning",
          "local_types": [
            "education",
            "methodology",
            "process"
          ],
          "iri": "Entity-learning-Mention-4"
        }
      ],
      "relevance": 0.6591796875
    },
    "Entity-our_learning_method": {
      "node_id": "our_learning_method",
      "disambiguation_index": 0,
      "label": "Our learning method",
      "aliases": [
        "Our learning method"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Our learning method, SHACLEARNER, is a novel approach for learning high-quality shape constraints from knowledge graphs, adapted from an advanced embedding-based open path rule learner.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-5",
          "local_name": "Our learning method",
          "local_types": [
            "method"
          ],
          "iri": "Entity-our_learning_method-Mention-1"
        }
      ],
      "relevance": 0.6591796875
    },
    "Entity-a_kg": {
      "node_id": "a_kg",
      "disambiguation_index": 0,
      "label": "a KG",
      "aliases": [
        "a KG"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A KG, or knowledge graph, is a large data structure that represents information in a graph format, allowing for the storage and retrieval of interconnected data, often used to enhance search engines and facilitate data integration.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-3",
          "local_name": "a KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-a_kg-Mention-1"
        }
      ],
      "relevance": 0.65869140625
    },
    "Entity-a_method_to_aggregate_learnt_iop_rule": {
      "node_id": "a_method_to_aggregate_learnt_iop_rule",
      "disambiguation_index": 0,
      "label": "a method to aggregate learnt IOP rules",
      "aliases": [
        "a method to aggregate learnt IOP rules"
      ],
      "types": [
        "method",
        "IOP rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A method to aggregate learnt IOP rules refers to a systematic approach designed to combine individual Inverse Open Path rules in order to identify and construct more complex structural patterns, specifically tree shapes, within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-2",
          "local_name": "a method to aggregate learnt IOP rules",
          "local_types": [
            "method",
            "IOP rules"
          ],
          "iri": "Entity-a_method_to_aggregate_learnt_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.65869140625
    },
    "Entity-original_kg": {
      "node_id": "original_kg",
      "disambiguation_index": 0,
      "label": "original KG",
      "aliases": [
        "original KG",
        "the original KG"
      ],
      "types": [
        "knowledge graph",
        "data structure",
        "original"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'original KG' refers to the complete knowledge graph from which a smaller, sampled subgraph is derived for the purpose of learning IOP rules, highlighting the contrast between the full graph and its sparse nature.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "original KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-original_kg-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-5",
          "local_name": "original KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-original_kg-Mention-2"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "the original KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-original_kg-Mention-3"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-5",
          "local_name": "the original KG",
          "local_types": [
            "knowledge graph",
            "original"
          ],
          "iri": "Entity-original_kg-Mention-4"
        }
      ],
      "relevance": 0.658203125
    },
    "Entity-at_least_one_iop_rule": {
      "node_id": "at_least_one_iop_rule",
      "disambiguation_index": 0,
      "label": "at least one IOP rule",
      "aliases": [
        "at least one IOP rule"
      ],
      "types": [
        "rule",
        "IOP rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'at least one IOP rule' refers to the existence of a minimum of one Inverse Open Path rule that has been identified and validated as part of the evaluation of knowledge graph rule-learning methods, specifically in the context of measuring the quantity and quality of distinct rules learned from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "at least one IOP rule",
          "local_types": [
            "IOP rule"
          ],
          "iri": "Entity-at_least_one_iop_rule-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-3",
          "local_name": "at least one IOP rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-at_least_one_iop_rule-Mention-2"
        }
      ],
      "relevance": 0.658203125
    },
    "Entity-other_rule_pattern": {
      "node_id": "other_rule_pattern",
      "disambiguation_index": 0,
      "label": "other rule patterns",
      "aliases": [
        "other rule patterns"
      ],
      "types": [
        "pattern"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Other rule patterns refer to complex shapes in knowledge graphs that are constructed using Inverse Open Path (IOP) rules as foundational elements, allowing for the incorporation of additional constraints and structural features.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-2",
          "local_name": "other rule patterns",
          "local_types": [
            "pattern"
          ],
          "iri": "Entity-other_rule_pattern-Mention-1"
        }
      ],
      "relevance": 0.658203125
    },
    "Entity-closed_path__cp__rule": {
      "node_id": "closed_path__cp__rule",
      "disambiguation_index": 0,
      "label": "closed path (CP) rules",
      "aliases": [
        "CP rules",
        "closed path (CP) rules",
        "CP rule"
      ],
      "types": [
        "knowledge graph completion method",
        "knowledge representation",
        "concept",
        "grammatical rule",
        "logical rule",
        "closed predicate rule",
        "rule",
        "computational model",
        "linguistic rule",
        "rule type",
        "formal structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Closed path (CP) rules are a type of rule used in knowledge graph learning systems that consist of a head and a body, forming a single unbroken loop of links between variables, allowing for the inference of facts based on the relationships defined in the graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-3",
          "local_name": "closed path (CP) rules",
          "local_types": [
            "rule type",
            "concept",
            "rule"
          ],
          "iri": "Entity-closed_path__cp__rule-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-2",
          "local_name": "CP rule",
          "local_types": [
            "knowledge representation",
            "grammatical rule",
            "rule",
            "linguistic rule",
            "rule type",
            "formal structure"
          ],
          "iri": "Entity-closed_path__cp__rule-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-5",
          "local_name": "CP rules",
          "local_types": [
            "knowledge graph completion method",
            "concept",
            "closed predicate rule",
            "rule",
            "computational model",
            "rule type",
            "logical rule"
          ],
          "iri": "Entity-closed_path__cp__rule-Mention-3"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-6",
          "local_name": "CP rule",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-closed_path__cp__rule-Mention-4"
        }
      ],
      "relevance": 0.65771484375
    },
    "Entity-inverse_open_path_head_coverage": {
      "node_id": "inverse_open_path_head_coverage",
      "disambiguation_index": 0,
      "label": "Inverse open path head coverage",
      "aliases": [
        "inverse open path head coverage",
        "Inverse open path head coverage",
        "Inverse open path head coverage (IOPHC)"
      ],
      "types": [
        "concept",
        "coverage",
        "standard",
        "parameter",
        "evaluation standard",
        "evaluation metric",
        "metric",
        "evaluation measure"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Inverse open path head coverage (IOPHC) is a metric used to evaluate the quality of rules in knowledge graph learning, indicating the proportion of rule consequent instances that are justified by target predicate instances in the graph.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-2",
          "local_name": "Inverse open path head coverage",
          "local_types": [
            "metric",
            "standard"
          ],
          "iri": "Entity-inverse_open_path_head_coverage-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-5",
          "local_name": "inverse open path head coverage",
          "local_types": [
            "parameter",
            "concept",
            "metric"
          ],
          "iri": "Entity-inverse_open_path_head_coverage-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-2",
          "local_name": "Inverse open path head coverage (IOPHC)",
          "local_types": [
            "coverage",
            "evaluation standard",
            "evaluation metric",
            "metric",
            "evaluation measure"
          ],
          "iri": "Entity-inverse_open_path_head_coverage-Mention-3"
        }
      ],
      "relevance": 0.6572265625
    },
    "Entity-good_iop_rule": {
      "node_id": "good_iop_rule",
      "disambiguation_index": 0,
      "label": "good IOP rule",
      "aliases": [
        "good IOP rule"
      ],
      "types": [
        "rule",
        "IOP rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The 'good IOP rule' refers to a high-quality Inverse Open Path rule that effectively connects entities in a knowledge graph through a series of predicates, indicating strong relationships and structural patterns within the graph.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-3",
          "local_name": "good IOP rule",
          "local_types": [
            "rule",
            "IOP rule"
          ],
          "iri": "Entity-good_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.65625
    },
    "Entity-schema_information_for_kg": {
      "node_id": "schema_information_for_kg",
      "disambiguation_index": 0,
      "label": "schema information for KGs",
      "aliases": [
        "schema information for KGs"
      ],
      "types": [
        "schema",
        "knowledge graph"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Schema information for KGs refers to the structured data and rules that define the organization, relationships, and constraints of entities within knowledge graphs, often expressed in languages like RDF and SHACL.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "schema information for KGs",
          "local_types": [
            "schema",
            "knowledge graph"
          ],
          "iri": "Entity-schema_information_for_kg-Mention-1"
        }
      ],
      "relevance": 0.6552734375
    },
    "Entity-rule_with_open_variable": {
      "node_id": "rule_with_open_variable",
      "disambiguation_index": 0,
      "label": "rules with open variables",
      "aliases": [
        "rules with open variables"
      ],
      "types": [
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Rules with open variables refer to a novel type of IOP (Inverse Open Path) rules that allow for the mining of rules in knowledge graphs where one predicate constitutes the body and a sequence of predicates forms the head, enabling the expression of flexible and complex shape patterns.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "rules with open variables",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-rule_with_open_variable-Mention-1"
        }
      ],
      "relevance": 0.6552734375
    },
    "Entity-a_set_of_shacl_shape": {
      "node_id": "a_set_of_shacl_shape",
      "disambiguation_index": 0,
      "label": "a set of SHACL shapes",
      "aliases": [
        "a set of SHACL shapes"
      ],
      "types": [
        "set",
        "SHACL shape"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A set of SHACL shapes refers to a collection of structural constraints defined using the Shapes Constraint Language (SHACL) that can be derived from a tree representation of paths in a knowledge graph, allowing for the validation and documentation of the graph's data.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "a set of SHACL shapes",
          "local_types": [
            "set",
            "SHACL shape"
          ],
          "iri": "Entity-a_set_of_shacl_shape-Mention-1"
        }
      ],
      "relevance": 0.6552734375
    },
    "Entity-the_average_number_of_quality_iop_rule_found": {
      "node_id": "the_average_number_of_quality_iop_rule_found",
      "disambiguation_index": 0,
      "label": "the average numbers of quality IOP rules found",
      "aliases": [
        "the average numbers of quality IOP rules found"
      ],
      "types": [
        "IOP rule",
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The average numbers of quality IOP rules found refers to a metric that quantifies the mean count of high-quality Inverse Open Path (IOP) rules identified during the evaluation of the SHACLEARNER method applied to various knowledge graphs, specifically focusing on rules that meet established quality thresholds.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "the average numbers of quality IOP rules found",
          "local_types": [
            "IOP rule",
            "metric"
          ],
          "iri": "Entity-the_average_number_of_quality_iop_rule_found-Mention-1"
        }
      ],
      "relevance": 0.6552734375
    },
    "Entity-predicate_p1__p2__and_pt": {
      "node_id": "predicate_p1__p2__and_pt",
      "disambiguation_index": 0,
      "label": "predicates P1, P2, and Pt",
      "aliases": [
        "the predicates P1, P2, and Pt",
        "predicates P1, P2, and Pt"
      ],
      "types": [
        "predicate",
        "mathematical object"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'predicates P1, P2, and Pt' refers to specific relationships in a knowledge graph represented as adjacency matrices, which are used to evaluate the quality measures of IOP rules in the context of learning SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-4-Sentence-1",
          "local_name": "predicates P1, P2, and Pt",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-predicate_p1__p2__and_pt-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-4-Sentence-1",
          "local_name": "the predicates P1, P2, and Pt",
          "local_types": [
            "predicate",
            "mathematical object"
          ],
          "iri": "Entity-predicate_p1__p2__and_pt-Mention-2"
        }
      ],
      "relevance": 0.654296875
    },
    "Entity-r1": {
      "node_id": "r1",
      "disambiguation_index": 0,
      "label": "r1",
      "aliases": [
        "r1"
      ],
      "types": [
        "parameter",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "r1 refers to a specific version of an Inverse Open Path (IOP) rule that is defined for a cardinality value of 1 in the context of evaluating shape constraints in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "r1",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-r1-Mention-1"
        }
      ],
      "relevance": 0.654296875
    },
    "Entity-163_rule": {
      "node_id": "163_rule",
      "disambiguation_index": 0,
      "label": "163 rules",
      "aliases": [
        "163 rules"
      ],
      "types": [
        "rules",
        "quantity",
        "rule",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '163 rules' refers to the total number of Inverse Open Path (IOP) rules that were learned by the ideal version of the SHACLEARNER algorithm, which operates without any pruning or sampling methods.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-2",
          "local_name": "163 rules",
          "local_types": [
            "rules",
            "quantity",
            "rule",
            "data structure"
          ],
          "iri": "Entity-163_rule-Mention-1"
        }
      ],
      "relevance": 0.654296875
    },
    "Entity-quality_measure_for_iop_rule": {
      "node_id": "quality_measure_for_iop_rule",
      "disambiguation_index": 0,
      "label": "quality measures for IOP rules",
      "aliases": [
        "quality measures for IOP rules"
      ],
      "types": [
        "IOP rules",
        "quality measure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Quality measures for IOP rules refer to the formal metrics used to evaluate the effectiveness and reliability of Inverse Open Path rules in constructing SHACL trees from knowledge graphs, focusing on aspects such as confidence and generality.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-7",
          "local_name": "quality measures for IOP rules",
          "local_types": [
            "IOP rules",
            "quality measure"
          ],
          "iri": "Entity-quality_measure_for_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.654296875
    },
    "Entity-all_rule_that_bind_the_subject_argument": {
      "node_id": "all_rule_that_bind_the_subject_argument",
      "disambiguation_index": 0,
      "label": "all rules that bind the subject argument",
      "aliases": [
        "all rules that bind the subject argument"
      ],
      "types": [
        "rule",
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'all rules that bind the subject argument' refers to a collection of Inverse Open Path (IOP) rules that specifically govern the relationships and constraints associated with the subject argument in a knowledge graph, which are utilized to construct and evaluate tree shapes in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-2",
          "local_name": "all rules that bind the subject argument",
          "local_types": [
            "rule",
            "argument"
          ],
          "iri": "Entity-all_rule_that_bind_the_subject_argument-Mention-1"
        }
      ],
      "relevance": 0.654296875
    },
    "Entity-shape_pattern": {
      "node_id": "shape_pattern",
      "disambiguation_index": 0,
      "label": "shape patterns",
      "aliases": [
        "simple shape patterns",
        "shape patterns"
      ],
      "types": [
        "geometry",
        "pattern"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Shape patterns refer to the simple geometric configurations defined by Inverse Open Path (IOP) rules, which can be enhanced with constraints and serve as foundational elements for constructing more complex shapes in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-2",
          "local_name": "shape patterns",
          "local_types": [
            "pattern",
            "geometry"
          ],
          "iri": "Entity-shape_pattern-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-2-Sentence-2",
          "local_name": "simple shape patterns",
          "local_types": [
            "pattern"
          ],
          "iri": "Entity-shape_pattern-Mention-2"
        }
      ],
      "relevance": 0.65380859375
    },
    "Entity-small_sampled_kg": {
      "node_id": "small_sampled_kg",
      "disambiguation_index": 0,
      "label": "small sampled KG",
      "aliases": [
        "the small sampled KG",
        "small sampled KG"
      ],
      "types": [
        "knowledge graph",
        "data set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'small sampled KG' refers to a reduced subset of a knowledge graph used for evaluating candidate rules in the context of the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-2",
          "local_name": "small sampled KG",
          "local_types": [
            "knowledge graph",
            "data set"
          ],
          "iri": "Entity-small_sampled_kg-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-2",
          "local_name": "the small sampled KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-small_sampled_kg-Mention-2"
        }
      ],
      "relevance": 0.65380859375
    },
    "Entity-2017": {
      "node_id": "2017",
      "disambiguation_index": 0,
      "label": "2017",
      "aliases": [
        "2017"
      ],
      "types": [
        "year",
        "date"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "The mention '2017' refers to the year when the Shapes Constraint Language (SHACL) was formally recommended by the World Wide Web Consortium (W3C) for expressing constraints on knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-1",
          "local_name": "2017",
          "local_types": [
            "year",
            "date"
          ],
          "iri": "Entity-2017-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "2017",
          "local_types": [
            "year"
          ],
          "iri": "Entity-2017-Mention-2"
        }
      ],
      "relevance": 0.6533203125
    },
    "Entity-matrix-computation_of_the_quality_measure": {
      "node_id": "matrix-computation_of_the_quality_measure",
      "disambiguation_index": 0,
      "label": "matrix-computation of the quality measures",
      "aliases": [
        "the efficient matrix-computation of the quality measures",
        "matrix-computation of the quality measures"
      ],
      "types": [
        "quality measures",
        "methodology",
        "quality measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'matrix-computation of the quality measures' refers to the efficient calculation of specific quality metrics, namely IOPSC and IOPHC, for Inverse Open Path rules in the context of SHACLearner, utilizing an adjacency matrix representation of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-1",
          "local_name": "matrix-computation of the quality measures",
          "local_types": [
            "methodology",
            "quality measure"
          ],
          "iri": "Entity-matrix-computation_of_the_quality_measure-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-1",
          "local_name": "the efficient matrix-computation of the quality measures",
          "local_types": [
            "quality measures",
            "methodology",
            "quality measure"
          ],
          "iri": "Entity-matrix-computation_of_the_quality_measure-Mention-2"
        }
      ],
      "relevance": 0.6533203125
    },
    "Entity-p2__z0__z1_": {
      "node_id": "p2__z0__z1_",
      "disambiguation_index": 0,
      "label": "P2(z0, z1)",
      "aliases": [
        "P2(z0, z1)"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "P2(z0, z1) is a predicate in the context of inverse open path rules (IOP) that represents a relationship between two entities, where z0 is the subject and z1 is the object, used to express constraints in knowledge graphs according to the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "P2(z0, z1)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p2__z0__z1_-Mention-1"
        }
      ],
      "relevance": 0.6533203125
    },
    "Entity-tree_shape_learning": {
      "node_id": "tree_shape_learning",
      "disambiguation_index": 0,
      "label": "tree shape learning",
      "aliases": [
        "tree shape learning"
      ],
      "types": [
        "machine learning",
        "data structure optimization",
        "learning concept",
        "learning method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Tree shape learning refers to the process of constructing tree-like structures from knowledge graphs by aggregating Inverse Open Path (IOP) rules, which helps in organizing and simplifying the representation of relationships within the graph data.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-1",
          "local_name": "tree shape learning",
          "local_types": [
            "machine learning",
            "data structure optimization",
            "learning concept",
            "learning method"
          ],
          "iri": "Entity-tree_shape_learning-Mention-1"
        }
      ],
      "relevance": 0.65234375
    },
    "Entity-shape_constraint": {
      "node_id": "shape_constraint",
      "disambiguation_index": 0,
      "label": "shape constraints",
      "aliases": [
        "shape constraints"
      ],
      "types": [
        "knowledge representation",
        "condition",
        "constraint",
        "geometric property",
        "formalism",
        "mathematical concept",
        "data validation",
        "rule",
        "data constraint",
        "structural rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Shape constraints refer to the specifications defined by the Shapes Constraint Language (SHACL) that express rules and conditions for validating the structure and properties of graph data within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-3",
          "local_name": "shape constraints",
          "local_types": [
            "constraint",
            "data validation"
          ],
          "iri": "Entity-shape_constraint-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-1-Sentence-5",
          "local_name": "shape constraints",
          "local_types": [
            "data constraint",
            "constraint",
            "structural rule"
          ],
          "iri": "Entity-shape_constraint-Mention-2"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-6",
          "local_name": "shape constraints",
          "local_types": [
            "condition",
            "constraint",
            "geometric property",
            "mathematical concept",
            "rule"
          ],
          "iri": "Entity-shape_constraint-Mention-3"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-2",
          "local_name": "shape constraints",
          "local_types": [
            "constraint",
            "formalism",
            "knowledge representation"
          ],
          "iri": "Entity-shape_constraint-Mention-4"
        }
      ],
      "relevance": 0.65185546875
    },
    "Entity-path": {
      "node_id": "path",
      "disambiguation_index": 0,
      "label": "paths",
      "aliases": [
        "path",
        "paths"
      ],
      "types": [
        "connection",
        "shape",
        "path",
        "graph theory",
        "concept",
        "data structure",
        "geometric path",
        "sequence",
        "mathematical concept",
        "structure",
        "mathematical structure",
        "route",
        "geometric concept",
        "tree component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'paths' refer to specific shapes represented as sequences of connections between entities in a Knowledge Graph, utilized within the framework of Inverse Open Path rules to express and validate structural patterns.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-1",
          "local_name": "paths",
          "local_types": [
            "concept",
            "structure"
          ],
          "iri": "Entity-path-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-4-Sentence-2",
          "local_name": "path",
          "local_types": [
            "mathematical concept",
            "concept",
            "structure",
            "geometric path"
          ],
          "iri": "Entity-path-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-1",
          "local_name": "paths",
          "local_types": [
            "concept",
            "structure",
            "shape"
          ],
          "iri": "Entity-path-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-3",
          "local_name": "paths",
          "local_types": [
            "path",
            "sequence",
            "route"
          ],
          "iri": "Entity-path-Mention-4"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-6",
          "local_name": "path",
          "local_types": [
            "mathematical structure",
            "graph theory"
          ],
          "iri": "Entity-path-Mention-5"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-1",
          "local_name": "path",
          "local_types": [
            "path",
            "concept",
            "structure"
          ],
          "iri": "Entity-path-Mention-6"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-2",
          "local_name": "path",
          "local_types": [
            "concept",
            "mathematical structure"
          ],
          "iri": "Entity-path-Mention-7"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-3",
          "local_name": "path",
          "local_types": [
            "path",
            "mathematical structure",
            "geometric concept"
          ],
          "iri": "Entity-path-Mention-8"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-4",
          "local_name": "paths",
          "local_types": [
            "path",
            "concept",
            "data structure"
          ],
          "iri": "Entity-path-Mention-9"
        },
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "path",
          "local_types": [
            "concept",
            "structure"
          ],
          "iri": "Entity-path-Mention-10"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-1",
          "local_name": "path",
          "local_types": [
            "graph theory",
            "mathematical concept",
            "connection",
            "sequence"
          ],
          "iri": "Entity-path-Mention-11"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "path",
          "local_types": [
            "graph theory",
            "data structure"
          ],
          "iri": "Entity-path-Mention-12"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-4",
          "local_name": "path",
          "local_types": [
            "graph theory",
            "data structure"
          ],
          "iri": "Entity-path-Mention-13"
        },
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "path",
          "local_types": [
            "tree component"
          ],
          "iri": "Entity-path-Mention-14"
        }
      ],
      "relevance": 0.65185546875
    },
    "Entity-threshold": {
      "node_id": "threshold",
      "disambiguation_index": 0,
      "label": "thresholds",
      "aliases": [
        "threshold",
        "thresholds",
        "minimum quality thresholds"
      ],
      "types": [
        "criteria",
        "standards",
        "quality standard",
        "threshold",
        "measurement",
        "parameter"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of evaluating knowledge graph rule-learning methods, 'thresholds' refer to the minimum quality criteria, specifically the Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC), that rules must meet to be considered high quality.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-2",
          "local_name": "thresholds",
          "local_types": [
            "criteria",
            "standards",
            "quality standard"
          ],
          "iri": "Entity-threshold-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-3",
          "local_name": "thresholds",
          "local_types": [
            "measurement",
            "criteria"
          ],
          "iri": "Entity-threshold-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-4",
          "local_name": "threshold",
          "local_types": [
            "parameter",
            "criteria"
          ],
          "iri": "Entity-threshold-Mention-3"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-2",
          "local_name": "minimum quality thresholds",
          "local_types": [
            "threshold"
          ],
          "iri": "Entity-threshold-Mention-4"
        }
      ],
      "relevance": 0.65185546875
    },
    "Entity-146_rule": {
      "node_id": "146_rule",
      "disambiguation_index": 0,
      "label": "146 rules",
      "aliases": [
        "146 rules"
      ],
      "types": [
        "quantity",
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '146 rules' refers to the number of Inverse Open Path (IOP) rules learned by the SHACLEARNER system, specifically in the context of rules that fall within a certain quality range as defined by the Inverse Open Path Shape Constraint (IOPSC) metric.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-4",
          "local_name": "146 rules",
          "local_types": [
            "quantity",
            "rules"
          ],
          "iri": "Entity-146_rule-Mention-1"
        }
      ],
      "relevance": 0.65185546875
    },
    "Entity-shacl": {
      "node_id": "shacl",
      "disambiguation_index": 0,
      "label": "SHACL",
      "aliases": [
        "SHACL",
        "SHACL language"
      ],
      "types": [
        "schema validation",
        "method",
        "framework",
        "formalism",
        "technology",
        "constraint language",
        "standard",
        "acronym",
        "schema language",
        "W3C recommendation",
        "semantic web technology",
        "semantic web standard",
        "specification",
        "programming language",
        "modeling language",
        "validation framework",
        "data validation",
        "validation language",
        "language"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "SHACL, or Shapes Constraint Language, is a W3C recommendation that provides a framework for defining and validating constraints on graph data using a formal language.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-3",
          "local_name": "SHACL",
          "local_types": [
            "standard",
            "language",
            "specification",
            "W3C recommendation"
          ],
          "iri": "Entity-shacl-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-1-Sentence-4",
          "local_name": "SHACL",
          "local_types": [
            "framework",
            "technology"
          ],
          "iri": "Entity-shacl-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "constraint language",
            "framework",
            "standard",
            "technology",
            "data validation",
            "specification",
            "language"
          ],
          "iri": "Entity-shacl-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-2",
          "local_name": "SHACL",
          "local_types": [
            "standard",
            "technology",
            "framework"
          ],
          "iri": "Entity-shacl-Mention-4"
        },
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "modeling language",
            "constraint language",
            "standard",
            "technology",
            "data validation",
            "semantic web technology",
            "specification"
          ],
          "iri": "Entity-shacl-Mention-5"
        },
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "constraint language",
            "method",
            "standard",
            "data validation",
            "acronym"
          ],
          "iri": "Entity-shacl-Mention-6"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "SHACL",
          "local_types": [
            "schema validation",
            "specification",
            "acronym",
            "language"
          ],
          "iri": "Entity-shacl-Mention-7"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-4",
          "local_name": "SHACL",
          "local_types": [
            "technology",
            "specification",
            "framework"
          ],
          "iri": "Entity-shacl-Mention-8"
        },
        {
          "reference": "Section-5-Paragraph-2-Sentence-3",
          "local_name": "SHACL",
          "local_types": [
            "schema validation",
            "data validation",
            "schema language",
            "specification",
            "language"
          ],
          "iri": "Entity-shacl-Mention-9"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "schema validation",
            "framework",
            "technology",
            "specification",
            "language"
          ],
          "iri": "Entity-shacl-Mention-10"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "SHACL",
          "local_types": [
            "technology",
            "specification",
            "framework"
          ],
          "iri": "Entity-shacl-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "standard",
            "framework"
          ],
          "iri": "Entity-shacl-Mention-12"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "standard",
            "technology",
            "framework"
          ],
          "iri": "Entity-shacl-Mention-13"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "validation framework",
            "framework",
            "technology",
            "specification",
            "language"
          ],
          "iri": "Entity-shacl-Mention-14"
        },
        {
          "reference": "Section-13-Paragraph-3-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "validation framework",
            "framework",
            "technology",
            "specification",
            "language"
          ],
          "iri": "Entity-shacl-Mention-15"
        },
        {
          "reference": "Section-13-Paragraph-4-Sentence-2",
          "local_name": "SHACL",
          "local_types": [
            "standard",
            "technology"
          ],
          "iri": "Entity-shacl-Mention-16"
        },
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "validation framework",
            "framework",
            "standard",
            "technology",
            "language"
          ],
          "iri": "Entity-shacl-Mention-17"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "validation framework",
            "framework",
            "standard",
            "acronym",
            "language"
          ],
          "iri": "Entity-shacl-Mention-18"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "validation framework",
            "specification",
            "framework",
            "language"
          ],
          "iri": "Entity-shacl-Mention-19"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-2",
          "local_name": "SHACL",
          "local_types": [
            "technology",
            "semantic web standard",
            "specification",
            "language"
          ],
          "iri": "Entity-shacl-Mention-20"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-3",
          "local_name": "SHACL",
          "local_types": [
            "framework",
            "technology",
            "data validation",
            "specification",
            "language"
          ],
          "iri": "Entity-shacl-Mention-21"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "technology",
            "validation language",
            "framework"
          ],
          "iri": "Entity-shacl-Mention-22"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "standard",
            "technology",
            "framework",
            "language"
          ],
          "iri": "Entity-shacl-Mention-23"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-3",
          "local_name": "SHACL",
          "local_types": [
            "acronym",
            "standard",
            "technology"
          ],
          "iri": "Entity-shacl-Mention-24"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "framework",
            "standard",
            "technology",
            "specification",
            "language"
          ],
          "iri": "Entity-shacl-Mention-25"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-7",
          "local_name": "SHACL",
          "local_types": [
            "constraint language",
            "framework",
            "formalism",
            "standard",
            "data validation",
            "language"
          ],
          "iri": "Entity-shacl-Mention-26"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-5",
          "local_name": "SHACL",
          "local_types": [
            "constraint language",
            "framework",
            "standard",
            "specification",
            "language"
          ],
          "iri": "Entity-shacl-Mention-27"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "framework",
            "standard"
          ],
          "iri": "Entity-shacl-Mention-28"
        },
        {
          "reference": "Section-12-Paragraph-6-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "framework",
            "standard"
          ],
          "iri": "Entity-shacl-Mention-29"
        },
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "validation framework",
            "framework",
            "language"
          ],
          "iri": "Entity-shacl-Mention-30"
        },
        {
          "reference": "Section-13-Paragraph-4-Sentence-1",
          "local_name": "SHACL",
          "local_types": [
            "validation framework",
            "framework",
            "language"
          ],
          "iri": "Entity-shacl-Mention-31"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-1",
          "local_name": "SHACL language",
          "local_types": [
            "programming language",
            "semantic web technology"
          ],
          "iri": "Entity-shacl-Mention-32"
        }
      ],
      "relevance": 0.6513671875
    },
    "Entity-open_path_rule_learner__oprl_": {
      "node_id": "open_path_rule_learner__oprl_",
      "disambiguation_index": 0,
      "label": "Open Path Rule Learner (OPRL)",
      "aliases": [
        "embedding-based Open Path Rule Learner (OPRL)",
        "Open Path Rule Learner (OPRL)",
        "open path rule learner OPRL"
      ],
      "types": [
        "rule learner",
        "machine learning model",
        "learner",
        "method",
        "algorithm",
        "learning method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The Open Path Rule Learner (OPRL) is an embedding-based machine learning algorithm designed to mine open path rules from knowledge graphs, enabling the discovery of shape constraints and patterns for validating and enhancing the structure of these graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "Open Path Rule Learner (OPRL)",
          "local_types": [
            "rule learner",
            "machine learning model",
            "learner",
            "method",
            "algorithm",
            "learning method"
          ],
          "iri": "Entity-open_path_rule_learner__oprl_-Mention-1"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-1",
          "local_name": "open path rule learner OPRL",
          "local_types": [
            "learner",
            "algorithm"
          ],
          "iri": "Entity-open_path_rule_learner__oprl_-Mention-2"
        },
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "embedding-based Open Path Rule Learner (OPRL)",
          "local_types": [
            "learner",
            "algorithm"
          ],
          "iri": "Entity-open_path_rule_learner__oprl_-Mention-3"
        }
      ],
      "relevance": 0.6513671875
    },
    "Entity-annotated_iop_rule_(1)": {
      "node_id": "annotated_iop_rule_(1)",
      "disambiguation_index": 1,
      "label": "annotated IOP rules",
      "aliases": [
        "annotated IOP rules"
      ],
      "types": [
        "rules",
        "IOP"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Annotated IOP rules are a formalism used to express and derive specific shapes in the Shapes Constraint Language (SHACL) from knowledge graphs, incorporating additional quality annotations to enhance the learning and validation of these shapes.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-1",
          "local_name": "annotated IOP rules",
          "local_types": [
            "rules",
            "IOP"
          ],
          "iri": "Entity-annotated_iop_rule_(1)-Mention-1"
        }
      ],
      "relevance": 0.6513671875
    },
    "Entity-f___p1__e1__e2___p1__e2__e1___p1__e2__e3___p1__e3__e1___p2__e1__e2___p2__e3__e2___p2__e3__e3___p1__e1__e3___pt__e3__e2___pt__e3__e3__": {
      "node_id": "f___p1__e1__e2___p1__e2__e1___p1__e2__e3___p1__e3__e1___p2__e1__e2___p2__e3__e2___p2__e3__e3___p1__e1__e3___pt__e3__e2___pt__e3__e3__",
      "disambiguation_index": 0,
      "label": "F = {P1(e1, e2), P1(e2, e1), P1(e2, e3), P1(e3, e1), P2(e1, e2), P2(e3, e2), P2(e3, e3), P1(e1, e3), Pt(e3, e2), Pt(e3, e3)}",
      "aliases": [
        "F = {P1(e1, e2), P1(e2, e1), P1(e2, e3), P1(e3, e1), P2(e1, e2), P2(e3, e2), P2(e3, e3), P1(e1, e3), Pt(e3, e2), Pt(e3, e3)}"
      ],
      "types": [
        "set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "F is a set of predicate-entity pairs representing relationships among entities e1, e2, and e3 in a knowledge graph, used to illustrate the computation of quality measures for Inverse Open Path rules in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-3-Sentence-3",
          "local_name": "F = {P1(e1, e2), P1(e2, e1), P1(e2, e3), P1(e3, e1), P2(e1, e2), P2(e3, e2), P2(e3, e3), P1(e1, e3), Pt(e3, e2), Pt(e3, e3)}",
          "local_types": [
            "set"
          ],
          "iri": "Entity-f___p1__e1__e2___p1__e2__e1___p1__e2__e3___p1__e3__e1___p2__e1__e2___p2__e3__e2___p2__e3__e3___p1__e1__e3___pt__e3__e2___pt__e3__e3__-Mention-1"
        }
      ],
      "relevance": 0.650390625
    },
    "Entity-op": {
      "node_id": "op",
      "disambiguation_index": 0,
      "label": "OP",
      "aliases": [
        "OP"
      ],
      "types": [
        "entity",
        "operation",
        "concept",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "OP refers to open path rules, which are a type of logical rule used to express relationships in knowledge graphs, and their converse is known as inverse open path rules (IOP).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-1-Sentence-1",
          "local_name": "OP",
          "local_types": [
            "rule",
            "concept"
          ],
          "iri": "Entity-op-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-3-Sentence-1",
          "local_name": "OP",
          "local_types": [
            "rule",
            "concept"
          ],
          "iri": "Entity-op-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-5-Sentence-1",
          "local_name": "OP",
          "local_types": [
            "operation",
            "concept",
            "rule"
          ],
          "iri": "Entity-op-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-5-Sentence-2",
          "local_name": "OP",
          "local_types": [
            "entity",
            "concept",
            "rule"
          ],
          "iri": "Entity-op-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-1",
          "local_name": "OP",
          "local_types": [
            "rule",
            "concept"
          ],
          "iri": "Entity-op-Mention-5"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-3",
          "local_name": "OP",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-op-Mention-6"
        }
      ],
      "relevance": 0.64990234375
    },
    "Entity-building_block_(1)": {
      "node_id": "building_block_(1)",
      "disambiguation_index": 1,
      "label": "building block",
      "aliases": [
        "building block"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'building block' refers to the simple shape patterns expressed by Inverse Open Path (IOP) rules, which can be combined and augmented to create more complex shapes, such as trees and other rule patterns.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-2",
          "local_name": "building block",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-building_block_(1)-Mention-1"
        }
      ],
      "relevance": 0.64990234375
    },
    "Entity-scalekb": {
      "node_id": "scalekb",
      "disambiguation_index": 0,
      "label": "SCALEKB",
      "aliases": [
        "SCALEKB"
      ],
      "types": [
        "knowledge base",
        "system",
        "rule language",
        "model"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "SCALEKB is a rule language used in knowledge graph rule learning systems that employs closed path (CP) rules to express relationships and infer facts within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-3",
          "local_name": "SCALEKB",
          "local_types": [
            "knowledge base",
            "system",
            "rule language",
            "model"
          ],
          "iri": "Entity-scalekb-Mention-1"
        }
      ],
      "relevance": 0.6484375
    },
    "Entity-recursive_shacl_shape": {
      "node_id": "recursive_shacl_shape",
      "disambiguation_index": 0,
      "label": "recursive SHACL shapes",
      "aliases": [
        "semantics of recursive SHACL shapes",
        "recursive SHACL shapes"
      ],
      "types": [
        "shape",
        "SHACL concept",
        "semantics",
        "SHACL",
        "concept",
        "data structure",
        "data validation",
        "structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Recursive SHACL shapes refer to a specific type of SHACL (Shapes Constraint Language) constructs that incorporate recursive patterns to define complex validation rules for graph data, enhancing the expressiveness and applicability of SHACL in validating knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-1",
          "local_name": "recursive SHACL shapes",
          "local_types": [
            "SHACL concept",
            "shape",
            "data structure",
            "data validation",
            "structure"
          ],
          "iri": "Entity-recursive_shacl_shape-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-1",
          "local_name": "semantics of recursive SHACL shapes",
          "local_types": [
            "semantics",
            "SHACL",
            "concept",
            "shape"
          ],
          "iri": "Entity-recursive_shacl_shape-Mention-2"
        }
      ],
      "relevance": 0.6484375
    },
    "Entity-building_block_(2)": {
      "node_id": "building_block_(2)",
      "disambiguation_index": 2,
      "label": "building block",
      "aliases": [
        "building block"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In this paper, 'building block' refers to the Inverse Open Path rules, which are foundational elements used to construct more complex shapes, such as trees, in the context of learning and expressing constraints on knowledge graphs using the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "building block",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-building_block_(2)-Mention-1"
        }
      ],
      "relevance": 0.6484375
    },
    "Entity-the_input_graph": {
      "node_id": "the_input_graph",
      "disambiguation_index": 0,
      "label": "the input graph",
      "aliases": [
        "the input graph"
      ],
      "types": [
        "graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The input graph refers to the original knowledge graph (KG) from which a smaller subgraph, denoted as K', is sampled for the purpose of learning Inverse Open Path (IOP) rules related to a specific target predicate.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-4",
          "local_name": "the input graph",
          "local_types": [
            "graph"
          ],
          "iri": "Entity-the_input_graph-Mention-1"
        }
      ],
      "relevance": 0.6484375
    },
    "Entity-algorithm_1": {
      "node_id": "algorithm_1",
      "disambiguation_index": 0,
      "label": "Algorithm 1",
      "aliases": [
        "Algorithm 1"
      ],
      "types": [
        "reference",
        "computational method",
        "method",
        "algorithm",
        "procedure",
        "methodology"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Algorithm 1 refers to a computational method that implements the Sampling() procedure to extract a bounded fragment of a knowledge graph (KG) related to a specific target predicate, facilitating the learning of inverse open path rules.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "Algorithm 1",
          "local_types": [
            "reference",
            "algorithm"
          ],
          "iri": "Entity-algorithm_1-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-1",
          "local_name": "Algorithm 1",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-algorithm_1-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-1",
          "local_name": "Algorithm 1",
          "local_types": [
            "reference",
            "method",
            "algorithm"
          ],
          "iri": "Entity-algorithm_1-Mention-3"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-1",
          "local_name": "Algorithm 1",
          "local_types": [
            "reference",
            "method",
            "algorithm",
            "procedure"
          ],
          "iri": "Entity-algorithm_1-Mention-4"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-1",
          "local_name": "Algorithm 1",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-algorithm_1-Mention-5"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-1",
          "local_name": "Algorithm 1",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-algorithm_1-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-1",
          "local_name": "Algorithm 1",
          "local_types": [
            "method",
            "algorithm",
            "procedure"
          ],
          "iri": "Entity-algorithm_1-Mention-7"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-2",
          "local_name": "Algorithm 1",
          "local_types": [
            "reference",
            "algorithm"
          ],
          "iri": "Entity-algorithm_1-Mention-8"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-2",
          "local_name": "Algorithm 1",
          "local_types": [
            "method",
            "algorithm",
            "methodology",
            "procedure"
          ],
          "iri": "Entity-algorithm_1-Mention-9"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-5",
          "local_name": "Algorithm 1",
          "local_types": [
            "computational method",
            "method",
            "algorithm"
          ],
          "iri": "Entity-algorithm_1-Mention-10"
        }
      ],
      "relevance": 0.64794921875
    },
    "Entity-iopsc_in_range_of__0.1__0.3_": {
      "node_id": "iopsc_in_range_of__0.1__0.3_",
      "disambiguation_index": 0,
      "label": "IOPSC in range of [0.1, 0.3)",
      "aliases": [
        "IOPSC in range of [0.1, 0.3)"
      ],
      "types": [
        "metric",
        "rule learning"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "IOPSC in range of [0.1, 0.3) refers to a specific interval of the Inverse Open Path Shape Confidence metric, which quantifies the quality of rules learned by the SHACLEARNER algorithm from knowledge graphs, indicating a moderate level of confidence in the structural patterns identified.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-1",
          "local_name": "IOPSC in range of [0.1, 0.3)",
          "local_types": [
            "metric",
            "rule learning"
          ],
          "iri": "Entity-iopsc_in_range_of__0.1__0.3_-Mention-1"
        }
      ],
      "relevance": 0.64794921875
    },
    "Entity-the_rule_(4)": {
      "node_id": "the_rule_(4)",
      "disambiguation_index": 4,
      "label": "the rule",
      "aliases": [
        "the rule"
      ],
      "types": [
        "concept",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The rule refers to a formalized guideline or principle in the context of knowledge graphs, specifically relating to the evaluation of learned rules through metrics such as Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC), which assess the reliability and relevance of these rules in representing relationships within the graph data.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "the rule",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-the_rule_(4)-Mention-1"
        }
      ],
      "relevance": 0.64794921875
    },
    "Entity-set_of_rule_and_shape": {
      "node_id": "set_of_rule_and_shape",
      "disambiguation_index": 0,
      "label": "set of rules and shapes",
      "aliases": [
        "set of rules and shapes",
        "a set of rules and shapes"
      ],
      "types": [
        "set",
        "rules",
        "shapes",
        "shape"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'set of rules and shapes' refers to a collection of logical constraints and structural patterns used to define and validate the properties of entities within a knowledge graph, specifically in the context of the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-6-Sentence-2",
          "local_name": "set of rules and shapes",
          "local_types": [
            "rules",
            "shape"
          ],
          "iri": "Entity-set_of_rule_and_shape-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-2",
          "local_name": "a set of rules and shapes",
          "local_types": [
            "rules",
            "shapes",
            "set"
          ],
          "iri": "Entity-set_of_rule_and_shape-Mention-2"
        }
      ],
      "relevance": 0.6474609375
    },
    "Entity-candidate_rule": {
      "node_id": "candidate_rule",
      "disambiguation_index": 0,
      "label": "candidate rules",
      "aliases": [
        "candidate rules",
        "The candidate rules"
      ],
      "types": [
        "criteria",
        "decision-making criterion",
        "algorithm component",
        "rules",
        "logical statement",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Candidate rules refer to a reduced set of potential Inverse Open Path (IOP) rules generated from the embedding representation of predicates, which are subsequently refined using a scoring function heuristic to identify high-quality rules for knowledge graph validation.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-2",
          "local_name": "candidate rules",
          "local_types": [
            "algorithm component",
            "rule"
          ],
          "iri": "Entity-candidate_rule-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-2",
          "local_name": "candidate rules",
          "local_types": [
            "criteria",
            "decision-making criterion",
            "rule",
            "logical statement"
          ],
          "iri": "Entity-candidate_rule-Mention-2"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-2",
          "local_name": "The candidate rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-candidate_rule-Mention-3"
        }
      ],
      "relevance": 0.64697265625
    },
    "Entity-it_internal_knowledge_graph": {
      "node_id": "it_internal_knowledge_graph",
      "disambiguation_index": 0,
      "label": "its internal knowledge graph",
      "aliases": [
        "its internal knowledge graph"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'its internal knowledge graph' refers to the proprietary knowledge graph utilized by Google to enhance search results and provide structured information through knowledge panels.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "its internal knowledge graph",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-it_internal_knowledge_graph-Mention-1"
        }
      ],
      "relevance": 0.64697265625
    },
    "Entity-iopsc__r2_": {
      "node_id": "iopsc__r2_",
      "disambiguation_index": 0,
      "label": "IOPSC(r2)",
      "aliases": [
        "IOPSC(r2)"
      ],
      "types": [
        "function",
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "IOPSC(r2) is a metric that quantifies the shape constraint quality of an inverse open path rule r2 in a knowledge graph, specifically measuring the ratio of the number of entities satisfying the head of the rule to the number of entities satisfying the body of the rule for a given cardinality.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-4",
          "local_name": "IOPSC(r2)",
          "local_types": [
            "function",
            "metric"
          ],
          "iri": "Entity-iopsc__r2_-Mention-1"
        }
      ],
      "relevance": 0.646484375
    },
    "Entity-inverse_open_path": {
      "node_id": "inverse_open_path",
      "disambiguation_index": 0,
      "label": "Inverse Open Path",
      "aliases": [
        "Inverse Open Path",
        "inverse open path"
      ],
      "types": [
        "path",
        "concept",
        "formalism",
        "theoretical framework",
        "rule"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Inverse Open Path (IOP) refers to a predicate logic formalism that defines specific shapes as paths over connected entities in a knowledge graph, allowing for the expression of simple shape patterns that can be enhanced with constraints and serve as foundational elements for more complex structures.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-1",
          "local_name": "Inverse Open Path",
          "local_types": [
            "concept",
            "formalism"
          ],
          "iri": "Entity-inverse_open_path-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-4",
          "local_name": "Inverse Open Path",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-inverse_open_path-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-1",
          "local_name": "inverse open path",
          "local_types": [
            "path",
            "concept",
            "theoretical framework"
          ],
          "iri": "Entity-inverse_open_path-Mention-3"
        }
      ],
      "relevance": 0.6455078125
    },
    "Entity-the_shape": {
      "node_id": "the_shape",
      "disambiguation_index": 0,
      "label": "The shapes",
      "aliases": [
        "the shapes",
        "shapes",
        "The shapes"
      ],
      "types": [
        "data",
        "shape",
        "method",
        "concept",
        "shapes"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The shapes refer to the diverse structural patterns derived from knowledge graphs, expressed through the Shapes Constraint Language (SHACL), which encapsulate various features such as depth, width, and quality measures for validating and understanding the structure of the graph data.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-3",
          "local_name": "The shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-the_shape-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-3",
          "local_name": "The shapes",
          "local_types": [
            "shapes"
          ],
          "iri": "Entity-the_shape-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-6",
          "local_name": "the shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-the_shape-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-1",
          "local_name": "shapes",
          "local_types": [
            "data"
          ],
          "iri": "Entity-the_shape-Mention-4"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-the_shape-Mention-5"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-3",
          "local_name": "shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-the_shape-Mention-6"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-3",
          "local_name": "The shapes",
          "local_types": [
            "concept",
            "method"
          ],
          "iri": "Entity-the_shape-Mention-7"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-4",
          "local_name": "The shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-the_shape-Mention-8"
        }
      ],
      "relevance": 0.6455078125
    },
    "Entity-property_shape": {
      "node_id": "property_shape",
      "disambiguation_index": 0,
      "label": "property shapes",
      "aliases": [
        "property shapes"
      ],
      "types": [
        "shape",
        "property",
        "constraint",
        "concept",
        "data structure",
        "structure",
        "SHACL feature"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Property shapes are specific constraints defined within the Shapes Constraint Language (SHACL) that govern the relationships and attributes of entities in a knowledge graph, ensuring that the data adheres to certain structural and semantic rules.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "property shapes",
          "local_types": [
            "shape",
            "constraint",
            "concept",
            "data structure",
            "structure"
          ],
          "iri": "Entity-property_shape-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-3",
          "local_name": "property shapes",
          "local_types": [
            "property",
            "concept",
            "structure",
            "shape"
          ],
          "iri": "Entity-property_shape-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-6-Sentence-1",
          "local_name": "property shapes",
          "local_types": [
            "SHACL feature",
            "structure",
            "concept",
            "data structure"
          ],
          "iri": "Entity-property_shape-Mention-3"
        }
      ],
      "relevance": 0.64501953125
    },
    "Entity-this_strategy_for_human-kg-completion": {
      "node_id": "this_strategy_for_human-kg-completion",
      "disambiguation_index": 0,
      "label": "This strategy for human-KG-completion",
      "aliases": [
        "This strategy for human-KG-completion"
      ],
      "types": [
        "strategy",
        "human-KG-completion"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This strategy for human-KG-completion refers to a depth-first questioning approach that utilizes tree shapes generated by SHACLEARNER to facilitate human interaction and reduce cognitive load when completing knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-8",
          "local_name": "This strategy for human-KG-completion",
          "local_types": [
            "strategy",
            "human-KG-completion"
          ],
          "iri": "Entity-this_strategy_for_human-kg-completion-Mention-1"
        }
      ],
      "relevance": 0.64453125
    },
    "Entity-the_three_very_different_kg": {
      "node_id": "the_three_very_different_kg",
      "disambiguation_index": 0,
      "label": "the three very different KGs",
      "aliases": [
        "the three very different KGs"
      ],
      "types": [
        "KG",
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The three very different KGs refer to the distinct knowledge graphs evaluated in the study, specifically YAGO2s, DBpedia, and Wikidata, each characterized by unique structural features and data characteristics.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-4",
          "local_name": "the three very different KGs",
          "local_types": [
            "KG",
            "knowledge graph"
          ],
          "iri": "Entity-the_three_very_different_kg-Mention-1"
        }
      ],
      "relevance": 0.64404296875
    },
    "Entity-inverse_open_path_standard_confidence": {
      "node_id": "inverse_open_path_standard_confidence",
      "disambiguation_index": 0,
      "label": "Inverse open path standard confidence",
      "aliases": [
        "inverse open path standard confidence",
        "Inverse open path standard confidence (IOPSC)",
        "Inverse open path standard confidence",
        "the IOPSC"
      ],
      "types": [
        "confidence",
        "concept",
        "standard",
        "parameter",
        "evaluation standard",
        "evaluation metric",
        "metric",
        "evaluation measure"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Inverse open path standard confidence (IOPSC) is a metric used to evaluate the quality of rules learned from knowledge graphs, specifically measuring the proportion of instances for which a rule holds true relative to the target predicate instances.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-2",
          "local_name": "Inverse open path standard confidence",
          "local_types": [
            "metric",
            "standard"
          ],
          "iri": "Entity-inverse_open_path_standard_confidence-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-5",
          "local_name": "inverse open path standard confidence",
          "local_types": [
            "parameter",
            "concept",
            "metric"
          ],
          "iri": "Entity-inverse_open_path_standard_confidence-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-2",
          "local_name": "Inverse open path standard confidence (IOPSC)",
          "local_types": [
            "confidence",
            "evaluation standard",
            "evaluation metric",
            "metric",
            "evaluation measure"
          ],
          "iri": "Entity-inverse_open_path_standard_confidence-Mention-3"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-2",
          "local_name": "the IOPSC",
          "local_types": [
            "metric"
          ],
          "iri": "Entity-inverse_open_path_standard_confidence-Mention-4"
        }
      ],
      "relevance": 0.6435546875
    },
    "Entity-the_various_feature_value": {
      "node_id": "the_various_feature_value",
      "disambiguation_index": 0,
      "label": "the various feature values",
      "aliases": [
        "the various feature values"
      ],
      "types": [
        "feature values"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The various feature values refer to the distinct characteristics or attributes of the mined rules, such as their lengths, cardinalities, and quality measures like Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC), which are used to evaluate the performance of the SHACLEARNER method across different knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-4",
          "local_name": "the various feature values",
          "local_types": [
            "feature values"
          ],
          "iri": "Entity-the_various_feature_value-Mention-1"
        }
      ],
      "relevance": 0.64306640625
    },
    "Entity-those_we_used_in_the_performance_evaluation": {
      "node_id": "those_we_used_in_the_performance_evaluation",
      "disambiguation_index": 0,
      "label": "those we used in the performance evaluation",
      "aliases": [
        "those we used in the performance evaluation"
      ],
      "types": [
        "evaluation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'those we used in the performance evaluation' refers to the real-world knowledge graphs (KGs) utilized to assess the performance of the SHACLEARNER system in the experiments, specifically including large datasets like YAGO2s, DBpedia, and Wikidata.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-5",
          "local_name": "those we used in the performance evaluation",
          "local_types": [
            "evaluation"
          ],
          "iri": "Entity-those_we_used_in_the_performance_evaluation-Mention-1"
        }
      ],
      "relevance": 0.64306640625
    },
    "Entity-real-world_massive_knowledge_graph__kg_": {
      "node_id": "real-world_massive_knowledge_graph__kg_",
      "disambiguation_index": 0,
      "label": "real-world massive knowledge graphs (KGs)",
      "aliases": [
        "real-world massive KGs",
        "real-world massive knowledge graphs (KGs)",
        "various real-world massive knowledge graphs (KGs)"
      ],
      "types": [
        "knowledge graph",
        "KG",
        "data source"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Real-world massive knowledge graphs (KGs) are extensive and structured representations of knowledge that integrate information from various domains, enabling complex queries and insights based on interconnected data.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "real-world massive knowledge graphs (KGs)",
          "local_types": [
            "knowledge graph",
            "data source"
          ],
          "iri": "Entity-real-world_massive_knowledge_graph__kg_-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "various real-world massive knowledge graphs (KGs)",
          "local_types": [
            "knowledge graph",
            "KG"
          ],
          "iri": "Entity-real-world_massive_knowledge_graph__kg_-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-1",
          "local_name": "real-world massive KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-real-world_massive_knowledge_graph__kg_-Mention-3"
        }
      ],
      "relevance": 0.642578125
    },
    "Entity-embeddings__k__": {
      "node_id": "embeddings__k__",
      "disambiguation_index": 0,
      "label": "Embeddings(K')",
      "aliases": [
        "Embeddings(K')"
      ],
      "types": [
        "method",
        "process",
        "embedding"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Embeddings(K') refers to a method for generating vector representations of entities and relationships within a knowledge graph K', which are utilized in the learning process of inverse open path rules to derive SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-6",
          "local_name": "Embeddings(K')",
          "local_types": [
            "method",
            "process",
            "embedding"
          ],
          "iri": "Entity-embeddings__k__-Mention-1"
        }
      ],
      "relevance": 0.642578125
    },
    "Entity-entity_in_the_sampled_kg": {
      "node_id": "entity_in_the_sampled_kg",
      "disambiguation_index": 0,
      "label": "entities in the sampled KG",
      "aliases": [
        "entities in the sampled KG"
      ],
      "types": [
        "entity",
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'entities in the sampled KG' refers to the specific nodes within a knowledge graph that are either directly associated with a target predicate or are closely connected to those directly associated entities, used for the purpose of learning shape constraints in the context of the SHACLEARNER method.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-6-Sentence-4",
          "local_name": "entities in the sampled KG",
          "local_types": [
            "entity",
            "knowledge graph"
          ],
          "iri": "Entity-entity_in_the_sampled_kg-Mention-1"
        }
      ],
      "relevance": 0.642578125
    },
    "Entity-_p__a____embeddings__k__": {
      "node_id": "_p__a____embeddings__k__",
      "disambiguation_index": 0,
      "label": "(P, A) := Embeddings(K')",
      "aliases": [
        "(P, A) := Embeddings(K')"
      ],
      "types": [
        "operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "(P, A) := Embeddings(K') refers to the process of generating embeddings for a knowledge graph K' that are used to facilitate the learning of inverse open path rules in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-6",
          "local_name": "(P, A) := Embeddings(K')",
          "local_types": [
            "operation"
          ],
          "iri": "Entity-_p__a____embeddings__k__-Mention-1"
        }
      ],
      "relevance": 0.64208984375
    },
    "Entity-a_good_learning_algorithm": {
      "node_id": "a_good_learning_algorithm",
      "disambiguation_index": 0,
      "label": "A good learning algorithm",
      "aliases": [
        "A good learning algorithm"
      ],
      "types": [
        "algorithm"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A good learning algorithm refers to an effective method, such as SHACLearner, that efficiently learns and scales to discover reliable constraints from knowledge graphs, ensuring that the constraints identified are more certain than those overlooked.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-4",
          "local_name": "A good learning algorithm",
          "local_types": [
            "algorithm"
          ],
          "iri": "Entity-a_good_learning_algorithm-Mention-1"
        }
      ],
      "relevance": 0.64208984375
    },
    "Entity-set_of_rule": {
      "node_id": "set_of_rule",
      "disambiguation_index": 0,
      "label": "set of rules",
      "aliases": [
        "set of rules"
      ],
      "types": [
        "guideline",
        "framework"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'set of rules' refers to a collection of logical guidelines that, when applied to SHACL shapes, can be used to identify potential violations of those shapes within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-6-Sentence-2",
          "local_name": "set of rules",
          "local_types": [
            "guideline",
            "framework"
          ],
          "iri": "Entity-set_of_rule-Mention-1"
        }
      ],
      "relevance": 0.6416015625
    },
    "Entity-modern_kg": {
      "node_id": "modern_kg",
      "disambiguation_index": 0,
      "label": "modern KGs",
      "aliases": [
        "modern KGs"
      ],
      "types": [
        "knowledge graph",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Modern KGs refer to contemporary knowledge graphs that are schema-free and characterized by their large-scale, flexible data structures, which present challenges in learning shape constraints due to their lack of predefined schemas.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-2",
          "local_name": "modern KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-modern_kg-Mention-1"
        }
      ],
      "relevance": 0.6416015625
    },
    "Entity-mined_shape": {
      "node_id": "mined_shape",
      "disambiguation_index": 0,
      "label": "mined shapes",
      "aliases": [
        "mined shapes"
      ],
      "types": [
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Mined shapes refer to the SHACL shapes that are automatically derived from knowledge graph data using the Inverse Open Path rules, which express specific structural patterns and constraints within the graph.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-8",
          "local_name": "mined shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-mined_shape-Mention-1"
        }
      ],
      "relevance": 0.6416015625
    },
    "Entity-discovered_constraint": {
      "node_id": "discovered_constraint",
      "disambiguation_index": 0,
      "label": "discovered constraints",
      "aliases": [
        "discovered constraints"
      ],
      "types": [
        "constraint"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Discovered constraints refer to the shape constraints learned from knowledge graphs using the SHACLEARNER algorithm, which aim to provide a more certain and informative representation of the structural patterns within the data.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-4",
          "local_name": "discovered constraints",
          "local_types": [
            "constraint"
          ],
          "iri": "Entity-discovered_constraint-Mention-1"
        }
      ],
      "relevance": 0.6416015625
    },
    "Entity-iop_standard_confidence": {
      "node_id": "iop_standard_confidence",
      "disambiguation_index": 0,
      "label": "IOP Standard Confidence",
      "aliases": [
        "IOP Standard Confidence"
      ],
      "types": [
        "measure",
        "quality measure",
        "quality metric",
        "metric",
        "IOP",
        "rule quality measure"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "IOP Standard Confidence is a quality measure that quantifies the uncertainty associated with a candidate shape in the context of learning Inverse Open Path rules for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-4",
          "local_name": "IOP Standard Confidence",
          "local_types": [
            "measure",
            "quality measure",
            "quality metric",
            "metric",
            "IOP",
            "rule quality measure"
          ],
          "iri": "Entity-iop_standard_confidence-Mention-1"
        }
      ],
      "relevance": 0.640625
    },
    "Entity-oprl_for_active_knowledge_graph_completion": {
      "node_id": "oprl_for_active_knowledge_graph_completion",
      "disambiguation_index": 0,
      "label": "OPRL for active knowledge graph completion",
      "aliases": [
        "OPRL for active knowledge graph completion"
      ],
      "types": [
        "knowledge graph",
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "OPRL for active knowledge graph completion refers to a method that defines open path rules in knowledge graphs, which are logical constructs used to infer the existence of facts based on the relationships between entities, facilitating the active completion of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-1",
          "local_name": "OPRL for active knowledge graph completion",
          "local_types": [
            "knowledge graph",
            "method"
          ],
          "iri": "Entity-oprl_for_active_knowledge_graph_completion-Mention-1"
        }
      ],
      "relevance": 0.640625
    },
    "Entity-shape_constraint_language": {
      "node_id": "shape_constraint_language",
      "disambiguation_index": 0,
      "label": "Shapes Constraint Language",
      "aliases": [
        "Shapes Constraint Language",
        "the Shapes Constraint Language (SHACL)",
        "the Shapes Constraint Language",
        "Shapes Constraint Language (SHACL)"
      ],
      "types": [
        "constraint language",
        "W3C recommendation",
        "standard",
        "schema definition",
        "schema",
        "specification",
        "schema definition language",
        "language"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "The Shapes Constraint Language (SHACL) is a W3C recommendation that provides a framework for defining and validating constraints on graph data using a schema definition language.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-3",
          "local_name": "Shapes Constraint Language",
          "local_types": [
            "standard",
            "specification",
            "W3C recommendation",
            "language"
          ],
          "iri": "Entity-shape_constraint_language-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "Shapes Constraint Language",
          "local_types": [
            "standard",
            "schema definition",
            "schema",
            "specification",
            "schema definition language",
            "language"
          ],
          "iri": "Entity-shape_constraint_language-Mention-2"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "the Shapes Constraint Language (SHACL)",
          "local_types": [
            "language",
            "constraint language"
          ],
          "iri": "Entity-shape_constraint_language-Mention-3"
        },
        {
          "reference": "Section-1-Paragraph-1-Sentence-3",
          "local_name": "the Shapes Constraint Language",
          "local_types": [
            "specification",
            "language"
          ],
          "iri": "Entity-shape_constraint_language-Mention-4"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "Shapes Constraint Language (SHACL)",
          "local_types": [
            "standard",
            "constraint language",
            "language"
          ],
          "iri": "Entity-shape_constraint_language-Mention-5"
        }
      ],
      "relevance": 0.64013671875
    },
    "Entity-constraint_on_graph_data": {
      "node_id": "constraint_on_graph_data",
      "disambiguation_index": 0,
      "label": "constraints on graph data",
      "aliases": [
        "constraints on graph data",
        "constraints for graphs"
      ],
      "types": [
        "constraint",
        "graph"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'constraints on graph data' refers to the specifications defined by the Shapes Constraint Language (SHACL), which are used to validate the structure and integrity of knowledge graphs by expressing rules and conditions that the graph data must satisfy.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-3",
          "local_name": "constraints on graph data",
          "local_types": [
            "constraint"
          ],
          "iri": "Entity-constraint_on_graph_data-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-4",
          "local_name": "constraints for graphs",
          "local_types": [
            "constraint",
            "graph"
          ],
          "iri": "Entity-constraint_on_graph_data-Mention-2"
        }
      ],
      "relevance": 0.64013671875
    },
    "Entity-sampling": {
      "node_id": "sampling",
      "disambiguation_index": 0,
      "label": "Sampling",
      "aliases": [
        "Sampling",
        "sampling"
      ],
      "types": [
        "function",
        "technique",
        "method",
        "sampling technique",
        "algorithm",
        "research technique",
        "statistical technique",
        "statistical method",
        "methodology",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Sampling refers to the process of selecting a subset of data from a knowledge graph (KG) to facilitate the learning of inverse open path (IOP) rules and to derive specific shapes for analysis.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-5",
          "local_name": "Sampling",
          "local_types": [
            "function",
            "method",
            "process",
            "statistical technique"
          ],
          "iri": "Entity-sampling-Mention-1"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "Sampling",
          "local_types": [
            "method",
            "sampling technique"
          ],
          "iri": "Entity-sampling-Mention-2"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "Sampling",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-sampling-Mention-3"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-2",
          "local_name": "sampling",
          "local_types": [
            "methodology",
            "research technique"
          ],
          "iri": "Entity-sampling-Mention-4"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-3",
          "local_name": "Sampling",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-sampling-Mention-5"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-1",
          "local_name": "Sampling",
          "local_types": [
            "technique",
            "statistical method",
            "method",
            "algorithm"
          ],
          "iri": "Entity-sampling-Mention-6"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-3",
          "local_name": "sampling",
          "local_types": [
            "statistical method",
            "method"
          ],
          "iri": "Entity-sampling-Mention-7"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-1",
          "local_name": "sampling",
          "local_types": [
            "statistical method",
            "method"
          ],
          "iri": "Entity-sampling-Mention-8"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "sampling",
          "local_types": [
            "method",
            "technique"
          ],
          "iri": "Entity-sampling-Mention-9"
        }
      ],
      "relevance": 0.64013671875
    },
    "Entity-the_quality_of_the_rule": {
      "node_id": "the_quality_of_the_rule",
      "disambiguation_index": 0,
      "label": "the qualities of the rule",
      "aliases": [
        "the qualities of the rule"
      ],
      "types": [
        "quality",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The qualities of the rule refer to the metrics IOPSC (inverse open path standard confidence) and IOPHC (inverse open path head coverage), which quantify the effectiveness and reliability of inverse open path rules in expressing constraints on knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-5",
          "local_name": "the qualities of the rule",
          "local_types": [
            "quality",
            "rule"
          ],
          "iri": "Entity-the_quality_of_the_rule-Mention-1"
        }
      ],
      "relevance": 0.64013671875
    },
    "Entity-good_op_rule": {
      "node_id": "good_op_rule",
      "disambiguation_index": 0,
      "label": "good OP rule",
      "aliases": [
        "good OP rule"
      ],
      "types": [
        "OP rule",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The 'good OP rule' refers to a high-scoring candidate open path rule that indicates both its own quality and the quality of an associated inverse open path rule in the context of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-3",
          "local_name": "good OP rule",
          "local_types": [
            "OP rule",
            "rule"
          ],
          "iri": "Entity-good_op_rule-Mention-1"
        }
      ],
      "relevance": 0.64013671875
    },
    "Entity-inverse_open_path_rule": {
      "node_id": "inverse_open_path_rule",
      "disambiguation_index": 0,
      "label": "Inverse Open Path rules",
      "aliases": [
        "inverse open path rules",
        "Inverse Open Path rules"
      ],
      "types": [
        "logical construct",
        "shape",
        "concept",
        "rules",
        "formalism",
        "data structure",
        "logic",
        "rule",
        "rule type",
        "theoretical concept"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Inverse Open Path rules are a formalism in predicate logic that represent specific shapes as paths over connected entities in knowledge graphs, serving as foundational elements for constructing more complex shapes like trees, while incorporating cardinality constraints and quality measures.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "Inverse Open Path rules",
          "local_types": [
            "concept",
            "rules",
            "formalism",
            "rule",
            "rule type",
            "theoretical concept"
          ],
          "iri": "Entity-inverse_open_path_rule-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-1",
          "local_name": "inverse open path rules",
          "local_types": [
            "concept",
            "rule",
            "logic"
          ],
          "iri": "Entity-inverse_open_path_rule-Mention-2"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-3",
          "local_name": "Inverse Open Path rules",
          "local_types": [
            "concept",
            "rules"
          ],
          "iri": "Entity-inverse_open_path_rule-Mention-3"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-4",
          "local_name": "Inverse Open Path rules",
          "local_types": [
            "logical construct",
            "shape",
            "data structure",
            "formalism",
            "rule"
          ],
          "iri": "Entity-inverse_open_path_rule-Mention-4"
        }
      ],
      "relevance": 0.6396484375
    },
    "Entity-open_path_rule_learner": {
      "node_id": "open_path_rule_learner",
      "disambiguation_index": 0,
      "label": "Open Path Rule Learner",
      "aliases": [
        "open path rule learner",
        "Open Path Rule Learner"
      ],
      "types": [
        "machine learning model",
        "method",
        "algorithm"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "The Open Path Rule Learner is an embedding-based machine learning algorithm designed to mine open path rules from knowledge graphs, facilitating the learning of shape constraints and enhancing the expressivity of patterns through the introduction of cardinality constraints and tree shapes.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "Open Path Rule Learner",
          "local_types": [
            "machine learning model",
            "method",
            "algorithm"
          ],
          "iri": "Entity-open_path_rule_learner-Mention-1"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-1",
          "local_name": "open path rule learner",
          "local_types": [
            "algorithm",
            "machine learning model"
          ],
          "iri": "Entity-open_path_rule_learner-Mention-2"
        }
      ],
      "relevance": 0.6396484375
    },
    "Entity-method_to_aggregate_iop_rule": {
      "node_id": "method_to_aggregate_iop_rule",
      "disambiguation_index": 0,
      "label": "method to aggregate IOP rules",
      "aliases": [
        "method to aggregate IOP rules",
        "method for aggregating IOP rules into trees"
      ],
      "types": [
        "method",
        "algorithm",
        "methodology",
        "aggregation method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'method to aggregate IOP rules' refers to a systematic approach proposed in the paper for combining Inverse Open Path rules into more complex tree structures, enhancing the representation of knowledge graph shapes.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "method to aggregate IOP rules",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-method_to_aggregate_iop_rule-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "method for aggregating IOP rules into trees",
          "local_types": [
            "methodology",
            "method",
            "aggregation method"
          ],
          "iri": "Entity-method_to_aggregate_iop_rule-Mention-2"
        }
      ],
      "relevance": 0.6396484375
    },
    "Entity-knowledge": {
      "node_id": "knowledge",
      "disambiguation_index": 0,
      "label": "knowledge",
      "aliases": [
        "knowledge"
      ],
      "types": [
        "information",
        "cognitive resource"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of this paper, 'knowledge' refers to the information that can be acquired and represented through constraints in knowledge graphs, particularly in relation to the learning of SHACL shapes from schema-free knowledge bases.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-2",
          "local_name": "knowledge",
          "local_types": [
            "information",
            "cognitive resource"
          ],
          "iri": "Entity-knowledge-Mention-1"
        }
      ],
      "relevance": 0.6396484375
    },
    "Entity-relationship_between_op_and_iop_rule": {
      "node_id": "relationship_between_op_and_iop_rule",
      "disambiguation_index": 0,
      "label": "relationship between OP and IOP rules",
      "aliases": [
        "OP and IOP rules",
        "relationship between OP and IOP rules"
      ],
      "types": [
        "relationship",
        "rule",
        "rules"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'relationship between OP and IOP rules' refers to the interconnectedness and mutual support in the mining and application of Open Path (OP) rules and their converse, Inverse Open Path (IOP) rules, in the context of learning and validating shapes in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-5-Sentence-2",
          "local_name": "relationship between OP and IOP rules",
          "local_types": [
            "relationship",
            "rule"
          ],
          "iri": "Entity-relationship_between_op_and_iop_rule-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-5-Sentence-2",
          "local_name": "OP and IOP rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-relationship_between_op_and_iop_rule-Mention-2"
        }
      ],
      "relevance": 0.63916015625
    },
    "Entity-human-kg-completion": {
      "node_id": "human-kg-completion",
      "disambiguation_index": 0,
      "label": "human-KG-completion",
      "aliases": [
        "human-KG-completion"
      ],
      "types": [
        "knowledge graph",
        "process",
        "data completion"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Human-KG-completion refers to a strategy for completing knowledge graphs by sequentially asking dependent questions along a shape tree, thereby reducing cognitive load for human users during the completion process.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-8",
          "local_name": "human-KG-completion",
          "local_types": [
            "knowledge graph",
            "process",
            "data completion"
          ],
          "iri": "Entity-human-kg-completion-Mention-1"
        }
      ],
      "relevance": 0.63916015625
    },
    "Entity-ideal_rule_learner": {
      "node_id": "ideal_rule_learner",
      "disambiguation_index": 0,
      "label": "ideal rule learner",
      "aliases": [
        "ideal rule learner"
      ],
      "types": [
        "machine learning model",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The ideal rule learner refers to a variant of the SHACLEARNER algorithm that performs a brute-force search to generate and evaluate all possible Inverse Open Path (IOP) rules without any sampling or heuristic pruning, ensuring completeness at the cost of efficiency.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-2",
          "local_name": "ideal rule learner",
          "local_types": [
            "machine learning model",
            "algorithm"
          ],
          "iri": "Entity-ideal_rule_learner-Mention-1"
        }
      ],
      "relevance": 0.63916015625
    },
    "Entity-this_experiment": {
      "node_id": "this_experiment",
      "disambiguation_index": 0,
      "label": "this experiment",
      "aliases": [
        "this experiment"
      ],
      "types": [
        "experiment"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This experiment refers to the evaluation of the SHACLEARNER system using the small Poker knowledge graph (KG) to learn IOP rules without employing sampling or heuristic mechanisms.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-1",
          "local_name": "this experiment",
          "local_types": [
            "experiment"
          ],
          "iri": "Entity-this_experiment-Mention-1"
        }
      ],
      "relevance": 0.63916015625
    },
    "Entity-ontology_constraint_pattern": {
      "node_id": "ontology_constraint_pattern",
      "disambiguation_index": 0,
      "label": "ontology constraint patterns",
      "aliases": [
        "ontology constraint patterns"
      ],
      "types": [
        "knowledge representation",
        "constraint",
        "constraint pattern",
        "ontology",
        "pattern"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Ontology constraint patterns refer to predefined rules or structures derived from ontologies that guide the automatic generation of SHACL shapes for validating knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-2",
          "local_name": "ontology constraint patterns",
          "local_types": [
            "knowledge representation",
            "constraint",
            "constraint pattern",
            "ontology",
            "pattern"
          ],
          "iri": "Entity-ontology_constraint_pattern-Mention-1"
        }
      ],
      "relevance": 0.638671875
    },
    "Entity-the_path_p1__p2__...__pm": {
      "node_id": "the_path_p1__p2__...__pm",
      "disambiguation_index": 0,
      "label": "the path P1, P2, ..., Pm",
      "aliases": [
        "the path P1, P2, ..., Pm"
      ],
      "types": [
        "path"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The path P1, P2, ..., Pm refers to a sequence of predicates in a knowledge graph that connect entities, used to evaluate the satisfaction of rules in the context of the Inverse Open Path (IOP) framework for learning shapes in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-1",
          "local_name": "the path P1, P2, ..., Pm",
          "local_types": [
            "path"
          ],
          "iri": "Entity-the_path_p1__p2__...__pm-Mention-1"
        }
      ],
      "relevance": 0.638671875
    },
    "Entity-smart_kg_editor": {
      "node_id": "smart_kg_editor",
      "disambiguation_index": 0,
      "label": "smart KG editor",
      "aliases": [
        "smart KG editor"
      ],
      "types": [
        "knowledge graph",
        "tool",
        "KG",
        "editor",
        "software"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The smart KG editor is a software tool that utilizes tree structures generated by SHACLEARNER to facilitate human interaction and completion tasks within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-8",
          "local_name": "smart KG editor",
          "local_types": [
            "knowledge graph",
            "tool",
            "KG",
            "editor",
            "software"
          ],
          "iri": "Entity-smart_kg_editor-Mention-1"
        }
      ],
      "relevance": 0.6376953125
    },
    "Entity-the_iop_rule_r": {
      "node_id": "the_iop_rule_r",
      "disambiguation_index": 0,
      "label": "the IOP rule r",
      "aliases": [
        "a set of IOP rules R",
        "the IOP rule r"
      ],
      "types": [
        "rules",
        "rule",
        "IOP"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The IOP rule r is a specific instance of an Inverse Open Path rule defined as Pt(x, z0) -> P1(z0, x) ^ P2(z1, y), which expresses a logical relationship between entities in a knowledge graph using predicates.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "the IOP rule r",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_iop_rule_r-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-4",
          "local_name": "a set of IOP rules R",
          "local_types": [
            "rules",
            "IOP"
          ],
          "iri": "Entity-the_iop_rule_r-Mention-2"
        }
      ],
      "relevance": 0.63720703125
    },
    "Entity-strategy": {
      "node_id": "strategy",
      "disambiguation_index": 0,
      "label": "strategy",
      "aliases": [
        "strategy"
      ],
      "types": [
        "method",
        "approach"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'strategy' refers to a depth-first questioning approach for human knowledge graph (KG) completion, which utilizes tree structures generated by the SHACLEARNER method to reduce cognitive load during the querying process.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-8",
          "local_name": "strategy",
          "local_types": [
            "method",
            "approach"
          ],
          "iri": "Entity-strategy-Mention-1"
        }
      ],
      "relevance": 0.63720703125
    },
    "Entity-potential_iop_rule": {
      "node_id": "potential_iop_rule",
      "disambiguation_index": 0,
      "label": "potential IOP rules",
      "aliases": [
        "potential IOP rules"
      ],
      "types": [
        "rules",
        "rule",
        "IOP"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Potential IOP rules refer to the candidate rules generated during the learning process of Inverse Open Path rules, which are evaluated and refined to create annotated IOP rules for expressing constraints in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-6",
          "local_name": "potential IOP rules",
          "local_types": [
            "rules",
            "rule",
            "IOP"
          ],
          "iri": "Entity-potential_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.63720703125
    },
    "Entity-kg": {
      "node_id": "kg",
      "disambiguation_index": 0,
      "label": "KG",
      "aliases": [
        "KG",
        "KG data",
        "KGs"
      ],
      "types": [
        "knowledge graph",
        "data",
        "dataset",
        "data source",
        "concept",
        "data structure",
        "abbreviation",
        "data representation",
        "graph database",
        "acronym",
        "database",
        "graph"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "KG refers to a knowledge graph, which is a large data structure that represents information in a graph format, allowing for the organization and retrieval of data through interconnected entities.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-4",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure",
            "data representation"
          ],
          "iri": "Entity-kg-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-2-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "graph database",
            "data structure",
            "abbreviation"
          ],
          "iri": "Entity-kg-Mention-2"
        },
        {
          "reference": "Section-1-Paragraph-2-Sentence-3",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-3"
        },
        {
          "reference": "Section-1-Paragraph-3-Sentence-2",
          "local_name": "KGs",
          "local_types": [
            "data structure",
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-4"
        },
        {
          "reference": "Section-2-Paragraph-2-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "concept",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-5"
        },
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "concept",
            "data structure",
            "acronym"
          ],
          "iri": "Entity-kg-Mention-6"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "concept",
            "data structure",
            "abbreviation",
            "database"
          ],
          "iri": "Entity-kg-Mention-7"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-4",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure",
            "abbreviation",
            "database"
          ],
          "iri": "Entity-kg-Mention-8"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure",
            "abbreviation",
            "data representation"
          ],
          "iri": "Entity-kg-Mention-9"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "concept",
            "data structure",
            "acronym"
          ],
          "iri": "Entity-kg-Mention-10"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure",
            "abbreviation"
          ],
          "iri": "Entity-kg-Mention-11"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure",
            "abbreviation",
            "data representation"
          ],
          "iri": "Entity-kg-Mention-12"
        },
        {
          "reference": "Section-1-Paragraph-1-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "graph database",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-13"
        },
        {
          "reference": "Section-1-Paragraph-1-Sentence-2",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "database"
          ],
          "iri": "Entity-kg-Mention-14"
        },
        {
          "reference": "Section-1-Paragraph-3-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "graph database",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-15"
        },
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-16"
        },
        {
          "reference": "Section-2-Paragraph-1-Sentence-2",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-17"
        },
        {
          "reference": "Section-2-Paragraph-1-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-18"
        },
        {
          "reference": "Section-2-Paragraph-2-Sentence-5",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-19"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-20"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-21"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-6",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-22"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-5",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "concept",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-23"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-24"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-5",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-25"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-8",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data representation"
          ],
          "iri": "Entity-kg-Mention-26"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-6",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-27"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-28"
        },
        {
          "reference": "Section-3-Paragraph-5-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-29"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-30"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-4",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-31"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-32"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-33"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-34"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-35"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-36"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-4",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-37"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure",
            "database"
          ],
          "iri": "Entity-kg-Mention-38"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-2",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-39"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-40"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-5",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-41"
        },
        {
          "reference": "Section-5-Paragraph-2-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure",
            "data representation",
            "database"
          ],
          "iri": "Entity-kg-Mention-42"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-4",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-43"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-44"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-45"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-4",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-46"
        },
        {
          "reference": "Section-6-Paragraph-5-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-47"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-4",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-48"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-49"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-50"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-51"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-52"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-53"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-4",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-54"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-55"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-56"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-4",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-57"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "concept",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-58"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-3",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-59"
        },
        {
          "reference": "Section-12-Paragraph-9-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-60"
        },
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-61"
        },
        {
          "reference": "Section-13-Paragraph-4-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-62"
        },
        {
          "reference": "Section-13-Paragraph-4-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-63"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure",
            "abbreviation",
            "graph"
          ],
          "iri": "Entity-kg-Mention-64"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-65"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-5",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-66"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-67"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-2",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-68"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-8",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-69"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-70"
        },
        {
          "reference": "Section-14-Paragraph-6-Sentence-3",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-71"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-72"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-4",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-73"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-74"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-4",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-75"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-76"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-77"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-3",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "dataset"
          ],
          "iri": "Entity-kg-Mention-78"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-5",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-79"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-80"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-81"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg-Mention-82"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-83"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-84"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-85"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-3",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-86"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure",
            "abbreviation"
          ],
          "iri": "Entity-kg-Mention-87"
        },
        {
          "reference": "Section-18-Paragraph-3-Sentence-1",
          "local_name": "KG",
          "local_types": [
            "knowledge graph",
            "data structure",
            "abbreviation"
          ],
          "iri": "Entity-kg-Mention-88"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-1",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure",
            "abbreviation"
          ],
          "iri": "Entity-kg-Mention-89"
        },
        {
          "reference": "Section-18-Paragraph-5-Sentence-2",
          "local_name": "KGs",
          "local_types": [
            "knowledge graph",
            "data structure",
            "abbreviation"
          ],
          "iri": "Entity-kg-Mention-90"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-5",
          "local_name": "KG data",
          "local_types": [
            "knowledge graph",
            "data",
            "data source"
          ],
          "iri": "Entity-kg-Mention-91"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-1",
          "local_name": "KG data",
          "local_types": [
            "knowledge graph",
            "data"
          ],
          "iri": "Entity-kg-Mention-92"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-5",
          "local_name": "KG data",
          "local_types": [
            "knowledge graph",
            "data",
            "data structure"
          ],
          "iri": "Entity-kg-Mention-93"
        }
      ],
      "relevance": 0.63671875
    },
    "Entity-iophc": {
      "node_id": "iophc",
      "disambiguation_index": 0,
      "label": "IOPHC",
      "aliases": [
        "IOPHC",
        "IOPHC(r)"
      ],
      "types": [
        "formula",
        "method",
        "mathematical function",
        "quality metric",
        "prefix",
        "rule",
        "organization",
        "feature",
        "data attribute",
        "concept",
        "coverage",
        "algorithm",
        "evaluation metric",
        "performance measure",
        "acronym",
        "definition",
        "threshold",
        "entity",
        "quality",
        "quality measurement",
        "annotation",
        "function",
        "performance indicator",
        "statistical measure",
        "rule attribute",
        "evaluation criterion",
        "computation",
        "measure",
        "mathematical expression",
        "measurement",
        "variable",
        "quality measure",
        "parameter",
        "term",
        "metric"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "IOPHC refers to the inverse open path head coverage, a quality measure that quantifies the proportion of instances in a knowledge graph that satisfy the head of an inverse open path rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-5",
          "local_name": "IOPHC",
          "local_types": [
            "entity",
            "variable",
            "parameter",
            "quality",
            "acronym"
          ],
          "iri": "Entity-iophc-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-1",
          "local_name": "IOPHC",
          "local_types": [
            "computation",
            "measure",
            "concept",
            "quality measure",
            "evaluation metric",
            "acronym",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-1",
          "local_name": "IOPHC",
          "local_types": [
            "definition",
            "entity",
            "measure",
            "concept",
            "quality measure",
            "evaluation metric",
            "acronym",
            "metric",
            "organization"
          ],
          "iri": "Entity-iophc-Mention-3"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-3",
          "local_name": "IOPHC",
          "local_types": [
            "quality metric",
            "measurement",
            "quality measurement",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-4"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-2",
          "local_name": "IOPHC",
          "local_types": [
            "annotation",
            "coverage",
            "quality measure",
            "evaluation metric",
            "prefix",
            "rule",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-5"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-1",
          "local_name": "IOPHC",
          "local_types": [
            "concept",
            "coverage",
            "quality measure",
            "evaluation metric",
            "quality",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-6"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "IOPHC",
          "local_types": [
            "method",
            "algorithm",
            "acronym",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-1",
          "local_name": "IOPHC",
          "local_types": [
            "statistical measure",
            "measure",
            "term",
            "acronym",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-8"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-7",
          "local_name": "IOPHC",
          "local_types": [
            "statistical measure",
            "measure",
            "variable",
            "parameter",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-9"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "IOPHC",
          "local_types": [
            "rule attribute",
            "entity",
            "measure",
            "quality measure",
            "parameter",
            "acronym"
          ],
          "iri": "Entity-iophc-Mention-10"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-3",
          "local_name": "IOPHC",
          "local_types": [
            "evaluation criterion",
            "measure",
            "quality measure",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-11"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-3",
          "local_name": "IOPHC",
          "local_types": [
            "function",
            "measure",
            "quality measure",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-12"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-4",
          "local_name": "IOPHC",
          "local_types": [
            "mathematical function",
            "statistical measure"
          ],
          "iri": "Entity-iophc-Mention-13"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-2",
          "local_name": "IOPHC",
          "local_types": [
            "evaluation metric",
            "metric",
            "coverage",
            "quality measure"
          ],
          "iri": "Entity-iophc-Mention-14"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-2",
          "local_name": "IOPHC",
          "local_types": [
            "performance indicator",
            "threshold",
            "coverage",
            "quality measure",
            "evaluation metric",
            "quality metric",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-15"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-3",
          "local_name": "IOPHC",
          "local_types": [
            "feature",
            "data attribute",
            "coverage",
            "quality measure",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-16"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-1",
          "local_name": "IOPHC",
          "local_types": [
            "statistical measure",
            "coverage",
            "quality measure",
            "parameter",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-17"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-3",
          "local_name": "IOPHC",
          "local_types": [
            "measurement",
            "variable"
          ],
          "iri": "Entity-iophc-Mention-18"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-4",
          "local_name": "IOPHC",
          "local_types": [
            "performance measure",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-19"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-4",
          "local_name": "IOPHC",
          "local_types": [
            "performance indicator",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-20"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-5",
          "local_name": "IOPHC",
          "local_types": [
            "metric",
            "evaluation criterion"
          ],
          "iri": "Entity-iophc-Mention-21"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-8",
          "local_name": "IOPHC(r)",
          "local_types": [
            "function",
            "mathematical expression",
            "formula",
            "metric"
          ],
          "iri": "Entity-iophc-Mention-22"
        }
      ],
      "relevance": 0.63671875
    },
    "Entity-these_uncertain_shape": {
      "node_id": "these_uncertain_shape",
      "disambiguation_index": 0,
      "label": "These uncertain shapes",
      "aliases": [
        "These uncertain shapes"
      ],
      "types": [
        "shapes"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "These uncertain shapes refer to the tree structures derived from annotated Inverse Open Path rules in knowledge graphs, which may not meet minimum quality thresholds for standard SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-1",
          "local_name": "These uncertain shapes",
          "local_types": [
            "shapes"
          ],
          "iri": "Entity-these_uncertain_shape-Mention-1"
        }
      ],
      "relevance": 0.63671875
    },
    "Entity-many_kg": {
      "node_id": "many_kg",
      "disambiguation_index": 0,
      "label": "many KGs",
      "aliases": [
        "many KGs"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Many KGs refers to a collection of knowledge graphs that are often enhanced with type information to facilitate data understanding, validation, and inference processes.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-2",
          "local_name": "many KGs",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-many_kg-Mention-1"
        }
      ],
      "relevance": 0.63623046875
    },
    "Entity-all_possible_rule": {
      "node_id": "all_possible_rule",
      "disambiguation_index": 0,
      "label": "all possible rules",
      "aliases": [
        "all possible rules"
      ],
      "types": [
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'all possible rules' refers to the complete set of Inverse Open Path (IOP) rules that can be generated and evaluated by the ideal version of the SHACLEARNER system, which operates without any sampling or heuristic pruning, thereby encompassing every potential rule configuration up to a specified maximum length.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-4",
          "local_name": "all possible rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-all_possible_rule-Mention-1"
        }
      ],
      "relevance": 0.63623046875
    },
    "Entity-open_path__op__rule": {
      "node_id": "open_path__op__rule",
      "disambiguation_index": 0,
      "label": "open path (OP) rules",
      "aliases": [
        "the rule",
        "open path (OP) rules"
      ],
      "types": [
        "knowledge graph completion method",
        "knowledge representation",
        "method",
        "concept",
        "rule",
        "logic structure",
        "rule type"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Open path (OP) rules are a type of knowledge graph completion method that define logical structures with two open variables, used to imply the existence of facts in a knowledge graph through a sequence of predicates.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-1",
          "local_name": "open path (OP) rules",
          "local_types": [
            "knowledge graph completion method",
            "knowledge representation",
            "method",
            "concept",
            "rule",
            "logic structure",
            "rule type"
          ],
          "iri": "Entity-open_path__op__rule-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-2",
          "local_name": "the rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-open_path__op__rule-Mention-2"
        }
      ],
      "relevance": 0.63525390625
    },
    "Entity-this_paper_(1)": {
      "node_id": "this_paper_(1)",
      "disambiguation_index": 1,
      "label": "this paper",
      "aliases": [
        "this paper"
      ],
      "types": [
        "research",
        "document",
        "paper"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This paper presents a method for learning SHACL shapes from knowledge graphs to describe patterns, validate the graphs, and facilitate new data entry.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-1",
          "local_name": "this paper",
          "local_types": [
            "research",
            "document",
            "paper"
          ],
          "iri": "Entity-this_paper_(1)-Mention-1"
        }
      ],
      "relevance": 0.63525390625
    },
    "Entity-algorithm_2": {
      "node_id": "algorithm_2",
      "disambiguation_index": 0,
      "label": "Algorithm 2",
      "aliases": [
        "Algorithm 2"
      ],
      "types": [
        "reference",
        "computational method",
        "method",
        "algorithm"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Algorithm 2 refers to the sampling method used in the SHACLEARNER framework to prune less relevant entities and predicates from a knowledge graph, thereby obtaining a sampled version that enhances the learning of Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "Algorithm 2",
          "local_types": [
            "reference",
            "algorithm"
          ],
          "iri": "Entity-algorithm_2-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-3",
          "local_name": "Algorithm 2",
          "local_types": [
            "computational method",
            "method",
            "algorithm"
          ],
          "iri": "Entity-algorithm_2-Mention-2"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-1",
          "local_name": "Algorithm 2",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-algorithm_2-Mention-3"
        }
      ],
      "relevance": 0.634765625
    },
    "Entity-fig_._3": {
      "node_id": "fig_._3",
      "disambiguation_index": 0,
      "label": "Fig. 3",
      "aliases": [
        "Fig. 3"
      ],
      "types": [
        "reference",
        "figure",
        "illustration"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Fig. 3 illustrates the process of deriving SHACL trees from annotated Inverse Open Path (IOP) rules as described in Algorithm 1 of the paper.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-1",
          "local_name": "Fig. 3",
          "local_types": [
            "reference",
            "figure",
            "illustration"
          ],
          "iri": "Entity-fig_._3-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-2",
          "local_name": "Fig. 3",
          "local_types": [
            "reference",
            "figure",
            "illustration"
          ],
          "iri": "Entity-fig_._3-Mention-2"
        }
      ],
      "relevance": 0.634765625
    },
    "Entity-k_": {
      "node_id": "k_",
      "disambiguation_index": 0,
      "label": "K'",
      "aliases": [
        "K'"
      ],
      "types": [
        "knowledge graph",
        "collection",
        "fact set",
        "subgraph",
        "graph theory",
        "set",
        "data structure",
        "variable",
        "parameter",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "K' refers to a sampled subset of the knowledge graph K, specifically focusing on the target predicate Pt for the purpose of learning inverse open path rules.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-5",
          "local_name": "K'",
          "local_types": [
            "knowledge graph",
            "data structure",
            "mathematical notation",
            "variable"
          ],
          "iri": "Entity-k_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-6",
          "local_name": "K'",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-k_-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-9",
          "local_name": "K'",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-k_-Mention-3"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "K'",
          "local_types": [
            "subgraph",
            "knowledge graph",
            "fact set"
          ],
          "iri": "Entity-k_-Mention-4"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-5",
          "local_name": "K'",
          "local_types": [
            "data structure",
            "set"
          ],
          "iri": "Entity-k_-Mention-5"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-4",
          "local_name": "K'",
          "local_types": [
            "subgraph",
            "graph theory",
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-k_-Mention-6"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-10",
          "local_name": "K'",
          "local_types": [
            "variable",
            "mathematical notation"
          ],
          "iri": "Entity-k_-Mention-7"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-11",
          "local_name": "K'",
          "local_types": [
            "variable",
            "mathematical notation"
          ],
          "iri": "Entity-k_-Mention-8"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-1",
          "local_name": "K'",
          "local_types": [
            "collection",
            "variable",
            "set"
          ],
          "iri": "Entity-k_-Mention-9"
        }
      ],
      "relevance": 0.634765625
    },
    "Entity-this_procedure": {
      "node_id": "this_procedure",
      "disambiguation_index": 0,
      "label": "This procedure",
      "aliases": [
        "This procedure"
      ],
      "types": [
        "procedure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This procedure refers to the method of deriving SHACL trees from annotated Inverse Open Path (IOP) rules using a greedy search algorithm, as implemented in the SHACLearner framework.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-2",
          "local_name": "This procedure",
          "local_types": [
            "procedure"
          ],
          "iri": "Entity-this_procedure-Mention-1"
        }
      ],
      "relevance": 0.634765625
    },
    "Entity-extended_validation_framework": {
      "node_id": "extended_validation_framework",
      "disambiguation_index": 0,
      "label": "extended validation framework",
      "aliases": [
        "extended validation framework",
        "an extended validation framework"
      ],
      "types": [
        "methodology",
        "framework",
        "validation framework"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The extended validation framework refers to a proposed method that facilitates the interaction between inference rules and SHACL shapes in knowledge graphs, enabling the detection of potential shape violations when rules are applied.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "extended validation framework",
          "local_types": [
            "methodology",
            "validation framework",
            "framework"
          ],
          "iri": "Entity-extended_validation_framework-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "an extended validation framework",
          "local_types": [
            "framework"
          ],
          "iri": "Entity-extended_validation_framework-Mention-2"
        }
      ],
      "relevance": 0.63427734375
    },
    "Entity-it_converse_iop_version": {
      "node_id": "it_converse_iop_version",
      "disambiguation_index": 0,
      "label": "its converse IOP version",
      "aliases": [
        "its converse IOP version"
      ],
      "types": [
        "version"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'its converse IOP version' refers to the inverse open path (IOP) rule, which is derived from an open path (OP) rule by swapping the predicates in the head and body, thereby establishing a relationship between the two types of rules in the context of knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-1",
          "local_name": "its converse IOP version",
          "local_types": [
            "version"
          ],
          "iri": "Entity-it_converse_iop_version-Mention-1"
        }
      ],
      "relevance": 0.63427734375
    },
    "Entity-kg_rule_learning_system": {
      "node_id": "kg_rule_learning_system",
      "disambiguation_index": 0,
      "label": "KG rule learning systems",
      "aliases": [
        "KG rule learning systems"
      ],
      "types": [
        "rule learning",
        "system",
        "learning framework",
        "machine learning"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "KG rule learning systems are computational frameworks that utilize different rule languages to formulate and express rules for inferring relationships and patterns within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-2",
          "local_name": "KG rule learning systems",
          "local_types": [
            "rule learning",
            "system",
            "learning framework",
            "machine learning"
          ],
          "iri": "Entity-kg_rule_learning_system-Mention-1"
        }
      ],
      "relevance": 0.6337890625
    },
    "Entity-benchmark_kg": {
      "node_id": "benchmark_kg",
      "disambiguation_index": 0,
      "label": "benchmark KGs",
      "aliases": [
        "benchmark KGs"
      ],
      "types": [
        "knowledge graph",
        "data structure",
        "dataset"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Benchmark KGs refer to standardized knowledge graphs used for evaluating and comparing the performance of algorithms and models in various tasks related to data representation and retrieval.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-1",
          "local_name": "benchmark KGs",
          "local_types": [
            "knowledge graph",
            "data structure",
            "dataset"
          ],
          "iri": "Entity-benchmark_kg-Mention-1"
        }
      ],
      "relevance": 0.6337890625
    },
    "Entity-a_greedy_search": {
      "node_id": "a_greedy_search",
      "disambiguation_index": 0,
      "label": "a greedy search",
      "aliases": [
        "a greedy search"
      ],
      "types": [
        "search",
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A greedy search is a method used to iteratively select the best available option from a list of rules based on a defined quality measure, specifically to aggregate Inverse Open Path rules for constructing SHACL trees in the context of knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-3",
          "local_name": "a greedy search",
          "local_types": [
            "method"
          ],
          "iri": "Entity-a_greedy_search-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-1",
          "local_name": "a greedy search",
          "local_types": [
            "search"
          ],
          "iri": "Entity-a_greedy_search-Mention-2"
        }
      ],
      "relevance": 0.6337890625
    },
    "Entity-manual_kg_editing_task": {
      "node_id": "manual_kg_editing_task",
      "disambiguation_index": 0,
      "label": "manual KG editing tasks",
      "aliases": [
        "manual KG editing tasks",
        "KG editing tasks"
      ],
      "types": [
        "editing process",
        "task",
        "editing",
        "data management"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Manual KG editing tasks refer to the processes involved in modifying and maintaining knowledge graphs by applying constraints and structures defined by SHACL shapes to ensure data integrity and enhance the understanding of the graph's organization.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-4",
          "local_name": "manual KG editing tasks",
          "local_types": [
            "editing process",
            "task",
            "editing",
            "data management"
          ],
          "iri": "Entity-manual_kg_editing_task-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-1-Sentence-4",
          "local_name": "KG editing tasks",
          "local_types": [
            "data management",
            "task"
          ],
          "iri": "Entity-manual_kg_editing_task-Mention-2"
        }
      ],
      "relevance": 0.63330078125
    },
    "Entity-a_rule_(1)": {
      "node_id": "a_rule_(1)",
      "disambiguation_index": 1,
      "label": "a rule",
      "aliases": [
        "a rule",
        "the rules"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A rule in this context refers to an inverse open path (IOP) rule, which is a formalism used to express constraints on knowledge graphs by defining relationships between entities through a sequence of predicates, often annotated with cardinality to specify the minimum number of instances that must satisfy the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "a rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-a_rule_(1)-Mention-1"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-4",
          "local_name": "the rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-a_rule_(1)-Mention-2"
        }
      ],
      "relevance": 0.63330078125
    },
    "Entity-closed_path_rule": {
      "node_id": "closed_path_rule",
      "disambiguation_index": 0,
      "label": "closed path rules",
      "aliases": [
        "closed path rules",
        "Closed-path rules",
        "a closed path"
      ],
      "types": [
        "knowledge representation",
        "path type",
        "path",
        "concept",
        "theoretical framework",
        "rule",
        "logical framework",
        "rule type"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Closed path rules are a type of rule used in knowledge graph rule learning systems that express implications in the form of a closed loop of links between variables, allowing for the inference of new facts based on existing relationships in the graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-1-Sentence-1",
          "local_name": "closed path rules",
          "local_types": [
            "rule type",
            "rule",
            "concept",
            "knowledge representation"
          ],
          "iri": "Entity-closed_path_rule-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "closed path rules",
          "local_types": [
            "logical framework",
            "rule"
          ],
          "iri": "Entity-closed_path_rule-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-1",
          "local_name": "Closed-path rules",
          "local_types": [
            "knowledge representation",
            "concept",
            "theoretical framework",
            "rule",
            "rule type"
          ],
          "iri": "Entity-closed_path_rule-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-6",
          "local_name": "a closed path",
          "local_types": [
            "path type",
            "path"
          ],
          "iri": "Entity-closed_path_rule-Mention-4"
        }
      ],
      "relevance": 0.6328125
    },
    "Entity-all_benchmark": {
      "node_id": "all_benchmark",
      "disambiguation_index": 0,
      "label": "all benchmarks",
      "aliases": [
        "all benchmarks"
      ],
      "types": [
        "benchmark"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'all benchmarks' refers to the various knowledge graphs used in the evaluation of the SHACLEARNER method, specifically including YAGO2s, DBpedia, and Wikidata, to assess the quantity and quality of learned rules.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-4",
          "local_name": "all benchmarks",
          "local_types": [
            "benchmark"
          ],
          "iri": "Entity-all_benchmark-Mention-1"
        }
      ],
      "relevance": 0.6328125
    },
    "Entity-rule_and_constraint": {
      "node_id": "rule_and_constraint",
      "disambiguation_index": 0,
      "label": "rules and constraints",
      "aliases": [
        "rules and constraints"
      ],
      "types": [
        "constraint",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'rules and constraints' refers to the formal specifications in SHACL (Shapes Constraint Language) that define the structural and semantic requirements for data within knowledge graphs, enabling the validation and guidance of data population and integrity.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "rules and constraints",
          "local_types": [
            "constraint",
            "rule"
          ],
          "iri": "Entity-rule_and_constraint-Mention-1"
        }
      ],
      "relevance": 0.6328125
    },
    "Entity-set_of_shape": {
      "node_id": "set_of_shape",
      "disambiguation_index": 0,
      "label": "set of shapes",
      "aliases": [
        "set of shapes",
        "a set of shapes"
      ],
      "types": [
        "shapes",
        "shape",
        "set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'set of shapes' refers to a collection of defined constraints in the Shapes Constraint Language (SHACL) that are used to validate the structure and quality of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-5",
          "local_name": "set of shapes",
          "local_types": [
            "set",
            "shape"
          ],
          "iri": "Entity-set_of_shape-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-5",
          "local_name": "a set of shapes",
          "local_types": [
            "set",
            "shapes"
          ],
          "iri": "Entity-set_of_shape-Mention-2"
        }
      ],
      "relevance": 0.63232421875
    },
    "Entity-iop_version_of_the_same_rule": {
      "node_id": "iop_version_of_the_same_rule",
      "disambiguation_index": 0,
      "label": "IOP version of the same rule",
      "aliases": [
        "IOP version of the same rule"
      ],
      "types": [
        "rule",
        "IOP rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The 'IOP version of the same rule' refers to an inverse open path rule where the body and head predicates of a corresponding open path rule are swapped, allowing for the prediction of relationships in a knowledge graph based on the existence of certain paths between entities.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "IOP version of the same rule",
          "local_types": [
            "rule",
            "IOP rule"
          ],
          "iri": "Entity-iop_version_of_the_same_rule-Mention-1"
        }
      ],
      "relevance": 0.63232421875
    },
    "Entity-information_needed_for_learning_such_rule": {
      "node_id": "information_needed_for_learning_such_rule",
      "disambiguation_index": 0,
      "label": "information needed for learning such rules",
      "aliases": [
        "information needed for learning such rules"
      ],
      "types": [
        "information"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'information needed for learning such rules' refers to the specific entity set Esample and the corresponding fact set K' derived from a knowledge graph, which are essential for the process of discovering Inverse Open Path (IOP) rules related to a target predicate.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "information needed for learning such rules",
          "local_types": [
            "information"
          ],
          "iri": "Entity-information_needed_for_learning_such_rule-Mention-1"
        }
      ],
      "relevance": 0.63232421875
    },
    "Entity-synthetic_kg": {
      "node_id": "synthetic_kg",
      "disambiguation_index": 0,
      "label": "synthetic KG",
      "aliases": [
        "synthetic KG",
        "a small synthetic KG",
        "small synthetic KG"
      ],
      "types": [
        "knowledge graph",
        "synthetic",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The synthetic KG refers to a small, artificially created knowledge graph named Poker, which is designed to evaluate the completeness of the SHACLEARNER algorithm by representing poker hands and their associated attributes.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-3",
          "local_name": "synthetic KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-synthetic_kg-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-3",
          "local_name": "small synthetic KG",
          "local_types": [
            "knowledge graph",
            "synthetic"
          ],
          "iri": "Entity-synthetic_kg-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-3",
          "local_name": "a small synthetic KG",
          "local_types": [
            "knowledge graph",
            "synthetic"
          ],
          "iri": "Entity-synthetic_kg-Mention-3"
        }
      ],
      "relevance": 0.63134765625
    },
    "Entity-iop_head_coverage": {
      "node_id": "iop_head_coverage",
      "disambiguation_index": 0,
      "label": "IOP Head Coverage",
      "aliases": [
        "IOP Head Coverage"
      ],
      "types": [
        "measure",
        "quality measure",
        "quality metric",
        "metric",
        "IOP",
        "rule quality measure"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "IOP Head Coverage is a quality measure used to evaluate the effectiveness of Inverse Open Path rules in representing the quantified uncertainty of candidate shapes for knowledge graph validation and interestingness.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-4",
          "local_name": "IOP Head Coverage",
          "local_types": [
            "measure",
            "quality measure",
            "quality metric",
            "metric",
            "IOP",
            "rule quality measure"
          ],
          "iri": "Entity-iop_head_coverage-Mention-1"
        }
      ],
      "relevance": 0.630859375
    },
    "Entity-table_2": {
      "node_id": "table_2",
      "disambiguation_index": 0,
      "label": "Table 2",
      "aliases": [
        "Table 2"
      ],
      "types": [
        "data representation",
        "table"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Table 2 presents statistical data on the number of learned rules, average quality of IOP rules, proportion of target predicates with at least one IOP rule, and average running times in hours for the SHACLEARNER method applied to various knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "Table 2",
          "local_types": [
            "data representation",
            "table"
          ],
          "iri": "Entity-table_2-Mention-1"
        }
      ],
      "relevance": 0.630859375
    },
    "Entity-pruning": {
      "node_id": "pruning",
      "disambiguation_index": 0,
      "label": "pruning",
      "aliases": [
        "pruning"
      ],
      "types": [
        "technique",
        "data processing method",
        "process",
        "optimization method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pruning refers to a heuristic optimization method used in the SHACLEARNER algorithm to reduce the search space for learning Inverse Open Path rules from knowledge graphs, thereby improving computational performance while aiming to retain high-quality rules.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "pruning",
          "local_types": [
            "technique",
            "data processing method",
            "optimization method"
          ],
          "iri": "Entity-pruning-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-3",
          "local_name": "pruning",
          "local_types": [
            "process",
            "technique"
          ],
          "iri": "Entity-pruning-Mention-2"
        }
      ],
      "relevance": 0.630859375
    },
    "Entity-unmodified_shaclearner_of_algorithm_1": {
      "node_id": "unmodified_shaclearner_of_algorithm_1",
      "disambiguation_index": 0,
      "label": "unmodified SHACLEARNER of Algorithm 1",
      "aliases": [
        "unmodified SHACLEARNER of Algorithm 1"
      ],
      "types": [
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The unmodified SHACLEARNER of Algorithm 1 refers to the original version of the SHACLEARNER algorithm that operates without any sampling or heuristic pruning techniques, serving as a complete and brute-force rule learner for generating and evaluating all possible Inverse Open Path (IOP) rules from a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-5",
          "local_name": "unmodified SHACLEARNER of Algorithm 1",
          "local_types": [
            "algorithm"
          ],
          "iri": "Entity-unmodified_shaclearner_of_algorithm_1-Mention-1"
        }
      ],
      "relevance": 0.630859375
    },
    "Entity-shaclearner__-s-h_": {
      "node_id": "shaclearner__-s-h_",
      "disambiguation_index": 0,
      "label": "SHACLEARNER (-S-H)",
      "aliases": [
        "SHACLEARNER (-S+H)",
        "SHACLEARNER (-S-H)"
      ],
      "types": [
        "machine learning model",
        "system",
        "algorithm",
        "rule learner"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "SHACLEARNER (-S-H) refers to an ideal variant of the SHACLEARNER machine learning model that performs a complete brute-force search for learning inverse open path rules from knowledge graphs without employing any sampling or heuristic pruning techniques.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-2",
          "local_name": "SHACLEARNER (-S-H)",
          "local_types": [
            "machine learning model",
            "algorithm",
            "rule learner"
          ],
          "iri": "Entity-shaclearner__-s-h_-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "SHACLEARNER (-S+H)",
          "local_types": [
            "rule learner",
            "system",
            "algorithm"
          ],
          "iri": "Entity-shaclearner__-s-h_-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-4",
          "local_name": "SHACLEARNER (-S+H)",
          "local_types": [
            "algorithm"
          ],
          "iri": "Entity-shaclearner__-s-h_-Mention-3"
        }
      ],
      "relevance": 0.630859375
    },
    "Entity-this_topic": {
      "node_id": "this_topic",
      "disambiguation_index": 0,
      "label": "this topic",
      "aliases": [
        "this topic"
      ],
      "types": [
        "topic"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This topic refers to the limited prior research on the learning of SHACL shapes from knowledge graphs, particularly in the context of inferring constraints and structures from graph data.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-7",
          "local_name": "this topic",
          "local_types": [
            "topic"
          ],
          "iri": "Entity-this_topic-Mention-1"
        }
      ],
      "relevance": 0.630859375
    },
    "Entity-more_complex_tree_shape": {
      "node_id": "more_complex_tree_shape",
      "disambiguation_index": 0,
      "label": "more complex tree shapes",
      "aliases": [
        "more complex tree shapes"
      ],
      "types": [
        "structure",
        "tree shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "More complex tree shapes refer to intricate structural representations of data in knowledge graphs, constructed from simpler path-based rules, which encapsulate relationships and constraints among entities, thereby enhancing the expressiveness and validation capabilities of the shapes defined in the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-6",
          "local_name": "more complex tree shapes",
          "local_types": [
            "structure",
            "tree shape"
          ],
          "iri": "Entity-more_complex_tree_shape-Mention-1"
        }
      ],
      "relevance": 0.630859375
    },
    "Entity-the_target": {
      "node_id": "the_target",
      "disambiguation_index": 0,
      "label": "the target",
      "aliases": [
        "the target"
      ],
      "types": [
        "concept",
        "target"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'the target' refers to specific predicates in knowledge graphs that are being evaluated for their rule-learning quality, particularly focusing on their instances and relevance as determined by metrics such as Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC).",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "the target",
          "local_types": [
            "concept",
            "target"
          ],
          "iri": "Entity-the_target-Mention-1"
        }
      ],
      "relevance": 0.630859375
    },
    "Entity-constraint": {
      "node_id": "constraint",
      "disambiguation_index": 0,
      "label": "constraints",
      "aliases": [
        "constraints",
        "These constraints"
      ],
      "types": [
        "requirements",
        "conditions",
        "constraints",
        "condition",
        "constraint",
        "concept",
        "rules",
        "formalism",
        "restriction",
        "limitation",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'constraints' refer to the rules or conditions that define the expected structure and integrity of the data, which are often expressed through the Shapes Constraint Language (SHACL) to guide data population and validation.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-5",
          "local_name": "constraints",
          "local_types": [
            "limitation",
            "condition"
          ],
          "iri": "Entity-constraint-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "constraints",
          "local_types": [
            "condition",
            "restriction",
            "limitation"
          ],
          "iri": "Entity-constraint-Mention-2"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "constraints",
          "local_types": [
            "rules",
            "conditions"
          ],
          "iri": "Entity-constraint-Mention-3"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-4",
          "local_name": "constraints",
          "local_types": [
            "rules",
            "requirements"
          ],
          "iri": "Entity-constraint-Mention-4"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-3",
          "local_name": "constraints",
          "local_types": [
            "rule",
            "constraint",
            "limitation",
            "concept"
          ],
          "iri": "Entity-constraint-Mention-5"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-4",
          "local_name": "constraints",
          "local_types": [
            "concept",
            "limitation"
          ],
          "iri": "Entity-constraint-Mention-6"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-2",
          "local_name": "constraints",
          "local_types": [
            "condition",
            "constraint",
            "limitation",
            "rule"
          ],
          "iri": "Entity-constraint-Mention-7"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-2",
          "local_name": "constraints",
          "local_types": [
            "condition",
            "formalism"
          ],
          "iri": "Entity-constraint-Mention-8"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-3",
          "local_name": "constraints",
          "local_types": [
            "limitation",
            "condition"
          ],
          "iri": "Entity-constraint-Mention-9"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-4",
          "local_name": "constraints",
          "local_types": [
            "concept",
            "condition"
          ],
          "iri": "Entity-constraint-Mention-10"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-4",
          "local_name": "These constraints",
          "local_types": [
            "constraints"
          ],
          "iri": "Entity-constraint-Mention-11"
        }
      ],
      "relevance": 0.63037109375
    },
    "Entity-high-scoring_candidate_op_rule": {
      "node_id": "high-scoring_candidate_op_rule",
      "disambiguation_index": 0,
      "label": "high-scoring candidate OP rule",
      "aliases": [
        "high-scoring candidate OP rule"
      ],
      "types": [
        "candidate",
        "rule",
        "OP rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'high-scoring candidate OP rule' refers to a candidate rule in the context of Open Path (OP) rules that has been evaluated and deemed to have a high quality score, indicating its effectiveness in representing relationships in knowledge graphs and suggesting a corresponding high-quality Inverse Open Path (IOP) rule.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-3",
          "local_name": "high-scoring candidate OP rule",
          "local_types": [
            "candidate",
            "rule",
            "OP rule"
          ],
          "iri": "Entity-high-scoring_candidate_op_rule-Mention-1"
        }
      ],
      "relevance": 0.63037109375
    },
    "Entity-high-quality_tree_shape": {
      "node_id": "high-quality_tree_shape",
      "disambiguation_index": 0,
      "label": "high-quality tree shapes",
      "aliases": [
        "high-quality tree shapes"
      ],
      "types": [
        "structure",
        "tree shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "High-quality tree shapes refer to structured representations of data in knowledge graphs that are derived from Inverse Open Path rules, characterized by their informative and intuitive nature, and evaluated based on formal quality measures such as confidence and generality.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-4",
          "local_name": "high-quality tree shapes",
          "local_types": [
            "structure",
            "tree shape"
          ],
          "iri": "Entity-high-quality_tree_shape-Mention-1"
        }
      ],
      "relevance": 0.63037109375
    },
    "Entity-a_target_predicate_pt": {
      "node_id": "a_target_predicate_pt",
      "disambiguation_index": 0,
      "label": "a target predicate Pt",
      "aliases": [
        "a target predicate Pt"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A target predicate Pt refers to a specific predicate in a knowledge graph (KG) that serves as the body of an inverse open path (IOP) rule, which is used to predict relationships between entities based on the existence of paths defined by other predicates in the KG.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-2",
          "local_name": "a target predicate Pt",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-a_target_predicate_pt-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-2",
          "local_name": "a target predicate Pt",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-a_target_predicate_pt-Mention-2"
        }
      ],
      "relevance": 0.63037109375
    },
    "Entity-informative_and_intuitive_shape": {
      "node_id": "informative_and_intuitive_shape",
      "disambiguation_index": 0,
      "label": "informative and intuitive shapes",
      "aliases": [
        "informative and intuitive shapes"
      ],
      "types": [
        "data representation",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'informative and intuitive shapes' refers to the high-quality structural representations of data patterns learned from knowledge graphs using the SHACLEARNER method, which enhance understanding and validation of the graph's data structure.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-2",
          "local_name": "informative and intuitive shapes",
          "local_types": [
            "data representation",
            "concept"
          ],
          "iri": "Entity-informative_and_intuitive_shape-Mention-1"
        }
      ],
      "relevance": 0.6298828125
    },
    "Entity-p1__x__z0__-__p2__z0__z1___p3__z1__z2_": {
      "node_id": "p1__x__z0__-__p2__z0__z1___p3__z1__z2_",
      "disambiguation_index": 0,
      "label": "P1(x, z0) -> P2(z0, z1) ^ P3(z1, z2)",
      "aliases": [
        "P1(x, z0) -> P2(z0, z1) ^ P3(z1, z2)"
      ],
      "types": [
        "rule",
        "IOP rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention 'P1(x, z0) -> P2(z0, z1) ^ P3(z1, z2)' refers to an Inverse Open Path (IOP) rule that describes a logical relationship in a knowledge graph, where the predicate P1 indicates a condition on the entity x leading to the existence of entities z1 and z2 connected by predicates P2 and P3, respectively.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "P1(x, z0) -> P2(z0, z1) ^ P3(z1, z2)",
          "local_types": [
            "rule",
            "IOP rule"
          ],
          "iri": "Entity-p1__x__z0__-__p2__z0__z1___p3__z1__z2_-Mention-1"
        }
      ],
      "relevance": 0.6298828125
    },
    "Entity-this_close_relationship": {
      "node_id": "this_close_relationship",
      "disambiguation_index": 0,
      "label": "This close relationship",
      "aliases": [
        "This close relationship"
      ],
      "types": [
        "relationship"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This close relationship refers to the interdependence and mutual reinforcement between Open Path (OP) rules and their converse Inverse Open Path (IOP) rules, which allows for the simultaneous mining of both types of rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-5-Sentence-2",
          "local_name": "This close relationship",
          "local_types": [
            "relationship"
          ],
          "iri": "Entity-this_close_relationship-Mention-1"
        }
      ],
      "relevance": 0.6298828125
    },
    "Entity-path_of_entity_that_satisfy_a_chain_of_predicate_in_the_rule": {
      "node_id": "path_of_entity_that_satisfy_a_chain_of_predicate_in_the_rule",
      "disambiguation_index": 0,
      "label": "path of entities that satisfy a chain of predicates in the rule",
      "aliases": [
        "path of entities that satisfy a chain of predicates in the rule"
      ],
      "types": [
        "path",
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'path of entities that satisfy a chain of predicates in the rule' refers to a sequence of interconnected entities in a knowledge graph that are linked through a series of predicates defined in an Inverse Open Path (IOP) rule, facilitating the validation and structure of the graph data.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "path of entities that satisfy a chain of predicates in the rule",
          "local_types": [
            "path",
            "entity"
          ],
          "iri": "Entity-path_of_entity_that_satisfy_a_chain_of_predicate_in_the_rule-Mention-1"
        }
      ],
      "relevance": 0.6298828125
    },
    "Entity-universal_variable": {
      "node_id": "universal_variable",
      "disambiguation_index": 0,
      "label": "universal variables",
      "aliases": [
        "universal variables"
      ],
      "types": [
        "mathematical concept",
        "variable type",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Universal variables refer to the variables that are universally quantified in the body of inverse open path rules (IOP rules) used in the context of knowledge graphs and the Shapes Constraint Language (SHACL) for expressing constraints.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-7",
          "local_name": "universal variables",
          "local_types": [
            "mathematical concept",
            "variable type",
            "variable"
          ],
          "iri": "Entity-universal_variable-Mention-1"
        }
      ],
      "relevance": 0.62939453125
    },
    "Entity-off-the-shelf_graph_structure_learner": {
      "node_id": "off-the-shelf_graph_structure_learner",
      "disambiguation_index": 0,
      "label": "off-the-shelf graph structure learner",
      "aliases": [
        "graph structure learner",
        "off-the-shelf graph structure learner"
      ],
      "types": [
        "graph structure learner",
        "tool",
        "machine learning model",
        "learner",
        "algorithm",
        "software"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "An off-the-shelf graph structure learner is a pre-existing software tool or algorithm that processes sample data to assist users in generating SHACL shapes through an interactive interface.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "off-the-shelf graph structure learner",
          "local_types": [
            "graph structure learner",
            "tool",
            "machine learning model",
            "learner",
            "algorithm",
            "software"
          ],
          "iri": "Entity-off-the-shelf_graph_structure_learner-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "graph structure learner",
          "local_types": [
            "algorithm",
            "tool"
          ],
          "iri": "Entity-off-the-shelf_graph_structure_learner-Mention-2"
        }
      ],
      "relevance": 0.62939453125
    },
    "Entity-miniopsc": {
      "node_id": "miniopsc",
      "disambiguation_index": 0,
      "label": "MinIOPSC",
      "aliases": [
        "MinIOPSC"
      ],
      "types": [
        "threshold",
        "variable",
        "parameter",
        "configuration",
        "mathematical symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "MinIOPSC is a parameter that specifies the minimum inverse open path support required for the learning algorithm SHACLEARNER to evaluate the quality of inverse open path rules derived from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-3",
          "local_name": "MinIOPSC",
          "local_types": [
            "parameter",
            "configuration",
            "threshold"
          ],
          "iri": "Entity-miniopsc-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-11",
          "local_name": "MinIOPSC",
          "local_types": [
            "mathematical symbol",
            "variable"
          ],
          "iri": "Entity-miniopsc-Mention-2"
        }
      ],
      "relevance": 0.62890625
    },
    "Entity-conjunction_of_iop_rule": {
      "node_id": "conjunction_of_iop_rule",
      "disambiguation_index": 0,
      "label": "conjunction of IOP rules",
      "aliases": [
        "a conjunction of IOP rules",
        "conjunction of IOP rules"
      ],
      "types": [
        "IOP rules",
        "concept",
        "composite rule",
        "logical construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'conjunction of IOP rules' refers to a logical construct that combines multiple Inverse Open Path (IOP) rules to form a tree structure, which is used to assess the quality of shapes in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-6",
          "local_name": "conjunction of IOP rules",
          "local_types": [
            "composite rule",
            "logical construct"
          ],
          "iri": "Entity-conjunction_of_iop_rule-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-6",
          "local_name": "a conjunction of IOP rules",
          "local_types": [
            "concept",
            "IOP rules"
          ],
          "iri": "Entity-conjunction_of_iop_rule-Mention-2"
        }
      ],
      "relevance": 0.62890625
    },
    "Entity-kg_documentation": {
      "node_id": "kg_documentation",
      "disambiguation_index": 0,
      "label": "KG documentation",
      "aliases": [
        "KG documentation"
      ],
      "types": [
        "knowledge graph",
        "documentation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "KG documentation refers to the readable patterns generated by shapes that help in validating knowledge graphs and provide insights into their structure.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-1",
          "local_name": "KG documentation",
          "local_types": [
            "knowledge graph",
            "documentation"
          ],
          "iri": "Entity-kg_documentation-Mention-1"
        }
      ],
      "relevance": 0.62890625
    },
    "Entity-candidate_shape": {
      "node_id": "candidate_shape",
      "disambiguation_index": 0,
      "label": "candidate shape",
      "aliases": [
        "candidate shape"
      ],
      "types": [
        "concept",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'candidate shape' refers to a potential configuration or structure of constraints derived from Inverse Open Path rules that can be evaluated for their relevance and effectiveness in validating knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-1",
          "local_name": "candidate shape",
          "local_types": [
            "concept",
            "data structure"
          ],
          "iri": "Entity-candidate_shape-Mention-1"
        }
      ],
      "relevance": 0.62890625
    },
    "Entity-rule_of_the_highest_quality": {
      "node_id": "rule_of_the_highest_quality",
      "disambiguation_index": 0,
      "label": "rules of the highest quality",
      "aliases": [
        "rules of the highest quality"
      ],
      "types": [
        "rules",
        "quality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'rules of the highest quality' refers to the IOP rules learned by the SHACLEARNER system that achieve an IOP Shape Confidence (IOPSC) score of 0.9 or higher, indicating their strong reliability and relevance in the context of knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-5-Sentence-1",
          "local_name": "rules of the highest quality",
          "local_types": [
            "rules",
            "quality"
          ],
          "iri": "Entity-rule_of_the_highest_quality-Mention-1"
        }
      ],
      "relevance": 0.62890625
    },
    "Entity-definition_4": {
      "node_id": "definition_4",
      "disambiguation_index": 0,
      "label": "Definition 4",
      "aliases": [
        "Definition 4"
      ],
      "types": [
        "reference",
        "concept",
        "definition"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Definition 4 defines the concepts of inverse open path support (IOPsupp), inverse open path standard confidence (IOPSC), and inverse open path head coverage (IOPHC) for IOP rules in the context of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-4-Sentence-1",
          "local_name": "Definition 4",
          "local_types": [
            "concept",
            "definition"
          ],
          "iri": "Entity-definition_4-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-1",
          "local_name": "Definition 4",
          "local_types": [
            "reference",
            "definition"
          ],
          "iri": "Entity-definition_4-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-3",
          "local_name": "Definition 4",
          "local_types": [
            "reference",
            "definition"
          ],
          "iri": "Entity-definition_4-Mention-3"
        }
      ],
      "relevance": 0.6279296875
    },
    "Entity-the_quality_and_quantity_of_learnt_rule": {
      "node_id": "the_quality_and_quantity_of_learnt_rule",
      "disambiguation_index": 0,
      "label": "the quality and quantity of learnt rules",
      "aliases": [
        "the quality and quantity of learnt rules"
      ],
      "types": [
        "quality",
        "quantity",
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The quality and quantity of learnt rules refers to the effectiveness and number of shape patterns derived from knowledge graphs using the SHACLEARNER algorithm, which are evaluated based on their structural features and confidence measures.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-1-Sentence-2",
          "local_name": "the quality and quantity of learnt rules",
          "local_types": [
            "quality",
            "quantity",
            "rules"
          ],
          "iri": "Entity-the_quality_and_quantity_of_learnt_rule-Mention-1"
        }
      ],
      "relevance": 0.6279296875
    },
    "Entity-section_2": {
      "node_id": "section_2",
      "disambiguation_index": 0,
      "label": "Section 2",
      "aliases": [
        "Section 2"
      ],
      "types": [
        "document part",
        "section",
        "reference",
        "document section",
        "part of paper"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Section 2 of the paper provides foundational concepts that underpin the subsequent discussion of the SHACL learning method and the formalism of Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "Section 2",
          "local_types": [
            "document part",
            "section",
            "reference",
            "document section",
            "part of paper"
          ],
          "iri": "Entity-section_2-Mention-1"
        }
      ],
      "relevance": 0.62744140625
    },
    "Entity-p1_1": {
      "node_id": "p1_1",
      "disambiguation_index": 0,
      "label": "P1_1",
      "aliases": [
        "P1_1"
      ],
      "types": [
        "parameter",
        "predicate",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P1_1 refers to a specific predicate involved in the Inverse Open Path (IOP) rule framework, which is used to establish relationships between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-3-Sentence-2",
          "local_name": "P1_1",
          "local_types": [
            "parameter",
            "predicate",
            "variable"
          ],
          "iri": "Entity-p1_1-Mention-1"
        }
      ],
      "relevance": 0.62744140625
    },
    "Entity-iopsc__r1_": {
      "node_id": "iopsc__r1_",
      "disambiguation_index": 0,
      "label": "IOPSC(r1)",
      "aliases": [
        "IOPSC(r1)"
      ],
      "types": [
        "function",
        "mathematical expression",
        "definition",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "IOPSC(r1) refers to the Inverse Open Path Shape Constraint metric for the rule r1, which quantifies the quality of the shape defined by the rule in terms of its adherence to the specified constraints within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-3",
          "local_name": "IOPSC(r1)",
          "local_types": [
            "function",
            "mathematical expression",
            "definition",
            "metric"
          ],
          "iri": "Entity-iopsc__r1_-Mention-1"
        }
      ],
      "relevance": 0.62744140625
    },
    "Entity-r___ev__r___k__mcar__miniopsc__miniophc_": {
      "node_id": "r___ev__r___k__mcar__miniopsc__miniophc_",
      "disambiguation_index": 0,
      "label": "R := Ev(R', K, MCar, MinIOPSC, MinIOPHC)",
      "aliases": [
        "R := Ev(R', K, MCar, MinIOPSC, MinIOPHC)"
      ],
      "types": [
        "operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "R represents the evaluation of a set of inverse open path rules R' against a knowledge graph K, incorporating constraints on maximum cardinality MCar, and minimum values for inverse open path standard confidence MinIOPSC and inverse open path head coverage MinIOPHC.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-11",
          "local_name": "R := Ev(R', K, MCar, MinIOPSC, MinIOPHC)",
          "local_types": [
            "operation"
          ],
          "iri": "Entity-r___ev__r___k__mcar__miniopsc__miniophc_-Mention-1"
        }
      ],
      "relevance": 0.626953125
    },
    "Entity-iopsc_value": {
      "node_id": "iopsc_value",
      "disambiguation_index": 0,
      "label": "IOPSC values",
      "aliases": [
        "IOPSC values"
      ],
      "types": [
        "value",
        "metric",
        "evaluation criterion"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "IOPSC values refer to the inverse open path standard confidence metrics that quantify the quality of inverse open path rules in knowledge graphs, indicating the ratio of the number of entity pairs satisfying the head of the rule to the total number of entities satisfying the body.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "IOPSC values",
          "local_types": [
            "value",
            "metric",
            "evaluation criterion"
          ],
          "iri": "Entity-iopsc_value-Mention-1"
        }
      ],
      "relevance": 0.6259765625
    },
    "Entity-large_kg": {
      "node_id": "large_kg",
      "disambiguation_index": 0,
      "label": "large KGs",
      "aliases": [
        "Large KGs",
        "large KGs"
      ],
      "types": [
        "knowledge graph",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Large KGs refer to extensive knowledge graphs that serve as structured representations of information, typically comprising vast amounts of interconnected data points.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-5",
          "local_name": "large KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-large_kg-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-2-Sentence-3",
          "local_name": "Large KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-large_kg-Mention-2"
        }
      ],
      "relevance": 0.62548828125
    },
    "Entity-input_ontology": {
      "node_id": "input_ontology",
      "disambiguation_index": 0,
      "label": "input ontologies",
      "aliases": [
        "input ontologies"
      ],
      "types": [
        "ontology",
        "data structure",
        "knowledge base"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Input ontologies refer to predefined ontological frameworks or schemas that provide structured knowledge and constraints, which can be utilized to automatically generate SHACL shapes for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-2",
          "local_name": "input ontologies",
          "local_types": [
            "ontology",
            "data structure",
            "knowledge base"
          ],
          "iri": "Entity-input_ontology-Mention-1"
        }
      ],
      "relevance": 0.62548828125
    },
    "Entity-kg_application": {
      "node_id": "kg_application",
      "disambiguation_index": 0,
      "label": "KG applications",
      "aliases": [
        "KG applications"
      ],
      "types": [
        "application"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "KG applications refer to the various uses and implementations of knowledge graphs, which leverage their data-first approach to facilitate the extension, maintenance, and validation of graph data despite inherent constraints and incompleteness.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-5",
          "local_name": "KG applications",
          "local_types": [
            "application"
          ],
          "iri": "Entity-kg_application-Mention-1"
        }
      ],
      "relevance": 0.62548828125
    },
    "Entity-an_iop_rule": {
      "node_id": "an_iop_rule",
      "disambiguation_index": 0,
      "label": "an IOP rule",
      "aliases": [
        "an IOP rule"
      ],
      "types": [
        "rule",
        "IOP"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An IOP rule is a formalism in predicate logic that defines specific shape patterns in knowledge graphs by connecting entities through a sequence of predicates, allowing for the expression of constraints and the construction of complex shapes.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-5-Sentence-2",
          "local_name": "an IOP rule",
          "local_types": [
            "rule",
            "IOP"
          ],
          "iri": "Entity-an_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.62548828125
    },
    "Entity-variant_of_shaclearner": {
      "node_id": "variant_of_shaclearner",
      "disambiguation_index": 0,
      "label": "variants of SHACLEARNER",
      "aliases": [
        "variants of SHACLEARNER",
        "three variants of SHACLEARNER"
      ],
      "types": [
        "algorithm variation",
        "algorithm",
        "model",
        "variant"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Variants of SHACLEARNER refer to different configurations of the SHACLEARNER algorithm, each employing distinct strategies for sampling and heuristic pruning in the learning of IOP rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-1-Sentence-3",
          "local_name": "variants of SHACLEARNER",
          "local_types": [
            "algorithm variation",
            "algorithm",
            "model"
          ],
          "iri": "Entity-variant_of_shaclearner-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-3",
          "local_name": "three variants of SHACLEARNER",
          "local_types": [
            "variant",
            "model",
            "algorithm"
          ],
          "iri": "Entity-variant_of_shaclearner-Mention-2"
        }
      ],
      "relevance": 0.625
    },
    "Entity-iop_mining_time": {
      "node_id": "iop_mining_time",
      "disambiguation_index": 0,
      "label": "IOP mining time",
      "aliases": [
        "IOP mining time"
      ],
      "types": [
        "time",
        "time measurement",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "IOP mining time refers to the duration required to discover and extract Inverse Open Path (IOP) rules from knowledge graphs, which serve as a basis for constructing tree-shaped structures in the context of knowledge graph validation and analysis.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "IOP mining time",
          "local_types": [
            "time",
            "time measurement",
            "process"
          ],
          "iri": "Entity-iop_mining_time-Mention-1"
        }
      ],
      "relevance": 0.625
    },
    "Entity-yago2s": {
      "node_id": "yago2s",
      "disambiguation_index": 0,
      "label": "YAGO2s",
      "aliases": [
        "YAGO2",
        "YAGO2s"
      ],
      "types": [
        "knowledge graph",
        "dataset",
        "knowledge base",
        "KG",
        "benchmark",
        "database",
        "semantic web resource",
        "ontology",
        "semantic web",
        "data source"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "YAGO2s is a large-scale knowledge graph that integrates information from various sources to provide a structured representation of knowledge.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-1",
          "local_name": "YAGO2s",
          "local_types": [
            "knowledge graph",
            "KG",
            "dataset",
            "data source"
          ],
          "iri": "Entity-yago2s-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-2",
          "local_name": "YAGO2s",
          "local_types": [
            "knowledge graph",
            "benchmark",
            "dataset"
          ],
          "iri": "Entity-yago2s-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-4",
          "local_name": "YAGO2s",
          "local_types": [
            "knowledge graph",
            "knowledge base",
            "ontology",
            "database"
          ],
          "iri": "Entity-yago2s-Mention-3"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-6",
          "local_name": "YAGO2s",
          "local_types": [
            "knowledge base",
            "dataset"
          ],
          "iri": "Entity-yago2s-Mention-4"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-7",
          "local_name": "YAGO2s",
          "local_types": [
            "knowledge base",
            "dataset",
            "ontology",
            "semantic web resource"
          ],
          "iri": "Entity-yago2s-Mention-5"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-1",
          "local_name": "YAGO2s",
          "local_types": [
            "knowledge graph",
            "dataset",
            "database"
          ],
          "iri": "Entity-yago2s-Mention-6"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-2",
          "local_name": "YAGO2s",
          "local_types": [
            "knowledge base",
            "semantic web",
            "database"
          ],
          "iri": "Entity-yago2s-Mention-7"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-2",
          "local_name": "YAGO2",
          "local_types": [
            "knowledge graph",
            "dataset"
          ],
          "iri": "Entity-yago2s-Mention-8"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-3",
          "local_name": "YAGO2",
          "local_types": [
            "knowledge graph",
            "dataset",
            "data source"
          ],
          "iri": "Entity-yago2s-Mention-9"
        }
      ],
      "relevance": 0.62451171875
    },
    "Entity-node_shape": {
      "node_id": "node_shape",
      "disambiguation_index": 0,
      "label": "node shapes",
      "aliases": [
        "node shapes"
      ],
      "types": [
        "shape",
        "constraint",
        "concept",
        "data structure",
        "structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Node shapes are specific constructs within the Shapes Constraint Language (SHACL) that define constraints on target predicates in knowledge graphs, ensuring that entities conform to specified structural patterns and relationships.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "node shapes",
          "local_types": [
            "shape",
            "constraint",
            "concept",
            "data structure",
            "structure"
          ],
          "iri": "Entity-node_shape-Mention-1"
        }
      ],
      "relevance": 0.62451171875
    },
    "Entity-left-hand_tree": {
      "node_id": "left-hand_tree",
      "disambiguation_index": 0,
      "label": "left-hand tree",
      "aliases": [
        "the left-hand tree in Fig. 3",
        "left-hand tree"
      ],
      "types": [
        "tree",
        "diagram",
        "visual representation",
        "figure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'left-hand tree' refers to a specific tree structure derived from annotated Inverse Open Path (IOP) rules in the context of SHACL shape learning, which is used to represent relationships between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-2",
          "local_name": "left-hand tree",
          "local_types": [
            "diagram",
            "visual representation"
          ],
          "iri": "Entity-left-hand_tree-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-2",
          "local_name": "the left-hand tree in Fig. 3",
          "local_types": [
            "tree",
            "figure"
          ],
          "iri": "Entity-left-hand_tree-Mention-2"
        }
      ],
      "relevance": 0.6240234375
    },
    "Entity-basic_shacl": {
      "node_id": "basic_shacl",
      "disambiguation_index": 0,
      "label": "basic SHACL",
      "aliases": [
        "basic SHACL"
      ],
      "types": [
        "modeling language",
        "specification",
        "language"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Basic SHACL refers to the foundational version of the Shapes Constraint Language that enables the modeling of various shapes, rules, and constraints for graph data, serving as a basis for more complex structures in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "basic SHACL",
          "local_types": [
            "modeling language",
            "specification",
            "language"
          ],
          "iri": "Entity-basic_shacl-Mention-1"
        }
      ],
      "relevance": 0.6240234375
    },
    "Entity-_e2__e3_": {
      "node_id": "_e2__e3_",
      "disambiguation_index": 0,
      "label": "{e2, e3}",
      "aliases": [
        "{e2, e3}"
      ],
      "types": [
        "entity",
        "set"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "{e2, e3} refers to the set of entities in a knowledge graph that satisfy the head of a specific Inverse Open Path (IOP) rule, indicating that these entities are connected through the defined predicates in the rule.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "{e2, e3}",
          "local_types": [
            "entity",
            "set"
          ],
          "iri": "Entity-_e2__e3_-Mention-1"
        }
      ],
      "relevance": 0.6240234375
    },
    "Entity-iop_rule_r_(1)": {
      "node_id": "iop_rule_r_(1)",
      "disambiguation_index": 1,
      "label": "IOP rule r",
      "aliases": [
        "IOP rule r"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "IOP rule r is a specific instance of an Inverse Open Path rule that defines a logical relationship between entities in a knowledge graph, expressed as a predicate logic formula where the head of the rule is derived from the body through specified predicates.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "IOP rule r",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-iop_rule_r_(1)-Mention-1"
        }
      ],
      "relevance": 0.62353515625
    },
    "Entity-kg_verification": {
      "node_id": "kg_verification",
      "disambiguation_index": 0,
      "label": "KG verification",
      "aliases": [
        "KG verification"
      ],
      "types": [
        "methodology",
        "concept",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "KG verification refers to the process of validating knowledge graphs by assessing the quality and correctness of the shapes and constraints derived from the graph data.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-1",
          "local_name": "KG verification",
          "local_types": [
            "methodology",
            "concept",
            "process"
          ],
          "iri": "Entity-kg_verification-Mention-1"
        }
      ],
      "relevance": 0.623046875
    },
    "Entity-constraint_over_fact": {
      "node_id": "constraint_over_fact",
      "disambiguation_index": 0,
      "label": "constraints over facts",
      "aliases": [
        "constraints over facts"
      ],
      "types": [
        "constraint"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Constraints over facts refer to the specific limitations and requirements defined by property shapes in the Shapes Constraint Language (SHACL) that govern the relationships and attributes of entities within a knowledge graph, ensuring data quality and consistency.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "constraints over facts",
          "local_types": [
            "constraint"
          ],
          "iri": "Entity-constraint_over_fact-Mention-1"
        }
      ],
      "relevance": 0.623046875
    },
    "Entity-right-hand_tree": {
      "node_id": "right-hand_tree",
      "disambiguation_index": 0,
      "label": "right-hand tree",
      "aliases": [
        "the right-hand tree",
        "right-hand tree"
      ],
      "types": [
        "tree",
        "data structure",
        "graph"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'right-hand tree' refers to a specific data structure used in the context of SHACL shape learning, which aggregates IOP rules that bind the object argument of a target predicate to form a tree structure for validating knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-5",
          "local_name": "right-hand tree",
          "local_types": [
            "data structure",
            "graph"
          ],
          "iri": "Entity-right-hand_tree-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-5",
          "local_name": "the right-hand tree",
          "local_types": [
            "tree"
          ],
          "iri": "Entity-right-hand_tree-Mention-2"
        }
      ],
      "relevance": 0.62255859375
    },
    "Entity-_3_": {
      "node_id": "_3_",
      "disambiguation_index": 0,
      "label": "(3)",
      "aliases": [
        "(3)"
      ],
      "types": [
        "notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term (3) refers to the general form of an Inverse Open Path (IOP) rule, which is a logical expression used to define relationships between entities in a knowledge graph, structured as Pt'(x, z0) -> exists(z1, ..., z(n-1), y) P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-4-Sentence-2",
          "local_name": "(3)",
          "local_types": [
            "notation"
          ],
          "iri": "Entity-_3_-Mention-1"
        }
      ],
      "relevance": 0.62255859375
    },
    "Entity-rule_with_the_same_head_and_the_same_body": {
      "node_id": "rule_with_the_same_head_and_the_same_body",
      "disambiguation_index": 0,
      "label": "Rules with the same head and the same body",
      "aliases": [
        "Rules with the same head and the same body"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Rules with the same head and the same body refer to a set of inverse open path (IOP) rules in knowledge graphs that share identical predicate structures but can differ in their cardinality annotations, indicating varying requirements for the number of instances of the head that must be satisfied.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-9-Sentence-1",
          "local_name": "Rules with the same head and the same body",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-rule_with_the_same_head_and_the_same_body-Mention-1"
        }
      ],
      "relevance": 0.62255859375
    },
    "Entity-inference_process": {
      "node_id": "inference_process",
      "disambiguation_index": 0,
      "label": "inference processes",
      "aliases": [
        "inference processes"
      ],
      "types": [
        "data processing",
        "computational process",
        "process",
        "reasoning"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Inference processes refer to the computational methods and reasoning techniques applied to knowledge graphs (KGs) that utilize type information to derive new insights, validate data, and enhance the understanding of the graph's structure.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-2",
          "local_name": "inference processes",
          "local_types": [
            "data processing",
            "computational process",
            "process",
            "reasoning"
          ],
          "iri": "Entity-inference_process-Mention-1"
        }
      ],
      "relevance": 0.6220703125
    },
    "Entity-our_proposed_tree_shape": {
      "node_id": "our_proposed_tree_shape",
      "disambiguation_index": 0,
      "label": "Our proposed tree shapes",
      "aliases": [
        "Our proposed tree shapes"
      ],
      "types": [
        "methodology"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Our proposed tree shapes refer to a novel methodology for structuring knowledge graph queries in a sequential, depth-first manner, allowing for more intuitive human interaction and KG-completion by leveraging contextual dependencies between related questions.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-4",
          "local_name": "Our proposed tree shapes",
          "local_types": [
            "methodology"
          ],
          "iri": "Entity-our_proposed_tree_shape-Mention-1"
        }
      ],
      "relevance": 0.6220703125
    },
    "Entity-our_work_(1)": {
      "node_id": "our_work_(1)",
      "disambiguation_index": 1,
      "label": "our work",
      "aliases": [
        "our work"
      ],
      "types": [
        "research"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'our work' refers to the authors' research on discovering SHACL shapes directly from knowledge graphs using logical formalisms, specifically focusing on the Inverse Open Path rules to derive shapes with well-defined semantics.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-2",
          "local_name": "our work",
          "local_types": [
            "research"
          ],
          "iri": "Entity-our_work_(1)-Mention-1"
        }
      ],
      "relevance": 0.6220703125
    },
    "Entity-modified_shaclearner": {
      "node_id": "modified_shaclearner",
      "disambiguation_index": 0,
      "label": "modified SHACLEARNER",
      "aliases": [
        "modified SHACLEARNER"
      ],
      "types": [
        "algorithm",
        "machine learning model"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The modified SHACLEARNER refers to a variant of the SHACLEARNER algorithm that operates without sampling or heuristic pruning, allowing it to learn all possible inverse open path rules from a knowledge graph in a brute-force manner, albeit with inefficiencies.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "modified SHACLEARNER",
          "local_types": [
            "algorithm",
            "machine learning model"
          ],
          "iri": "Entity-modified_shaclearner-Mention-1"
        }
      ],
      "relevance": 0.62158203125
    },
    "Entity-connected_entity": {
      "node_id": "connected_entity",
      "disambiguation_index": 0,
      "label": "connected entities",
      "aliases": [
        "connected entities"
      ],
      "types": [
        "entity",
        "knowledge graph component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Connected entities refer to the nodes in a knowledge graph that are linked by relationships, which can be represented as paths in the context of Inverse Open Path (IOP) rules for defining shapes in the graph.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-1",
          "local_name": "connected entities",
          "local_types": [
            "entity",
            "knowledge graph component"
          ],
          "iri": "Entity-connected_entity-Mention-1"
        }
      ],
      "relevance": 0.62109375
    },
    "Entity-miniophc": {
      "node_id": "miniophc",
      "disambiguation_index": 0,
      "label": "MinIOPHC",
      "aliases": [
        "MinIOPHC"
      ],
      "types": [
        "threshold",
        "variable",
        "parameter",
        "configuration",
        "mathematical symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "MinIOPHC is a parameter that specifies the minimum inverse open path head coverage required for the learning algorithm SHACLEARNER to evaluate the quality of inverse open path rules derived from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-3",
          "local_name": "MinIOPHC",
          "local_types": [
            "parameter",
            "configuration",
            "threshold"
          ],
          "iri": "Entity-miniophc-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-11",
          "local_name": "MinIOPHC",
          "local_types": [
            "mathematical symbol",
            "variable"
          ],
          "iri": "Entity-miniophc-Mention-2"
        }
      ],
      "relevance": 0.62109375
    },
    "Entity-validation_framework": {
      "node_id": "validation_framework",
      "disambiguation_index": 0,
      "label": "validation framework",
      "aliases": [
        "validation framework"
      ],
      "types": [
        "framework",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The validation framework refers to a proposed system that enhances the interaction between inference rules and SHACL shapes in knowledge graphs, allowing for the detection of potential shape violations when rules are applied.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "validation framework",
          "local_types": [
            "framework",
            "methodology"
          ],
          "iri": "Entity-validation_framework-Mention-1"
        }
      ],
      "relevance": 0.62109375
    },
    "Entity-table_1": {
      "node_id": "table_1",
      "disambiguation_index": 0,
      "label": "Table 1",
      "aliases": [
        "Table 1"
      ],
      "types": [
        "data representation",
        "reference",
        "table"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Table 1 presents the specifications of four benchmark knowledge graphs (KGs) used in the experiments, including YAGO2s, Wikidata, DBpedia, and a synthetic Poker KG, detailing their characteristics and the unary predicates and facts added for the study.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-1",
          "local_name": "Table 1",
          "local_types": [
            "data representation",
            "reference",
            "table"
          ],
          "iri": "Entity-table_1-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-5",
          "local_name": "Table 1",
          "local_types": [
            "data representation",
            "table"
          ],
          "iri": "Entity-table_1-Mention-2"
        }
      ],
      "relevance": 0.6201171875
    },
    "Entity-target": {
      "node_id": "target",
      "disambiguation_index": 0,
      "label": "targets",
      "aliases": [
        "targets"
      ],
      "types": [
        "concept",
        "objective"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'targets' refers to the specific predicates selected from knowledge graphs (such as Wikidata and DBpedia) that are used as objectives for evaluating the performance of the SHACLEARNER method in learning high-quality rules.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "targets",
          "local_types": [
            "concept",
            "objective"
          ],
          "iri": "Entity-target-Mention-1"
        }
      ],
      "relevance": 0.6201171875
    },
    "Entity-target_predicate_(1)": {
      "node_id": "target_predicate_(1)",
      "disambiguation_index": 1,
      "label": "target predicate",
      "aliases": [
        "the target predicate",
        "target predicate"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The 'target predicate' refers to a specific predicate in the context of the SHACLEARNER algorithm, which is used to filter and focus on relevant entities and predicates when learning Inverse Open Path (IOP) rules from a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "target predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-target_predicate_(1)-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-5",
          "local_name": "the target predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-target_predicate_(1)-Mention-2"
        }
      ],
      "relevance": 0.6201171875
    },
    "Entity-the_quality_performance_of_rule": {
      "node_id": "the_quality_performance_of_rule",
      "disambiguation_index": 0,
      "label": "the quality performance of rules",
      "aliases": [
        "the quality performance of rules"
      ],
      "types": [
        "performance",
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The quality performance of rules refers to the evaluation metrics used to assess the effectiveness and reliability of learned rules in knowledge graphs, specifically measured by Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC), which indicate the confidence and relevance of the rules respectively.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-3",
          "local_name": "the quality performance of rules",
          "local_types": [
            "performance",
            "rules"
          ],
          "iri": "Entity-the_quality_performance_of_rule-Mention-1"
        }
      ],
      "relevance": 0.6201171875
    },
    "Entity-kg_k_": {
      "node_id": "kg_k_",
      "disambiguation_index": 0,
      "label": "KG K'",
      "aliases": [
        "KG K'",
        "a KG K"
      ],
      "types": [
        "knowledge graph",
        "entity",
        "data structure"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "KG K' refers to a sampled subgraph of a knowledge graph that includes a limited number of entities related to a specific target predicate, used for efficient learning of shape patterns.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "KG K'",
          "local_types": [
            "knowledge graph",
            "entity",
            "data structure"
          ],
          "iri": "Entity-kg_k_-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-2",
          "local_name": "a KG K",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-kg_k_-Mention-2"
        }
      ],
      "relevance": 0.61962890625
    },
    "Entity-kb": {
      "node_id": "kb",
      "disambiguation_index": 0,
      "label": "KB",
      "aliases": [
        "KB"
      ],
      "types": [
        "knowledge base",
        "data structure",
        "database"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'KB' refers to a knowledge base, which is a structured database that stores information in a way that allows for inference and querying, particularly in relation to the rules and constraints defined by the Shapes Constraint Language (SHACL) for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "KB",
          "local_types": [
            "knowledge base",
            "data structure",
            "database"
          ],
          "iri": "Entity-kb-Mention-1"
        }
      ],
      "relevance": 0.61962890625
    },
    "Entity-each_rule": {
      "node_id": "each_rule",
      "disambiguation_index": 0,
      "label": "each rule",
      "aliases": [
        "each rule"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'each rule' refers to the individual Inverse Open Path (IOP) rules generated by the PathFinding() algorithm, which are based on the embedding representations of predicates and are used to connect entities in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-1",
          "local_name": "each rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-each_rule-Mention-1"
        }
      ],
      "relevance": 0.61962890625
    },
    "Entity-class_or_type_constraint": {
      "node_id": "class_or_type_constraint",
      "disambiguation_index": 0,
      "label": "class or type constraints",
      "aliases": [
        "class or type constraints"
      ],
      "types": [
        "constraint",
        "classification"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'class or type constraints' refers to unary predicates introduced in the context of learning Inverse Open Path rules, which serve to specify conditions on the types of entities in knowledge graphs, thereby guiding the construction of shapes that validate the data structure and relationships within the graph.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "class or type constraints",
          "local_types": [
            "constraint",
            "classification"
          ],
          "iri": "Entity-class_or_type_constraint-Mention-1"
        }
      ],
      "relevance": 0.619140625
    },
    "Entity-pruning_variant": {
      "node_id": "pruning_variant",
      "disambiguation_index": 0,
      "label": "pruning variants",
      "aliases": [
        "pruning variants"
      ],
      "types": [
        "algorithm variant",
        "method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pruning variants refer to different configurations of the SHACLEARNER algorithm that utilize various combinations of sampling and heuristic pruning methods to optimize the learning of IOP rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-6-Sentence-1",
          "local_name": "pruning variants",
          "local_types": [
            "algorithm variant",
            "method"
          ],
          "iri": "Entity-pruning_variant-Mention-1"
        }
      ],
      "relevance": 0.6181640625
    },
    "Entity-the_validity_of_iop_rule": {
      "node_id": "the_validity_of_iop_rule",
      "disambiguation_index": 0,
      "label": "the validity of IOP rules",
      "aliases": [
        "the quality of IOP rules",
        "the validity of IOP rules"
      ],
      "types": [
        "IOP rules",
        "validity",
        "quality measure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The validity of IOP rules refers to the quality measures that assess the correctness and reliability of Inverse Open Path rules when applied to knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-5",
          "local_name": "the validity of IOP rules",
          "local_types": [
            "validity",
            "IOP rules"
          ],
          "iri": "Entity-the_validity_of_iop_rule-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-3-Sentence-1",
          "local_name": "the quality of IOP rules",
          "local_types": [
            "IOP rules",
            "quality measure"
          ],
          "iri": "Entity-the_validity_of_iop_rule-Mention-2"
        }
      ],
      "relevance": 0.6181640625
    },
    "Entity-standard_shacl_shape": {
      "node_id": "standard_shacl_shape",
      "disambiguation_index": 0,
      "label": "standard SHACL shapes",
      "aliases": [
        "standard SHACL shapes"
      ],
      "types": [
        "SHACL",
        "shapes",
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Standard SHACL shapes are defined representations of graph data constraints that meet specific quality thresholds, derived from uncertain shapes by omitting those that do not meet minimum quality standards and removing quality annotations.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-1",
          "local_name": "standard SHACL shapes",
          "local_types": [
            "SHACL",
            "shapes",
            "shape"
          ],
          "iri": "Entity-standard_shacl_shape-Mention-1"
        }
      ],
      "relevance": 0.6181640625
    },
    "Entity-the_first_column": {
      "node_id": "the_first_column",
      "disambiguation_index": 0,
      "label": "the first column",
      "aliases": [
        "the first column"
      ],
      "types": [
        "column"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The first column refers to the data representation of the number of learnt Inverse Open Path (IOP) rules that fall within a specific IOP Shape Constraint (IOPSC) interval of [0.1, 0.3) in the evaluation of the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-1",
          "local_name": "the first column",
          "local_types": [
            "column"
          ],
          "iri": "Entity-the_first_column-Mention-1"
        }
      ],
      "relevance": 0.6181640625
    },
    "Entity-44_": {
      "node_id": "44_",
      "disambiguation_index": 0,
      "label": "44%",
      "aliases": [
        "44%"
      ],
      "types": [
        "percentage",
        "statistical measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '44%' refers to the percentage of Inverse Open Path (IOP) rules that are pruned when an additional tree-shaped constraint is applied over the basic IOP-shaped constraint in the context of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-2",
          "local_name": "44%",
          "local_types": [
            "percentage",
            "statistical measure"
          ],
          "iri": "Entity-44_-Mention-1"
        }
      ],
      "relevance": 0.61767578125
    },
    "Entity-iop_rule_language": {
      "node_id": "iop_rule_language",
      "disambiguation_index": 0,
      "label": "IOP rule language",
      "aliases": [
        "IOP rule language"
      ],
      "types": [
        "language",
        "rule language",
        "formal language",
        "programming language"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "The IOP rule language is a formalism designed for mining rules with open variables in knowledge graphs, allowing the expression of constraints through a single predicate in the body and a chain of predicates in the head, while also incorporating cardinality constraints and enabling the evaluation of rule quality.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "IOP rule language",
          "local_types": [
            "language",
            "rule language",
            "formal language",
            "programming language"
          ],
          "iri": "Entity-iop_rule_language-Mention-1"
        }
      ],
      "relevance": 0.6171875
    },
    "Entity-the_kg": {
      "node_id": "the_kg",
      "disambiguation_index": 0,
      "label": "the KG",
      "aliases": [
        "A knowledge graph (KG)",
        "knowledge graph (KG)",
        "the KG",
        "a KG"
      ],
      "types": [
        "knowledge graph",
        "knowledge representation",
        "KG",
        "concept",
        "graph"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The KG refers to a knowledge graph, which is a large data structure that represents information in a graph format, allowing for the storage and retrieval of interconnected data points.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-5",
          "local_name": "the KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-the_kg-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-4",
          "local_name": "the KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-the_kg-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-6",
          "local_name": "knowledge graph (KG)",
          "local_types": [
            "graph",
            "knowledge representation"
          ],
          "iri": "Entity-the_kg-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-6",
          "local_name": "a KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-the_kg-Mention-4"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-6",
          "local_name": "A knowledge graph (KG)",
          "local_types": [
            "concept",
            "knowledge graph"
          ],
          "iri": "Entity-the_kg-Mention-5"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "the KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-the_kg-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-2",
          "local_name": "the KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-the_kg-Mention-7"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-4",
          "local_name": "the KG",
          "local_types": [
            "knowledge graph",
            "KG"
          ],
          "iri": "Entity-the_kg-Mention-8"
        }
      ],
      "relevance": 0.6171875
    },
    "Entity-path_over_connected_entity": {
      "node_id": "path_over_connected_entity",
      "disambiguation_index": 0,
      "label": "paths over connected entities",
      "aliases": [
        "paths over connected entities"
      ],
      "types": [
        "path",
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Paths over connected entities refer to specific shapes represented as sequences of relationships between entities in a knowledge graph, utilized in the context of Inverse Open Path rules to define and learn structural patterns and constraints within the graph.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-1",
          "local_name": "paths over connected entities",
          "local_types": [
            "path",
            "entity"
          ],
          "iri": "Entity-path_over_connected_entity-Mention-1"
        }
      ],
      "relevance": 0.6171875
    },
    "Entity-the_relationship_between_an_op_rule_and_it_converse_iop_version": {
      "node_id": "the_relationship_between_an_op_rule_and_it_converse_iop_version",
      "disambiguation_index": 0,
      "label": "the relationship between an OP rule and its converse IOP version",
      "aliases": [
        "the relationship between an OP rule and its converse IOP version"
      ],
      "types": [
        "relationship",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The relationship between an OP rule and its converse IOP version refers to the correspondence and mutual support between open path rules and their inverse counterparts in knowledge graphs, where the instantiation of entities in the head and body of these rules can yield similar support and confidence metrics, thereby facilitating the mining of both types of rules in a unified process.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-1",
          "local_name": "the relationship between an OP rule and its converse IOP version",
          "local_types": [
            "relationship",
            "rule"
          ],
          "iri": "Entity-the_relationship_between_an_op_rule_and_it_converse_iop_version-Mention-1"
        }
      ],
      "relevance": 0.6171875
    },
    "Entity-our_novel_tree_shape": {
      "node_id": "our_novel_tree_shape",
      "disambiguation_index": 0,
      "label": "Our novel tree shapes",
      "aliases": [
        "Our novel tree shapes"
      ],
      "types": [
        "research",
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Our novel tree shapes refer to a specific structure derived from Inverse Open Path rules that facilitate knowledge graph completion by enabling a depth-first questioning strategy, thereby reducing cognitive load and enhancing human interpretability.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-2",
          "local_name": "Our novel tree shapes",
          "local_types": [
            "research",
            "method"
          ],
          "iri": "Entity-our_novel_tree_shape-Mention-1"
        }
      ],
      "relevance": 0.6171875
    },
    "Entity-evaluation_method_of_shaclearner": {
      "node_id": "evaluation_method_of_shaclearner",
      "disambiguation_index": 0,
      "label": "evaluation method of SHACLEARNER",
      "aliases": [
        "evaluation method of SHACLEARNER"
      ],
      "types": [
        "method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The evaluation method of SHACLEARNER, referred to as Ev, is a novel component that assesses the quality and relevance of mined Inverse Open Path (IOP) rules, distinguishing it from the evaluation module used in the previous open path rule learner (OPRL).",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-2-Sentence-4",
          "local_name": "evaluation method of SHACLEARNER",
          "local_types": [
            "method"
          ],
          "iri": "Entity-evaluation_method_of_shaclearner-Mention-1"
        }
      ],
      "relevance": 0.61669921875
    },
    "Entity-head_predicate": {
      "node_id": "head_predicate",
      "disambiguation_index": 0,
      "label": "head predicate",
      "aliases": [
        "head predicates",
        "head predicate"
      ],
      "types": [
        "logical component",
        "predicate",
        "concept",
        "logical construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'head predicate' refers to the sequence of predicates in the head of an inverse open path (IOP) rule, which is used to predict instances based on the relationships defined in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-2",
          "local_name": "head predicate",
          "local_types": [
            "logical component",
            "predicate"
          ],
          "iri": "Entity-head_predicate-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-10-Sentence-4",
          "local_name": "head predicates",
          "local_types": [
            "logical construct",
            "predicate"
          ],
          "iri": "Entity-head_predicate-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-3",
          "local_name": "head predicates",
          "local_types": [
            "concept",
            "predicate"
          ],
          "iri": "Entity-head_predicate-Mention-3"
        }
      ],
      "relevance": 0.6162109375
    },
    "Entity-r_": {
      "node_id": "r_",
      "disambiguation_index": 0,
      "label": "R'",
      "aliases": [
        "R'"
      ],
      "types": [
        "intermediate output",
        "rules",
        "variable",
        "data structure",
        "mathematical symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "R' is a variable representing an initially empty set of inverse open path rules in the context of the SHACLEARNER algorithm for learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-7",
          "local_name": "R'",
          "local_types": [
            "rules",
            "intermediate output"
          ],
          "iri": "Entity-r_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-9",
          "local_name": "R'",
          "local_types": [
            "data structure",
            "variable"
          ],
          "iri": "Entity-r_-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-11",
          "local_name": "R'",
          "local_types": [
            "mathematical symbol",
            "variable"
          ],
          "iri": "Entity-r_-Mention-3"
        }
      ],
      "relevance": 0.6162109375
    },
    "Entity-the_ideal_learner": {
      "node_id": "the_ideal_learner",
      "disambiguation_index": 0,
      "label": "the ideal learner",
      "aliases": [
        "the ideal learner"
      ],
      "types": [
        "learner"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The ideal learner refers to the SHACLEARNER variant that employs a brute-force search method to generate and evaluate all possible Inverse Open Path (IOP) rules without any sampling or heuristic pruning, ensuring completeness but lacking efficiency.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-4",
          "local_name": "the ideal learner",
          "local_types": [
            "learner"
          ],
          "iri": "Entity-the_ideal_learner-Mention-1"
        }
      ],
      "relevance": 0.6162109375
    },
    "Entity-the_corresponding_number_of_mined_rule": {
      "node_id": "the_corresponding_number_of_mined_rule",
      "disambiguation_index": 0,
      "label": "the corresponding number of mined rules",
      "aliases": [
        "the corresponding number of mined rules"
      ],
      "types": [
        "rule",
        "rules",
        "statistic"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The corresponding number of mined rules refers to the total count of Inverse Open Path (IOP) rules that have been discovered from knowledge graphs, which serve as the foundational elements for constructing tree-shaped structures in the context of the research.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "the corresponding number of mined rules",
          "local_types": [
            "rule",
            "rules",
            "statistic"
          ],
          "iri": "Entity-the_corresponding_number_of_mined_rule-Mention-1"
        }
      ],
      "relevance": 0.6162109375
    },
    "Entity-mcar": {
      "node_id": "mcar",
      "disambiguation_index": 0,
      "label": "MCar",
      "aliases": [
        "MCar"
      ],
      "types": [
        "mathematical symbol",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "MCar refers to the maximum rule cardinality parameter used in the SHACLEARNER algorithm for evaluating inverse open path rules in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-11",
          "local_name": "MCar",
          "local_types": [
            "mathematical symbol",
            "variable"
          ],
          "iri": "Entity-mcar-Mention-1"
        }
      ],
      "relevance": 0.61572265625
    },
    "Entity-ultimate_evaluation_of_an_iop_rule": {
      "node_id": "ultimate_evaluation_of_an_iop_rule",
      "disambiguation_index": 0,
      "label": "ultimate evaluation of an IOP rule",
      "aliases": [
        "ultimate evaluation of an IOP rule"
      ],
      "types": [
        "evaluation",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The ultimate evaluation of an IOP rule refers to the final assessment process that determines the quality and effectiveness of a candidate Inverse Open Path rule in the context of knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-5-Sentence-2",
          "local_name": "ultimate evaluation of an IOP rule",
          "local_types": [
            "evaluation",
            "rule"
          ],
          "iri": "Entity-ultimate_evaluation_of_an_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.61572265625
    },
    "Entity-the_distribution_of_rule": {
      "node_id": "the_distribution_of_rule",
      "disambiguation_index": 0,
      "label": "the distribution of rules",
      "aliases": [
        "the distribution of mined rules",
        "the distribution of rules"
      ],
      "types": [
        "distribution",
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The distribution of rules refers to the statistical representation and analysis of the quality and characteristics of rules learned from knowledge graphs, specifically in terms of their Inverse Open Path Standard Confidence (IOPSC), Inverse Open Path Head Coverage (IOPHC), cardinality, and length.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-3",
          "local_name": "the distribution of rules",
          "local_types": [
            "distribution",
            "rules"
          ],
          "iri": "Entity-the_distribution_of_rule-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-1",
          "local_name": "the distribution of mined rules",
          "local_types": [
            "distribution",
            "rules"
          ],
          "iri": "Entity-the_distribution_of_rule-Mention-2"
        }
      ],
      "relevance": 0.61572265625
    },
    "Entity-figure": {
      "node_id": "figure",
      "disambiguation_index": 0,
      "label": "figures",
      "aliases": [
        "the figures",
        "figures"
      ],
      "types": [
        "visualization",
        "data visualization",
        "visual representation",
        "figures"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'figures' refers to visual representations that illustrate the distribution of mined rules concerning their Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC) in the context of evaluating knowledge graph rule-learning methods.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-1",
          "local_name": "figures",
          "local_types": [
            "visual representation",
            "data visualization"
          ],
          "iri": "Entity-figure-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-1",
          "local_name": "the figures",
          "local_types": [
            "visualization",
            "figures"
          ],
          "iri": "Entity-figure-Mention-2"
        }
      ],
      "relevance": 0.61474609375
    },
    "Entity-chart": {
      "node_id": "chart",
      "disambiguation_index": 0,
      "label": "chart",
      "aliases": [
        "chart"
      ],
      "types": [
        "visual representation",
        "data visualization"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'chart' refers to a visual representation that illustrates the distribution of mined rules with respect to their Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC) in the context of evaluating knowledge graph rule-learning methods.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-3",
          "local_name": "chart",
          "local_types": [
            "visual representation",
            "data visualization"
          ],
          "iri": "Entity-chart-Mention-1"
        }
      ],
      "relevance": 0.61474609375
    },
    "Entity-shape": {
      "node_id": "shape",
      "disambiguation_index": 0,
      "label": "shapes",
      "aliases": [
        "Shapes",
        "shapes",
        "shape"
      ],
      "types": [
        "method",
        "framework",
        "object",
        "data representation",
        "data model",
        "structural feature",
        "schema",
        "feature",
        "constraint",
        "concept",
        "model",
        "geometric figure",
        "structure",
        "modeling concept",
        "mathematical object",
        "shape",
        "entity",
        "geometric object",
        "data structure",
        "mathematical concept",
        "abstract concept",
        "geometric concept",
        "validation criteria",
        "visual representation",
        "methodology",
        "abstract entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'shapes' refers to the structural representations defined by the Shapes Constraint Language (SHACL) that express constraints on graph data within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-3",
          "local_name": "shapes",
          "local_types": [
            "concept",
            "data structure",
            "shape"
          ],
          "iri": "Entity-shape-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-3-Sentence-2",
          "local_name": "shapes",
          "local_types": [
            "data representation",
            "structural feature",
            "feature"
          ],
          "iri": "Entity-shape-Mention-2"
        },
        {
          "reference": "Section-1-Paragraph-3-Sentence-3",
          "local_name": "shapes",
          "local_types": [
            "geometric figure",
            "object"
          ],
          "iri": "Entity-shape-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-1",
          "local_name": "shapes",
          "local_types": [
            "constraint",
            "concept",
            "data structure"
          ],
          "iri": "Entity-shape-Mention-4"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-3",
          "local_name": "shapes",
          "local_types": [
            "concept",
            "structure"
          ],
          "iri": "Entity-shape-Mention-5"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-5",
          "local_name": "shapes",
          "local_types": [
            "data representation",
            "concept"
          ],
          "iri": "Entity-shape-Mention-6"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-6",
          "local_name": "shapes",
          "local_types": [
            "data structure",
            "concept"
          ],
          "iri": "Entity-shape-Mention-7"
        },
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "shapes",
          "local_types": [
            "data structure",
            "modeling concept"
          ],
          "iri": "Entity-shape-Mention-8"
        },
        {
          "reference": "Section-2-Paragraph-4-Sentence-2",
          "local_name": "shapes",
          "local_types": [
            "geometric figure",
            "mathematical object"
          ],
          "iri": "Entity-shape-Mention-9"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-1",
          "local_name": "shape",
          "local_types": [
            "mathematical object",
            "geometric concept"
          ],
          "iri": "Entity-shape-Mention-10"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-8",
          "local_name": "shapes",
          "local_types": [
            "data structure",
            "geometric object"
          ],
          "iri": "Entity-shape-Mention-11"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "shapes",
          "local_types": [
            "schema",
            "data structure",
            "shape"
          ],
          "iri": "Entity-shape-Mention-12"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-4",
          "local_name": "shapes",
          "local_types": [
            "structure",
            "model",
            "shape"
          ],
          "iri": "Entity-shape-Mention-13"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-5",
          "local_name": "shapes",
          "local_types": [
            "data model",
            "schema"
          ],
          "iri": "Entity-shape-Mention-14"
        },
        {
          "reference": "Section-5-Paragraph-2-Sentence-1",
          "local_name": "Shapes",
          "local_types": [
            "concept",
            "data structure",
            "shape"
          ],
          "iri": "Entity-shape-Mention-15"
        },
        {
          "reference": "Section-5-Paragraph-2-Sentence-3",
          "local_name": "shape",
          "local_types": [
            "data structure",
            "concept"
          ],
          "iri": "Entity-shape-Mention-16"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-shape-Mention-17"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-1",
          "local_name": "shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-shape-Mention-18"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-3",
          "local_name": "shapes",
          "local_types": [
            "geometric figure",
            "mathematical object"
          ],
          "iri": "Entity-shape-Mention-19"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-4",
          "local_name": "shapes",
          "local_types": [
            "concept",
            "visual representation",
            "shape"
          ],
          "iri": "Entity-shape-Mention-20"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-5",
          "local_name": "shapes",
          "local_types": [
            "geometric figure",
            "mathematical object"
          ],
          "iri": "Entity-shape-Mention-21"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "shape",
          "local_types": [
            "concept",
            "abstract entity"
          ],
          "iri": "Entity-shape-Mention-22"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-4",
          "local_name": "shape",
          "local_types": [
            "geometric figure",
            "mathematical concept"
          ],
          "iri": "Entity-shape-Mention-23"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-1",
          "local_name": "Shapes",
          "local_types": [
            "entity",
            "methodology",
            "concept",
            "framework"
          ],
          "iri": "Entity-shape-Mention-24"
        },
        {
          "reference": "Section-13-Paragraph-4-Sentence-1",
          "local_name": "shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-shape-Mention-25"
        },
        {
          "reference": "Section-13-Paragraph-4-Sentence-3",
          "local_name": "shapes",
          "local_types": [
            "concept",
            "structure"
          ],
          "iri": "Entity-shape-Mention-26"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "shapes",
          "local_types": [
            "data structure",
            "validation criteria"
          ],
          "iri": "Entity-shape-Mention-27"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-2",
          "local_name": "shapes",
          "local_types": [
            "geometric figure",
            "object"
          ],
          "iri": "Entity-shape-Mention-28"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "shapes",
          "local_types": [
            "geometric figure",
            "concept",
            "data structure",
            "shape"
          ],
          "iri": "Entity-shape-Mention-29"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-3",
          "local_name": "shapes",
          "local_types": [
            "concept",
            "object"
          ],
          "iri": "Entity-shape-Mention-30"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-2",
          "local_name": "shapes",
          "local_types": [
            "mathematical object",
            "shape",
            "concept",
            "data structure",
            "geometric figure"
          ],
          "iri": "Entity-shape-Mention-31"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-4",
          "local_name": "shapes",
          "local_types": [
            "geometric object",
            "mathematical concept"
          ],
          "iri": "Entity-shape-Mention-32"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-6",
          "local_name": "shapes",
          "local_types": [
            "geometric figure",
            "mathematical object"
          ],
          "iri": "Entity-shape-Mention-33"
        },
        {
          "reference": "Section-14-Paragraph-6-Sentence-1",
          "local_name": "shapes",
          "local_types": [
            "geometric figure",
            "abstract concept"
          ],
          "iri": "Entity-shape-Mention-34"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-2",
          "local_name": "shapes",
          "local_types": [
            "geometric figure",
            "mathematical concept",
            "shape"
          ],
          "iri": "Entity-shape-Mention-35"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-1",
          "local_name": "shapes",
          "local_types": [
            "concept",
            "data structure"
          ],
          "iri": "Entity-shape-Mention-36"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-2",
          "local_name": "shapes",
          "local_types": [
            "geometric figure",
            "mathematical concept"
          ],
          "iri": "Entity-shape-Mention-37"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-3",
          "local_name": "shapes",
          "local_types": [
            "concept",
            "method"
          ],
          "iri": "Entity-shape-Mention-38"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-4",
          "local_name": "shapes",
          "local_types": [
            "object",
            "entity"
          ],
          "iri": "Entity-shape-Mention-39"
        },
        {
          "reference": "Section-18-Paragraph-5-Sentence-1",
          "local_name": "shapes",
          "local_types": [
            "data structure",
            "model"
          ],
          "iri": "Entity-shape-Mention-40"
        }
      ],
      "relevance": 0.6142578125
    },
    "Entity-kg_completion": {
      "node_id": "kg_completion",
      "disambiguation_index": 0,
      "label": "KG completion",
      "aliases": [
        "KG completion",
        "KG-completion"
      ],
      "types": [
        "knowledge graph",
        "data enhancement",
        "task",
        "data completion",
        "data processing",
        "method",
        "knowledge graph enhancement",
        "application",
        "process",
        "data integration"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "KG completion refers to the process of enhancing a knowledge graph by adding missing information or relationships to improve its completeness and utility.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-1",
          "local_name": "KG completion",
          "local_types": [
            "knowledge graph",
            "data integration",
            "data completion"
          ],
          "iri": "Entity-kg_completion-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-5",
          "local_name": "KG completion",
          "local_types": [
            "knowledge graph",
            "data enhancement",
            "knowledge graph enhancement",
            "application",
            "process",
            "data integration"
          ],
          "iri": "Entity-kg_completion-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-2",
          "local_name": "KG-completion",
          "local_types": [
            "knowledge graph",
            "task",
            "data completion",
            "data processing",
            "method",
            "process"
          ],
          "iri": "Entity-kg_completion-Mention-3"
        }
      ],
      "relevance": 0.6142578125
    },
    "Entity-iopsupp": {
      "node_id": "iopsupp",
      "disambiguation_index": 0,
      "label": "IOPsupp",
      "aliases": [
        "IOPsupp",
        "IOPsupp(r)"
      ],
      "types": [
        "function",
        "formula",
        "statistical measure",
        "evaluation criterion",
        "measure",
        "mathematical function",
        "mathematical expression",
        "variable",
        "mathematical notation",
        "metric",
        "term",
        "parameter",
        "evaluation metric",
        "acronym",
        "mathematical operation",
        "set notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "IOPsupp refers to the inverse open path support, a quality measure that quantifies the number of entity pairs satisfying the head of an inverse open path rule in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-4-Sentence-1",
          "local_name": "IOPsupp",
          "local_types": [
            "statistical measure",
            "measure",
            "term",
            "acronym",
            "metric"
          ],
          "iri": "Entity-iopsupp-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-7",
          "local_name": "IOPsupp",
          "local_types": [
            "mathematical notation",
            "function"
          ],
          "iri": "Entity-iopsupp-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-7",
          "local_name": "IOPsupp",
          "local_types": [
            "statistical measure",
            "measure",
            "variable",
            "parameter",
            "metric"
          ],
          "iri": "Entity-iopsupp-Mention-3"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-2",
          "local_name": "IOPsupp",
          "local_types": [
            "measure",
            "evaluation metric"
          ],
          "iri": "Entity-iopsupp-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-2",
          "local_name": "IOPsupp",
          "local_types": [
            "function",
            "mathematical operation",
            "measure",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-iopsupp-Mention-5"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-4",
          "local_name": "IOPsupp",
          "local_types": [
            "mathematical function",
            "statistical measure"
          ],
          "iri": "Entity-iopsupp-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-6",
          "local_name": "IOPsupp(r)",
          "local_types": [
            "function",
            "mathematical function",
            "mathematical expression",
            "set notation"
          ],
          "iri": "Entity-iopsupp-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-8",
          "local_name": "IOPsupp(r)",
          "local_types": [
            "function",
            "mathematical expression",
            "formula",
            "metric"
          ],
          "iri": "Entity-iopsupp-Mention-8"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-2",
          "local_name": "IOPsupp(r)",
          "local_types": [
            "function",
            "measure",
            "metric",
            "evaluation criterion"
          ],
          "iri": "Entity-iopsupp-Mention-9"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-7",
          "local_name": "IOPsupp(r)",
          "local_types": [
            "function",
            "metric"
          ],
          "iri": "Entity-iopsupp-Mention-10"
        }
      ],
      "relevance": 0.6142578125
    },
    "Entity-predicate_logic_formalism": {
      "node_id": "predicate_logic_formalism",
      "disambiguation_index": 0,
      "label": "predicate logic formalism",
      "aliases": [
        "predicate logic formalism"
      ],
      "types": [
        "formalism"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Predicate logic formalism refers to a structured framework for representing and reasoning about relationships and constraints in knowledge graphs, exemplified by Inverse Open Path (IOP) rules that define shapes as paths over connected entities.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-1",
          "local_name": "predicate logic formalism",
          "local_types": [
            "formalism"
          ],
          "iri": "Entity-predicate_logic_formalism-Mention-1"
        }
      ],
      "relevance": 0.6142578125
    },
    "Entity-shacl_core_feature": {
      "node_id": "shacl_core_feature",
      "disambiguation_index": 0,
      "label": "SHACL Core features",
      "aliases": [
        "SHACL Core features"
      ],
      "types": [
        "feature"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "SHACL Core features refer to the fundamental components of the Shapes Constraint Language (SHACL) that enable the definition of constraints on graph data, specifically through the use of node shapes and property shapes.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-1",
          "local_name": "SHACL Core features",
          "local_types": [
            "feature"
          ],
          "iri": "Entity-shacl_core_feature-Mention-1"
        }
      ],
      "relevance": 0.6142578125
    },
    "Entity-pt___x__z0__-__exists__z1__...__z__n-1___y__p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_": {
      "node_id": "pt___x__z0__-__exists__z1__...__z__n-1___y__p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_",
      "disambiguation_index": 0,
      "label": "Pt'(x, z0) -> exists(z1, ..., z(n-1), y) P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)",
      "aliases": [
        "Pt'(x, z0) -> exists(z1, ..., z(n-1), y) P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)",
        "Pt'(x, z0) -> exists(z1, ..., z(n-1), y)"
      ],
      "types": [
        "rule format",
        "rule",
        "expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity refers to the general form of an Inverse Open Path (IOP) rule, which is a logical expression used to define constraints on knowledge graphs by relating a predicate Pt' to a sequence of predicates P1', P2', ..., Pn' through existential quantification of intermediate variables.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "Pt'(x, z0) -> exists(z1, ..., z(n-1), y) P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-pt___x__z0__-__exists__z1__...__z__n-1___y__p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "Pt'(x, z0) -> exists(z1, ..., z(n-1), y)",
          "local_types": [
            "rule format",
            "expression"
          ],
          "iri": "Entity-pt___x__z0__-__exists__z1__...__z__n-1___y__p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_-Mention-2"
        }
      ],
      "relevance": 0.61376953125
    },
    "Entity-type-like_unary_predicate": {
      "node_id": "type-like_unary_predicate",
      "disambiguation_index": 0,
      "label": "type-like unary predicates",
      "aliases": [
        "our deliberate selection of type-like unary predicates",
        "type-like unary predicates"
      ],
      "types": [
        "selection",
        "predicate",
        "data structure",
        "logical construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Type-like unary predicates refer to specific unary predicates in knowledge graphs that are selected for their relevance to types or categories of entities, particularly in the context of learning and validating shapes in SHACL.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-5-Sentence-2",
          "local_name": "type-like unary predicates",
          "local_types": [
            "predicate",
            "data structure",
            "logical construct"
          ],
          "iri": "Entity-type-like_unary_predicate-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-2",
          "local_name": "our deliberate selection of type-like unary predicates",
          "local_types": [
            "selection",
            "predicate"
          ],
          "iri": "Entity-type-like_unary_predicate-Mention-2"
        }
      ],
      "relevance": 0.61376953125
    },
    "Entity-parameter_(1)": {
      "node_id": "parameter_(1)",
      "disambiguation_index": 1,
      "label": "Parameters",
      "aliases": [
        "Parameters"
      ],
      "types": [
        "parameter"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the SHACLEARNER algorithm, 'Parameters' refers to the specific settings that control the learning process, including the maximum rule length (l), maximum rule cardinality (MCar), and minimum thresholds for inverse open path support (MinIOPSC), head coverage (MinIOPHC), and tree shape support (MinTreeSC).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-3",
          "local_name": "Parameters",
          "local_types": [
            "parameter"
          ],
          "iri": "Entity-parameter_(1)-Mention-1"
        }
      ],
      "relevance": 0.61376953125
    },
    "Entity-evaluating_kg_rule-learning_method": {
      "node_id": "evaluating_kg_rule-learning_method",
      "disambiguation_index": 0,
      "label": "evaluating KG rule-learning methods",
      "aliases": [
        "evaluating KG rule-learning methods"
      ],
      "types": [
        "evaluation",
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Evaluating KG rule-learning methods refers to the systematic assessment of the effectiveness and performance of algorithms designed to learn rules from knowledge graphs, focusing on metrics such as the quantity and quality of the rules generated.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-1",
          "local_name": "evaluating KG rule-learning methods",
          "local_types": [
            "evaluation",
            "method"
          ],
          "iri": "Entity-evaluating_kg_rule-learning_method-Mention-1"
        }
      ],
      "relevance": 0.61376953125
    },
    "Entity-iopsc__r_": {
      "node_id": "iopsc__r_",
      "disambiguation_index": 0,
      "label": "IOPSC(r)",
      "aliases": [
        "IOPSC(r')",
        "IOPSC(r)"
      ],
      "types": [
        "function",
        "formula",
        "statistical measure",
        "mathematical function",
        "mathematical expression",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "IOPSC(r) refers to the inverse open path standard confidence of an inverse open path rule, which is a statistical measure indicating the ratio of the number of entity pairs satisfying the head of the rule to the number of entities satisfying the body of the rule in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-4",
          "local_name": "IOPSC(r)",
          "local_types": [
            "mathematical function",
            "statistical measure"
          ],
          "iri": "Entity-iopsc__r_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-7",
          "local_name": "IOPSC(r)",
          "local_types": [
            "formula",
            "metric"
          ],
          "iri": "Entity-iopsc__r_-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-10-Sentence-3",
          "local_name": "IOPSC(r)",
          "local_types": [
            "mathematical expression",
            "function"
          ],
          "iri": "Entity-iopsc__r_-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-10-Sentence-3",
          "local_name": "IOPSC(r')",
          "local_types": [
            "mathematical expression",
            "function"
          ],
          "iri": "Entity-iopsc__r_-Mention-4"
        }
      ],
      "relevance": 0.61328125
    },
    "Entity-aggregation_module": {
      "node_id": "aggregation_module",
      "disambiguation_index": 0,
      "label": "aggregation module",
      "aliases": [
        "The aggregation module",
        "aggregation module"
      ],
      "types": [
        "module",
        "software component",
        "component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The aggregation module is a novel software component in the SHACLEARNER algorithm that generates tree structures from learned Inverse Open Path (IOP) rules, preparing them for translation into the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-2-Sentence-5",
          "local_name": "aggregation module",
          "local_types": [
            "module",
            "software component",
            "component"
          ],
          "iri": "Entity-aggregation_module-Mention-1"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-5",
          "local_name": "The aggregation module",
          "local_types": [
            "module"
          ],
          "iri": "Entity-aggregation_module-Mention-2"
        }
      ],
      "relevance": 0.6123046875
    },
    "Entity-these_threshold": {
      "node_id": "these_threshold",
      "disambiguation_index": 0,
      "label": "These thresholds",
      "aliases": [
        "These thresholds"
      ],
      "types": [
        "threshold"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "These thresholds refer to the minimum quality standards for Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC) that are established to determine the inclusion of learned rules in the evaluation of the SHACLEARNER method, specifically set at IOPSC greater than or equal to 0.1 and IOPHC greater than or equal to 0.01.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-3",
          "local_name": "These thresholds",
          "local_types": [
            "threshold"
          ],
          "iri": "Entity-these_threshold-Mention-1"
        }
      ],
      "relevance": 0.6123046875
    },
    "Entity-p1_": {
      "node_id": "p1_",
      "disambiguation_index": 0,
      "label": "P1'",
      "aliases": [
        "P1'"
      ],
      "types": [
        "function",
        "predicate",
        "logical symbol",
        "logical expression",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P1' refers to a predicate in the context of inverse open path rules (IOP) that is used to express relationships between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "P1'",
          "local_types": [
            "predicate",
            "logical symbol"
          ],
          "iri": "Entity-p1_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "P1'",
          "local_types": [
            "function",
            "predicate",
            "logical expression",
            "mathematical notation"
          ],
          "iri": "Entity-p1_-Mention-2"
        }
      ],
      "relevance": 0.61181640625
    },
    "Entity-chain_of_fact": {
      "node_id": "chain_of_fact",
      "disambiguation_index": 0,
      "label": "chain of facts",
      "aliases": [
        "chain of facts",
        "a chain of facts"
      ],
      "types": [
        "concept",
        "data relationship",
        "logical structure",
        "chain"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'chain of facts' refers to a sequence of predicates in an inverse open path rule (IOP rule) that establishes a logical relationship between entities in a knowledge graph, indicating the necessity and cardinality of connections among those entities.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-1",
          "local_name": "chain of facts",
          "local_types": [
            "concept",
            "data relationship",
            "logical structure"
          ],
          "iri": "Entity-chain_of_fact-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-1",
          "local_name": "a chain of facts",
          "local_types": [
            "concept",
            "chain"
          ],
          "iri": "Entity-chain_of_fact-Mention-2"
        }
      ],
      "relevance": 0.61181640625
    },
    "Entity-quality_annotation": {
      "node_id": "quality_annotation",
      "disambiguation_index": 0,
      "label": "quality annotations",
      "aliases": [
        "quality annotations"
      ],
      "types": [
        "annotation",
        "annotations",
        "descriptive information",
        "quality",
        "metadata"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Quality annotations refer to the metadata that indicates the confidence and generality of shapes derived from IOP rules in the context of SHACL shapes, which are used to validate knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-1",
          "local_name": "quality annotations",
          "local_types": [
            "annotation",
            "annotations",
            "descriptive information",
            "quality",
            "metadata"
          ],
          "iri": "Entity-quality_annotation-Mention-1"
        }
      ],
      "relevance": 0.61181640625
    },
    "Entity-definition_5": {
      "node_id": "definition_5",
      "disambiguation_index": 0,
      "label": "Definition 5",
      "aliases": [
        "Definition 5"
      ],
      "types": [
        "definition"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Definition 5 defines the cardinality of an annotated inverse open path (IOP) rule, specifying that a rule satisfies its cardinality annotation if, for each entity linked by the body of the rule, there are at least a specified number of distinct instantiations of the rule's head in the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-8-Sentence-1",
          "local_name": "Definition 5",
          "local_types": [
            "definition"
          ],
          "iri": "Entity-definition_5-Mention-1"
        }
      ],
      "relevance": 0.61181640625
    },
    "Entity-the_paper": {
      "node_id": "the_paper",
      "disambiguation_index": 0,
      "label": "the paper",
      "aliases": [
        "the paper"
      ],
      "types": [
        "document"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The paper refers to a research document that critiques existing methods for learning SHACL shapes from knowledge graphs, highlighting their limitations in scalability and pattern discovery.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "the paper",
          "local_types": [
            "document"
          ],
          "iri": "Entity-the_paper-Mention-1"
        }
      ],
      "relevance": 0.61181640625
    },
    "Entity-which_shape_could_be_violated_by_applying_a_rule": {
      "node_id": "which_shape_could_be_violated_by_applying_a_rule",
      "disambiguation_index": 0,
      "label": "which shapes could be violated by applying a rule",
      "aliases": [
        "which shapes could be violated by applying a rule"
      ],
      "types": [
        "violation",
        "rule",
        "shapes"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'which shapes could be violated by applying a rule' refers to the identification of specific SHACL shapes in a knowledge graph that may not conform to the constraints imposed by a given set of inference rules, highlighting potential inconsistencies or conflicts in the data validation process.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-6-Sentence-2",
          "local_name": "which shapes could be violated by applying a rule",
          "local_types": [
            "violation",
            "rule",
            "shapes"
          ],
          "iri": "Entity-which_shape_could_be_violated_by_applying_a_rule-Mention-1"
        }
      ],
      "relevance": 0.61181640625
    },
    "Entity-closed_rule__cr_": {
      "node_id": "closed_rule__cr_",
      "disambiguation_index": 0,
      "label": "Closed rules (CR)",
      "aliases": [
        "Closed rules (CR)"
      ],
      "types": [
        "logical framework",
        "inference mechanism",
        "concept",
        "rule"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Closed rules (CR) refer to a formalism used in knowledge graphs that includes closed path rules for inferring new facts and defining constraints on the relationships between entities.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "Closed rules (CR)",
          "local_types": [
            "logical framework",
            "inference mechanism",
            "concept",
            "rule"
          ],
          "iri": "Entity-closed_rule__cr_-Mention-1"
        }
      ],
      "relevance": 0.611328125
    },
    "Entity-op_rule_to_a_cp_rule": {
      "node_id": "op_rule_to_a_cp_rule",
      "disambiguation_index": 0,
      "label": "OP rule to a CP rule",
      "aliases": [
        "OP rule to a CP rule"
      ],
      "types": [
        "transformation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'OP rule to a CP rule' refers to the transformation process in knowledge graph rule mining where an open path (OP) rule, characterized by having open variables, is converted into a closed path (CP) rule, which has all variables closed, allowing for a different structural representation of relationships within the graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-5",
          "local_name": "OP rule to a CP rule",
          "local_types": [
            "transformation"
          ],
          "iri": "Entity-op_rule_to_a_cp_rule-Mention-1"
        }
      ],
      "relevance": 0.611328125
    },
    "Entity-the_distribution_of_mined_rule": {
      "node_id": "the_distribution_of_mined_rule",
      "disambiguation_index": 0,
      "label": "the distribution of mined rules",
      "aliases": [
        "the distribution of mined rules"
      ],
      "types": [
        "distribution",
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The distribution of mined rules refers to the statistical representation and analysis of the quality and characteristics of rules extracted from knowledge graphs, specifically measured by their Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC), which indicate the reliability and relevance of these rules in relation to the target predicates.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-1",
          "local_name": "the distribution of mined rules",
          "local_types": [
            "distribution",
            "rules"
          ],
          "iri": "Entity-the_distribution_of_mined_rule-Mention-1"
        }
      ],
      "relevance": 0.611328125
    },
    "Entity-pattern": {
      "node_id": "pattern",
      "disambiguation_index": 0,
      "label": "patterns",
      "aliases": [
        "patterns"
      ],
      "types": [
        "concept",
        "data structure",
        "structure",
        "information",
        "pattern"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'patterns' refers to the diverse kinds of structural configurations or arrangements, such as k-cliques and trees, that can be expressed through various formalisms in knowledge graphs (KGs) to characterize the relationships and constraints among entities.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "patterns",
          "local_types": [
            "concept",
            "structure",
            "pattern"
          ],
          "iri": "Entity-pattern-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-3-Sentence-1",
          "local_name": "patterns",
          "local_types": [
            "data structure",
            "pattern"
          ],
          "iri": "Entity-pattern-Mention-2"
        },
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "patterns",
          "local_types": [
            "data structure",
            "information"
          ],
          "iri": "Entity-pattern-Mention-3"
        }
      ],
      "relevance": 0.61083984375
    },
    "Entity-pn_": {
      "node_id": "pn_",
      "disambiguation_index": 0,
      "label": "Pn'",
      "aliases": [
        "Pn'"
      ],
      "types": [
        "function",
        "predicate",
        "logical symbol",
        "logical expression",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pn' refers to a predicate in the context of inverse open path rules, which are used to express relationships between entities in knowledge graphs as part of the formalism for defining shapes in the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "Pn'",
          "local_types": [
            "predicate",
            "logical symbol"
          ],
          "iri": "Entity-pn_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "Pn'",
          "local_types": [
            "function",
            "predicate",
            "logical expression",
            "mathematical notation"
          ],
          "iri": "Entity-pn_-Mention-2"
        }
      ],
      "relevance": 0.61083984375
    },
    "Entity-fact_set_k_": {
      "node_id": "fact_set_k_",
      "disambiguation_index": 0,
      "label": "fact set K'",
      "aliases": [
        "fact set K'"
      ],
      "types": [
        "data set",
        "fact set",
        "data structure",
        "set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "fact set K' refers to a collection of facts derived from a sampled subgraph of a knowledge graph, specifically containing information related to a target predicate Pt, which is utilized for learning Inverse Open Path (IOP) rules.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "fact set K'",
          "local_types": [
            "data set",
            "fact set",
            "data structure",
            "set"
          ],
          "iri": "Entity-fact_set_k_-Mention-1"
        }
      ],
      "relevance": 0.61083984375
    },
    "Entity-procedure": {
      "node_id": "procedure",
      "disambiguation_index": 0,
      "label": "procedure",
      "aliases": [
        "procedure"
      ],
      "types": [
        "method",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The procedure refers to the method employed in SHACLEARNER for deriving SHACL trees from annotated Inverse Open Path rules using a greedy search approach.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-2",
          "local_name": "procedure",
          "local_types": [
            "method",
            "process"
          ],
          "iri": "Entity-procedure-Mention-1"
        }
      ],
      "relevance": 0.61083984375
    },
    "Entity-real-world_kg_model": {
      "node_id": "real-world_kg_model",
      "disambiguation_index": 0,
      "label": "real-world KG models",
      "aliases": [
        "real-world KG models"
      ],
      "types": [
        "knowledge graph",
        "knowledge graph model",
        "KG",
        "model",
        "data model"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Real-world KG models refer to practical implementations of knowledge graphs that handle diverse predicates and entities, accommodating various data representations and structures in large-scale datasets.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-1",
          "local_name": "real-world KG models",
          "local_types": [
            "knowledge graph",
            "knowledge graph model",
            "KG",
            "model",
            "data model"
          ],
          "iri": "Entity-real-world_kg_model-Mention-1"
        }
      ],
      "relevance": 0.61083984375
    },
    "Entity-cr": {
      "node_id": "cr",
      "disambiguation_index": 0,
      "label": "CRs",
      "aliases": [
        "CRs"
      ],
      "types": [
        "method",
        "concept",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "CRs, or Closed Rules, are a formalism used in knowledge graphs to express constraints and infer new facts through closed path rules.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "CRs",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-cr-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-2",
          "local_name": "CRs",
          "local_types": [
            "method",
            "concept"
          ],
          "iri": "Entity-cr-Mention-2"
        }
      ],
      "relevance": 0.6103515625
    },
    "Entity-candidate_op_rule": {
      "node_id": "candidate_op_rule",
      "disambiguation_index": 0,
      "label": "candidate OP rule",
      "aliases": [
        "candidate OP rule"
      ],
      "types": [
        "candidate",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'candidate OP rule' refers to a potential rule in the context of Open Path (OP) rules that is evaluated based on its scoring to indicate its quality and relevance in relation to Inverse Open Path (IOP) rules within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-3",
          "local_name": "candidate OP rule",
          "local_types": [
            "candidate",
            "rule"
          ],
          "iri": "Entity-candidate_op_rule-Mention-1"
        }
      ],
      "relevance": 0.6103515625
    },
    "Entity-sequence_of_path_or_branch": {
      "node_id": "sequence_of_path_or_branch",
      "disambiguation_index": 0,
      "label": "sequence of paths or branches",
      "aliases": [
        "sequence of paths or branches",
        "the sequence of paths or branches"
      ],
      "types": [
        "paths",
        "sequence",
        "structure",
        "pathway",
        "branches"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'sequence of paths or branches' refers to the head of a tree structure in SHACL shapes, representing a conjunction of paths that connect entities in a knowledge graph, which is used to validate and express constraints on the graph data.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-4",
          "local_name": "sequence of paths or branches",
          "local_types": [
            "structure",
            "pathway"
          ],
          "iri": "Entity-sequence_of_path_or_branch-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-4",
          "local_name": "the sequence of paths or branches",
          "local_types": [
            "sequence",
            "paths",
            "branches"
          ],
          "iri": "Entity-sequence_of_path_or_branch-Mention-2"
        }
      ],
      "relevance": 0.6103515625
    },
    "Entity-space_of_possible_rule": {
      "node_id": "space_of_possible_rule",
      "disambiguation_index": 0,
      "label": "space of possible rules",
      "aliases": [
        "space of possible rules",
        "the space of possible rules"
      ],
      "types": [
        "concept",
        "rules",
        "space",
        "theoretical framework"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'space of possible rules' refers to the theoretical framework that encompasses all potential rule configurations that can be derived from knowledge graphs, particularly in the context of learning and validating shapes using Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-7-Sentence-1",
          "local_name": "space of possible rules",
          "local_types": [
            "concept",
            "theoretical framework"
          ],
          "iri": "Entity-space_of_possible_rule-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-7-Sentence-1",
          "local_name": "the space of possible rules",
          "local_types": [
            "rules",
            "space"
          ],
          "iri": "Entity-space_of_possible_rule-Mention-2"
        }
      ],
      "relevance": 0.6103515625
    },
    "Entity-one_approach": {
      "node_id": "one_approach",
      "disambiguation_index": 0,
      "label": "One approach",
      "aliases": [
        "One approach"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "One approach refers to a semi-automatic method for learning SHACL shapes from knowledge graphs, which involves using a graph structure learner on a sample of data and presenting the results through an interactive interface for human users to create the shapes.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "One approach",
          "local_types": [
            "method"
          ],
          "iri": "Entity-one_approach-Mention-1"
        }
      ],
      "relevance": 0.6103515625
    },
    "Entity-tree_shape": {
      "node_id": "tree_shape",
      "disambiguation_index": 0,
      "label": "tree shapes",
      "aliases": [
        "Tree shapes",
        "tree shapes"
      ],
      "types": [
        "shape",
        "geometric form",
        "concept",
        "data structure",
        "model",
        "mathematical concept",
        "tree",
        "structure",
        "visual representation",
        "pattern"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Tree shapes refer to structured patterns derived from Inverse Open Path rules that represent hierarchical relationships within knowledge graphs, serving as a means to validate and understand the graph's structure.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-4",
          "local_name": "tree shapes",
          "local_types": [
            "structure",
            "geometric form"
          ],
          "iri": "Entity-tree_shape-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-6",
          "local_name": "tree shapes",
          "local_types": [
            "mathematical concept",
            "structure",
            "data structure",
            "shape"
          ],
          "iri": "Entity-tree_shape-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "tree shapes",
          "local_types": [
            "tree",
            "structure",
            "data structure",
            "shape"
          ],
          "iri": "Entity-tree_shape-Mention-3"
        },
        {
          "reference": "Section-12-Paragraph-7-Sentence-1",
          "local_name": "Tree shapes",
          "local_types": [
            "concept",
            "visual representation",
            "shape"
          ],
          "iri": "Entity-tree_shape-Mention-4"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-2",
          "local_name": "tree shapes",
          "local_types": [
            "shape",
            "concept",
            "model",
            "data structure",
            "structure"
          ],
          "iri": "Entity-tree_shape-Mention-5"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-4",
          "local_name": "tree shapes",
          "local_types": [
            "data structure",
            "concept"
          ],
          "iri": "Entity-tree_shape-Mention-6"
        },
        {
          "reference": "Section-12-Paragraph-9-Sentence-1",
          "local_name": "Tree shapes",
          "local_types": [
            "concept",
            "visual representation",
            "shape",
            "data structure"
          ],
          "iri": "Entity-tree_shape-Mention-7"
        },
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "tree shapes",
          "local_types": [
            "concept",
            "data structure",
            "shape"
          ],
          "iri": "Entity-tree_shape-Mention-8"
        },
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "tree shapes",
          "local_types": [
            "shape",
            "data structure",
            "mathematical concept",
            "structure",
            "pattern"
          ],
          "iri": "Entity-tree_shape-Mention-9"
        }
      ],
      "relevance": 0.60986328125
    },
    "Entity-number_of_rule": {
      "node_id": "number_of_rule",
      "disambiguation_index": 0,
      "label": "number of rules",
      "aliases": [
        "the number of rules",
        "number of rules"
      ],
      "types": [
        "rules",
        "count",
        "number",
        "rule",
        "data quantity",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'number of rules' refers to the total count of distinct Inverse Open Path (IOP) rules that have been learned from knowledge graphs, which varies based on the lengths and cardinalities of the rules.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-7-Sentence-1",
          "local_name": "number of rules",
          "local_types": [
            "count",
            "data quantity"
          ],
          "iri": "Entity-number_of_rule-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "the number of rules",
          "local_types": [
            "rule",
            "metric"
          ],
          "iri": "Entity-number_of_rule-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-7-Sentence-1",
          "local_name": "the number of rules",
          "local_types": [
            "number",
            "rules"
          ],
          "iri": "Entity-number_of_rule-Mention-3"
        }
      ],
      "relevance": 0.60986328125
    },
    "Entity-relevant_rule": {
      "node_id": "relevant_rule",
      "disambiguation_index": 0,
      "label": "relevant rules",
      "aliases": [
        "relevant rules"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Relevant rules refer to the high-quality IOP rules that demonstrate significant coverage of head instances in knowledge graphs, indicating their importance and applicability in the context of learning shapes and constraints for graph data.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-3",
          "local_name": "relevant rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-relevant_rule-Mention-1"
        }
      ],
      "relevance": 0.60986328125
    },
    "Entity-expressivity_of_the_shape": {
      "node_id": "expressivity_of_the_shape",
      "disambiguation_index": 0,
      "label": "expressivity of the shapes",
      "aliases": [
        "the expressivity of the shapes",
        "expressivity of the shapes"
      ],
      "types": [
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'expressivity of the shapes' refers to the ability of SHACL shapes, learned from knowledge graphs, to represent complex patterns and constraints that enhance the validation, description, and data entry processes within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-5-Sentence-1",
          "local_name": "expressivity of the shapes",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-expressivity_of_the_shape-Mention-1"
        },
        {
          "reference": "Section-18-Paragraph-5-Sentence-1",
          "local_name": "the expressivity of the shapes",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-expressivity_of_the_shape-Mention-2"
        }
      ],
      "relevance": 0.609375
    },
    "Entity-logical_foundation_(1)": {
      "node_id": "logical_foundation_(1)",
      "disambiguation_index": 1,
      "label": "logical foundations",
      "aliases": [
        "logical foundations"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Logical foundations refer to the formal principles and semantics that underpin the Shapes Constraint Language (SHACL), enabling the rigorous definition and understanding of SHACL shapes and their interactions within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-1",
          "local_name": "logical foundations",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-logical_foundation_(1)-Mention-1"
        }
      ],
      "relevance": 0.609375
    },
    "Entity-section_5": {
      "node_id": "section_5",
      "disambiguation_index": 0,
      "label": "Section 5",
      "aliases": [
        "Section 5"
      ],
      "types": [
        "document part",
        "section",
        "report section",
        "document section",
        "part of paper"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Section 5 refers to the part of the paper where the authors discuss the results of their experimental evaluation of the SHACLEARNER method for learning SHACL shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-3",
          "local_name": "Section 5",
          "local_types": [
            "document part",
            "section",
            "report section",
            "document section",
            "part of paper"
          ],
          "iri": "Entity-section_5-Mention-1"
        }
      ],
      "relevance": 0.60888671875
    },
    "Entity-open_path__opsupp__opsc__ophc": {
      "node_id": "open_path__opsupp__opsc__ophc",
      "disambiguation_index": 0,
      "label": "open path: OPsupp, OPSC, OPHC",
      "aliases": [
        "open path: OPsupp, OPSC, OPHC"
      ],
      "types": [
        "path",
        "open path"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'open path: OPsupp, OPSC, OPHC' refers to metrics used to evaluate the quality of open path rules in knowledge graphs, specifically measuring the support, standard confidence, and head coverage of these rules.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-4-Sentence-1",
          "local_name": "open path: OPsupp, OPSC, OPHC",
          "local_types": [
            "path",
            "open path"
          ],
          "iri": "Entity-open_path__opsupp__opsc__ophc-Mention-1"
        }
      ],
      "relevance": 0.60888671875
    },
    "Entity-inverse_open_path_support": {
      "node_id": "inverse_open_path_support",
      "disambiguation_index": 0,
      "label": "inverse open path support",
      "aliases": [
        "inverse open path support"
      ],
      "types": [
        "parameter",
        "concept",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Inverse open path support is a metric that quantifies the number of entity pairs satisfying the head of an inverse open path rule in a knowledge graph, reflecting the rule's effectiveness in capturing relationships between entities.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-4-Sentence-5",
          "local_name": "inverse open path support",
          "local_types": [
            "parameter",
            "concept",
            "metric"
          ],
          "iri": "Entity-inverse_open_path_support-Mention-1"
        }
      ],
      "relevance": 0.60888671875
    },
    "Entity-sampled_kg": {
      "node_id": "sampled_kg",
      "disambiguation_index": 0,
      "label": "sampled KG",
      "aliases": [
        "sampled KG",
        "the sampled KG"
      ],
      "types": [
        "knowledge graph",
        "KG",
        "data structure",
        "sample"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'sampled KG' refers to a reduced subgraph of a knowledge graph that contains a limited number of entities related to a specific target predicate, created to facilitate the learning of rules from large, sparse knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "sampled KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-sampled_kg-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-5",
          "local_name": "sampled KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-sampled_kg-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-3",
          "local_name": "sampled KG",
          "local_types": [
            "knowledge graph",
            "KG",
            "data structure"
          ],
          "iri": "Entity-sampled_kg-Mention-3"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-4",
          "local_name": "sampled KG",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-sampled_kg-Mention-4"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "the sampled KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-sampled_kg-Mention-5"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-2",
          "local_name": "sampled KG",
          "local_types": [
            "knowledge graph",
            "sample"
          ],
          "iri": "Entity-sampled_kg-Mention-6"
        }
      ],
      "relevance": 0.6083984375
    },
    "Entity-open_path_rule": {
      "node_id": "open_path_rule",
      "disambiguation_index": 0,
      "label": "open path rules",
      "aliases": [
        "open path rules"
      ],
      "types": [
        "rule type",
        "concept",
        "rule",
        "knowledge representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Open path rules are a type of rule in knowledge representation that express relationships between entities in a knowledge graph through paths, serving as a foundational concept for deriving more complex structures and constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-3",
          "local_name": "open path rules",
          "local_types": [
            "rule",
            "concept"
          ],
          "iri": "Entity-open_path_rule-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-1-Sentence-1",
          "local_name": "open path rules",
          "local_types": [
            "rule type",
            "rule",
            "concept",
            "knowledge representation"
          ],
          "iri": "Entity-open_path_rule-Mention-2"
        }
      ],
      "relevance": 0.60791015625
    },
    "Entity-car__r_": {
      "node_id": "car__r_",
      "disambiguation_index": 0,
      "label": "Car(r)",
      "aliases": [
        "the cardinality annotation for r",
        "Car(r)"
      ],
      "types": [
        "cardinality annotation",
        "annotation",
        "function",
        "concept",
        "cardinality",
        "mathematical concept",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Car(r) refers to the cardinality annotation associated with an annotated inverse open path (IOP) rule, indicating a lower bound on the number of distinct head paths satisfied in a knowledge graph for each instantiation linking the body to the head.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-8-Sentence-2",
          "local_name": "Car(r)",
          "local_types": [
            "cardinality annotation",
            "annotation",
            "function",
            "concept",
            "mathematical notation"
          ],
          "iri": "Entity-car__r_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "Car(r)",
          "local_types": [
            "function",
            "mathematical concept"
          ],
          "iri": "Entity-car__r_-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-2",
          "local_name": "the cardinality annotation for r",
          "local_types": [
            "annotation",
            "cardinality"
          ],
          "iri": "Entity-car__r_-Mention-3"
        }
      ],
      "relevance": 0.60791015625
    },
    "Entity-real-world_kg": {
      "node_id": "real-world_kg",
      "disambiguation_index": 0,
      "label": "real-world KGs",
      "aliases": [
        "real-world KG",
        "real-world KGs"
      ],
      "types": [
        "knowledge graph",
        "KG",
        "real-world",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Real-world KGs refer to knowledge graphs that are constructed from data representing real-world entities and their relationships, often characterized by their sparsity and the challenge of capturing comprehensive connections among entities.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "real-world KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-real-world_kg-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-2",
          "local_name": "real-world KGs",
          "local_types": [
            "knowledge graph",
            "KG",
            "data structure"
          ],
          "iri": "Entity-real-world_kg-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-1",
          "local_name": "real-world KGs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-real-world_kg-Mention-3"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-5",
          "local_name": "real-world KG",
          "local_types": [
            "knowledge graph",
            "real-world",
            "data structure"
          ],
          "iri": "Entity-real-world_kg-Mention-4"
        }
      ],
      "relevance": 0.60791015625
    },
    "Entity-inefficient": {
      "node_id": "inefficient",
      "disambiguation_index": 0,
      "label": "inefficient",
      "aliases": [
        "inefficient"
      ],
      "types": [
        "performance characteristic"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'inefficient' refers to the ideal IOP rule learner variant of SHACLEARNER (-S-H), which generates and evaluates all possible rules but is not practical for real-world knowledge graphs due to its brute-force search approach.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-2",
          "local_name": "inefficient",
          "local_types": [
            "performance characteristic"
          ],
          "iri": "Entity-inefficient-Mention-1"
        }
      ],
      "relevance": 0.60791015625
    },
    "Entity-element_(1)": {
      "node_id": "element_(1)",
      "disambiguation_index": 1,
      "label": "elements",
      "aliases": [
        "elements"
      ],
      "types": [
        "component"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the SHACLEARNER algorithm, 'elements' refer to the novel components and features that differentiate SHACLEARNER from the OPRL algorithm, specifically its ability to handle unary predicates and minimum cardinality constraints in IOP rules.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-2-Sentence-1",
          "local_name": "elements",
          "local_types": [
            "component"
          ],
          "iri": "Entity-element_(1)-Mention-1"
        }
      ],
      "relevance": 0.60791015625
    },
    "Entity-efficient_and_interpretable_human_validation": {
      "node_id": "efficient_and_interpretable_human_validation",
      "disambiguation_index": 0,
      "label": "efficient and interpretable human validation",
      "aliases": [
        "efficient and interpretable human validation"
      ],
      "types": [
        "process",
        "validation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Efficient and interpretable human validation refers to the process of using learned SHACL shapes to facilitate the manual verification and completion of knowledge graphs, allowing users to intuitively assess and confirm the validity of data entries in a structured and systematic manner.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-3",
          "local_name": "efficient and interpretable human validation",
          "local_types": [
            "process",
            "validation"
          ],
          "iri": "Entity-efficient_and_interpretable_human_validation-Mention-1"
        }
      ],
      "relevance": 0.60791015625
    },
    "Entity-closed_path_form": {
      "node_id": "closed_path_form",
      "disambiguation_index": 0,
      "label": "closed path forms",
      "aliases": [
        "the closed path forms",
        "closed path forms"
      ],
      "types": [
        "path",
        "method",
        "concept",
        "theoretical framework",
        "closed path",
        "form",
        "methodology"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Closed path forms refer to a specific type of rule in knowledge graph completion where all variables in the rule are closed, meaning they occur in at least two distinct predicate terms, and they are used to derive quality measures for open path rules.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-3-Sentence-1",
          "local_name": "closed path forms",
          "local_types": [
            "method",
            "concept",
            "methodology",
            "theoretical framework"
          ],
          "iri": "Entity-closed_path_form-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-3-Sentence-1",
          "local_name": "the closed path forms",
          "local_types": [
            "closed path",
            "path",
            "form"
          ],
          "iri": "Entity-closed_path_form-Mention-2"
        }
      ],
      "relevance": 0.607421875
    },
    "Entity-rule": {
      "node_id": "rule",
      "disambiguation_index": 0,
      "label": "rules",
      "aliases": [
        "rule",
        "rules",
        "Rules"
      ],
      "types": [
        "formalism",
        "framework",
        "logical statement",
        "rule",
        "mathematical rule",
        "criteria",
        "guidelines",
        "logical rules",
        "constraint",
        "concept",
        "rules",
        "theoretical framework",
        "principles",
        "data mining rule",
        "logical rule",
        "logical constructs",
        "standards",
        "principle",
        "knowledge representation",
        "condition",
        "instruction",
        "data structure",
        "guideline",
        "logic",
        "inference",
        "procedure",
        "learning outcome",
        "learning rule",
        "formal rule",
        "logical construct",
        "learned rules",
        "constraints",
        "theory",
        "formal rules",
        "theoretical construct",
        "decision rules",
        "regulation",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'rules' refer to formal constructs within the SHACL framework that define constraints and relationships in knowledge graphs, enabling the validation and structuring of data through logical statements and guidelines.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "constraint",
            "logical rule",
            "formalism"
          ],
          "iri": "Entity-rule-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-2",
          "local_name": "rules",
          "local_types": [
            "logical rules",
            "formal rules",
            "rule"
          ],
          "iri": "Entity-rule-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-2",
          "local_name": "rules",
          "local_types": [
            "rule",
            "logical statement",
            "guideline"
          ],
          "iri": "Entity-rule-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-5",
          "local_name": "rule",
          "local_types": [
            "concept",
            "principle"
          ],
          "iri": "Entity-rule-Mention-4"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-6",
          "local_name": "rule",
          "local_types": [
            "concept",
            "theoretical framework"
          ],
          "iri": "Entity-rule-Mention-5"
        },
        {
          "reference": "Section-3-Paragraph-5-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "concept",
            "theory"
          ],
          "iri": "Entity-rule-Mention-6"
        },
        {
          "reference": "Section-3-Paragraph-6-Sentence-1",
          "local_name": "Rules",
          "local_types": [
            "methodology",
            "concept",
            "principle"
          ],
          "iri": "Entity-rule-Mention-7"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-4",
          "local_name": "rule",
          "local_types": [
            "logical construct",
            "theoretical framework"
          ],
          "iri": "Entity-rule-Mention-8"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-2",
          "local_name": "rule",
          "local_types": [
            "formal rule",
            "logical rule",
            "logical statement",
            "mathematical rule"
          ],
          "iri": "Entity-rule-Mention-9"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "methodology",
            "concept"
          ],
          "iri": "Entity-rule-Mention-10"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-5",
          "local_name": "rule",
          "local_types": [
            "concept",
            "theory"
          ],
          "iri": "Entity-rule-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-1",
          "local_name": "Rules",
          "local_types": [
            "theory",
            "concept"
          ],
          "iri": "Entity-rule-Mention-12"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "rule",
          "local_types": [
            "concept",
            "theoretical construct"
          ],
          "iri": "Entity-rule-Mention-13"
        },
        {
          "reference": "Section-6-Paragraph-11-Sentence-1",
          "local_name": "rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-rule-Mention-14"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "guideline",
            "data structure"
          ],
          "iri": "Entity-rule-Mention-15"
        },
        {
          "reference": "Section-10-Paragraph-2-Sentence-2",
          "local_name": "rule",
          "local_types": [
            "principle",
            "guideline"
          ],
          "iri": "Entity-rule-Mention-16"
        },
        {
          "reference": "Section-10-Paragraph-3-Sentence-1",
          "local_name": "rule",
          "local_types": [
            "formal rule",
            "rule",
            "logical rule",
            "logical statement"
          ],
          "iri": "Entity-rule-Mention-17"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-2",
          "local_name": "rules",
          "local_types": [
            "rule",
            "criteria"
          ],
          "iri": "Entity-rule-Mention-18"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-3",
          "local_name": "rules",
          "local_types": [
            "guidelines",
            "standards"
          ],
          "iri": "Entity-rule-Mention-19"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-2",
          "local_name": "rule",
          "local_types": [
            "logical construct",
            "concept",
            "logical statement",
            "mathematical rule"
          ],
          "iri": "Entity-rule-Mention-20"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-2",
          "local_name": "rules",
          "local_types": [
            "guideline",
            "mathematical rule"
          ],
          "iri": "Entity-rule-Mention-21"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-2",
          "local_name": "rules",
          "local_types": [
            "principles",
            "constraints",
            "guidelines"
          ],
          "iri": "Entity-rule-Mention-22"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-3",
          "local_name": "rule",
          "local_types": [
            "guideline",
            "principle"
          ],
          "iri": "Entity-rule-Mention-23"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-4",
          "local_name": "rule",
          "local_types": [
            "guideline",
            "condition"
          ],
          "iri": "Entity-rule-Mention-24"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-5",
          "local_name": "rules",
          "local_types": [
            "guidelines",
            "constraints"
          ],
          "iri": "Entity-rule-Mention-25"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "logic",
            "inference"
          ],
          "iri": "Entity-rule-Mention-26"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-2",
          "local_name": "rule",
          "local_types": [
            "regulation",
            "guideline"
          ],
          "iri": "Entity-rule-Mention-27"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "concept",
            "knowledge representation"
          ],
          "iri": "Entity-rule-Mention-28"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "instruction",
            "methodology",
            "concept",
            "guideline"
          ],
          "iri": "Entity-rule-Mention-29"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-4",
          "local_name": "rules",
          "local_types": [
            "guidelines",
            "framework"
          ],
          "iri": "Entity-rule-Mention-30"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-2",
          "local_name": "rules",
          "local_types": [
            "principles",
            "guidelines",
            "concept"
          ],
          "iri": "Entity-rule-Mention-31"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-3",
          "local_name": "rules",
          "local_types": [
            "concept",
            "methodology"
          ],
          "iri": "Entity-rule-Mention-32"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-3",
          "local_name": "rules",
          "local_types": [
            "guidelines",
            "principles"
          ],
          "iri": "Entity-rule-Mention-33"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-6",
          "local_name": "rules",
          "local_types": [
            "guideline",
            "principle"
          ],
          "iri": "Entity-rule-Mention-34"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "data structure",
            "knowledge representation"
          ],
          "iri": "Entity-rule-Mention-35"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-2",
          "local_name": "rule",
          "local_types": [
            "guideline",
            "instruction"
          ],
          "iri": "Entity-rule-Mention-36"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-3",
          "local_name": "rule",
          "local_types": [
            "guideline",
            "principle"
          ],
          "iri": "Entity-rule-Mention-37"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "rule",
          "local_types": [
            "guideline",
            "regulation"
          ],
          "iri": "Entity-rule-Mention-38"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "guidelines",
            "methodology"
          ],
          "iri": "Entity-rule-Mention-39"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "rule",
          "local_types": [
            "logical construct"
          ],
          "iri": "Entity-rule-Mention-40"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-2",
          "local_name": "rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-rule-Mention-41"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-4",
          "local_name": "rules",
          "local_types": [
            "logical constructs",
            "decision rules"
          ],
          "iri": "Entity-rule-Mention-42"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-4",
          "local_name": "rules",
          "local_types": [
            "guideline",
            "regulation"
          ],
          "iri": "Entity-rule-Mention-43"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "learning outcome",
            "knowledge representation",
            "learned rules"
          ],
          "iri": "Entity-rule-Mention-44"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-4",
          "local_name": "rules",
          "local_types": [
            "learning rule",
            "knowledge representation"
          ],
          "iri": "Entity-rule-Mention-45"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "data mining rule",
            "knowledge representation"
          ],
          "iri": "Entity-rule-Mention-46"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-2",
          "local_name": "rules",
          "local_types": [
            "data structure",
            "knowledge representation"
          ],
          "iri": "Entity-rule-Mention-47"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-4",
          "local_name": "rules",
          "local_types": [
            "guideline",
            "procedure"
          ],
          "iri": "Entity-rule-Mention-48"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-rule-Mention-49"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-rule-Mention-50"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-3",
          "local_name": "rules",
          "local_types": [
            "concept",
            "theoretical construct"
          ],
          "iri": "Entity-rule-Mention-51"
        },
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-rule-Mention-52"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-1",
          "local_name": "rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-rule-Mention-53"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-4",
          "local_name": "rules",
          "local_types": [
            "guideline",
            "framework"
          ],
          "iri": "Entity-rule-Mention-54"
        }
      ],
      "relevance": 0.607421875
    },
    "Entity-5___e1__e2__e3__e4__e5__": {
      "node_id": "5___e1__e2__e3__e4__e5__",
      "disambiguation_index": 0,
      "label": "5 ({e1, e2, e3, e4, e5})",
      "aliases": [
        "5 ({e1, e2, e3, e4, e5})"
      ],
      "types": [
        "count",
        "entity set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '5 ({e1, e2, e3, e4, e5})' refers to the count of distinct entities that can instantiate the variable z0 in the head part of an inverse open path (IOP) rule within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "5 ({e1, e2, e3, e4, e5})",
          "local_types": [
            "count",
            "entity set"
          ],
          "iri": "Entity-5___e1__e2__e3__e4__e5__-Mention-1"
        }
      ],
      "relevance": 0.607421875
    },
    "Entity-number_of_different_chain": {
      "node_id": "number_of_different_chain",
      "disambiguation_index": 0,
      "label": "number of different chains",
      "aliases": [
        "number of different chains",
        "the number of different chains"
      ],
      "types": [
        "concept",
        "quantitative measure",
        "chain"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'number of different chains' refers to the distinct instantiations of the head of an inverse open path (IOP) rule in a knowledge graph, which must satisfy a specified cardinality indicating the minimum number of such chains that should exist for each entity linked by the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-1",
          "local_name": "number of different chains",
          "local_types": [
            "quantitative measure",
            "concept"
          ],
          "iri": "Entity-number_of_different_chain-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-1",
          "local_name": "the number of different chains",
          "local_types": [
            "concept",
            "chain"
          ],
          "iri": "Entity-number_of_different_chain-Mention-2"
        }
      ],
      "relevance": 0.607421875
    },
    "Entity-a": {
      "node_id": "a",
      "disambiguation_index": 0,
      "label": "A",
      "aliases": [
        "A"
      ],
      "types": [
        "parameter",
        "output",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A refers to a target predicate Pt used as an input parameter in the SHACLearner algorithm for learning inverse open path rules from a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-2",
          "local_name": "A",
          "local_types": [
            "variable",
            "output"
          ],
          "iri": "Entity-a-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-9",
          "local_name": "A",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-a-Mention-2"
        }
      ],
      "relevance": 0.607421875
    },
    "Entity-tree-shaped_constraint": {
      "node_id": "tree-shaped_constraint",
      "disambiguation_index": 0,
      "label": "tree-shaped constraint",
      "aliases": [
        "tree-shaped constraint"
      ],
      "types": [
        "algorithm parameter",
        "constraint",
        "mathematical concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The tree-shaped constraint is a specific limitation applied to the structure of rules derived from Inverse Open Path rules in knowledge graphs, which helps to simplify and refine the complexity of the mined shapes by enforcing a hierarchical tree structure.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-2",
          "local_name": "tree-shaped constraint",
          "local_types": [
            "algorithm parameter",
            "constraint",
            "mathematical concept"
          ],
          "iri": "Entity-tree-shaped_constraint-Mention-1"
        }
      ],
      "relevance": 0.607421875
    },
    "Entity-_e2__e4__e5__e6__e7__e8__e9_": {
      "node_id": "_e2__e4__e5__e6__e7__e8__e9_",
      "disambiguation_index": 0,
      "label": "{e2, e4, e5, e6, e7, e8, e9}",
      "aliases": [
        "{e2, e4, e5, e6, e7, e8, e9}"
      ],
      "types": [
        "entity set"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term '{e2, e4, e5, e6, e7, e8, e9}' refers to a set of entities in a knowledge graph that can instantiate a variable in the body of an inverse open path (IOP) rule, satisfying the conditions of the rule's body predicates.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "{e2, e4, e5, e6, e7, e8, e9}",
          "local_types": [
            "entity set"
          ],
          "iri": "Entity-_e2__e4__e5__e6__e7__e8__e9_-Mention-1"
        }
      ],
      "relevance": 0.607421875
    },
    "Entity-the_cardinality": {
      "node_id": "the_cardinality",
      "disambiguation_index": 0,
      "label": "the cardinality",
      "aliases": [
        "the cardinality"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The cardinality refers to an annotation in inverse open path (IOP) rules that specifies a lower bound on the number of distinct head paths that must be satisfied in a knowledge graph for each instantiation linking the body to the head.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-8-Sentence-4",
          "local_name": "the cardinality",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-the_cardinality-Mention-1"
        }
      ],
      "relevance": 0.607421875
    },
    "Entity-the_sampled_kg": {
      "node_id": "the_sampled_kg",
      "disambiguation_index": 0,
      "label": "the sampled KG",
      "aliases": [
        "the sampled KG"
      ],
      "types": [
        "knowledge graph",
        "sampled"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The sampled KG refers to a reduced subgraph of the original knowledge graph that contains a limited number of entities and facts relevant to a specific target predicate, facilitating the learning of shape patterns while managing the complexity of large-scale knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-5",
          "local_name": "the sampled KG",
          "local_types": [
            "knowledge graph",
            "sampled"
          ],
          "iri": "Entity-the_sampled_kg-Mention-1"
        }
      ],
      "relevance": 0.607421875
    },
    "Entity-knowledge_graph": {
      "node_id": "knowledge_graph",
      "disambiguation_index": 0,
      "label": "Knowledge Graphs",
      "aliases": [
        "knowledge graphs",
        "Knowledge Graphs",
        "knowledge graph"
      ],
      "types": [
        "graph representation",
        "information system",
        "concept",
        "data structure",
        "technology",
        "graph database",
        "graph"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "Knowledge Graphs are structured representations of knowledge that use graph-based models to organize and interlink information, enabling enhanced data retrieval and semantic understanding.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-1",
          "local_name": "Knowledge Graphs",
          "local_types": [
            "information system",
            "concept",
            "data structure",
            "technology",
            "graph database"
          ],
          "iri": "Entity-knowledge_graph-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "knowledge graphs",
          "local_types": [
            "concept",
            "data structure",
            "graph"
          ],
          "iri": "Entity-knowledge_graph-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "knowledge graph",
          "local_types": [
            "information system",
            "data structure"
          ],
          "iri": "Entity-knowledge_graph-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-6",
          "local_name": "knowledge graph",
          "local_types": [
            "graph representation",
            "information system",
            "data structure",
            "graph"
          ],
          "iri": "Entity-knowledge_graph-Mention-4"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "knowledge graph",
          "local_types": [
            "concept",
            "data structure",
            "graph"
          ],
          "iri": "Entity-knowledge_graph-Mention-5"
        }
      ],
      "relevance": 0.60693359375
    },
    "Entity-rule_with_cardinality_car": {
      "node_id": "rule_with_cardinality_car",
      "disambiguation_index": 0,
      "label": "rules with cardinality Car",
      "aliases": [
        "rules with cardinality Car"
      ],
      "types": [
        "rules",
        "cardinality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Rules with cardinality Car refer to specific constraints in the context of Inverse Open Path rules, where the cardinality Car indicates the minimum number of distinct entities that must satisfy the head of the rule based on the matrix product of predicates in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-2",
          "local_name": "rules with cardinality Car",
          "local_types": [
            "rules",
            "cardinality"
          ],
          "iri": "Entity-rule_with_cardinality_car-Mention-1"
        }
      ],
      "relevance": 0.60693359375
    },
    "Entity-application": {
      "node_id": "application",
      "disambiguation_index": 0,
      "label": "applications",
      "aliases": [
        "applications"
      ],
      "types": [
        "implementation",
        "use case",
        "usage scenario",
        "context"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'applications' refers to the various use cases and scenarios in which knowledge graphs (KGs) are utilized, particularly focusing on the challenges and constraints associated with their data-first approach.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-5",
          "local_name": "applications",
          "local_types": [
            "use case",
            "implementation"
          ],
          "iri": "Entity-application-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-4",
          "local_name": "applications",
          "local_types": [
            "context",
            "usage scenario"
          ],
          "iri": "Entity-application-Mention-2"
        }
      ],
      "relevance": 0.6064453125
    },
    "Entity-return_tree_and_r": {
      "node_id": "return_tree_and_r",
      "disambiguation_index": 0,
      "label": "return Tree and R",
      "aliases": [
        "return Tree and R"
      ],
      "types": [
        "output"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'return Tree and R' refers to the output of the SHACLearner algorithm, which consists of a learned tree structure representing high-quality IOP rules and a set of these rules derived from a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-13",
          "local_name": "return Tree and R",
          "local_types": [
            "output"
          ],
          "iri": "Entity-return_tree_and_r-Mention-1"
        }
      ],
      "relevance": 0.6064453125
    },
    "Entity-all_these_shape": {
      "node_id": "all_these_shape",
      "disambiguation_index": 0,
      "label": "all these shapes",
      "aliases": [
        "all these shapes"
      ],
      "types": [
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'all these shapes' refers to various forms of constraints expressed in the Shapes Constraint Language (SHACL) that can be derived from paths over connected entities in knowledge graphs, serving as a foundational structure for defining more complex shapes.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-2",
          "local_name": "all these shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-all_these_shape-Mention-1"
        }
      ],
      "relevance": 0.6064453125
    },
    "Entity-active_knowledge_graph_completion": {
      "node_id": "active_knowledge_graph_completion",
      "disambiguation_index": 0,
      "label": "active knowledge graph completion",
      "aliases": [
        "active knowledge graph completion"
      ],
      "types": [
        "knowledge graph",
        "data processing"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Active knowledge graph completion refers to a method of completing knowledge graphs by defining open path rules that imply the existence of facts based on the relationships between entities within the graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-1",
          "local_name": "active knowledge graph completion",
          "local_types": [
            "knowledge graph",
            "data processing"
          ],
          "iri": "Entity-active_knowledge_graph_completion-Mention-1"
        }
      ],
      "relevance": 0.60595703125
    },
    "Entity-cardinality_car": {
      "node_id": "cardinality_car",
      "disambiguation_index": 0,
      "label": "cardinality Car",
      "aliases": [
        "cardinality Car"
      ],
      "types": [
        "mathematical concept",
        "attribute",
        "cardinality",
        "integer"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'cardinality Car' refers to an integer annotation in inverse open path (IOP) rules that specifies a lower bound on the number of distinct head paths satisfied in a knowledge graph for each instantiation linking the body to the head.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-3",
          "local_name": "cardinality Car",
          "local_types": [
            "mathematical concept",
            "attribute",
            "cardinality",
            "integer"
          ],
          "iri": "Entity-cardinality_car-Mention-1"
        }
      ],
      "relevance": 0.60595703125
    },
    "Entity-the_proportion_of_quality_rule": {
      "node_id": "the_proportion_of_quality_rule",
      "disambiguation_index": 0,
      "label": "the proportion of quality rules",
      "aliases": [
        "the proportion of quality rules"
      ],
      "types": [
        "proportion",
        "quality rules"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The proportion of quality rules refers to the ratio of high-quality rules identified in the knowledge graph learning process, specifically as it relates to the inverse open path standard confidence (IOPSC) metric.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-2",
          "local_name": "the proportion of quality rules",
          "local_types": [
            "proportion",
            "quality rules"
          ],
          "iri": "Entity-the_proportion_of_quality_rule-Mention-1"
        }
      ],
      "relevance": 0.60595703125
    },
    "Entity-variant": {
      "node_id": "variant",
      "disambiguation_index": 0,
      "label": "variant",
      "aliases": [
        "variant"
      ],
      "types": [
        "category",
        "type"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'variant' refers to the different configurations of the SHACLEARNER system, each employing distinct combinations of sampling and heuristic pruning methods to learn IOP rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-4",
          "local_name": "variant",
          "local_types": [
            "category",
            "type"
          ],
          "iri": "Entity-variant-Mention-1"
        }
      ],
      "relevance": 0.60595703125
    },
    "Entity-these_kind_of_shape": {
      "node_id": "these_kind_of_shape",
      "disambiguation_index": 0,
      "label": "these kinds of shapes",
      "aliases": [
        "these kinds of shapes"
      ],
      "types": [
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "These kinds of shapes refer to path shapes in the Shapes Constraint Language (SHACL) that serve as foundational elements for constructing more complex structures, such as trees, within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-5",
          "local_name": "these kinds of shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-these_kind_of_shape-Mention-1"
        }
      ],
      "relevance": 0.60595703125
    },
    "Entity-each_target_predicate": {
      "node_id": "each_target_predicate",
      "disambiguation_index": 0,
      "label": "each target predicate",
      "aliases": [
        "each target predicate"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Each target predicate refers to the specific predicates in a knowledge graph for which the SHACLEARNER algorithm aims to discover and aggregate IOP rules to form a tree structure.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-7",
          "local_name": "each target predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-each_target_predicate-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-3",
          "local_name": "each target predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-each_target_predicate-Mention-2"
        }
      ],
      "relevance": 0.60595703125
    },
    "Entity-no_pruning": {
      "node_id": "no_pruning",
      "disambiguation_index": 0,
      "label": "no pruning",
      "aliases": [
        "no pruning"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the SHACLEARNER method for learning IOP rules from knowledge graphs, 'no pruning' refers to the approach where all possible rules are generated and evaluated without any reduction of the search space, resulting in a comprehensive but computationally intensive rule learning process.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "no pruning",
          "local_types": [
            "method"
          ],
          "iri": "Entity-no_pruning-Mention-1"
        }
      ],
      "relevance": 0.60595703125
    },
    "Entity-shape_learning_system": {
      "node_id": "shape_learning_system",
      "disambiguation_index": 0,
      "label": "shape learning system",
      "aliases": [
        "shape learning system",
        "our shape learning system"
      ],
      "types": [
        "machine learning system",
        "learning framework",
        "software",
        "learning system",
        "system"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The shape learning system is a machine learning framework designed to identify and construct path shapes from knowledge graphs, facilitating the validation and characterization of graph data through the application of shape constraints.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-1",
          "local_name": "shape learning system",
          "local_types": [
            "machine learning system",
            "software",
            "system",
            "learning framework"
          ],
          "iri": "Entity-shape_learning_system-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-1",
          "local_name": "our shape learning system",
          "local_types": [
            "system",
            "learning system"
          ],
          "iri": "Entity-shape_learning_system-Mention-2"
        }
      ],
      "relevance": 0.60546875
    },
    "Entity-r2": {
      "node_id": "r2",
      "disambiguation_index": 0,
      "label": "r2",
      "aliases": [
        "r2"
      ],
      "types": [
        "parameter",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "r2 refers to the second version of the IOP rule r, which is defined for a cardinality value of 2 in the context of evaluating shape constraints in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "r2",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-r2-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-4",
          "local_name": "r2",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-r2-Mention-2"
        }
      ],
      "relevance": 0.60546875
    },
    "Entity-multiple_branch": {
      "node_id": "multiple_branch",
      "disambiguation_index": 0,
      "label": "multiple branches",
      "aliases": [
        "multiple branches"
      ],
      "types": [
        "branch"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'multiple branches' refers to the various paths or segments in a tree structure that are formed by aggregating Inverse Open Path (IOP) rules, representing different relationships or attributes associated with entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "multiple branches",
          "local_types": [
            "branch"
          ],
          "iri": "Entity-multiple_branch-Mention-1"
        }
      ],
      "relevance": 0.60546875
    },
    "Entity-missing_fact_(1)": {
      "node_id": "missing_fact_(1)",
      "disambiguation_index": 1,
      "label": "missing facts",
      "aliases": [
        "missing facts"
      ],
      "types": [
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Missing facts refer to the information or data entries that are absent from a knowledge graph (KG) for specific predicates, which can be completed or acquired through the application of learned SHACL shapes and Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-1",
          "local_name": "missing facts",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-missing_fact_(1)-Mention-1"
        }
      ],
      "relevance": 0.60546875
    },
    "Entity-rlvlr": {
      "node_id": "rlvlr",
      "disambiguation_index": 0,
      "label": "RLvLR",
      "aliases": [
        "RLvLR"
      ],
      "types": [
        "method",
        "model",
        "algorithm",
        "system",
        "rule language"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "RLvLR is a rule language used in knowledge graph rule learning systems that employs closed path (CP) rules to express implications between predicates in a structured manner.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-3",
          "local_name": "RLvLR",
          "local_types": [
            "method",
            "model",
            "algorithm",
            "system",
            "rule language"
          ],
          "iri": "Entity-rlvlr-Mention-1"
        }
      ],
      "relevance": 0.60498046875
    },
    "Entity-p__i": {
      "node_id": "p__i",
      "disambiguation_index": 0,
      "label": "P'i",
      "aliases": [
        "P'i"
      ],
      "types": [
        "knowledge graph element",
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P'i refers to a predicate in a knowledge graph (KG) that can either be a direct relation or its reverse, with universally quantified free variables in the context of inverse open path rules.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-2",
          "local_name": "P'i",
          "local_types": [
            "knowledge graph element",
            "predicate"
          ],
          "iri": "Entity-p__i-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-2",
          "local_name": "P'i",
          "local_types": [
            "knowledge graph element",
            "predicate"
          ],
          "iri": "Entity-p__i-Mention-2"
        }
      ],
      "relevance": 0.60498046875
    },
    "Entity-7": {
      "node_id": "7",
      "disambiguation_index": 0,
      "label": "7",
      "aliases": [
        "7"
      ],
      "types": [
        "number"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, '7' refers to the number of entities that can instantiate a variable in the body part of an inverse open path (IOP) rule, indicating the cardinality of possible connections in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "7",
          "local_types": [
            "number"
          ],
          "iri": "Entity-7-Mention-1"
        }
      ],
      "relevance": 0.60498046875
    },
    "Entity-28_unary_predicate": {
      "node_id": "28_unary_predicate",
      "disambiguation_index": 0,
      "label": "28 unary predicates",
      "aliases": [
        "28 unary predicates",
        "all 28 unary predicates"
      ],
      "types": [
        "mathematical concept",
        "predicate",
        "logical construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The '28 unary predicates' refer to a specific set of target predicates utilized in the SHACLEARNER system for learning IOP rules from knowledge graphs, which are logical constructs that take a single argument.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-2",
          "local_name": "28 unary predicates",
          "local_types": [
            "mathematical concept",
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-28_unary_predicate-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-2",
          "local_name": "all 28 unary predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-28_unary_predicate-Mention-2"
        }
      ],
      "relevance": 0.6044921875
    },
    "Entity-general_template": {
      "node_id": "general_template",
      "disambiguation_index": 0,
      "label": "general template",
      "aliases": [
        "general template"
      ],
      "types": [
        "template"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'general template' refers to a foundational structure in the context of Shapes Constraint Language (SHACL) that serves as a basic form for constructing more complex shapes, such as closed rules or trees, by utilizing sequences of predicates in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-3",
          "local_name": "general template",
          "local_types": [
            "template"
          ],
          "iri": "Entity-general_template-Mention-1"
        }
      ],
      "relevance": 0.6044921875
    },
    "Entity-certain_property_in_the_embedding_space": {
      "node_id": "certain_property_in_the_embedding_space",
      "disambiguation_index": 0,
      "label": "certain properties in the embedding space",
      "aliases": [
        "certain properties in the embedding space"
      ],
      "types": [
        "properties",
        "embedding space"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'certain properties in the embedding space' refers to the characteristics and relationships of predicate embeddings that are utilized to evaluate and derive candidate Inverse Open Path (IOP) rules in the context of knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-2",
          "local_name": "certain properties in the embedding space",
          "local_types": [
            "properties",
            "embedding space"
          ],
          "iri": "Entity-certain_property_in_the_embedding_space-Mention-1"
        }
      ],
      "relevance": 0.6044921875
    },
    "Entity-node_and_property_shape": {
      "node_id": "node_and_property_shape",
      "disambiguation_index": 0,
      "label": "node and property shapes",
      "aliases": [
        "node and property shapes"
      ],
      "types": [
        "concept",
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Node and property shapes refer to the fundamental constructs in the Shapes Constraint Language (SHACL) that define constraints on graph data, where node shapes specify the structure and properties of nodes in a knowledge graph, and property shapes define the constraints on the properties connecting those nodes.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-1",
          "local_name": "node and property shapes",
          "local_types": [
            "concept",
            "shape"
          ],
          "iri": "Entity-node_and_property_shape-Mention-1"
        }
      ],
      "relevance": 0.6044921875
    },
    "Entity-heuristic_pruning_(1)": {
      "node_id": "heuristic_pruning_(1)",
      "disambiguation_index": 1,
      "label": "heuristic pruning",
      "aliases": [
        "heuristic pruning"
      ],
      "types": [
        "technique"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Heuristic pruning is a technique used in the SHACLEARNER algorithm to reduce the search space for learning Inverse Open Path rules from knowledge graphs by employing an embedding-based scoring function to selectively eliminate less promising rule candidates.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-2",
          "local_name": "heuristic pruning",
          "local_types": [
            "technique"
          ],
          "iri": "Entity-heuristic_pruning_(1)-Mention-1"
        }
      ],
      "relevance": 0.6044921875
    },
    "Entity-the_quality_of_op_rule": {
      "node_id": "the_quality_of_op_rule",
      "disambiguation_index": 0,
      "label": "the quality of OP rules",
      "aliases": [
        "the quality of OP rules"
      ],
      "types": [
        "quality assessment",
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The quality of OP rules refers to the evaluation metrics, specifically open path standard confidence (OPSC) and open path head coverage (OPHC), used to measure the effectiveness and reliability of open path rules in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-3-Sentence-1",
          "local_name": "the quality of OP rules",
          "local_types": [
            "quality assessment",
            "rules"
          ],
          "iri": "Entity-the_quality_of_op_rule-Mention-1"
        }
      ],
      "relevance": 0.60400390625
    },
    "Entity-the_original_predicate_and_fact_in_the_kg": {
      "node_id": "the_original_predicate_and_fact_in_the_kg",
      "disambiguation_index": 0,
      "label": "the original predicates and facts in the KG",
      "aliases": [
        "the original predicates and facts in the KG"
      ],
      "types": [
        "knowledge graph",
        "predicates",
        "predicate",
        "fact",
        "facts"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The original predicates and facts in the KG refer to the initial data elements and relationships that exist within a knowledge graph, which are preserved while new predicates and facts are added for further analysis and shape learning.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-4",
          "local_name": "the original predicates and facts in the KG",
          "local_types": [
            "knowledge graph",
            "predicates",
            "predicate",
            "fact",
            "facts"
          ],
          "iri": "Entity-the_original_predicate_and_fact_in_the_kg-Mention-1"
        }
      ],
      "relevance": 0.60400390625
    },
    "Entity-topic": {
      "node_id": "topic",
      "disambiguation_index": 0,
      "label": "topic",
      "aliases": [
        "topic"
      ],
      "types": [
        "subject",
        "area of study"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'topic' refers to the area of study concerning the learning and application of SHACL shapes for knowledge graphs, particularly focusing on the challenges and methodologies related to expressing constraints and inferring shapes from graph data.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-7",
          "local_name": "topic",
          "local_types": [
            "subject",
            "area of study"
          ],
          "iri": "Entity-topic-Mention-1"
        }
      ],
      "relevance": 0.603515625
    },
    "Entity-the_quality_of_performance": {
      "node_id": "the_quality_of_performance",
      "disambiguation_index": 0,
      "label": "the quality of performance",
      "aliases": [
        "the quality of performance"
      ],
      "types": [
        "quality",
        "performance"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The quality of performance refers to the effectiveness and reliability of the rules learned from knowledge graphs, as measured by specific metrics such as Inverse Open Path Standard Confidence (IOPSC) and Inverse Open Path Head Coverage (IOPHC), which indicate the confidence and relevance of the rules in relation to the target predicates.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-4",
          "local_name": "the quality of performance",
          "local_types": [
            "quality",
            "performance"
          ],
          "iri": "Entity-the_quality_of_performance-Mention-1"
        }
      ],
      "relevance": 0.60302734375
    },
    "Entity-7___e2__e4__e5__e6__e7__e8__e9__": {
      "node_id": "7___e2__e4__e5__e6__e7__e8__e9__",
      "disambiguation_index": 0,
      "label": "7 ({e2, e4, e5, e6, e7, e8, e9})",
      "aliases": [
        "7 ({e2, e4, e5, e6, e7, e8, e9})"
      ],
      "types": [
        "count",
        "entity set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '7 ({e2, e4, e5, e6, e7, e8, e9})' refers to the count of distinct entities that can instantiate the body part of an inverse open path (IOP) rule in a knowledge graph, specifically indicating that there are seven entities satisfying the body predicate of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "7 ({e2, e4, e5, e6, e7, e8, e9})",
          "local_types": [
            "count",
            "entity set"
          ],
          "iri": "Entity-7___e2__e4__e5__e6__e7__e8__e9__-Mention-1"
        }
      ],
      "relevance": 0.6025390625
    },
    "Entity-the_shape_(1)": {
      "node_id": "the_shape_(1)",
      "disambiguation_index": 1,
      "label": "the shape",
      "aliases": [
        "a shape",
        "the shape"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The shape refers to a formal representation of constraints on graph data within the Shapes Constraint Language (SHACL), which is used to validate and characterize patterns in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-2-Sentence-3",
          "local_name": "the shape",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-the_shape_(1)-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "a shape",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-the_shape_(1)-Mention-2"
        }
      ],
      "relevance": 0.6025390625
    },
    "Entity-existing_ontology": {
      "node_id": "existing_ontology",
      "disambiguation_index": 0,
      "label": "existing ontologies",
      "aliases": [
        "existing ontologies"
      ],
      "types": [
        "ontology"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Existing ontologies refer to established frameworks or models that define the relationships and categories of entities within knowledge graphs, which are utilized to automatically generate SHACL shapes for validating graph data.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-1",
          "local_name": "existing ontologies",
          "local_types": [
            "ontology"
          ],
          "iri": "Entity-existing_ontology-Mention-1"
        }
      ],
      "relevance": 0.6025390625
    },
    "Entity-the_confidence_of_a_rule": {
      "node_id": "the_confidence_of_a_rule",
      "disambiguation_index": 0,
      "label": "the confidence of a rule",
      "aliases": [
        "the confidence of a rule"
      ],
      "types": [
        "concept",
        "confidence"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The confidence of a rule, referred to as Inverse Open Path Standard Confidence (IOPSC), quantifies the reliability of a rule by calculating the proportion of instances in a knowledge graph where the rule is valid, thereby assessing its effectiveness in predicting target predicate instances.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "the confidence of a rule",
          "local_types": [
            "concept",
            "confidence"
          ],
          "iri": "Entity-the_confidence_of_a_rule-Mention-1"
        }
      ],
      "relevance": 0.6025390625
    },
    "Entity-44__of_iop_rule": {
      "node_id": "44__of_iop_rule",
      "disambiguation_index": 0,
      "label": "44% of IOP rules",
      "aliases": [
        "44% of IOP rules"
      ],
      "types": [
        "rule",
        "IOP",
        "rules",
        "percentage"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '44% of IOP rules' refers to the proportion of Inverse Open Path (IOP) rules that are eliminated when applying a tree-shaped constraint to the basic IOP-shaped constraints during the process of constructing tree structures from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-2",
          "local_name": "44% of IOP rules",
          "local_types": [
            "rule",
            "IOP",
            "rules",
            "percentage"
          ],
          "iri": "Entity-44__of_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.6025390625
    },
    "Entity-formal_quality_measure": {
      "node_id": "formal_quality_measure",
      "disambiguation_index": 0,
      "label": "formal quality measures",
      "aliases": [
        "formal quality measures"
      ],
      "types": [
        "quality assessment",
        "evaluation metric",
        "measure",
        "quality measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Formal quality measures refer to specific metrics used to evaluate the quality and effectiveness of Inverse Open Path (IOP) rules in the context of learning and validating shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-3",
          "local_name": "formal quality measures",
          "local_types": [
            "quality assessment",
            "evaluation metric",
            "measure",
            "quality measure"
          ],
          "iri": "Entity-formal_quality_measure-Mention-1"
        }
      ],
      "relevance": 0.60205078125
    },
    "Entity-op_rule": {
      "node_id": "op_rule",
      "disambiguation_index": 0,
      "label": "OP rule",
      "aliases": [
        "OP rule",
        "an OP rule",
        "OP rules",
        "An OP rule"
      ],
      "types": [
        "method",
        "rule",
        "computational model",
        "logical rules",
        "concept",
        "rules",
        "evaluation metric",
        "logical rule",
        "theoretical concept",
        "formal system",
        "algorithm component",
        "open predicate rule",
        "logic",
        "mathematical concept",
        "logic rule",
        "logical construct",
        "evaluation criteria",
        "predicate",
        "operation rule",
        "OP rules",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "An OP rule is a logical construct in knowledge graph reasoning that involves two open variables and is used to imply the existence of a fact based on the relationships defined by predicates in the graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-3",
          "local_name": "OP rule",
          "local_types": [
            "concept",
            "open predicate rule",
            "mathematical concept",
            "rule",
            "logical rule"
          ],
          "iri": "Entity-op_rule-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-4",
          "local_name": "OP rules",
          "local_types": [
            "logical rules",
            "formal system",
            "rules"
          ],
          "iri": "Entity-op_rule-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-5",
          "local_name": "OP rules",
          "local_types": [
            "rule",
            "computational model"
          ],
          "iri": "Entity-op_rule-Mention-3"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-6",
          "local_name": "OP rule",
          "local_types": [
            "concept",
            "rule"
          ],
          "iri": "Entity-op_rule-Mention-4"
        },
        {
          "reference": "Section-4-Paragraph-3-Sentence-1",
          "local_name": "OP rules",
          "local_types": [
            "evaluation criteria",
            "method",
            "concept",
            "evaluation metric",
            "rule",
            "methodology"
          ],
          "iri": "Entity-op_rule-Mention-5"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-2",
          "local_name": "OP rule",
          "local_types": [
            "operation rule",
            "concept",
            "mathematical concept",
            "rule"
          ],
          "iri": "Entity-op_rule-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-1",
          "local_name": "OP rules",
          "local_types": [
            "concept",
            "logic",
            "rule",
            "logical rule",
            "theoretical concept"
          ],
          "iri": "Entity-op_rule-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-3-Sentence-1",
          "local_name": "OP rules",
          "local_types": [
            "rules",
            "logic",
            "OP rules",
            "rule",
            "methodology"
          ],
          "iri": "Entity-op_rule-Mention-8"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-1",
          "local_name": "OP rule",
          "local_types": [
            "predicate",
            "logic",
            "rule",
            "logical rule",
            "theoretical concept"
          ],
          "iri": "Entity-op_rule-Mention-9"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-2",
          "local_name": "OP rules",
          "local_types": [
            "algorithm component",
            "logical construct",
            "rules",
            "rule",
            "logic rule"
          ],
          "iri": "Entity-op_rule-Mention-10"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-3",
          "local_name": "An OP rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-op_rule-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-1",
          "local_name": "an OP rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-op_rule-Mention-12"
        }
      ],
      "relevance": 0.60205078125
    },
    "Entity-the_power_of_kg": {
      "node_id": "the_power_of_kg",
      "disambiguation_index": 0,
      "label": "the power of KGs",
      "aliases": [
        "the power of KGs"
      ],
      "types": [
        "concept",
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The power of KGs refers to their data-first approach that allows for flexible and arbitrary contributions to the knowledge graph, facilitating its extension and evolution.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-1",
          "local_name": "the power of KGs",
          "local_types": [
            "concept",
            "knowledge graph"
          ],
          "iri": "Entity-the_power_of_kg-Mention-1"
        }
      ],
      "relevance": 0.60205078125
    },
    "Entity-higher_confidence_in_the_kg": {
      "node_id": "higher_confidence_in_the_kg",
      "disambiguation_index": 0,
      "label": "higher confidence in the KG",
      "aliases": [
        "higher confidence in the KG"
      ],
      "types": [
        "confidence",
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Higher confidence in the KG refers to the increased reliability and validity of a simplified tree structure derived from a knowledge graph, achieved through the pruning of unnecessary branches or paths, which enhances the quality and interpretability of the knowledge represented.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-3",
          "local_name": "higher confidence in the KG",
          "local_types": [
            "confidence",
            "knowledge graph"
          ],
          "iri": "Entity-higher_confidence_in_the_kg-Mention-1"
        }
      ],
      "relevance": 0.60205078125
    },
    "Entity-embedding-based_op_rule_learning": {
      "node_id": "embedding-based_op_rule_learning",
      "disambiguation_index": 0,
      "label": "embedding-based OP rule learning",
      "aliases": [
        "embedding-based OP rule learning"
      ],
      "types": [
        "technique",
        "learning",
        "method",
        "learning method",
        "data mining technique"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Embedding-based OP rule learning refers to a method that utilizes embedding techniques to enhance the learning of open path rules, which are used to extract structured patterns from knowledge graphs for the purpose of mining inverse open path rules.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-1",
          "local_name": "embedding-based OP rule learning",
          "local_types": [
            "technique",
            "learning",
            "method",
            "learning method",
            "data mining technique"
          ],
          "iri": "Entity-embedding-based_op_rule_learning-Mention-1"
        }
      ],
      "relevance": 0.60107421875
    },
    "Entity-one_specific_unary_predicate": {
      "node_id": "one_specific_unary_predicate",
      "disambiguation_index": 0,
      "label": "one specific unary predicate",
      "aliases": [
        "one specific unary predicate"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'one specific unary predicate' refers to a particular unary predicate in a knowledge graph that is associated with high Inverse Open Path Head Coverage (IOPHC) in the context of learning shape constraints using Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-5",
          "local_name": "one specific unary predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-one_specific_unary_predicate-Mention-1"
        }
      ],
      "relevance": 0.60107421875
    },
    "Entity-the_entity": {
      "node_id": "the_entity",
      "disambiguation_index": 0,
      "label": "the entities",
      "aliases": [
        "the entities"
      ],
      "types": [
        "entities"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The entities refer to the distinct elements within a knowledge graph that are involved in satisfying specific logical rules or conditions defined by the Inverse Open Path (IOP) rules.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-3",
          "local_name": "the entities",
          "local_types": [
            "entities"
          ],
          "iri": "Entity-the_entity-Mention-1"
        }
      ],
      "relevance": 0.6005859375
    },
    "Entity-head_path": {
      "node_id": "head_path",
      "disambiguation_index": 0,
      "label": "head paths",
      "aliases": [
        "head paths"
      ],
      "types": [
        "graph theory",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Head paths refer to the sequences of predicates in inverse open path rules that establish a relationship between entities in a knowledge graph, specifically indicating the minimum number of such paths that must exist for a given body of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-8-Sentence-4",
          "local_name": "head paths",
          "local_types": [
            "graph theory",
            "concept"
          ],
          "iri": "Entity-head_path-Mention-1"
        }
      ],
      "relevance": 0.60009765625
    },
    "Entity-potential_rule_in_the_search_space": {
      "node_id": "potential_rule_in_the_search_space",
      "disambiguation_index": 0,
      "label": "potential rules in the search space",
      "aliases": [
        "the number of potential rules in the search space",
        "potential rules in the search space"
      ],
      "types": [
        "concept",
        "rules",
        "search space"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The phrase 'potential rules in the search space' refers to the various possible IOP rules that can be generated based on the maximum number of predicates, which increases exponentially, indicating the complexity and vastness of the rule discovery process in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-3",
          "local_name": "potential rules in the search space",
          "local_types": [
            "rules",
            "search space"
          ],
          "iri": "Entity-potential_rule_in_the_search_space-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-3",
          "local_name": "the number of potential rules in the search space",
          "local_types": [
            "concept",
            "rules",
            "search space"
          ],
          "iri": "Entity-potential_rule_in_the_search_space-Mention-2"
        }
      ],
      "relevance": 0.60009765625
    },
    "Entity-quality_measurement_(1)": {
      "node_id": "quality_measurement_(1)",
      "disambiguation_index": 1,
      "label": "quality measurements",
      "aliases": [
        "quality measurements"
      ],
      "types": [
        "measurement"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Quality measurements refer to the evaluative metrics, specifically IOPSC and IOPHC, used to assess the confidence and generality of the shapes learned by the SHACLEARNER from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-2-Sentence-3",
          "local_name": "quality measurements",
          "local_types": [
            "measurement"
          ],
          "iri": "Entity-quality_measurement_(1)-Mention-1"
        }
      ],
      "relevance": 0.60009765625
    },
    "Entity-ophc": {
      "node_id": "ophc",
      "disambiguation_index": 0,
      "label": "OPHC",
      "aliases": [
        "OPHC"
      ],
      "types": [
        "statistical measure",
        "path type",
        "abbreviation",
        "variable",
        "entity type",
        "term",
        "parameter",
        "rule",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "OPHC refers to the open path head coverage, a quality measure used to assess the effectiveness of open path rules in knowledge graphs by evaluating the ratio of the number of entity pairs satisfying the head of the rule to the number satisfying the body.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-4-Sentence-1",
          "local_name": "OPHC",
          "local_types": [
            "term",
            "path type",
            "abbreviation",
            "entity type"
          ],
          "iri": "Entity-ophc-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-5",
          "local_name": "OPHC",
          "local_types": [
            "statistical measure",
            "variable",
            "parameter",
            "rule",
            "metric"
          ],
          "iri": "Entity-ophc-Mention-2"
        }
      ],
      "relevance": 0.599609375
    },
    "Entity-path_shape": {
      "node_id": "path_shape",
      "disambiguation_index": 0,
      "label": "path shapes",
      "aliases": [
        "path shapes",
        "such path shapes"
      ],
      "types": [
        "shape",
        "path shape",
        "data representation",
        "geometric shape",
        "pattern"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Path shapes refer to sequences of predicates in knowledge graphs that serve as a general template for expressing constraints and patterns, which can be used as building blocks for more complex shapes in the context of shape learning systems.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-1",
          "local_name": "path shapes",
          "local_types": [
            "data representation",
            "geometric shape",
            "pattern",
            "shape"
          ],
          "iri": "Entity-path_shape-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-1",
          "local_name": "such path shapes",
          "local_types": [
            "path shape"
          ],
          "iri": "Entity-path_shape-Mention-2"
        }
      ],
      "relevance": 0.599609375
    },
    "Entity-candidate_iop_rule": {
      "node_id": "candidate_iop_rule",
      "disambiguation_index": 0,
      "label": "candidate IOP rules",
      "aliases": [
        "candidate IOP rules"
      ],
      "types": [
        "potential rule",
        "IOP rule",
        "logical construct",
        "candidate",
        "rules",
        "rule",
        "decision-making framework",
        "potential guideline"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Candidate IOP rules are potential logical constructs generated by the PathFinding() algorithm that represent specific paths over connected entities in a knowledge graph, based on the embedding representations of the involved predicates.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-1",
          "local_name": "candidate IOP rules",
          "local_types": [
            "rules",
            "rule",
            "IOP rule",
            "logical construct"
          ],
          "iri": "Entity-candidate_iop_rule-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-5-Sentence-1",
          "local_name": "candidate IOP rules",
          "local_types": [
            "potential rule",
            "logical construct",
            "candidate",
            "rule",
            "decision-making framework",
            "potential guideline"
          ],
          "iri": "Entity-candidate_iop_rule-Mention-2"
        }
      ],
      "relevance": 0.599609375
    },
    "Entity-e_s": {
      "node_id": "e_s",
      "disambiguation_index": 0,
      "label": "e's",
      "aliases": [
        "e's"
      ],
      "types": [
        "entity",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'e's' refers to distinct entities in a knowledge graph that satisfy certain conditions defined by the rules in the context of the paper's discussion on matrix computations for quality measures in SHACLearner.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-2",
          "local_name": "e's",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-e_s-Mention-1"
        }
      ],
      "relevance": 0.599609375
    },
    "Entity-exploratory_attempt": {
      "node_id": "exploratory_attempt",
      "disambiguation_index": 0,
      "label": "exploratory attempts",
      "aliases": [
        "exploratory attempts"
      ],
      "types": [
        "research",
        "research effort",
        "investigation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'exploratory attempts' refers to initial research efforts aimed at developing methods for learning SHACL shapes from knowledge graphs, which are characterized by their procedural nature and lack of logical foundations, making them unsuitable for scalability and comparison with more robust approaches.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-1-Sentence-1",
          "local_name": "exploratory attempts",
          "local_types": [
            "research",
            "research effort",
            "investigation"
          ],
          "iri": "Entity-exploratory_attempt-Mention-1"
        }
      ],
      "relevance": 0.599609375
    },
    "Entity-embedding-based_open_path_rule_learner": {
      "node_id": "embedding-based_open_path_rule_learner",
      "disambiguation_index": 0,
      "label": "embedding-based open path rule learner",
      "aliases": [
        "state-of-the-art embedding-based open path rule learner",
        "embedding-based open path rule learner"
      ],
      "types": [
        "machine learning model",
        "method",
        "learner",
        "algorithm",
        "learning method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The embedding-based open path rule learner is a machine learning model designed to learn high-quality rules from knowledge graphs by utilizing embedding techniques to identify and express specific shape patterns in the data.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-5",
          "local_name": "embedding-based open path rule learner",
          "local_types": [
            "machine learning model",
            "learner",
            "learning method",
            "algorithm"
          ],
          "iri": "Entity-embedding-based_open_path_rule_learner-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-4",
          "local_name": "embedding-based open path rule learner",
          "local_types": [
            "machine learning model",
            "learner",
            "method",
            "algorithm"
          ],
          "iri": "Entity-embedding-based_open_path_rule_learner-Mention-2"
        },
        {
          "reference": "Section-1-Paragraph-2-Sentence-5",
          "local_name": "state-of-the-art embedding-based open path rule learner",
          "local_types": [
            "method",
            "learner"
          ],
          "iri": "Entity-embedding-based_open_path_rule_learner-Mention-3"
        }
      ],
      "relevance": 0.59912109375
    },
    "Entity-rule_mining_for_kg_completion": {
      "node_id": "rule_mining_for_kg_completion",
      "disambiguation_index": 0,
      "label": "rule mining for KG completion",
      "aliases": [
        "rule mining for KG completion",
        "earlier work in rule mining for KG completion"
      ],
      "types": [
        "research",
        "research area"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Rule mining for KG completion is a research area focused on extracting and utilizing rules from knowledge graphs to enhance the process of completing and enriching the information contained within these graphs.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-1",
          "local_name": "rule mining for KG completion",
          "local_types": [
            "research area"
          ],
          "iri": "Entity-rule_mining_for_kg_completion-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-1",
          "local_name": "earlier work in rule mining for KG completion",
          "local_types": [
            "research"
          ],
          "iri": "Entity-rule_mining_for_kg_completion-Mention-2"
        }
      ],
      "relevance": 0.59912109375
    },
    "Entity-sequence_of_predicate": {
      "node_id": "sequence_of_predicate",
      "disambiguation_index": 0,
      "label": "sequence of predicates",
      "aliases": [
        "a sequence of predicates",
        "sequence of predicates"
      ],
      "types": [
        "logical structure",
        "predicate",
        "mathematical expression",
        "syntax structure",
        "sequence",
        "expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A sequence of predicates refers to a fundamental syntactic structure used in the Shapes Constraint Language (SHACL) to define shape constraints in knowledge graphs, where it consists of a series of predicates that are connected by variables, serving as a template for more complex shapes.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-6",
          "local_name": "sequence of predicates",
          "local_types": [
            "logical structure",
            "predicate",
            "mathematical expression",
            "sequence",
            "syntax structure",
            "expression"
          ],
          "iri": "Entity-sequence_of_predicate-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-6",
          "local_name": "a sequence of predicates",
          "local_types": [
            "sequence",
            "predicate"
          ],
          "iri": "Entity-sequence_of_predicate-Mention-2"
        }
      ],
      "relevance": 0.59912109375
    },
    "Entity-the_population_of_a_kg": {
      "node_id": "the_population_of_a_kg",
      "disambiguation_index": 0,
      "label": "the population of a KG",
      "aliases": [
        "the population of a KG"
      ],
      "types": [
        "population",
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The population of a KG refers to the process of adding and organizing data within a knowledge graph, guided by defined shapes that express constraints and relationships among entities, although these shapes may not always be strictly enforced.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-3",
          "local_name": "the population of a KG",
          "local_types": [
            "population",
            "knowledge graph"
          ],
          "iri": "Entity-the_population_of_a_kg-Mention-1"
        }
      ],
      "relevance": 0.59912109375
    },
    "Entity-the_fact_in_the_head_of_the_iop_rule": {
      "node_id": "the_fact_in_the_head_of_the_iop_rule",
      "disambiguation_index": 0,
      "label": "the facts in the head of the IOP rule",
      "aliases": [
        "the facts in the head of the IOP rule"
      ],
      "types": [
        "fact",
        "IOP rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The facts in the head of the IOP rule refer to the specific predicates or relationships that must be satisfied in a knowledge graph for an inverse open path (IOP) rule to hold true, indicating the necessary connections between entities that validate the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-1",
          "local_name": "the facts in the head of the IOP rule",
          "local_types": [
            "fact",
            "IOP rule"
          ],
          "iri": "Entity-the_fact_in_the_head_of_the_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.59912109375
    },
    "Entity-the_minimum_iopsc": {
      "node_id": "the_minimum_iopsc",
      "disambiguation_index": 0,
      "label": "the minimum IOPSC",
      "aliases": [
        "the minimum IOPSC"
      ],
      "types": [
        "concept",
        "IOPSC"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The minimum IOPSC refers to the lowest quality measure of Inverse Open Path rules that can be used to form a tree structure in the context of learning shapes for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-6",
          "local_name": "the minimum IOPSC",
          "local_types": [
            "concept",
            "IOPSC"
          ],
          "iri": "Entity-the_minimum_iopsc-Mention-1"
        }
      ],
      "relevance": 0.59912109375
    },
    "Entity-these_two_pruning_method": {
      "node_id": "these_two_pruning_method",
      "disambiguation_index": 0,
      "label": "these two pruning methods",
      "aliases": [
        "these two pruning methods"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "These two pruning methods refer to the prior Sampling and heuristic pruning techniques used in the SHACLEARNER algorithm to optimize the search space for learning Inverse Open Path rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-1-Sentence-2",
          "local_name": "these two pruning methods",
          "local_types": [
            "method"
          ],
          "iri": "Entity-these_two_pruning_method-Mention-1"
        }
      ],
      "relevance": 0.59912109375
    },
    "Entity-p2_2": {
      "node_id": "p2_2",
      "disambiguation_index": 0,
      "label": "P2_2",
      "aliases": [
        "P2_2"
      ],
      "types": [
        "parameter",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P2_2 refers to a variable in the context of an Inverse Open Path (IOP) rule that is used to represent relationships between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-4",
          "local_name": "P2_2",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-p2_2-Mention-1"
        }
      ],
      "relevance": 0.5986328125
    },
    "Entity-characterising_the_frequent_pattern_in_a_kg": {
      "node_id": "characterising_the_frequent_pattern_in_a_kg",
      "disambiguation_index": 0,
      "label": "characterising the frequent patterns in a KG",
      "aliases": [
        "characterising the frequent patterns in a KG"
      ],
      "types": [
        "purpose",
        "pattern analysis"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'characterising the frequent patterns in a KG' refers to the process of identifying and defining common structural and relational patterns within a knowledge graph, which can be utilized for validating the graph's quality and enhancing its schema representation through the application of shapes.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-2-Sentence-1",
          "local_name": "characterising the frequent patterns in a KG",
          "local_types": [
            "purpose",
            "pattern analysis"
          ],
          "iri": "Entity-characterising_the_frequent_pattern_in_a_kg-Mention-1"
        }
      ],
      "relevance": 0.5986328125
    },
    "Entity-open_path_standard_confidence": {
      "node_id": "open_path_standard_confidence",
      "disambiguation_index": 0,
      "label": "open path standard confidence",
      "aliases": [
        "open path standard confidence (OPSC)",
        "open path standard confidence"
      ],
      "types": [
        "statistical measure",
        "confidence",
        "concept",
        "parameter",
        "evaluation metric",
        "metric",
        "evaluation measure"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Open path standard confidence (OPSC) is a statistical measure used to evaluate the quality of open path rules in knowledge graphs, defined as the ratio of the number of entity pairs satisfying the body of the rule to the total number of entity pairs that satisfy the body.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-3-Sentence-1",
          "local_name": "open path standard confidence",
          "local_types": [
            "metric",
            "evaluation metric"
          ],
          "iri": "Entity-open_path_standard_confidence-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-1",
          "local_name": "open path standard confidence",
          "local_types": [
            "parameter",
            "concept",
            "statistical measure",
            "metric"
          ],
          "iri": "Entity-open_path_standard_confidence-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-3-Sentence-1",
          "local_name": "open path standard confidence (OPSC)",
          "local_types": [
            "confidence",
            "evaluation measure",
            "statistical measure",
            "metric"
          ],
          "iri": "Entity-open_path_standard_confidence-Mention-3"
        }
      ],
      "relevance": 0.59814453125
    },
    "Entity-graph_functional_dependency": {
      "node_id": "graph_functional_dependency",
      "disambiguation_index": 0,
      "label": "graph functional dependencies",
      "aliases": [
        "graph functional dependencies"
      ],
      "types": [
        "dependency",
        "graph theory concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Graph functional dependencies refer to a formalism used to express constraints and relationships within graph data, similar to traditional functional dependencies in relational databases, and are utilized in the context of SHACL shapes to model and validate the structure of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "graph functional dependencies",
          "local_types": [
            "dependency",
            "graph theory concept"
          ],
          "iri": "Entity-graph_functional_dependency-Mention-1"
        }
      ],
      "relevance": 0.59814453125
    },
    "Entity-weakly-constraining_data_scheme": {
      "node_id": "weakly-constraining_data_scheme",
      "disambiguation_index": 0,
      "label": "weakly-constraining data schemes",
      "aliases": [
        "weakly-constraining data schemes"
      ],
      "types": [
        "data scheme"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Weakly-constraining data schemes refer to the flexible and less restrictive frameworks used in knowledge graphs that allow for the representation of data without strict inference rules, enabling the integration and management of diverse data types and structures.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-2",
          "local_name": "weakly-constraining data schemes",
          "local_types": [
            "data scheme"
          ],
          "iri": "Entity-weakly-constraining_data_scheme-Mention-1"
        }
      ],
      "relevance": 0.59814453125
    },
    "Entity-the_task": {
      "node_id": "the_task",
      "disambiguation_index": 0,
      "label": "the task",
      "aliases": [
        "the task"
      ],
      "types": [
        "task"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "the task refers to the process of learning shapes from massive knowledge graphs using the SHACLEARNER system, which aims to capture diverse and high-quality shape patterns for effective knowledge graph management.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-4",
          "local_name": "the task",
          "local_types": [
            "task"
          ],
          "iri": "Entity-the_task-Mention-1"
        }
      ],
      "relevance": 0.59814453125
    },
    "Entity-open_path_head_coverage": {
      "node_id": "open_path_head_coverage",
      "disambiguation_index": 0,
      "label": "open path head coverage",
      "aliases": [
        "open path head coverage",
        "open path head coverage (OPHC)"
      ],
      "types": [
        "statistical measure",
        "concept",
        "coverage",
        "parameter",
        "evaluation metric",
        "metric",
        "evaluation measure"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Open path head coverage (OPHC) is a statistical measure used to evaluate the quality of open path rules in knowledge graphs, defined as the ratio of the number of entity pairs satisfying the body of the rule to the number of entities satisfying the head of the rule.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-3-Sentence-1",
          "local_name": "open path head coverage",
          "local_types": [
            "metric",
            "evaluation metric"
          ],
          "iri": "Entity-open_path_head_coverage-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-1",
          "local_name": "open path head coverage",
          "local_types": [
            "parameter",
            "concept",
            "statistical measure",
            "metric"
          ],
          "iri": "Entity-open_path_head_coverage-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-3-Sentence-1",
          "local_name": "open path head coverage (OPHC)",
          "local_types": [
            "evaluation measure",
            "coverage",
            "statistical measure",
            "metric"
          ],
          "iri": "Entity-open_path_head_coverage-Mention-3"
        }
      ],
      "relevance": 0.59765625
    },
    "Entity-incomplete": {
      "node_id": "incomplete",
      "disambiguation_index": 0,
      "label": "incomplete",
      "aliases": [
        "incomplete"
      ],
      "types": [
        "quality descriptor",
        "quality"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'incomplete' refers to the characteristic of knowledge graphs (KGs) that, despite their large size and diversity, often lack comprehensive information due to factors such as the evolving nature of human knowledge, cultural bias, and resource constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-2",
          "local_name": "incomplete",
          "local_types": [
            "quality descriptor",
            "quality"
          ],
          "iri": "Entity-incomplete-Mention-1"
        }
      ],
      "relevance": 0.59765625
    },
    "Entity-space_of_possible_shape": {
      "node_id": "space_of_possible_shape",
      "disambiguation_index": 0,
      "label": "space of possible shapes",
      "aliases": [
        "space of possible shapes"
      ],
      "types": [
        "mathematical space",
        "geometric concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'space of possible shapes' refers to the theoretical framework encompassing all potential geometric configurations that can be derived from a given set of constraints and relationships within knowledge graphs, particularly in the context of learning and validating shapes using the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-2",
          "local_name": "space of possible shapes",
          "local_types": [
            "mathematical space",
            "geometric concept"
          ],
          "iri": "Entity-space_of_possible_shape-Mention-1"
        }
      ],
      "relevance": 0.59765625
    },
    "Entity-mined_tree": {
      "node_id": "mined_tree",
      "disambiguation_index": 0,
      "label": "mined trees",
      "aliases": [
        "mined trees"
      ],
      "types": [
        "algorithm output",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Mined trees refer to the structured representations of relationships and constraints derived from Inverse Open Path rules in knowledge graphs, which are used to validate and analyze the graph's data structure.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "mined trees",
          "local_types": [
            "algorithm output",
            "data structure"
          ],
          "iri": "Entity-mined_tree-Mention-1"
        }
      ],
      "relevance": 0.59765625
    },
    "Entity-the_web": {
      "node_id": "the_web",
      "disambiguation_index": 0,
      "label": "the Web",
      "aliases": [
        "the Web"
      ],
      "types": [
        "platform"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The Web refers to the interconnected system of online information and resources, where Knowledge Graphs (KGs) have become increasingly prevalent since the introduction of knowledge panels in search engines.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-1",
          "local_name": "the Web",
          "local_types": [
            "platform"
          ],
          "iri": "Entity-the_web-Mention-1"
        }
      ],
      "relevance": 0.59765625
    },
    "Entity-mine_both_op_and_iop_rule": {
      "node_id": "mine_both_op_and_iop_rule",
      "disambiguation_index": 0,
      "label": "mine both OP and IOP rules",
      "aliases": [
        "mine both OP and IOP rules"
      ],
      "types": [
        "process",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The phrase 'mine both OP and IOP rules' refers to the process of simultaneously extracting and learning both Open Path (OP) rules and their converse Inverse Open Path (IOP) rules from knowledge graphs, leveraging their interrelated properties to enhance the rule learning process.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-5-Sentence-2",
          "local_name": "mine both OP and IOP rules",
          "local_types": [
            "process",
            "rule"
          ],
          "iri": "Entity-mine_both_op_and_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.59716796875
    },
    "Entity-conjunctive_path_of_constraint": {
      "node_id": "conjunctive_path_of_constraint",
      "disambiguation_index": 0,
      "label": "conjunctive paths of constraints",
      "aliases": [
        "conjunctive paths of constraints"
      ],
      "types": [
        "constraint"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Conjunctive paths of constraints refer to structured sequences of conditions applied to properties within knowledge graphs, which are enhanced by minimum cardinality requirements to ensure that certain criteria are met for entities satisfying specific predicates.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-2",
          "local_name": "conjunctive paths of constraints",
          "local_types": [
            "constraint"
          ],
          "iri": "Entity-conjunctive_path_of_constraint-Mention-1"
        }
      ],
      "relevance": 0.59716796875
    },
    "Entity-x_(1)": {
      "node_id": "x_(1)",
      "disambiguation_index": 1,
      "label": "x",
      "aliases": [
        "x"
      ],
      "types": [
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of inverse open path rules (IOP), 'x' represents a variable that can be instantiated by entities in a knowledge graph to satisfy specific predicate relationships defined by the IOP rules.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "x",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-x_(1)-Mention-1"
        }
      ],
      "relevance": 0.59716796875
    },
    "Entity-novel_method": {
      "node_id": "novel_method",
      "disambiguation_index": 0,
      "label": "novel method",
      "aliases": [
        "novel method"
      ],
      "types": [
        "approach",
        "methodology",
        "method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'novel method' refers to a learning approach designed to extract high-quality rules from knowledge graphs using Inverse Open Path (IOP) rules.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-3",
          "local_name": "novel method",
          "local_types": [
            "approach",
            "methodology",
            "method"
          ],
          "iri": "Entity-novel_method-Mention-1"
        }
      ],
      "relevance": 0.5966796875
    },
    "Entity-_1_": {
      "node_id": "_1_",
      "disambiguation_index": 0,
      "label": "(1)",
      "aliases": [
        "(1)"
      ],
      "types": [
        "reference",
        "notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention (1) refers to the general form of a closed path (CP) rule used in knowledge graph rule learning systems, which is expressed as Pt(x, y) <- P1(x, z1) ^ P2(z1, z2) ^ ... ^ Pn(zn-1, y).",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-2",
          "local_name": "(1)",
          "local_types": [
            "reference",
            "notation"
          ],
          "iri": "Entity-_1_-Mention-1"
        }
      ],
      "relevance": 0.5966796875
    },
    "Entity-ev__r___k__mcar__miniopsc__miniophc_": {
      "node_id": "ev__r___k__mcar__miniopsc__miniophc_",
      "disambiguation_index": 0,
      "label": "Ev(R', K, MCar, MinIOPSC, MinIOPHC)",
      "aliases": [
        "Ev(R', K, MCar, MinIOPSC, MinIOPHC)"
      ],
      "types": [
        "function",
        "process"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Ev(R', K, MCar, MinIOPSC, MinIOPHC) is a function that evaluates a set of inverse open path rules R' against a knowledge graph K, applying constraints on maximum cardinality MCar, and minimum values for inverse open path standard confidence (MinIOPSC) and inverse open path head coverage (MinIOPHC) to filter and select high-quality rules.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-11",
          "local_name": "Ev(R', K, MCar, MinIOPSC, MinIOPHC)",
          "local_types": [
            "function",
            "process"
          ],
          "iri": "Entity-ev__r___k__mcar__miniopsc__miniophc_-Mention-1"
        }
      ],
      "relevance": 0.5966796875
    },
    "Entity-three_different_car_value_1__2__and_3": {
      "node_id": "three_different_car_value_1__2__and_3",
      "disambiguation_index": 0,
      "label": "three different Car values 1, 2, and 3",
      "aliases": [
        "three different Car values 1, 2, and 3"
      ],
      "types": [
        "value",
        "Car"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'three different Car values 1, 2, and 3' refers to distinct cardinality thresholds used in the evaluation of IOP rules within the context of knowledge graph shape learning, where each value corresponds to a specific minimum count of entities satisfying the conditions of the rules.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "three different Car values 1, 2, and 3",
          "local_types": [
            "value",
            "Car"
          ],
          "iri": "Entity-three_different_car_value_1__2__and_3-Mention-1"
        }
      ],
      "relevance": 0.5966796875
    },
    "Entity-sequence_of_entity_e1__...__e__n-1___e1___...__e__m-1___e1q__e__q-1__": {
      "node_id": "sequence_of_entity_e1__...__e__n-1___e1___...__e__m-1___e1q__e__q-1__",
      "disambiguation_index": 0,
      "label": "sequences of entities e1, ..., e(n-1), e1', ..., e(m-1), e1^q, e(q-1)'",
      "aliases": [
        "sequences of entities e1, ..., e(n-1), e1', ..., e(m-1), e1^q, e(q-1)'"
      ],
      "types": [
        "entity",
        "sequence"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'sequences of entities e1, ..., e(n-1), e1', ..., e(m-1), e1^q, e(q-1)' refers to the ordered collections of entities that are involved in the relationships defined by the predicates in a knowledge graph, which collectively satisfy the head of a tree structure in the context of SHACL shapes derived from annotated Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "sequences of entities e1, ..., e(n-1), e1', ..., e(m-1), e1^q, e(q-1)'",
          "local_types": [
            "entity",
            "sequence"
          ],
          "iri": "Entity-sequence_of_entity_e1__...__e__n-1___e1___...__e__m-1___e1q__e__q-1__-Mention-1"
        }
      ],
      "relevance": 0.5966796875
    },
    "Entity-shacl_core": {
      "node_id": "shacl_core",
      "disambiguation_index": 0,
      "label": "SHACL Core",
      "aliases": [
        "SHACL Core"
      ],
      "types": [
        "standard",
        "specification",
        "framework"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "SHACL Core is a standard specification that defines a framework for validating RDF graphs against a set of conditions, ensuring that the data conforms to specified shapes and constraints.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "SHACL Core",
          "local_types": [
            "standard",
            "specification"
          ],
          "iri": "Entity-shacl_core-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-6-Sentence-1",
          "local_name": "SHACL Core",
          "local_types": [
            "standard",
            "specification",
            "framework"
          ],
          "iri": "Entity-shacl_core-Mention-2"
        }
      ],
      "relevance": 0.59619140625
    },
    "Entity-pt___x__z0_": {
      "node_id": "pt___x__z0_",
      "disambiguation_index": 0,
      "label": "Pt'(x, z0)",
      "aliases": [
        "Pt'(x, z0)",
        "Pt(x, z0)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pt'(x, z0) represents the body of an inverse open path (IOP) rule in the context of knowledge graphs, indicating a predicate that relates an entity x to another entity z0, which is used to derive a sequence of predicates in the rule's head.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "Pt'(x, z0)",
          "local_types": [
            "mathematical expression",
            "function"
          ],
          "iri": "Entity-pt___x__z0_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "Pt'(x, z0)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-pt___x__z0_-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "Pt(x, z0)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-pt___x__z0_-Mention-3"
        }
      ],
      "relevance": 0.59619140625
    },
    "Entity-scoring_function_heuristic_for_op_rule": {
      "node_id": "scoring_function_heuristic_for_op_rule",
      "disambiguation_index": 0,
      "label": "scoring function heuristic for OP rules",
      "aliases": [
        "scoring function heuristic for OP rules"
      ],
      "types": [
        "function",
        "heuristic",
        "OP rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The scoring function heuristic for OP rules is a method used to evaluate and prune candidate Open Path (OP) rules based on their quality, which helps in the effective learning of Inverse Open Path (IOP) rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-2",
          "local_name": "scoring function heuristic for OP rules",
          "local_types": [
            "function",
            "heuristic",
            "OP rule"
          ],
          "iri": "Entity-scoring_function_heuristic_for_op_rule-Mention-1"
        }
      ],
      "relevance": 0.59619140625
    },
    "Entity-_0.1__0.3_": {
      "node_id": "_0.1__0.3_",
      "disambiguation_index": 0,
      "label": "[0.1, 0.3)",
      "aliases": [
        "[0.1, 0.3)"
      ],
      "types": [
        "range",
        "interval notation",
        "numerical range"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '[0.1, 0.3)' refers to a numerical range representing the interval of IOPSC (Inverse Open Path Score Constraint) values for learnt rules in the context of the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-1",
          "local_name": "[0.1, 0.3)",
          "local_types": [
            "numerical range",
            "interval notation"
          ],
          "iri": "Entity-_0.1__0.3_-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-4",
          "local_name": "[0.1, 0.3)",
          "local_types": [
            "range"
          ],
          "iri": "Entity-_0.1__0.3_-Mention-2"
        }
      ],
      "relevance": 0.59619140625
    },
    "Entity-scant_previous_research": {
      "node_id": "scant_previous_research",
      "disambiguation_index": 0,
      "label": "scant previous research",
      "aliases": [
        "scant previous research"
      ],
      "types": [
        "research"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term 'scant previous research' refers to the limited amount of prior studies or literature available on the topic of inferring shapes and constraints from knowledge graphs using the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-7",
          "local_name": "scant previous research",
          "local_types": [
            "research"
          ],
          "iri": "Entity-scant_previous_research-Mention-1"
        }
      ],
      "relevance": 0.59619140625
    },
    "Entity-22": {
      "node_id": "22",
      "disambiguation_index": 0,
      "label": "2/2",
      "aliases": [
        "2/2"
      ],
      "types": [
        "value"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '2/2' refers to a ratio representing the head cardinality (IOPHC) and shape cardinality (IOPSC) of an Inverse Open Path rule in the context of evaluating the quality measures for SHACLearner, indicating that both the number of entities satisfying the head and the number of entities satisfying the shape are equal.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-3",
          "local_name": "2/2",
          "local_types": [
            "value"
          ],
          "iri": "Entity-22-Mention-1"
        }
      ],
      "relevance": 0.59619140625
    },
    "Entity-a_larger_required_cardinality": {
      "node_id": "a_larger_required_cardinality",
      "disambiguation_index": 0,
      "label": "a larger required cardinality",
      "aliases": [
        "larger required cardinality",
        "a larger required cardinality"
      ],
      "types": [
        "cardinality"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The phrase 'a larger required cardinality' refers to an increased minimum number of distinct instances that must satisfy the head of an inverse open path (IOP) rule in a knowledge graph, thereby imposing a stricter constraint on the rule's applicability.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "a larger required cardinality",
          "local_types": [
            "cardinality"
          ],
          "iri": "Entity-a_larger_required_cardinality-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "larger required cardinality",
          "local_types": [
            "cardinality"
          ],
          "iri": "Entity-a_larger_required_cardinality-Mention-2"
        }
      ],
      "relevance": 0.595703125
    },
    "Entity-p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_": {
      "node_id": "p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_",
      "disambiguation_index": 0,
      "label": "P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)",
      "aliases": [
        "P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)"
      ],
      "types": [
        "expression"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)' refers to the body of an inverse open path (IOP) rule in predicate logic, which expresses a sequence of predicates that must hold true for a given set of entities in a knowledge graph, thereby defining a specific shape or pattern of relationships among those entities.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)",
          "local_types": [
            "expression"
          ],
          "iri": "Entity-p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_-Mention-1"
        }
      ],
      "relevance": 0.595703125
    },
    "Entity-argument": {
      "node_id": "argument",
      "disambiguation_index": 0,
      "label": "argument",
      "aliases": [
        "argument"
      ],
      "types": [
        "linguistic element",
        "syntax component",
        "parameter",
        "input"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'argument' refers to the specific entity or entities for which a tree structure is constructed by aggregating mined Inverse Open Path (IOP) rules, serving as inputs to the target predicates in the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-7",
          "local_name": "argument",
          "local_types": [
            "linguistic element",
            "syntax component"
          ],
          "iri": "Entity-argument-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-2",
          "local_name": "argument",
          "local_types": [
            "parameter",
            "input"
          ],
          "iri": "Entity-argument-Mention-2"
        }
      ],
      "relevance": 0.59521484375
    },
    "Entity-50_target_predicate": {
      "node_id": "50_target_predicate",
      "disambiguation_index": 0,
      "label": "50 target predicates",
      "aliases": [
        "50 target predicates"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '50 target predicates' refers to a randomly selected set of 50 unary predicates from the knowledge graphs Wikidata and DBpedia, used as specific targets for evaluating the performance of the SHACLEARNER method in learning shape constraints from these knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-3",
          "local_name": "50 target predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-50_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.59521484375
    },
    "Entity-the_target_predicate": {
      "node_id": "the_target_predicate",
      "disambiguation_index": 0,
      "label": "the target predicates",
      "aliases": [
        "the target predicates"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The target predicates refer to the specific unary predicates used in the SHACLEARNER system for learning IOP rules from knowledge graphs, with a total of 28 such predicates being utilized in the experiments.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-2",
          "local_name": "the target predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-the_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.59521484375
    },
    "Entity-large_scale_shape_mining": {
      "node_id": "large_scale_shape_mining",
      "disambiguation_index": 0,
      "label": "large scale shape mining",
      "aliases": [
        "large scale shape mining"
      ],
      "types": [
        "knowledge discovery",
        "large scale",
        "process",
        "mining",
        "shape mining",
        "computational process",
        "data mining"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Large scale shape mining refers to the process of discovering and learning shape patterns from massive knowledge graphs, focusing on the quality and scalability of the shapes derived for effective validation and maintenance of graph data.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-2",
          "local_name": "large scale shape mining",
          "local_types": [
            "knowledge discovery",
            "large scale",
            "process",
            "mining",
            "shape mining",
            "computational process",
            "data mining"
          ],
          "iri": "Entity-large_scale_shape_mining-Mention-1"
        }
      ],
      "relevance": 0.5947265625
    },
    "Entity-task": {
      "node_id": "task",
      "disambiguation_index": 0,
      "label": "task",
      "aliases": [
        "task"
      ],
      "types": [
        "goal",
        "operation",
        "activity",
        "objective"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'task' refers to the operation of effectively learning and capturing shapes from massive knowledge graphs using the SHACLEARNER system.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-4",
          "local_name": "task",
          "local_types": [
            "goal",
            "operation",
            "activity",
            "objective"
          ],
          "iri": "Entity-task-Mention-1"
        }
      ],
      "relevance": 0.5947265625
    },
    "Entity-many_relevant_rule": {
      "node_id": "many_relevant_rule",
      "disambiguation_index": 0,
      "label": "many relevant rules",
      "aliases": [
        "many relevant rules"
      ],
      "types": [
        "rules"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'many relevant rules' refers to a collection of high-quality IOP rules that demonstrate significant head coverage in the context of knowledge graph learning, indicating their relevance and applicability to various target predicates.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-3",
          "local_name": "many relevant rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-many_relevant_rule-Mention-1"
        }
      ],
      "relevance": 0.5947265625
    },
    "Entity-relevance": {
      "node_id": "relevance",
      "disambiguation_index": 0,
      "label": "relevance",
      "aliases": [
        "relevance"
      ],
      "types": [
        "conceptual measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph rule learning, 'relevance' refers to the degree to which the instances of a rule's consequent are supported by the instances of the target predicates in the knowledge graph, as measured by the Inverse Open Path Head Coverage (IOPHC).",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "relevance",
          "local_types": [
            "conceptual measure"
          ],
          "iri": "Entity-relevance-Mention-1"
        }
      ],
      "relevance": 0.5947265625
    },
    "Entity-two_different_kind_of_knowledge": {
      "node_id": "two_different_kind_of_knowledge",
      "disambiguation_index": 0,
      "label": "two different kinds of knowledge",
      "aliases": [
        "two different kinds of knowledge"
      ],
      "types": [
        "knowledge"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'two different kinds of knowledge' refers to the use of ontology constraint patterns and input ontologies in the automatic generation of SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-2",
          "local_name": "two different kinds of knowledge",
          "local_types": [
            "knowledge"
          ],
          "iri": "Entity-two_different_kind_of_knowledge-Mention-1"
        }
      ],
      "relevance": 0.5947265625
    },
    "Entity-the_percentage_difference_in_the_number_of_rule_found": {
      "node_id": "the_percentage_difference_in_the_number_of_rule_found",
      "disambiguation_index": 0,
      "label": "the percentage difference in the number of rules found",
      "aliases": [
        "the percentage difference in the number of rules found"
      ],
      "types": [
        "metric",
        "percentage difference"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The percentage difference in the number of rules found refers to a metric that quantifies the relative change in the number of Inverse Open Path (IOP) rules learned by different variants of the SHACLEARNER algorithm compared to an ideal rule learner, expressed as a percentage.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-4",
          "local_name": "the percentage difference in the number of rules found",
          "local_types": [
            "metric",
            "percentage difference"
          ],
          "iri": "Entity-the_percentage_difference_in_the_number_of_rule_found-Mention-1"
        }
      ],
      "relevance": 0.5947265625
    },
    "Entity-complex_shape": {
      "node_id": "complex_shape",
      "disambiguation_index": 0,
      "label": "complex shapes",
      "aliases": [
        "complex shape",
        "complex shapes"
      ],
      "types": [
        "mathematical object",
        "shape",
        "geometry",
        "concept",
        "data structure",
        "shapes",
        "geometric figure",
        "mathematical concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Complex shapes refer to advanced geometric structures that can be constructed using simple shape patterns as foundational elements, particularly in the context of knowledge graphs and the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-2",
          "local_name": "complex shapes",
          "local_types": [
            "geometry",
            "shape"
          ],
          "iri": "Entity-complex_shape-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-3",
          "local_name": "complex shape",
          "local_types": [
            "geometric figure",
            "mathematical object"
          ],
          "iri": "Entity-complex_shape-Mention-2"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-2",
          "local_name": "complex shapes",
          "local_types": [
            "geometric figure",
            "mathematical concept",
            "shapes",
            "shape"
          ],
          "iri": "Entity-complex_shape-Mention-3"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-2",
          "local_name": "complex shapes",
          "local_types": [
            "concept",
            "data structure"
          ],
          "iri": "Entity-complex_shape-Mention-4"
        }
      ],
      "relevance": 0.59423828125
    },
    "Entity-kg_fact": {
      "node_id": "kg_fact",
      "disambiguation_index": 0,
      "label": "KG fact",
      "aliases": [
        "KG fact"
      ],
      "types": [
        "knowledge graph",
        "data point",
        "knowledge graph element",
        "fact",
        "data instance"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A KG fact refers to a specific data point represented as an RDF triple within a knowledge graph, indicating a relationship between entities.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "KG fact",
          "local_types": [
            "knowledge graph",
            "data point",
            "knowledge graph element",
            "fact",
            "data instance"
          ],
          "iri": "Entity-kg_fact-Mention-1"
        }
      ],
      "relevance": 0.59423828125
    },
    "Entity-p_": {
      "node_id": "p_",
      "disambiguation_index": 0,
      "label": "P*",
      "aliases": [
        "P*"
      ],
      "types": [
        "function",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P* refers to a composite predicate in the context of Inverse Open Path rules, defined as the concatenation of individual predicates Pt, P1, and P2, which collectively connect entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "P*",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-p_-Mention-1"
        }
      ],
      "relevance": 0.59423828125
    },
    "Entity-sparql-like_constraint": {
      "node_id": "sparql-like_constraint",
      "disambiguation_index": 0,
      "label": "SPARQL-like constraints",
      "aliases": [
        "SPARQL-like constraints"
      ],
      "types": [
        "constraint",
        "concept",
        "query language"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "SPARQL-like constraints refer to a type of constraints that are expressed in a manner similar to the SPARQL query language, specifically designed for querying and manipulating knowledge graphs, but are not utilized or mined by the SHACLearner framework.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-3",
          "local_name": "SPARQL-like constraints",
          "local_types": [
            "constraint",
            "concept",
            "query language"
          ],
          "iri": "Entity-sparql-like_constraint-Mention-1"
        }
      ],
      "relevance": 0.59423828125
    },
    "Entity-existing_ontology_for_kg": {
      "node_id": "existing_ontology_for_kg",
      "disambiguation_index": 0,
      "label": "existing ontologies for KGs",
      "aliases": [
        "existing ontologies for KGs"
      ],
      "types": [
        "ontology",
        "KG"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Existing ontologies for KGs refer to established frameworks and structured representations that define the relationships and categories of knowledge within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-1",
          "local_name": "existing ontologies for KGs",
          "local_types": [
            "ontology",
            "KG"
          ],
          "iri": "Entity-existing_ontology_for_kg-Mention-1"
        }
      ],
      "relevance": 0.59423828125
    },
    "Entity-knowledge_graph_completion": {
      "node_id": "knowledge_graph_completion",
      "disambiguation_index": 0,
      "label": "knowledge graph completion",
      "aliases": [
        "manual knowledge graph completion",
        "knowledge graph completion"
      ],
      "types": [
        "knowledge graph",
        "methodology",
        "task",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Knowledge graph completion is a process or methodology aimed at enhancing a knowledge graph by inferring and adding missing information or relationships based on existing data.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-3",
          "local_name": "knowledge graph completion",
          "local_types": [
            "methodology",
            "task",
            "process"
          ],
          "iri": "Entity-knowledge_graph_completion-Mention-1"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-3",
          "local_name": "manual knowledge graph completion",
          "local_types": [
            "process",
            "knowledge graph"
          ],
          "iri": "Entity-knowledge_graph_completion-Mention-2"
        }
      ],
      "relevance": 0.59423828125
    },
    "Entity-one_process": {
      "node_id": "one_process",
      "disambiguation_index": 0,
      "label": "one process",
      "aliases": [
        "one process"
      ],
      "types": [
        "process"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'one process' refers to the simultaneous mining of both Open Path (OP) and Inverse Open Path (IOP) rules from knowledge graphs, leveraging their close relationship to enhance the rule learning process.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-5-Sentence-2",
          "local_name": "one process",
          "local_types": [
            "process"
          ],
          "iri": "Entity-one_process-Mention-1"
        }
      ],
      "relevance": 0.59423828125
    },
    "Entity-head_r__e__e__": {
      "node_id": "head_r__e__e__",
      "disambiguation_index": 0,
      "label": "head_r(e, e')",
      "aliases": [
        "head_r(e, e')",
        "head_r"
      ],
      "types": [
        "function",
        "predicate",
        "relation",
        "mapping"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention 'head_r(e, e')' refers to a condition in which a pair of entities (e, e') satisfies the head of an inverse open path (IOP) rule, indicating that there exists a sequence of entities connected by predicates in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "head_r(e, e')",
          "local_types": [
            "function"
          ],
          "iri": "Entity-head_r__e__e__-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-6",
          "local_name": "head_r(e, e')",
          "local_types": [
            "function",
            "predicate",
            "relation"
          ],
          "iri": "Entity-head_r__e__e__-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "head_r(e, e')",
          "local_types": [
            "function",
            "relation"
          ],
          "iri": "Entity-head_r__e__e__-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-8",
          "local_name": "head_r",
          "local_types": [
            "relation",
            "function"
          ],
          "iri": "Entity-head_r__e__e__-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "head_r",
          "local_types": [
            "function",
            "mapping"
          ],
          "iri": "Entity-head_r__e__e__-Mention-5"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-3",
          "local_name": "head_r",
          "local_types": [
            "function",
            "relation"
          ],
          "iri": "Entity-head_r__e__e__-Mention-6"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "head_r",
          "local_types": [
            "function",
            "relation"
          ],
          "iri": "Entity-head_r__e__e__-Mention-7"
        }
      ],
      "relevance": 0.59375
    },
    "Entity-the_denominator_of_iopsc__r_": {
      "node_id": "the_denominator_of_iopsc__r_",
      "disambiguation_index": 0,
      "label": "the denominator of IOPSC(r)",
      "aliases": [
        "the denominator of IOPSC(r)"
      ],
      "types": [
        "mathematical term",
        "denominator"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The denominator of IOPSC(r) refers to the total number of distinct entities that can instantiate the body of the inverse open path rule r in a knowledge graph, which serves as a normalization factor for calculating the inverse open path standard confidence of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-4",
          "local_name": "the denominator of IOPSC(r)",
          "local_types": [
            "mathematical term",
            "denominator"
          ],
          "iri": "Entity-the_denominator_of_iopsc__r_-Mention-1"
        }
      ],
      "relevance": 0.59375
    },
    "Entity-oprl_evaluation_module": {
      "node_id": "oprl_evaluation_module",
      "disambiguation_index": 0,
      "label": "OPRL evaluation module",
      "aliases": [
        "OPRL evaluation module"
      ],
      "types": [
        "module"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The OPRL evaluation module refers to the component of the Open Path Rule Learner (OPRL) that is responsible for assessing and filtering potential rules generated during the learning process, which is adapted in the SHACLEARNER framework to accommodate new features such as unary predicates and minimum cardinality constraints.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-2-Sentence-4",
          "local_name": "OPRL evaluation module",
          "local_types": [
            "module"
          ],
          "iri": "Entity-oprl_evaluation_module-Mention-1"
        }
      ],
      "relevance": 0.59375
    },
    "Entity-mintreesc": {
      "node_id": "mintreesc",
      "disambiguation_index": 0,
      "label": "MinTreeSC",
      "aliases": [
        "MinTreeSC"
      ],
      "types": [
        "function",
        "threshold",
        "algorithm",
        "parameter",
        "configuration"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "MinTreeSC is a parameter used in the SHACLearner algorithm that specifies the minimum threshold for the tree structure quality during the learning process of inverse open path rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-3",
          "local_name": "MinTreeSC",
          "local_types": [
            "parameter",
            "configuration",
            "threshold"
          ],
          "iri": "Entity-mintreesc-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-12",
          "local_name": "MinTreeSC",
          "local_types": [
            "function",
            "algorithm"
          ],
          "iri": "Entity-mintreesc-Mention-2"
        }
      ],
      "relevance": 0.59326171875
    },
    "Entity-automatic_and_semi-automatic_method": {
      "node_id": "automatic_and_semi-automatic_method",
      "disambiguation_index": 0,
      "label": "automatic and semi-automatic methods",
      "aliases": [
        "automatic and semi-automatic methods"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Automatic and semi-automatic methods refer to the techniques used to populate large knowledge graphs (KGs) by extracting and integrating data from non-structured sources, such as Wikipedia, which may introduce various errors due to the nature of the data.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-3",
          "local_name": "automatic and semi-automatic methods",
          "local_types": [
            "method"
          ],
          "iri": "Entity-automatic_and_semi-automatic_method-Mention-1"
        }
      ],
      "relevance": 0.59326171875
    },
    "Entity-the_fact_in_the_kg": {
      "node_id": "the_fact_in_the_kg",
      "disambiguation_index": 0,
      "label": "the facts in the KG",
      "aliases": [
        "the facts in the KG"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The facts in the KG refer to the individual RDF triples that represent relationships between entities within a knowledge graph, which are used to infer new relationships through logical rules.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "the facts in the KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-the_fact_in_the_kg-Mention-1"
        }
      ],
      "relevance": 0.59326171875
    },
    "Entity-lower-cardinality_version_of_that_rule": {
      "node_id": "lower-cardinality_version_of_that_rule",
      "disambiguation_index": 0,
      "label": "lower-cardinality versions of that rule",
      "aliases": [
        "lower-cardinality versions of that rule"
      ],
      "types": [
        "cardinality",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Lower-cardinality versions of a rule refer to IOP rules that require fewer instances of the head predicate to be satisfied in a knowledge graph, allowing for the possibility of maintaining or increasing the IOP support confidence (IOPSC) values compared to the original rule with a higher cardinality requirement.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "lower-cardinality versions of that rule",
          "local_types": [
            "cardinality",
            "rule"
          ],
          "iri": "Entity-lower-cardinality_version_of_that_rule-Mention-1"
        }
      ],
      "relevance": 0.59326171875
    },
    "Entity-these_two_rule": {
      "node_id": "these_two_rule",
      "disambiguation_index": 0,
      "label": "these two rules",
      "aliases": [
        "these two rules"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "These two rules refer to specific Inverse Open Path (IOP) rules that impose cardinality constraints on songs in a knowledge graph, where one rule requires at least one producer and the other requires at least two producers.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "these two rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-these_two_rule-Mention-1"
        }
      ],
      "relevance": 0.59326171875
    },
    "Entity-two_trick": {
      "node_id": "two_trick",
      "disambiguation_index": 0,
      "label": "two tricks",
      "aliases": [
        "two tricks"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'two tricks' refers to the methods of prior Sampling and heuristic pruning employed by SHACLEARNER to effectively reduce the search space for Inverse Open Path (IOP) rules in the PathFinding process of the algorithm.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-1-Sentence-1",
          "local_name": "two tricks",
          "local_types": [
            "method"
          ],
          "iri": "Entity-two_trick-Mention-1"
        }
      ],
      "relevance": 0.59326171875
    },
    "Entity-the_head": {
      "node_id": "the_head",
      "disambiguation_index": 0,
      "label": "the head",
      "aliases": [
        "the head"
      ],
      "types": [
        "head",
        "concept",
        "component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of inverse open path rules (IOP), 'the head' refers to the sequence of predicates that represent the conclusion or outcome of the rule, which must be satisfied by a pair of entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-8-Sentence-4",
          "local_name": "the head",
          "local_types": [
            "component"
          ],
          "iri": "Entity-the_head-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-5",
          "local_name": "the head",
          "local_types": [
            "concept",
            "head"
          ],
          "iri": "Entity-the_head-Mention-2"
        }
      ],
      "relevance": 0.5927734375
    },
    "Entity-z": {
      "node_id": "z",
      "disambiguation_index": 0,
      "label": "z",
      "aliases": [
        "z"
      ],
      "types": [
        "variable",
        "mathematical symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'z' refers to a variable used in the composite predicate representation of an Inverse Open Path (IOP) rule, which connects entities through a series of predicates in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "z",
          "local_types": [
            "variable",
            "mathematical symbol"
          ],
          "iri": "Entity-z-Mention-1"
        }
      ],
      "relevance": 0.5927734375
    },
    "Entity-interactive_framework": {
      "node_id": "interactive_framework",
      "disambiguation_index": 0,
      "label": "interactive framework",
      "aliases": [
        "interactive framework"
      ],
      "types": [
        "software",
        "tool"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The interactive framework refers to a software tool that allows users to define SHACL shapes of varying complexities, including nested patterns, facilitating the creation and manipulation of graph data constraints.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-1",
          "local_name": "interactive framework",
          "local_types": [
            "software",
            "tool"
          ],
          "iri": "Entity-interactive_framework-Mention-1"
        }
      ],
      "relevance": 0.5927734375
    },
    "Entity-the_scoring_function_of_shaclearner": {
      "node_id": "the_scoring_function_of_shaclearner",
      "disambiguation_index": 0,
      "label": "the scoring function of SHACLEARNER",
      "aliases": [
        "the scoring function of SHACLEARNER"
      ],
      "types": [
        "scoring function",
        "algorithm"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The scoring function of SHACLEARNER refers to the mechanism that evaluates the quality of learned rules based on embeddings derived from knowledge graphs, influencing the effectiveness of the SHACLEARNER algorithm in identifying high-quality shape constraints.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-6-Sentence-2",
          "local_name": "the scoring function of SHACLEARNER",
          "local_types": [
            "scoring function",
            "algorithm"
          ],
          "iri": "Entity-the_scoring_function_of_shaclearner-Mention-1"
        }
      ],
      "relevance": 0.5927734375
    },
    "Entity-transforming_kg_with_type_predicate_for_experiment": {
      "node_id": "transforming_kg_with_type_predicate_for_experiment",
      "disambiguation_index": 0,
      "label": "Transforming KGs with type predicates for experiments",
      "aliases": [
        "Transforming KGs with type predicates for experiments"
      ],
      "types": [
        "process",
        "experiment"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Transforming KGs with type predicates for experiments refers to the process of reformatting knowledge graphs by creating unary predicates from existing type-related facts to establish a common representation that distinguishes entities and predicates, facilitating the learning of abstracted shapes in the context of knowledge graph experiments.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-1",
          "local_name": "Transforming KGs with type predicates for experiments",
          "local_types": [
            "process",
            "experiment"
          ],
          "iri": "Entity-transforming_kg_with_type_predicate_for_experiment-Mention-1"
        }
      ],
      "relevance": 0.59228515625
    },
    "Entity-type_or_class": {
      "node_id": "type_or_class",
      "disambiguation_index": 0,
      "label": "types or classes",
      "aliases": [
        "types or classes",
        "types and classes"
      ],
      "types": [
        "concept",
        "class",
        "type"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'types or classes' refers to the categories or classifications of entities in knowledge graphs, which are represented as unary predicates in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-2",
          "local_name": "types or classes",
          "local_types": [
            "class",
            "type"
          ],
          "iri": "Entity-type_or_class-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-3",
          "local_name": "types and classes",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-type_or_class-Mention-2"
        }
      ],
      "relevance": 0.59228515625
    },
    "Entity-head_atom": {
      "node_id": "head_atom",
      "disambiguation_index": 0,
      "label": "head atoms",
      "aliases": [
        "head atoms"
      ],
      "types": [
        "rule component",
        "logical component",
        "theoretical concept",
        "atom"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Head atoms refer to the predicates in the head of an inverse open path (IOP) rule, which are used to predict instances based on the relationships defined in the body of the rule within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-11-Sentence-1",
          "local_name": "head atoms",
          "local_types": [
            "rule component",
            "logical component",
            "theoretical concept",
            "atom"
          ],
          "iri": "Entity-head_atom-Mention-1"
        }
      ],
      "relevance": 0.591796875
    },
    "Entity-max_rule_cardinality": {
      "node_id": "max_rule_cardinality",
      "disambiguation_index": 0,
      "label": "max rule cardinality",
      "aliases": [
        "max rule cardinality"
      ],
      "types": [
        "parameter",
        "rule specification"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'max rule cardinality' refers to a parameter that specifies the maximum allowable number of distinct instantiations of the head of an inverse open path (IOP) rule in a knowledge graph, serving as a lower bound for the number of head paths that must be satisfied for each entity linked to the body of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-3",
          "local_name": "max rule cardinality",
          "local_types": [
            "parameter",
            "rule specification"
          ],
          "iri": "Entity-max_rule_cardinality-Mention-1"
        }
      ],
      "relevance": 0.591796875
    },
    "Entity-advanced_feature": {
      "node_id": "advanced_feature",
      "disambiguation_index": 0,
      "label": "advanced features",
      "aliases": [
        "advanced features"
      ],
      "types": [
        "feature"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'advanced features' refers to the enhanced capabilities of the Shapes Constraint Language (SHACL) that enable the modeling of complex shapes, rules, and constraints for knowledge graphs, allowing for the expression of diverse structural patterns and data validation mechanisms.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "advanced features",
          "local_types": [
            "feature"
          ],
          "iri": "Entity-advanced_feature-Mention-1"
        }
      ],
      "relevance": 0.591796875
    },
    "Entity-a_kg_(1)": {
      "node_id": "a_kg_(1)",
      "disambiguation_index": 1,
      "label": "A KG",
      "aliases": [
        "A KG",
        "the KG"
      ],
      "types": [
        "knowledge graph",
        "KG"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A KG refers to a knowledge graph, which is a schema-free database designed to store and manage interconnected data without requiring predefined schema information.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-1",
          "local_name": "A KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-a_kg_(1)-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-2",
          "local_name": "the KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-a_kg_(1)-Mention-2"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-4",
          "local_name": "the KG",
          "local_types": [
            "knowledge graph",
            "KG"
          ],
          "iri": "Entity-a_kg_(1)-Mention-3"
        },
        {
          "reference": "Section-13-Paragraph-4-Sentence-3",
          "local_name": "the KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-a_kg_(1)-Mention-4"
        }
      ],
      "relevance": 0.591796875
    },
    "Entity-op_rule_p1__x__z0___-_p2__z0__z1___p3__z1__z2_": {
      "node_id": "op_rule_p1__x__z0___-_p2__z0__z1___p3__z1__z2_",
      "disambiguation_index": 0,
      "label": "OP rule P1(x, z0) <- P2(z0, z1) ^ P3(z1, z2)",
      "aliases": [
        "OP rule P1(x, z0) <- P2(z0, z1) ^ P3(z1, z2)",
        "OP rule P1(x, z0)"
      ],
      "types": [
        "OP rule",
        "operation",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'OP rule P1(x, z0) <- P2(z0, z1) ^ P3(z1, z2)' refers to a specific open path rule in the context of knowledge graphs, which defines a logical relationship where the predicate P1 holds for an entity x if there exists a sequence of predicates P2 and P3 connecting z0 to z1 and z1 to z2, respectively.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "OP rule P1(x, z0) <- P2(z0, z1) ^ P3(z1, z2)",
          "local_types": [
            "rule",
            "OP rule"
          ],
          "iri": "Entity-op_rule_p1__x__z0___-_p2__z0__z1___p3__z1__z2_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "OP rule P1(x, z0)",
          "local_types": [
            "rule",
            "operation"
          ],
          "iri": "Entity-op_rule_p1__x__z0___-_p2__z0__z1___p3__z1__z2_-Mention-2"
        }
      ],
      "relevance": 0.59130859375
    },
    "Entity-fragment_of_shacl": {
      "node_id": "fragment_of_shacl",
      "disambiguation_index": 0,
      "label": "fragment of SHACL",
      "aliases": [
        "fragment of SHACL"
      ],
      "types": [
        "SHACL",
        "language component",
        "subset",
        "fragment"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A fragment of SHACL refers to a subset of the Shapes Constraint Language that can express specific shapes derived from logical formalisms, enabling the validation and structuring of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-3",
          "local_name": "fragment of SHACL",
          "local_types": [
            "SHACL",
            "language component",
            "subset",
            "fragment"
          ],
          "iri": "Entity-fragment_of_shacl-Mention-1"
        }
      ],
      "relevance": 0.59130859375
    },
    "Entity-result": {
      "node_id": "result",
      "disambiguation_index": 0,
      "label": "results",
      "aliases": [
        "results"
      ],
      "types": [
        "outcome",
        "findings"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'results' refers to the findings related to the characteristics and performance of trees constructed from Inverse Open Path (IOP) rules in the experiments conducted on various knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-1-Sentence-1",
          "local_name": "results",
          "local_types": [
            "outcome",
            "findings"
          ],
          "iri": "Entity-result-Mention-1"
        }
      ],
      "relevance": 0.59130859375
    },
    "Entity-human__x__x__-__father__x__z2___human__z2__z2_": {
      "node_id": "human__x__x__-__father__x__z2___human__z2__z2_",
      "disambiguation_index": 0,
      "label": "human(x, x) -> father(x, z2) ^ human(z2, z2)",
      "aliases": [
        "human(x, x) -> father(x, z2) ^ human(z2, z2)"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'human(x, x) -> father(x, z2) ^ human(z2, z2)' represents an inverse open path (IOP) rule that asserts if an entity x is a human, then there exists another entity z2 such that x is the father of z2, and z2 is also a human, thereby establishing a relationship between humans and their offspring within the context of knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "human(x, x) -> father(x, z2) ^ human(z2, z2)",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-human__x__x__-__father__x__z2___human__z2__z2_-Mention-1"
        }
      ],
      "relevance": 0.59130859375
    },
    "Entity-this_problem": {
      "node_id": "this_problem",
      "disambiguation_index": 0,
      "label": "this problem",
      "aliases": [
        "this problem"
      ],
      "types": [
        "problem"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This problem refers to the challenge of learning shape constraints from schema-free knowledge bases, particularly in the context of knowledge graphs, where the goal is to develop an efficient learning algorithm that can effectively discover and validate these constraints.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-4",
          "local_name": "this problem",
          "local_types": [
            "problem"
          ],
          "iri": "Entity-this_problem-Mention-1"
        }
      ],
      "relevance": 0.59130859375
    },
    "Entity-fragment_of_the_kg_k_": {
      "node_id": "fragment_of_the_kg_k_",
      "disambiguation_index": 0,
      "label": "fragment of the KG K'",
      "aliases": [
        "fragment of the KG K'"
      ],
      "types": [
        "knowledge graph",
        "data structure",
        "fragment"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'fragment of the KG K'' refers to a subgraph of a knowledge graph that includes a limited set of entities connected to a specific target predicate, used for efficient sampling in the context of learning shape constraints.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "fragment of the KG K'",
          "local_types": [
            "knowledge graph",
            "data structure",
            "fragment"
          ],
          "iri": "Entity-fragment_of_the_kg_k_-Mention-1"
        }
      ],
      "relevance": 0.5908203125
    },
    "Entity-157": {
      "node_id": "157",
      "disambiguation_index": 0,
      "label": "157",
      "aliases": [
        "157"
      ],
      "types": [
        "number",
        "quantity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '157' refers to a specific unary predicate selected from the Wikidata knowledge graph for the evaluation of rule-learning methods in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-3",
          "local_name": "157",
          "local_types": [
            "number",
            "quantity"
          ],
          "iri": "Entity-157-Mention-1"
        }
      ],
      "relevance": 0.5908203125
    },
    "Entity-target_predicate_instance_in_the_kg": {
      "node_id": "target_predicate_instance_in_the_kg",
      "disambiguation_index": 0,
      "label": "target predicate instances in the KG",
      "aliases": [
        "target predicate instances in the KG"
      ],
      "types": [
        "instance",
        "predicate",
        "KG"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Target predicate instances in the KG refer to the specific instances in a knowledge graph that are associated with particular predicates, which are used to evaluate the quality and relevance of rules derived from the graph data.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "target predicate instances in the KG",
          "local_types": [
            "instance",
            "predicate",
            "KG"
          ],
          "iri": "Entity-target_predicate_instance_in_the_kg-Mention-1"
        }
      ],
      "relevance": 0.5908203125
    },
    "Entity-proposal": {
      "node_id": "proposal",
      "disambiguation_index": 0,
      "label": "proposal",
      "aliases": [
        "proposal"
      ],
      "types": [
        "research proposal",
        "suggestion"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'proposal' refers to a suggestion for an extended validation framework that facilitates the interaction between inference rules and SHACL shapes within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "proposal",
          "local_types": [
            "research proposal",
            "suggestion"
          ],
          "iri": "Entity-proposal-Mention-1"
        }
      ],
      "relevance": 0.59033203125
    },
    "Entity-sampling__": {
      "node_id": "sampling__",
      "disambiguation_index": 0,
      "label": "Sampling()",
      "aliases": [
        "Sampling()",
        "Sampling() method",
        "The sampling method"
      ],
      "types": [
        "method",
        "algorithm"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "Sampling() is a method that computes a fragment of a knowledge graph by selecting a bounded number of entities related to a specified target predicate, facilitating the learning of inverse open path rules from large-scale knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "Sampling()",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-sampling__-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "Sampling() method",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-sampling__-Mention-2"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-3",
          "local_name": "The sampling method",
          "local_types": [
            "method"
          ],
          "iri": "Entity-sampling__-Mention-3"
        }
      ],
      "relevance": 0.58984375
    },
    "Entity-full_functionality": {
      "node_id": "full_functionality",
      "disambiguation_index": 0,
      "label": "full functionality",
      "aliases": [
        "full functionality",
        "its full functionality"
      ],
      "types": [
        "functionality"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'full functionality' refers to the complete operational capabilities of the SHACLEARNER system, which includes both sampling and heuristic pruning methods for effectively learning IOP rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-6",
          "local_name": "full functionality",
          "local_types": [
            "functionality"
          ],
          "iri": "Entity-full_functionality-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-6",
          "local_name": "its full functionality",
          "local_types": [
            "functionality"
          ],
          "iri": "Entity-full_functionality-Mention-2"
        }
      ],
      "relevance": 0.58984375
    },
    "Entity-add_pathfinding__k___pt__p__a__k__to_r_": {
      "node_id": "add_pathfinding__k___pt__p__a__k__to_r_",
      "disambiguation_index": 0,
      "label": "Add PathFinding(K', Pt, P, A, k) to R'",
      "aliases": [
        "Add PathFinding(K', Pt, P, A, k) to R'"
      ],
      "types": [
        "operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The operation 'Add PathFinding(K', Pt, P, A, k) to R'' refers to the process of incorporating a pathfinding algorithm into a set of inverse open path rules (R') for a knowledge graph, where K' is a sampled version of the graph, Pt is a target predicate, P represents embeddings, A denotes additional parameters, and k specifies the maximum rule length.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-9",
          "local_name": "Add PathFinding(K', Pt, P, A, k) to R'",
          "local_types": [
            "operation"
          ],
          "iri": "Entity-add_pathfinding__k___pt__p__a__k__to_r_-Mention-1"
        }
      ],
      "relevance": 0.58935546875
    },
    "Entity-complex_shape_(1)": {
      "node_id": "complex_shape_(1)",
      "disambiguation_index": 1,
      "label": "complex shapes",
      "aliases": [
        "complex shapes"
      ],
      "types": [
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Complex shapes refer to intricate structures in knowledge graphs, such as trees, that are constructed from simpler path-based rules and are used to express constraints and relationships within the data.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "complex shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-complex_shape_(1)-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-6",
          "local_name": "complex shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-complex_shape_(1)-Mention-2"
        }
      ],
      "relevance": 0.58935546875
    },
    "Entity-target_predicate_pt": {
      "node_id": "target_predicate_pt",
      "disambiguation_index": 0,
      "label": "target predicate Pt",
      "aliases": [
        "target predicate Pt"
      ],
      "types": [
        "logical construct",
        "predicate",
        "relation",
        "logical statement"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The target predicate Pt refers to a specific logical construct within the framework of inverse open path rules (IOP), which is used to express relationships between entities in a knowledge graph, serving as the body of a rule that predicts instances of a head formed by a sequence of predicates.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-2",
          "local_name": "target predicate Pt",
          "local_types": [
            "logical construct",
            "predicate",
            "logical statement"
          ],
          "iri": "Entity-target_predicate_pt-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "target predicate Pt",
          "local_types": [
            "predicate",
            "relation",
            "logical construct"
          ],
          "iri": "Entity-target_predicate_pt-Mention-2"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-2",
          "local_name": "target predicate Pt",
          "local_types": [
            "logical construct",
            "predicate",
            "relation",
            "logical statement"
          ],
          "iri": "Entity-target_predicate_pt-Mention-3"
        }
      ],
      "relevance": 0.5888671875
    },
    "Entity-embedding_learner": {
      "node_id": "embedding_learner",
      "disambiguation_index": 0,
      "label": "embedding learner",
      "aliases": [
        "embedding learner",
        "embedding learners",
        "an embedding learner"
      ],
      "types": [
        "machine learning",
        "machine learning model",
        "learner",
        "concept",
        "algorithm",
        "model",
        "embedding"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The embedding learner refers to RESCAL, a machine learning model used to compute embedding representations of entities and predicates in the context of learning annotated Inverse Open Path rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-4",
          "local_name": "embedding learner",
          "local_types": [
            "machine learning",
            "machine learning model",
            "learner",
            "algorithm",
            "model"
          ],
          "iri": "Entity-embedding_learner-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-2",
          "local_name": "embedding learners",
          "local_types": [
            "machine learning model",
            "learner",
            "concept",
            "algorithm"
          ],
          "iri": "Entity-embedding_learner-Mention-2"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-4",
          "local_name": "an embedding learner",
          "local_types": [
            "learner",
            "embedding"
          ],
          "iri": "Entity-embedding_learner-Mention-3"
        }
      ],
      "relevance": 0.5888671875
    },
    "Entity-those_vector": {
      "node_id": "those_vector",
      "disambiguation_index": 0,
      "label": "those vectors",
      "aliases": [
        "those vectors"
      ],
      "types": [
        "vectors"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'those vectors' refer to the mathematical representations derived from the adjacency matrices of the knowledge graph, which are used to identify and count entities that satisfy specific conditions in the evaluation of IOP rules.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-3",
          "local_name": "those vectors",
          "local_types": [
            "vectors"
          ],
          "iri": "Entity-those_vector-Mention-1"
        }
      ],
      "relevance": 0.5888671875
    },
    "Entity-complexity": {
      "node_id": "complexity",
      "disambiguation_index": 0,
      "label": "complexity",
      "aliases": [
        "complexity"
      ],
      "types": [
        "computational complexity",
        "performance measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'complexity' refers to the computational complexity of the sampling algorithm used in the process of learning IOP rules from a knowledge graph, specifically denoted as O(|K|) where |K| represents the product of the number of entities and facts in the graph.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-3",
          "local_name": "complexity",
          "local_types": [
            "computational complexity",
            "performance measure"
          ],
          "iri": "Entity-complexity-Mention-1"
        }
      ],
      "relevance": 0.58837890625
    },
    "Entity-redundant_and_low_quality_rule": {
      "node_id": "redundant_and_low_quality_rule",
      "disambiguation_index": 0,
      "label": "redundant and low quality rules",
      "aliases": [
        "a large number of redundant and low quality rules",
        "redundant and low quality rules"
      ],
      "types": [
        "rules",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'redundant and low quality rules' refers to the candidate rules generated during the evaluation process of the SHACLEARNER algorithm that do not meet the necessary quality standards, as indicated by their IOPSC and IOPHC metrics, and thus require further filtering to ensure only high-quality rules are retained for knowledge graph validation.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-3",
          "local_name": "redundant and low quality rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-redundant_and_low_quality_rule-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-3",
          "local_name": "a large number of redundant and low quality rules",
          "local_types": [
            "rules"
          ],
          "iri": "Entity-redundant_and_low_quality_rule-Mention-2"
        }
      ],
      "relevance": 0.58837890625
    },
    "Entity-a_certain_cardinality_c1": {
      "node_id": "a_certain_cardinality_c1",
      "disambiguation_index": 0,
      "label": "a certain cardinality c1",
      "aliases": [
        "cardinality c1",
        "a certain cardinality c1"
      ],
      "types": [
        "cardinality"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'a certain cardinality c1' refers to a specific integer value that denotes the minimum number of distinct instantiations of the head of an inverse open path (IOP) rule that must be satisfied in a knowledge graph for each entity linked by the rule's body.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "a certain cardinality c1",
          "local_types": [
            "cardinality"
          ],
          "iri": "Entity-a_certain_cardinality_c1-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "cardinality c1",
          "local_types": [
            "cardinality"
          ],
          "iri": "Entity-a_certain_cardinality_c1-Mention-2"
        }
      ],
      "relevance": 0.587890625
    },
    "Entity-procedural_method": {
      "node_id": "procedural_method",
      "disambiguation_index": 0,
      "label": "procedural methods",
      "aliases": [
        "procedural methods"
      ],
      "types": [
        "technique",
        "methodology",
        "method",
        "approach"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Procedural methods refer to techniques for learning SHACL shapes from knowledge graphs that lack logical foundations and scalability for real-world applications.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-1-Sentence-2",
          "local_name": "procedural methods",
          "local_types": [
            "technique",
            "methodology",
            "method",
            "approach"
          ],
          "iri": "Entity-procedural_method-Mention-1"
        }
      ],
      "relevance": 0.587890625
    },
    "Entity-the_latter_row": {
      "node_id": "the_latter_row",
      "disambiguation_index": 0,
      "label": "the latter rows",
      "aliases": [
        "the latter rows"
      ],
      "types": [
        "data",
        "rows"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The latter rows refer to the subsequent rows in a table that present the percentage differences in the number of IOP rules found by various variants of the SHACLEARNER algorithm, compared to the ideal rule learner.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-4",
          "local_name": "the latter rows",
          "local_types": [
            "data",
            "rows"
          ],
          "iri": "Entity-the_latter_row-Mention-1"
        }
      ],
      "relevance": 0.587890625
    },
    "Entity-sh__path": {
      "node_id": "sh__path",
      "disambiguation_index": 0,
      "label": "sh:path",
      "aliases": [
        "sh:path"
      ],
      "types": [
        "semantic web term",
        "path",
        "predicate",
        "SHACL",
        "RDF term"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "sh:path is a semantic web term used in SHACL (Shapes Constraint Language) to define a path expression that specifies how to navigate through RDF graphs to identify nodes or properties.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-3",
          "local_name": "sh:path",
          "local_types": [
            "semantic web term",
            "path",
            "predicate",
            "SHACL",
            "RDF term"
          ],
          "iri": "Entity-sh__path-Mention-1"
        }
      ],
      "relevance": 0.58740234375
    },
    "Entity-an_example_of_a_shape_from_wikidata": {
      "node_id": "an_example_of_a_shape_from_wikidata",
      "disambiguation_index": 0,
      "label": "an example of a shape from Wikidata",
      "aliases": [
        "an example of a shape from Wikidata"
      ],
      "types": [
        "example",
        "shape",
        "Wikidata"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An example of a shape from Wikidata refers to a specific representation of constraints on entities within the Wikidata knowledge graph, illustrated in the context of the Shapes Constraint Language (SHACL), where variables are instantiated by entities to define relationships and properties.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-2-Sentence-2",
          "local_name": "an example of a shape from Wikidata",
          "local_types": [
            "example",
            "shape",
            "Wikidata"
          ],
          "iri": "Entity-an_example_of_a_shape_from_wikidata-Mention-1"
        }
      ],
      "relevance": 0.58740234375
    },
    "Entity-to_support_new_data_entry": {
      "node_id": "to_support_new_data_entry",
      "disambiguation_index": 0,
      "label": "to support new data entry",
      "aliases": [
        "to support new data entry"
      ],
      "types": [
        "data entry"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'to support new data entry' refers to the capability of the proposed method in the paper to facilitate the creation and input of new information into knowledge graphs by automatically generating dynamic data entry forms based on learned SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-1",
          "local_name": "to support new data entry",
          "local_types": [
            "data entry"
          ],
          "iri": "Entity-to_support_new_data_entry-Mention-1"
        }
      ],
      "relevance": 0.58740234375
    },
    "Entity-every_path_from_the_target_predicate": {
      "node_id": "every_path_from_the_target_predicate",
      "disambiguation_index": 0,
      "label": "every path from the target predicate",
      "aliases": [
        "every path from the target predicate"
      ],
      "types": [
        "path",
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'every path from the target predicate' refers to the specific sequences of predicates in a knowledge graph that connect the target predicate to various nodes in a tree structure, which can be interpreted as SHACL shapes for validating and documenting the graph's data.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "every path from the target predicate",
          "local_types": [
            "path",
            "predicate"
          ],
          "iri": "Entity-every_path_from_the_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.5869140625
    },
    "Entity-the_specification_of_two_benchmark": {
      "node_id": "the_specification_of_two_benchmark",
      "disambiguation_index": 0,
      "label": "the specifications of two benchmarks",
      "aliases": [
        "the specifications of two benchmarks"
      ],
      "types": [
        "specifications",
        "specification",
        "benchmark"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The specifications of two benchmarks refer to the detailed descriptions and characteristics of two knowledge graphs that have been enhanced with additional unary predicates and facts for the purpose of evaluating the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-5",
          "local_name": "the specifications of two benchmarks",
          "local_types": [
            "specifications",
            "specification",
            "benchmark"
          ],
          "iri": "Entity-the_specification_of_two_benchmark-Mention-1"
        }
      ],
      "relevance": 0.5869140625
    },
    "Entity-poker_kg": {
      "node_id": "poker_kg",
      "disambiguation_index": 0,
      "label": "Poker KG",
      "aliases": [
        "The Poker KG",
        "Poker KG"
      ],
      "types": [
        "knowledge graph",
        "KG",
        "data structure",
        "dataset"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Poker KG is a small synthetic knowledge graph specifically designed for evaluating algorithms, containing 500 randomly generated poker hands with attributes for suit and rank, and structured to include various poker hand rankings.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-4",
          "local_name": "Poker KG",
          "local_types": [
            "knowledge graph",
            "data structure",
            "dataset"
          ],
          "iri": "Entity-poker_kg-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-1",
          "local_name": "Poker KG",
          "local_types": [
            "knowledge graph",
            "data structure",
            "dataset"
          ],
          "iri": "Entity-poker_kg-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-4",
          "local_name": "The Poker KG",
          "local_types": [
            "knowledge graph",
            "KG"
          ],
          "iri": "Entity-poker_kg-Mention-3"
        }
      ],
      "relevance": 0.58642578125
    },
    "Entity-data": {
      "node_id": "data",
      "disambiguation_index": 0,
      "label": "data",
      "aliases": [
        "data"
      ],
      "types": [
        "data",
        "information",
        "dataset",
        "input"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'data' refers to the information contained within knowledge graphs (KGs) that is enhanced by type information to facilitate understanding, validation, and inference processes.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-2",
          "local_name": "data",
          "local_types": [
            "data",
            "information",
            "dataset"
          ],
          "iri": "Entity-data-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-3",
          "local_name": "data",
          "local_types": [
            "information",
            "dataset",
            "input"
          ],
          "iri": "Entity-data-Mention-2"
        }
      ],
      "relevance": 0.58642578125
    },
    "Entity-extend_a_kg": {
      "node_id": "extend_a_kg",
      "disambiguation_index": 0,
      "label": "extend a KG",
      "aliases": [
        "extend a KG"
      ],
      "types": [
        "action",
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'extend a KG' refers to the process of adding new data or knowledge to a knowledge graph (KG) in a flexible and unstructured manner, allowing for the incorporation of evolving information and insights from various sources.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-1",
          "local_name": "extend a KG",
          "local_types": [
            "action",
            "knowledge graph"
          ],
          "iri": "Entity-extend_a_kg-Mention-1"
        }
      ],
      "relevance": 0.58642578125
    },
    "Entity-different_cardinality": {
      "node_id": "different_cardinality",
      "disambiguation_index": 0,
      "label": "different cardinalities",
      "aliases": [
        "different cardinalities"
      ],
      "types": [
        "cardinality"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Different cardinalities refer to the varying integer values that can be assigned to IOP rules, indicating the minimum number of distinct instantiations of the head of the rule that must be satisfied for each entity linked by the body of the rule in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-9-Sentence-1",
          "local_name": "different cardinalities",
          "local_types": [
            "cardinality"
          ],
          "iri": "Entity-different_cardinality-Mention-1"
        }
      ],
      "relevance": 0.58642578125
    },
    "Entity-the_rule_(2)": {
      "node_id": "the_rule_(2)",
      "disambiguation_index": 2,
      "label": "the rule",
      "aliases": [
        "the rule"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The rule refers to a specific IOP rule that is evaluated based on its Tree Standard Confidence (TreeSC) in the context of constructing SHACL trees for knowledge graphs, where it is either added to or dismissed from the tree structure depending on whether its TreeSC meets a defined threshold.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-4",
          "local_name": "the rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_rule_(2)-Mention-1"
        }
      ],
      "relevance": 0.58642578125
    },
    "Entity-loop": {
      "node_id": "loop",
      "disambiguation_index": 0,
      "label": "loop",
      "aliases": [
        "loop"
      ],
      "types": [
        "mathematical concept",
        "topology"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph rule learning, a 'loop' refers to a closed path that forms a single unbroken sequence of links between variables, allowing for the inference of facts based on the relationships defined by the predicates in the rule.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-6",
          "local_name": "loop",
          "local_types": [
            "mathematical concept",
            "topology"
          ],
          "iri": "Entity-loop-Mention-1"
        }
      ],
      "relevance": 0.5859375
    },
    "Entity-74_target_predicate": {
      "node_id": "74_target_predicate",
      "disambiguation_index": 0,
      "label": "74 target predicates",
      "aliases": [
        "74 target predicates"
      ],
      "types": [
        "predicate",
        "target"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '74 target predicates' refers to the total number of distinct binary predicates selected from the YAGO2 knowledge graph, which are utilized in the evaluation of the SHACLEARNER method for learning high-quality rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-7",
          "local_name": "74 target predicates",
          "local_types": [
            "predicate",
            "target"
          ],
          "iri": "Entity-74_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.5859375
    },
    "Entity-application_of_shacl_shape": {
      "node_id": "application_of_shacl_shape",
      "disambiguation_index": 0,
      "label": "application of SHACL shapes",
      "aliases": [
        "the application of SHACL shapes to the validation of RDF databases",
        "the application of SHACL shapes",
        "application of SHACL shapes"
      ],
      "types": [
        "SHACL shape",
        "validation",
        "SHACL",
        "application"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The application of SHACL shapes refers to the use of Shapes Constraint Language (SHACL) to define and validate the structure and constraints of RDF data models.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "application of SHACL shapes",
          "local_types": [
            "application",
            "SHACL"
          ],
          "iri": "Entity-application_of_shacl_shape-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "the application of SHACL shapes to the validation of RDF databases",
          "local_types": [
            "application",
            "validation"
          ],
          "iri": "Entity-application_of_shacl_shape-Mention-2"
        },
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "the application of SHACL shapes",
          "local_types": [
            "application",
            "SHACL shape"
          ],
          "iri": "Entity-application_of_shacl_shape-Mention-3"
        }
      ],
      "relevance": 0.58544921875
    },
    "Entity-pt___x__z0__-__p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_": {
      "node_id": "pt___x__z0__-__p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_",
      "disambiguation_index": 0,
      "label": "Pt'(x, z0) -> P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)",
      "aliases": [
        "Pt'(x, z0) -> P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)"
      ],
      "types": [
        "mathematical expression",
        "function"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'Pt'(x, z0) -> P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)' represents a formal structure of an Inverse Open Path (IOP) rule in predicate logic, which defines a relationship between a predicate Pt and a sequence of predicates P1 to Pn, indicating how entities in a knowledge graph are interconnected through these predicates, while also allowing for cardinality constraints on the number of valid paths.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "Pt'(x, z0) -> P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y)",
          "local_types": [
            "mathematical expression",
            "function"
          ],
          "iri": "Entity-pt___x__z0__-__p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_-Mention-1"
        }
      ],
      "relevance": 0.58544921875
    },
    "Entity-pair_of_entity": {
      "node_id": "pair_of_entity",
      "disambiguation_index": 0,
      "label": "pairs of entities",
      "aliases": [
        "pairs of entities",
        "pair of entities"
      ],
      "types": [
        "tuple",
        "concept",
        "data structure",
        "mathematical structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pairs of entities refer to tuples of entities in a knowledge graph that satisfy specific predicates, forming relationships that are used to validate and derive shapes in the context of SHACL trees.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "pairs of entities",
          "local_types": [
            "data structure",
            "tuple"
          ],
          "iri": "Entity-pair_of_entity-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-4",
          "local_name": "pair of entities",
          "local_types": [
            "concept",
            "mathematical structure"
          ],
          "iri": "Entity-pair_of_entity-Mention-2"
        }
      ],
      "relevance": 0.5849609375
    },
    "Entity-minimum_quality_threshold": {
      "node_id": "minimum_quality_threshold",
      "disambiguation_index": 0,
      "label": "minimum quality thresholds",
      "aliases": [
        "minimum quality thresholds"
      ],
      "types": [
        "threshold",
        "thresholds",
        "quality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Minimum quality thresholds refer to the predefined criteria that determine whether certain shapes derived from knowledge graphs meet acceptable standards of quality for presentation as standard SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-1",
          "local_name": "minimum quality thresholds",
          "local_types": [
            "threshold",
            "thresholds",
            "quality"
          ],
          "iri": "Entity-minimum_quality_threshold-Mention-1"
        }
      ],
      "relevance": 0.5849609375
    },
    "Entity-additional_head_predicate": {
      "node_id": "additional_head_predicate",
      "disambiguation_index": 0,
      "label": "additional head predicates",
      "aliases": [
        "additional head predicates"
      ],
      "types": [
        "predicate",
        "head predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Additional head predicates refer to the extra predicates included in the head of an inverse open path (IOP) rule, which influence the rule's support and confidence measures in the context of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-4",
          "local_name": "additional head predicates",
          "local_types": [
            "predicate",
            "head predicate"
          ],
          "iri": "Entity-additional_head_predicate-Mention-1"
        }
      ],
      "relevance": 0.58447265625
    },
    "Entity-different_complexity": {
      "node_id": "different_complexity",
      "disambiguation_index": 0,
      "label": "different complexities",
      "aliases": [
        "different complexities"
      ],
      "types": [
        "complexity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'different complexities' refers to the varying levels of structural intricacy in SHACL shapes, which can include simple to nested patterns, allowing for the representation of diverse graph structures in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-1",
          "local_name": "different complexities",
          "local_types": [
            "complexity"
          ],
          "iri": "Entity-different_complexity-Mention-1"
        }
      ],
      "relevance": 0.58447265625
    },
    "Entity-opsc": {
      "node_id": "opsc",
      "disambiguation_index": 0,
      "label": "OPSC",
      "aliases": [
        "OPSC"
      ],
      "types": [
        "supporting condition",
        "statistical measure",
        "path type",
        "operation",
        "concept",
        "abbreviation",
        "variable",
        "entity type",
        "term",
        "parameter",
        "rule",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "OPSC refers to the open path standard confidence, a metric used to assess the quality of open path rules in knowledge graph completion by measuring the ratio of open path support to the number of entities satisfying the body of the rule.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-4-Sentence-1",
          "local_name": "OPSC",
          "local_types": [
            "term",
            "path type",
            "abbreviation",
            "entity type"
          ],
          "iri": "Entity-opsc-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-5-Sentence-1",
          "local_name": "OPSC",
          "local_types": [
            "operation",
            "concept",
            "rule",
            "supporting condition"
          ],
          "iri": "Entity-opsc-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-5",
          "local_name": "OPSC",
          "local_types": [
            "statistical measure",
            "variable",
            "parameter",
            "rule",
            "metric"
          ],
          "iri": "Entity-opsc-Mention-3"
        }
      ],
      "relevance": 0.583984375
    },
    "Entity-the_same_entity": {
      "node_id": "the_same_entity",
      "disambiguation_index": 0,
      "label": "the same entities",
      "aliases": [
        "the same entities"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'the same entities' refers to the specific entities in a knowledge graph that can be used to instantiate a variable in both the body and head of an inverse open path (IOP) rule, indicating that these entities satisfy the conditions of the rule in a reversed manner.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "the same entities",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-the_same_entity-Mention-1"
        }
      ],
      "relevance": 0.583984375
    },
    "Entity-public_knowledge_graph": {
      "node_id": "public_knowledge_graph",
      "disambiguation_index": 0,
      "label": "public knowledge graphs",
      "aliases": [
        "public knowledge graphs",
        "public knowledge graphs (KGs)"
      ],
      "types": [
        "knowledge graph",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Public knowledge graphs are structured representations of information that are openly accessible and designed to facilitate the organization, integration, and retrieval of knowledge from various sources.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "public knowledge graphs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-public_knowledge_graph-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "public knowledge graphs (KGs)",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-public_knowledge_graph-Mention-2"
        }
      ],
      "relevance": 0.58349609375
    },
    "Entity-atom": {
      "node_id": "atom",
      "disambiguation_index": 0,
      "label": "atoms",
      "aliases": [
        "atoms"
      ],
      "types": [
        "element",
        "component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'atoms' refers to the fundamental components or elements of the Inverse Open Path (IOP) rules used in the sampling method for knowledge graphs, which are essential for defining the structure and relationships within the graph data.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "atoms",
          "local_types": [
            "element",
            "component"
          ],
          "iri": "Entity-atom-Mention-1"
        }
      ],
      "relevance": 0.58349609375
    },
    "Entity-esample": {
      "node_id": "esample",
      "disambiguation_index": 0,
      "label": "Esample",
      "aliases": [
        "entity set Esample",
        "Esample"
      ],
      "types": [
        "collection",
        "data set",
        "set",
        "mathematical expression",
        "data structure",
        "sample space",
        "entity set",
        "sample"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Esample refers to the set of sampled entities from a knowledge graph that are relevant to a specific target predicate, used in the context of learning Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "Esample",
          "local_types": [
            "data structure",
            "entity set"
          ],
          "iri": "Entity-esample-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-9",
          "local_name": "Esample",
          "local_types": [
            "collection",
            "set",
            "mathematical expression",
            "entity set",
            "sample"
          ],
          "iri": "Entity-esample-Mention-2"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-10",
          "local_name": "Esample",
          "local_types": [
            "sample space",
            "set"
          ],
          "iri": "Entity-esample-Mention-3"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "entity set Esample",
          "local_types": [
            "data set",
            "data structure",
            "entity set",
            "set"
          ],
          "iri": "Entity-esample-Mention-4"
        }
      ],
      "relevance": 0.58349609375
    },
    "Entity-the_last_head_predicate": {
      "node_id": "the_last_head_predicate",
      "disambiguation_index": 0,
      "label": "the last head predicate",
      "aliases": [
        "the last head predicate"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The last head predicate refers to the final predicate in an inverse open path (IOP) rule, which is used to predict relationships between entities in a knowledge graph based on the structure of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-2",
          "local_name": "the last head predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-the_last_head_predicate-Mention-1"
        }
      ],
      "relevance": 0.58349609375
    },
    "Entity-version_of_the_rule_extended_with_additional_head_atom": {
      "node_id": "version_of_the_rule_extended_with_additional_head_atom",
      "disambiguation_index": 0,
      "label": "versions of the rule extended with additional head atoms",
      "aliases": [
        "versions of the rule extended with additional head atoms"
      ],
      "types": [
        "rule",
        "version"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Versions of the rule extended with additional head atoms refer to modified instances of inverse open path (IOP) rules that include extra predicates in their head, which are used to express more complex relationships in knowledge graphs while maintaining the same body structure.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-11-Sentence-1",
          "local_name": "versions of the rule extended with additional head atoms",
          "local_types": [
            "rule",
            "version"
          ],
          "iri": "Entity-version_of_the_rule_extended_with_additional_head_atom-Mention-1"
        }
      ],
      "relevance": 0.58349609375
    },
    "Entity-a_tree_(2)": {
      "node_id": "a_tree_(2)",
      "disambiguation_index": 2,
      "label": "a tree",
      "aliases": [
        "the trees",
        "a tree"
      ],
      "types": [
        "tree",
        "data structure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'a tree' refers to a structured representation of relationships among entities in a knowledge graph, formed by aggregating mined Inverse Open Path (IOP) rules to illustrate hierarchical connections for each argument of a target predicate.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-7",
          "local_name": "a tree",
          "local_types": [
            "data structure"
          ],
          "iri": "Entity-a_tree_(2)-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-1",
          "local_name": "the trees",
          "local_types": [
            "tree",
            "data structure"
          ],
          "iri": "Entity-a_tree_(2)-Mention-2"
        }
      ],
      "relevance": 0.58349609375
    },
    "Entity-closed_rule": {
      "node_id": "closed_rule",
      "disambiguation_index": 0,
      "label": "closed rules",
      "aliases": [
        "Closed rules",
        "closed rules"
      ],
      "types": [
        "logical construct",
        "formalism",
        "mathematical concept",
        "rule",
        "inference rule",
        "logical rule",
        "pattern"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Closed rules are a type of logical construct used in knowledge representation that define constraints and relationships within a knowledge graph, often serving as a formalism for expressing specific patterns and rules in the context of shape validation.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "closed rules",
          "local_types": [
            "rule",
            "logical rule",
            "formalism"
          ],
          "iri": "Entity-closed_rule-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "Closed rules",
          "local_types": [
            "inference rule",
            "pattern",
            "formalism"
          ],
          "iri": "Entity-closed_rule-Mention-2"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-3",
          "local_name": "closed rules",
          "local_types": [
            "logical construct",
            "formalism",
            "mathematical concept",
            "rule",
            "inference rule",
            "pattern"
          ],
          "iri": "Entity-closed_rule-Mention-3"
        }
      ],
      "relevance": 0.5830078125
    },
    "Entity-fgds": {
      "node_id": "fgds",
      "disambiguation_index": 0,
      "label": "FGDs",
      "aliases": [
        "FGDs"
      ],
      "types": [
        "methodology",
        "framework"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "FGDs, or Functional Graph Dependencies, are a formalism used to define constraints on knowledge graphs, specifying the types of entities in the domain and range of predicates, as well as the cardinality of relationships between entities.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-3",
          "local_name": "FGDs",
          "local_types": [
            "methodology",
            "framework"
          ],
          "iri": "Entity-fgds-Mention-1"
        }
      ],
      "relevance": 0.5830078125
    },
    "Entity-work": {
      "node_id": "work",
      "disambiguation_index": 0,
      "label": "work",
      "aliases": [
        "work"
      ],
      "types": [
        "research",
        "project"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'work' refers to a specific research effort that utilizes existing ontologies to automatically generate SHACL shapes for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-1",
          "local_name": "work",
          "local_types": [
            "research",
            "project"
          ],
          "iri": "Entity-work-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-2",
          "local_name": "work",
          "local_types": [
            "research",
            "project"
          ],
          "iri": "Entity-work-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-2",
          "local_name": "work",
          "local_types": [
            "project",
            "research"
          ],
          "iri": "Entity-work-Mention-3"
        }
      ],
      "relevance": 0.5830078125
    },
    "Entity-n___2": {
      "node_id": "n___2",
      "disambiguation_index": 0,
      "label": "n >= 2",
      "aliases": [
        "n >= 2"
      ],
      "types": [
        "condition"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'n >= 2' refers to a condition in the context of inverse open path (IOP) rules, indicating that the rule must involve at least two predicates in its head, which is essential for assessing the quality measures of these rules in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-2",
          "local_name": "n >= 2",
          "local_types": [
            "condition"
          ],
          "iri": "Entity-n___2-Mention-1"
        }
      ],
      "relevance": 0.5830078125
    },
    "Entity-completeness_of_our_algorithm": {
      "node_id": "completeness_of_our_algorithm",
      "disambiguation_index": 0,
      "label": "completeness of our algorithm",
      "aliases": [
        "completeness of our algorithm"
      ],
      "types": [
        "analysis",
        "algorithm"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The 'completeness of our algorithm' refers to the ability of the SHACLEARNER system to accurately learn and represent all relevant shapes and rules from a small synthetic knowledge graph, specifically designed to evaluate the algorithm's performance in capturing diverse and high-quality shape patterns.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-3",
          "local_name": "completeness of our algorithm",
          "local_types": [
            "analysis",
            "algorithm"
          ],
          "iri": "Entity-completeness_of_our_algorithm-Mention-1"
        }
      ],
      "relevance": 0.5830078125
    },
    "Entity-the_established_approach": {
      "node_id": "the_established_approach",
      "disambiguation_index": 0,
      "label": "the established approach",
      "aliases": [
        "the established approach"
      ],
      "types": [
        "methodology"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The established approach refers to a methodology for evaluating knowledge graph (KG) rule-learning methods by measuring both the quantity and quality of distinct rules learned.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-1",
          "local_name": "the established approach",
          "local_types": [
            "methodology"
          ],
          "iri": "Entity-the_established_approach-Mention-1"
        }
      ],
      "relevance": 0.58251953125
    },
    "Entity-2012": {
      "node_id": "2012",
      "disambiguation_index": 0,
      "label": "2012",
      "aliases": [
        "2012"
      ],
      "types": [
        "year",
        "date"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "The mention '2012' refers to the year when knowledge panels were introduced to Google search, marking a significant development in the proliferation of Knowledge Graphs on the Web.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-1",
          "local_name": "2012",
          "local_types": [
            "year",
            "date"
          ],
          "iri": "Entity-2012-Mention-1"
        }
      ],
      "relevance": 0.58203125
    },
    "Entity-enterprise_knowledge_graph": {
      "node_id": "enterprise_knowledge_graph",
      "disambiguation_index": 0,
      "label": "enterprise knowledge graphs",
      "aliases": [
        "enterprise knowledge graphs"
      ],
      "types": [
        "knowledge graph",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Enterprise knowledge graphs are structured representations of knowledge that integrate and organize data within an organization, enabling enhanced data management, retrieval, and analysis for business intelligence and decision-making.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "enterprise knowledge graphs",
          "local_types": [
            "knowledge graph",
            "data structure"
          ],
          "iri": "Entity-enterprise_knowledge_graph-Mention-1"
        }
      ],
      "relevance": 0.58203125
    },
    "Entity-open_path": {
      "node_id": "open_path",
      "disambiguation_index": 0,
      "label": "open path",
      "aliases": [
        "open path"
      ],
      "types": [
        "path",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'open path' refers to a type of rule in knowledge graph completion that involves a sequence of predicates connecting entities, characterized by having open variables that imply the existence of a fact in the graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-4-Sentence-1",
          "local_name": "open path",
          "local_types": [
            "path",
            "concept"
          ],
          "iri": "Entity-open_path-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-5-Sentence-1",
          "local_name": "open path",
          "local_types": [
            "concept",
            "path"
          ],
          "iri": "Entity-open_path-Mention-2"
        }
      ],
      "relevance": 0.58203125
    },
    "Entity-p1___z0__z1_": {
      "node_id": "p1___z0__z1_",
      "disambiguation_index": 0,
      "label": "P1'(z0, z1)",
      "aliases": [
        "P1'(z0, z1)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P1'(z0, z1) is a predicate in the context of inverse open path rules (IOP) that represents a relationship between the entities instantiated by z0 and z1, forming part of a logical expression used to derive shapes in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "P1'(z0, z1)",
          "local_types": [
            "mathematical expression",
            "function"
          ],
          "iri": "Entity-p1___z0__z1_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "P1'(z0, z1)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p1___z0__z1_-Mention-2"
        }
      ],
      "relevance": 0.58203125
    },
    "Entity-p1__p2__...__pn": {
      "node_id": "p1__p2__...__pn",
      "disambiguation_index": 0,
      "label": "P1 ^ P2 ^ ... ^ Pn",
      "aliases": [
        "P1 ^ P2 ^ ... ^ Pn"
      ],
      "types": [
        "logical expression",
        "conjunction"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'P1 ^ P2 ^ ... ^ Pn' refers to the head of an inverse open path (IOP) rule, which is a logical expression representing a sequence of predicates that are satisfied by a pair of entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-4",
          "local_name": "P1 ^ P2 ^ ... ^ Pn",
          "local_types": [
            "logical expression",
            "conjunction"
          ],
          "iri": "Entity-p1__p2__...__pn-Mention-1"
        }
      ],
      "relevance": 0.58154296875
    },
    "Entity-max_rule_length": {
      "node_id": "max_rule_length",
      "disambiguation_index": 0,
      "label": "max rule length",
      "aliases": [
        "max rule length l",
        "max rule length"
      ],
      "types": [
        "constraint",
        "rule length",
        "rule specification",
        "parameter",
        "rule",
        "length",
        "metric",
        "configuration"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'max rule length' refers to a parameter that specifies the maximum number of predicates allowed in the body of an inverse open path (IOP) rule when learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-3",
          "local_name": "max rule length",
          "local_types": [
            "parameter",
            "rule specification"
          ],
          "iri": "Entity-max_rule_length-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-3",
          "local_name": "max rule length",
          "local_types": [
            "parameter",
            "metric"
          ],
          "iri": "Entity-max_rule_length-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-3",
          "local_name": "max rule length l",
          "local_types": [
            "parameter",
            "configuration",
            "rule length"
          ],
          "iri": "Entity-max_rule_length-Mention-3"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-3",
          "local_name": "max rule length l",
          "local_types": [
            "parameter",
            "constraint",
            "rule",
            "length"
          ],
          "iri": "Entity-max_rule_length-Mention-4"
        }
      ],
      "relevance": 0.58154296875
    },
    "Entity-binary_target_predicate": {
      "node_id": "binary_target_predicate",
      "disambiguation_index": 0,
      "label": "binary target predicate",
      "aliases": [
        "Each binary target predicate",
        "binary target predicate"
      ],
      "types": [
        "predicate",
        "logical construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'binary target predicate' refers to a type of predicate in knowledge graphs that involves two arguments, allowing it to be utilized in both a direct and a reverse manner for rule learning and evaluation in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "binary target predicate",
          "local_types": [
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-binary_target_predicate-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "Each binary target predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-binary_target_predicate-Mention-2"
        }
      ],
      "relevance": 0.58154296875
    },
    "Entity-massive_and_diverse": {
      "node_id": "massive_and_diverse",
      "disambiguation_index": 0,
      "label": "massive and diverse",
      "aliases": [
        "massive and diverse"
      ],
      "types": [
        "description"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'massive and diverse' refers to the large-scale and varied nature of knowledge graphs (KGs), which encompass a wide range of entities and relationships but often lack complete information due to their evolving and complex structures.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-2",
          "local_name": "massive and diverse",
          "local_types": [
            "description"
          ],
          "iri": "Entity-massive_and_diverse-Mention-1"
        }
      ],
      "relevance": 0.58154296875
    },
    "Entity-the_body_in_the_kg": {
      "node_id": "the_body_in_the_kg",
      "disambiguation_index": 0,
      "label": "the body in the KG",
      "aliases": [
        "the body in the KG"
      ],
      "types": [
        "knowledge graph",
        "body"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The body in the KG refers to the set of entity pairs that satisfy the conditions of a rule within a knowledge graph, which are used to infer new facts based on the relationships defined by the rule.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-2",
          "local_name": "the body in the KG",
          "local_types": [
            "knowledge graph",
            "body"
          ],
          "iri": "Entity-the_body_in_the_kg-Mention-1"
        }
      ],
      "relevance": 0.58154296875
    },
    "Entity-two_scoring_function": {
      "node_id": "two_scoring_function",
      "disambiguation_index": 0,
      "label": "two scoring functions",
      "aliases": [
        "two scoring functions"
      ],
      "types": [
        "function"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'two scoring functions' refers to specific heuristic measures defined to assist in the mining of candidate Inverse Open Path (IOP) rules from knowledge graphs, aimed at reducing the search space of potential rules.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-5-Sentence-1",
          "local_name": "two scoring functions",
          "local_types": [
            "function"
          ],
          "iri": "Entity-two_scoring_function-Mention-1"
        }
      ],
      "relevance": 0.58154296875
    },
    "Entity-sequence_of_entity": {
      "node_id": "sequence_of_entity",
      "disambiguation_index": 0,
      "label": "sequences of entities",
      "aliases": [
        "sequences of entities"
      ],
      "types": [
        "mathematical concept",
        "data structure",
        "list"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'sequences of entities' refers to ordered lists of entities in a knowledge graph that satisfy specific predicate relationships, forming paths that are used to define the head of a tree structure in the context of SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "sequences of entities",
          "local_types": [
            "mathematical concept",
            "data structure",
            "list"
          ],
          "iri": "Entity-sequence_of_entity-Mention-1"
        }
      ],
      "relevance": 0.5810546875
    },
    "Entity-ongoing_data_entry": {
      "node_id": "ongoing_data_entry",
      "disambiguation_index": 0,
      "label": "ongoing data entry",
      "aliases": [
        "ongoing data entry"
      ],
      "types": [
        "data entry",
        "process"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Ongoing data entry refers to the continuous process of populating and updating a knowledge graph (KG) with new information, utilizing inferred shapes and patterns to guide the addition of data and ensure its consistency and relevance.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-6",
          "local_name": "ongoing data entry",
          "local_types": [
            "data entry",
            "process"
          ],
          "iri": "Entity-ongoing_data_entry-Mention-1"
        }
      ],
      "relevance": 0.5810546875
    },
    "Entity-this_simple_approach": {
      "node_id": "this_simple_approach",
      "disambiguation_index": 0,
      "label": "This simple approach",
      "aliases": [
        "This simple approach"
      ],
      "types": [
        "approach",
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This simple approach refers to a method of sampling a fragment of a knowledge graph to significantly reduce the problem size for learning inverse open path rules, thereby making it manageable for embedding learners to process large-scale knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-1",
          "local_name": "This simple approach",
          "local_types": [
            "approach",
            "method"
          ],
          "iri": "Entity-this_simple_approach-Mention-1"
        }
      ],
      "relevance": 0.5810546875
    },
    "Entity-their_output": {
      "node_id": "their_output",
      "disambiguation_index": 0,
      "label": "their output",
      "aliases": [
        "their output"
      ],
      "types": [
        "output"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'their output' refers to the results produced by procedural methods for learning SHACL shapes from knowledge graphs, which are characterized by a representation formalism that lacks comparability to the IOP rules utilized in this paper.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-1-Sentence-3",
          "local_name": "their output",
          "local_types": [
            "output"
          ],
          "iri": "Entity-their_output-Mention-1"
        }
      ],
      "relevance": 0.5810546875
    },
    "Entity-a_method": {
      "node_id": "a_method",
      "disambiguation_index": 0,
      "label": "a method",
      "aliases": [
        "a method"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The method refers to a systematic approach proposed in the paper for constructing tree shapes from mined Inverse Open Path rules, which serve as foundational elements for more complex structures in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-5",
          "local_name": "a method",
          "local_types": [
            "method"
          ],
          "iri": "Entity-a_method-Mention-1"
        }
      ],
      "relevance": 0.58056640625
    },
    "Entity-37_binary_predicate": {
      "node_id": "37_binary_predicate",
      "disambiguation_index": 0,
      "label": "37 binary predicates",
      "aliases": [
        "37 binary predicates"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '37 binary predicates' refers to the specific set of binary relationships present in the YAGO2 knowledge graph that are utilized as target predicates for evaluating the performance of the SHACLEARNER rule-learning method.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-5-Sentence-2",
          "local_name": "37 binary predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-37_binary_predicate-Mention-1"
        }
      ],
      "relevance": 0.58056640625
    },
    "Entity-this_method": {
      "node_id": "this_method",
      "disambiguation_index": 0,
      "label": "this method",
      "aliases": [
        "this method"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This method refers to the ideal IOP rule learner variant of SHACLEARNER that employs a brute-force search approach to generate and evaluate all possible rules without any sampling or heuristic pruning.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-5",
          "local_name": "this method",
          "local_types": [
            "method"
          ],
          "iri": "Entity-this_method-Mention-1"
        }
      ],
      "relevance": 0.58056640625
    },
    "Entity-p2__z__t_": {
      "node_id": "p2__z__t_",
      "disambiguation_index": 0,
      "label": "P2(z, t)",
      "aliases": [
        "P2(z, t)"
      ],
      "types": [
        "predicate",
        "mathematical expression",
        "logical expression",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P2(z, t) is a predicate in the context of an Inverse Open Path (IOP) rule that connects entities along a specified path in a knowledge graph, serving as the final predicate in a logical expression that links the subject and object arguments of the rule.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "P2(z, t)",
          "local_types": [
            "predicate",
            "logical expression"
          ],
          "iri": "Entity-p2__z__t_-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-1",
          "local_name": "P2(z, t)",
          "local_types": [
            "predicate",
            "mathematical expression",
            "mathematical notation"
          ],
          "iri": "Entity-p2__z__t_-Mention-2"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "P2(z, t)",
          "local_types": [
            "mathematical expression"
          ],
          "iri": "Entity-p2__z__t_-Mention-3"
        }
      ],
      "relevance": 0.580078125
    },
    "Entity-specific_predicate": {
      "node_id": "specific_predicate",
      "disambiguation_index": 0,
      "label": "specific predicate",
      "aliases": [
        "specific predicate"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A specific predicate refers to a particular type of relationship or property in a knowledge graph that defines how entities are related, often used in the context of constraints within the Shapes Constraint Language (SHACL) to validate and characterize data.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-3",
          "local_name": "specific predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-specific_predicate-Mention-1"
        }
      ],
      "relevance": 0.580078125
    },
    "Entity-the_object_argument": {
      "node_id": "the_object_argument",
      "disambiguation_index": 0,
      "label": "the object argument",
      "aliases": [
        "the object argument"
      ],
      "types": [
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The object argument refers to the entity that is the target of a predicate in a knowledge graph, which is used in the context of deriving SHACL trees from annotated Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-3",
          "local_name": "the object argument",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-the_object_argument-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-5",
          "local_name": "the object argument",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-the_object_argument-Mention-2"
        }
      ],
      "relevance": 0.580078125
    },
    "Entity-the_path_of_head_predicate": {
      "node_id": "the_path_of_head_predicate",
      "disambiguation_index": 0,
      "label": "the path of head predicates",
      "aliases": [
        "the path of head predicates"
      ],
      "types": [
        "path",
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The path of head predicates refers to the sequence of predicates in a SHACL tree that are used to define the relationships and constraints between entities in a knowledge graph, represented as nested sh:path declarations within a sh:property declaration.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-3",
          "local_name": "the path of head predicates",
          "local_types": [
            "path",
            "predicate"
          ],
          "iri": "Entity-the_path_of_head_predicate-Mention-1"
        }
      ],
      "relevance": 0.580078125
    },
    "Entity-general_form": {
      "node_id": "general_form",
      "disambiguation_index": 0,
      "label": "general form",
      "aliases": [
        "the following general form",
        "general form"
      ],
      "types": [
        "concept",
        "structure",
        "form"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'general form' refers to the structured representation of closed path rules in knowledge graph rule learning, specifically denoted as Pt(x, y) <- P1(x, z1) ^ P2(z1, z2) ^ ... ^ Pn(zn-1, y), which outlines how predicates are linked to infer new facts.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-7",
          "local_name": "general form",
          "local_types": [
            "concept",
            "structure"
          ],
          "iri": "Entity-general_form-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-7",
          "local_name": "the following general form",
          "local_types": [
            "form"
          ],
          "iri": "Entity-general_form-Mention-2"
        }
      ],
      "relevance": 0.57958984375
    },
    "Entity-this_section": {
      "node_id": "this_section",
      "disambiguation_index": 0,
      "label": "this section",
      "aliases": [
        "this section"
      ],
      "types": [
        "section"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This section refers to the part of the paper that discusses the adaptation and extension of closed path rules and open path rules in the context of knowledge graph rule learning systems.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-1-Sentence-1",
          "local_name": "this section",
          "local_types": [
            "section"
          ],
          "iri": "Entity-this_section-Mention-1"
        }
      ],
      "relevance": 0.5791015625
    },
    "Entity-l_atom": {
      "node_id": "l_atom",
      "disambiguation_index": 0,
      "label": "l atoms",
      "aliases": [
        "l atoms"
      ],
      "types": [
        "parameter",
        "atom"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'l atoms' refers to the maximum number of atomic components or predicates that can be included in the Inverse Open Path (IOP) rules being searched for in the context of learning from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "l atoms",
          "local_types": [
            "parameter",
            "atom"
          ],
          "iri": "Entity-l_atom-Mention-1"
        }
      ],
      "relevance": 0.57861328125
    },
    "Entity-object_and_datatype_property": {
      "node_id": "object_and_datatype_property",
      "disambiguation_index": 0,
      "label": "object and datatype properties",
      "aliases": [
        "object and datatype properties"
      ],
      "types": [
        "property",
        "property type"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Object and datatype properties refer to the two main types of properties in knowledge graphs, where object properties link entities to other entities and datatype properties link entities to literal values, both of which are treated as plain predicates in the context of SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "object and datatype properties",
          "local_types": [
            "property",
            "property type"
          ],
          "iri": "Entity-object_and_datatype_property-Mention-1"
        }
      ],
      "relevance": 0.57861328125
    },
    "Entity-one_proposal": {
      "node_id": "one_proposal",
      "disambiguation_index": 0,
      "label": "One proposal",
      "aliases": [
        "One proposal"
      ],
      "types": [
        "proposal"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "One proposal refers to a suggested extended validation framework that facilitates the interaction between inference rules and SHACL shapes within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "One proposal",
          "local_types": [
            "proposal"
          ],
          "iri": "Entity-one_proposal-Mention-1"
        }
      ],
      "relevance": 0.57861328125
    },
    "Entity-small_complete_kg": {
      "node_id": "small_complete_kg",
      "disambiguation_index": 0,
      "label": "small complete KG",
      "aliases": [
        "small but complete and correct KG",
        "small complete KG"
      ],
      "types": [
        "knowledge graph",
        "KG"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A small complete KG refers to a synthetic knowledge graph that is rich and correct, specifically designed for evaluation experiments, containing a comprehensive set of facts about poker hands, with each hand represented by attributes and associated predicates.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-2-Sentence-5",
          "local_name": "small complete KG",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-small_complete_kg-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-8",
          "local_name": "small but complete and correct KG",
          "local_types": [
            "knowledge graph",
            "KG"
          ],
          "iri": "Entity-small_complete_kg-Mention-2"
        }
      ],
      "relevance": 0.57861328125
    },
    "Entity-the_proportion_of_target_predicate_for_which_at_least_one_iop_rule_wa_found": {
      "node_id": "the_proportion_of_target_predicate_for_which_at_least_one_iop_rule_wa_found",
      "disambiguation_index": 0,
      "label": "the proportion of target predicates for which at least one IOP rule was found",
      "aliases": [
        "the proportion of target predicates for which at least one IOP rule was found"
      ],
      "types": [
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The proportion of target predicates for which at least one IOP rule was found refers to the metric that quantifies the fraction of selected predicates in a knowledge graph that have at least one corresponding Inverse Open Path (IOP) rule identified, indicating the effectiveness of the rule-learning method in discovering applicable rules for those predicates.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "the proportion of target predicates for which at least one IOP rule was found",
          "local_types": [
            "metric"
          ],
          "iri": "Entity-the_proportion_of_target_predicate_for_which_at_least_one_iop_rule_wa_found-Mention-1"
        }
      ],
      "relevance": 0.57861328125
    },
    "Entity-poker": {
      "node_id": "poker",
      "disambiguation_index": 0,
      "label": "Poker",
      "aliases": [
        "Poker"
      ],
      "types": [
        "knowledge graph",
        "synthetic knowledge graph",
        "dataset",
        "game",
        "synthetic dataset",
        "synthetic",
        "benchmark"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Poker refers to a small synthetic knowledge graph created for evaluating the completeness of the SHACLEARNER algorithm, which models poker hands as entities with attributes representing card suits and ranks.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-3",
          "local_name": "Poker",
          "local_types": [
            "knowledge graph",
            "synthetic knowledge graph",
            "dataset",
            "game",
            "synthetic dataset",
            "synthetic",
            "benchmark"
          ],
          "iri": "Entity-poker-Mention-1"
        }
      ],
      "relevance": 0.578125
    },
    "Entity-embedding_representation_of_the_predicate": {
      "node_id": "embedding_representation_of_the_predicate",
      "disambiguation_index": 0,
      "label": "embedding representation of the predicates",
      "aliases": [
        "embedding representation of the predicates"
      ],
      "types": [
        "representation",
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'embedding representation of the predicates' refers to a mathematical representation that captures the semantic relationships and similarities between predicates in a knowledge graph, which is utilized to generate candidate Inverse Open Path (IOP) rules in the context of the algorithm described.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-1",
          "local_name": "embedding representation of the predicates",
          "local_types": [
            "representation",
            "predicate"
          ],
          "iri": "Entity-embedding_representation_of_the_predicate-Mention-1"
        }
      ],
      "relevance": 0.578125
    },
    "Entity-iopsupp__r1_": {
      "node_id": "iopsupp__r1_",
      "disambiguation_index": 0,
      "label": "IOPsupp(r1)",
      "aliases": [
        "IOPsupp(r1)",
        "IOPsupp(r2)"
      ],
      "types": [
        "function",
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "IOPsupp(r1) refers to the support count of the IOP rule r1, which is defined as the number of distinct entities in a knowledge graph that satisfy the conditions of the rule when a cardinality constraint of 1 is applied.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-2",
          "local_name": "IOPsupp(r1)",
          "local_types": [
            "function",
            "metric"
          ],
          "iri": "Entity-iopsupp__r1_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-4",
          "local_name": "IOPsupp(r2)",
          "local_types": [
            "function",
            "metric"
          ],
          "iri": "Entity-iopsupp__r1_-Mention-2"
        }
      ],
      "relevance": 0.578125
    },
    "Entity-definition_3": {
      "node_id": "definition_3",
      "disambiguation_index": 0,
      "label": "Definition 3",
      "aliases": [
        "Definition 3"
      ],
      "types": [
        "concept",
        "definition"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Definition 3 defines the concepts of open path support (OPsupp), open path standard confidence (OPSC), and open path head coverage (OPHC) in the context of open path rules for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-4-Sentence-1",
          "local_name": "Definition 3",
          "local_types": [
            "concept",
            "definition"
          ],
          "iri": "Entity-definition_3-Mention-1"
        }
      ],
      "relevance": 0.57763671875
    },
    "Entity-pt_": {
      "node_id": "pt_",
      "disambiguation_index": 0,
      "label": "Pt'",
      "aliases": [
        "Pt'"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical notation",
        "logical symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pt' is a mathematical notation representing the body of an inverse open path (IOP) rule in predicate logic, which is used to express relationships between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "Pt'",
          "local_types": [
            "predicate",
            "logical symbol"
          ],
          "iri": "Entity-pt_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "Pt'",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-pt_-Mention-2"
        }
      ],
      "relevance": 0.57763671875
    },
    "Entity-5": {
      "node_id": "5",
      "disambiguation_index": 0,
      "label": "5",
      "aliases": [
        "5"
      ],
      "types": [
        "number"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '5' refers to the number of entities that can instantiate the variable z0 to satisfy the head part of an inverse open path rule in the context of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "5",
          "local_types": [
            "number"
          ],
          "iri": "Entity-5-Mention-1"
        }
      ],
      "relevance": 0.57763671875
    },
    "Entity-stricter_lower_bound": {
      "node_id": "stricter_lower_bound",
      "disambiguation_index": 0,
      "label": "stricter lower bound",
      "aliases": [
        "stricter lower bound"
      ],
      "types": [
        "bound"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'stricter lower bound' refers to a higher cardinality requirement in the context of inverse open path (IOP) rules, which imposes a minimum number of instances of the head of the rule that must be satisfied in a knowledge base, thereby enhancing the rule's constraints.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "stricter lower bound",
          "local_types": [
            "bound"
          ],
          "iri": "Entity-stricter_lower_bound-Mention-1"
        }
      ],
      "relevance": 0.57763671875
    },
    "Entity-branch": {
      "node_id": "branch",
      "disambiguation_index": 0,
      "label": "branch",
      "aliases": [
        "branches",
        "a branch",
        "branch"
      ],
      "types": [
        "data structure",
        "branch",
        "component",
        "structure",
        "tree component",
        "tree structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of SHACL shapes, a 'branch' refers to a specific path or sequence of predicates within a tree structure that connects entities in a knowledge graph, where the cardinality of this path is indicated by annotations at the terminating node.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-4",
          "local_name": "branch",
          "local_types": [
            "data structure",
            "tree structure"
          ],
          "iri": "Entity-branch-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "branch",
          "local_types": [
            "tree component"
          ],
          "iri": "Entity-branch-Mention-2"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "branches",
          "local_types": [
            "component",
            "structure"
          ],
          "iri": "Entity-branch-Mention-3"
        },
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "branches",
          "local_types": [
            "structure",
            "data structure",
            "component"
          ],
          "iri": "Entity-branch-Mention-4"
        },
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "branches",
          "local_types": [
            "component",
            "structure"
          ],
          "iri": "Entity-branch-Mention-5"
        },
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "a branch",
          "local_types": [
            "branch"
          ],
          "iri": "Entity-branch-Mention-6"
        }
      ],
      "relevance": 0.5771484375
    },
    "Entity-shape_predicate": {
      "node_id": "shape_predicate",
      "disambiguation_index": 0,
      "label": "shape predicates",
      "aliases": [
        "shape predicates"
      ],
      "types": [
        "criteria",
        "attributes"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Shape predicates refer to the specific paths or branches within a tree structure that define constraints on the relationships between entities in a knowledge graph, allowing for the validation and interpretation of the graph's structure.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "shape predicates",
          "local_types": [
            "criteria",
            "attributes"
          ],
          "iri": "Entity-shape_predicate-Mention-1"
        }
      ],
      "relevance": 0.5771484375
    },
    "Entity-conjunctive_path": {
      "node_id": "conjunctive_path",
      "disambiguation_index": 0,
      "label": "conjunctive paths",
      "aliases": [
        "conjunctive paths"
      ],
      "types": [
        "logical construct",
        "graph theory",
        "path",
        "data structure",
        "mathematical structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Conjunctive paths refer to sequences of constraints over properties in knowledge graphs that are combined using logical conjunctions, allowing for the expression of complex relationships and conditions that entities must satisfy.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-2",
          "local_name": "conjunctive paths",
          "local_types": [
            "logical construct",
            "graph theory",
            "path",
            "data structure",
            "mathematical structure"
          ],
          "iri": "Entity-conjunctive_path-Mention-1"
        }
      ],
      "relevance": 0.5771484375
    },
    "Entity-head_branch": {
      "node_id": "head_branch",
      "disambiguation_index": 0,
      "label": "head branches",
      "aliases": [
        "head branches",
        "All head branches"
      ],
      "types": [
        "structure",
        "branch",
        "component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Head branches refer to the sequences of paths or predicates in a tree structure that connect the subject and object arguments in the context of SHACL shapes derived from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-6",
          "local_name": "head branches",
          "local_types": [
            "component",
            "structure"
          ],
          "iri": "Entity-head_branch-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-6",
          "local_name": "All head branches",
          "local_types": [
            "branch"
          ],
          "iri": "Entity-head_branch-Mention-2"
        }
      ],
      "relevance": 0.57666015625
    },
    "Entity-__e__there_exists_e__such_that_head_r__e__e____": {
      "node_id": "__e__there_exists_e__such_that_head_r__e__e____",
      "disambiguation_index": 0,
      "label": "|{ e : there exists e' such that head_r(e, e') }|",
      "aliases": [
        "|{ e : there exists e' such that head_r(e, e') }|"
      ],
      "types": [
        "set notation",
        "mathematical expression"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '|{ e : there exists e' such that head_r(e, e') }|' represents the set of entities e in a knowledge graph for which there exists at least one entity e' that satisfies the head of an inverse open path (IOP) rule, indicating the presence of valid paths defined by the rule in the graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-4-Sentence-8",
          "local_name": "|{ e : there exists e' such that head_r(e, e') }|",
          "local_types": [
            "set notation",
            "mathematical expression"
          ],
          "iri": "Entity-__e__there_exists_e__such_that_head_r__e__e____-Mention-1"
        }
      ],
      "relevance": 0.57666015625
    },
    "Entity-max_rule_cardinality_mcar": {
      "node_id": "max_rule_cardinality_mcar",
      "disambiguation_index": 0,
      "label": "max rule cardinality MCar",
      "aliases": [
        "max rule cardinality MCar"
      ],
      "types": [
        "parameter",
        "configuration",
        "cardinality"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "max rule cardinality MCar refers to a parameter that specifies the maximum allowable cardinality for inverse open path rules in the context of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-3",
          "local_name": "max rule cardinality MCar",
          "local_types": [
            "parameter",
            "configuration",
            "cardinality"
          ],
          "iri": "Entity-max_rule_cardinality_mcar-Mention-1"
        }
      ],
      "relevance": 0.576171875
    },
    "Entity-diverse": {
      "node_id": "diverse",
      "disambiguation_index": 0,
      "label": "diverse",
      "aliases": [
        "diverse"
      ],
      "types": [
        "variety descriptor"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'diverse' refers to the variety and range of structural features and qualities present in large knowledge graphs (KGs), indicating that they encompass a wide array of data types and relationships.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-2",
          "local_name": "diverse",
          "local_types": [
            "variety descriptor"
          ],
          "iri": "Entity-diverse-Mention-1"
        }
      ],
      "relevance": 0.57568359375
    },
    "Entity-car3": {
      "node_id": "car3",
      "disambiguation_index": 0,
      "label": "Car=3",
      "aliases": [
        "Car=3"
      ],
      "types": [
        "parameter",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Car=3 refers to a cardinality parameter used in the context of evaluating the number of distinct entities satisfying a specific rule in the SHACLearner algorithm.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-5",
          "local_name": "Car=3",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-car3-Mention-1"
        }
      ],
      "relevance": 0.57568359375
    },
    "Entity-their_method": {
      "node_id": "their_method",
      "disambiguation_index": 0,
      "label": "their method",
      "aliases": [
        "their method"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Their method refers to an unspecified approach for discovering patterns from massive knowledge graphs (KGs) that lacks scalability and logical foundations, making it unsuitable for comparison with the authors' proposed method.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "their method",
          "local_types": [
            "method"
          ],
          "iri": "Entity-their_method-Mention-1"
        }
      ],
      "relevance": 0.57568359375
    },
    "Entity-the_practical_meaning_of_the_iopsc_and_iophc_quality": {
      "node_id": "the_practical_meaning_of_the_iopsc_and_iophc_quality",
      "disambiguation_index": 0,
      "label": "the practical meaning of the IOPSC and IOPHC qualities",
      "aliases": [
        "the practical meaning of the IOPSC and IOPHC qualities"
      ],
      "types": [
        "concept",
        "quality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The practical meaning of the IOPSC and IOPHC qualities refers to the evaluation metrics that quantify the confidence and relevance of learned rules in knowledge graphs, where IOPSC measures the proportion of instances where a rule holds true, and IOPHC assesses the proportion of instances justified by the rule, thereby providing insights into the quality and applicability of the rules derived from the graph data.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-1",
          "local_name": "the practical meaning of the IOPSC and IOPHC qualities",
          "local_types": [
            "concept",
            "quality"
          ],
          "iri": "Entity-the_practical_meaning_of_the_iopsc_and_iophc_quality-Mention-1"
        }
      ],
      "relevance": 0.57568359375
    },
    "Entity-functional_graph_dependency__fgd_": {
      "node_id": "functional_graph_dependency__fgd_",
      "disambiguation_index": 0,
      "label": "Functional Graph Dependency (FGD)",
      "aliases": [
        "Functional Graph Dependency (FGD)",
        "Functional Graph Dependency"
      ],
      "types": [
        "dependency model",
        "graph theory",
        "constraint",
        "concept",
        "formalism",
        "dependency",
        "pattern"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Functional Graph Dependency (FGD) is a formalism used to define constraints on the types of entities in the domain and range of predicates, as well as the cardinality of relationships between entities in knowledge graphs, thereby ensuring the consistency of the graph.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "Functional Graph Dependency (FGD)",
          "local_types": [
            "dependency model",
            "graph theory",
            "constraint",
            "concept",
            "dependency"
          ],
          "iri": "Entity-functional_graph_dependency__fgd_-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "Functional Graph Dependency",
          "local_types": [
            "constraint",
            "pattern",
            "formalism"
          ],
          "iri": "Entity-functional_graph_dependency__fgd_-Mention-2"
        }
      ],
      "relevance": 0.5751953125
    },
    "Entity-the_number_of_instance_of_the_head_in_the_kb": {
      "node_id": "the_number_of_instance_of_the_head_in_the_kb",
      "disambiguation_index": 0,
      "label": "the number of instances of the head in the KB",
      "aliases": [
        "the number of instances of the head in the KB",
        "number of instances of the head in the KB"
      ],
      "types": [
        "head",
        "knowledge base",
        "instance"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The number of instances of the head in the KB refers to the count of distinct entity pairs that satisfy the head of an inverse open path (IOP) rule within a knowledge base (KB), indicating how many valid connections exist for the specified head predicate.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "the number of instances of the head in the KB",
          "local_types": [
            "instance",
            "head",
            "knowledge base"
          ],
          "iri": "Entity-the_number_of_instance_of_the_head_in_the_kb-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "number of instances of the head in the KB",
          "local_types": [
            "instance",
            "head",
            "knowledge base"
          ],
          "iri": "Entity-the_number_of_instance_of_the_head_in_the_kb-Mention-2"
        }
      ],
      "relevance": 0.5751953125
    },
    "Entity-relationship_between_the_logical_statement_of_the_rule_and_certain_property_in_the_embedding_space": {
      "node_id": "relationship_between_the_logical_statement_of_the_rule_and_certain_property_in_the_embedding_space",
      "disambiguation_index": 0,
      "label": "relationship between the logical statement of the rule and certain properties in the embedding space",
      "aliases": [
        "relationship between the logical statement of the rule and certain properties in the embedding space"
      ],
      "types": [
        "relationship",
        "properties"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity refers to the connection that exists between the formal logical representation of Inverse Open Path (IOP) rules and the characteristics of the embedding space used to represent predicates in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-2",
          "local_name": "relationship between the logical statement of the rule and certain properties in the embedding space",
          "local_types": [
            "relationship",
            "properties"
          ],
          "iri": "Entity-relationship_between_the_logical_statement_of_the_rule_and_certain_property_in_the_embedding_space-Mention-1"
        }
      ],
      "relevance": 0.5751953125
    },
    "Entity-pn_1": {
      "node_id": "pn_1",
      "disambiguation_index": 0,
      "label": "P'n_1",
      "aliases": [
        "P'n_1(z(n-1), y1)",
        "P'n_1"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P'n_1 refers to a predicate in the context of a tree structure used to represent relationships between entities in a knowledge graph, specifically as part of the formal definition of tree shapes in the SHACLearner algorithm.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'n_1",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-pn_1-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'n_1(z(n-1), y1)",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-pn_1-Mention-2"
        }
      ],
      "relevance": 0.5751953125
    },
    "Entity-other_predicate_related_to_the_target": {
      "node_id": "other_predicate_related_to_the_target",
      "disambiguation_index": 0,
      "label": "other predicates related to the target",
      "aliases": [
        "other predicates related to the target"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'other predicates related to the target' refers to additional properties or relationships in a knowledge graph that can be inferred or completed alongside the primary target predicate when using learned SHACL shapes for data entry and validation.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-1",
          "local_name": "other predicates related to the target",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-other_predicate_related_to_the_target-Mention-1"
        }
      ],
      "relevance": 0.5751953125
    },
    "Entity-the_path": {
      "node_id": "the_path",
      "disambiguation_index": 0,
      "label": "the path",
      "aliases": [
        "the path"
      ],
      "types": [
        "path",
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of this paper, 'the path' refers to a fundamental structure in knowledge graphs that serves as the basis for expressing shapes and constraints, allowing for the representation of relationships between entities and the formulation of more complex shapes through additional constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-2",
          "local_name": "the path",
          "local_types": [
            "path",
            "concept"
          ],
          "iri": "Entity-the_path-Mention-1"
        }
      ],
      "relevance": 0.5751953125
    },
    "Entity-cardinality_of_an_iop_rule": {
      "node_id": "cardinality_of_an_iop_rule",
      "disambiguation_index": 0,
      "label": "Cardinality of an IOP rule",
      "aliases": [
        "Cardinality of an IOP rule"
      ],
      "types": [
        "mathematical definition",
        "concept",
        "rule",
        "IOP rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The Cardinality of an IOP rule, denoted as Car, is a numerical annotation that specifies the minimum number of distinct head path instantiations that must be satisfied in a knowledge graph for each entity linked to the body of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-8-Sentence-1",
          "local_name": "Cardinality of an IOP rule",
          "local_types": [
            "mathematical definition",
            "concept",
            "rule",
            "IOP rule"
          ],
          "iri": "Entity-cardinality_of_an_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.57470703125
    },
    "Entity-the_tree": {
      "node_id": "the_tree",
      "disambiguation_index": 0,
      "label": "the tree",
      "aliases": [
        "the tree"
      ],
      "types": [
        "tree",
        "structure",
        "data structure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The tree refers to a structured representation of relationships between entities in a knowledge graph, defined by a set of paths and predicates that illustrate how entities are interconnected, used for deriving SHACL shapes in the context of knowledge graph validation and completion.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-3",
          "local_name": "the tree",
          "local_types": [
            "structure",
            "tree"
          ],
          "iri": "Entity-the_tree-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-4",
          "local_name": "the tree",
          "local_types": [
            "data structure"
          ],
          "iri": "Entity-the_tree-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "the tree",
          "local_types": [
            "structure"
          ],
          "iri": "Entity-the_tree-Mention-3"
        }
      ],
      "relevance": 0.57470703125
    },
    "Entity-pathfinding__": {
      "node_id": "pathfinding__",
      "disambiguation_index": 0,
      "label": "PathFinding()",
      "aliases": [
        "PathFinding()"
      ],
      "types": [
        "function",
        "algorithm"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "PathFinding() is a function that generates candidate Inverse Open Path (IOP) rules by utilizing the embedding representations of the predicates associated with each rule.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-1",
          "local_name": "PathFinding()",
          "local_types": [
            "function",
            "algorithm"
          ],
          "iri": "Entity-pathfinding__-Mention-1"
        }
      ],
      "relevance": 0.57421875
    },
    "Entity-cardinality_annotation": {
      "node_id": "cardinality_annotation",
      "disambiguation_index": 0,
      "label": "Cardinality annotations",
      "aliases": [
        "cardinality annotation",
        "Cardinality annotations",
        "the cardinality annotation"
      ],
      "types": [
        "annotation",
        "constraint",
        "mathematical concept",
        "data specification",
        "notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Cardinality annotations refer to the specifications that indicate the minimum and maximum number of instances required for a particular relationship in knowledge graphs, serving as constraints in the context of SHACL rules.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-2",
          "local_name": "Cardinality annotations",
          "local_types": [
            "annotation",
            "constraint",
            "data specification"
          ],
          "iri": "Entity-cardinality_annotation-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "cardinality annotation",
          "local_types": [
            "mathematical concept",
            "notation"
          ],
          "iri": "Entity-cardinality_annotation-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "the cardinality annotation",
          "local_types": [
            "annotation"
          ],
          "iri": "Entity-cardinality_annotation-Mention-3"
        }
      ],
      "relevance": 0.57421875
    },
    "Entity-maximum_number_of_predicate_of_the_rule": {
      "node_id": "maximum_number_of_predicate_of_the_rule",
      "disambiguation_index": 0,
      "label": "maximum number of predicates of the rules",
      "aliases": [
        "the maximum number of predicates of the rules",
        "maximum number of predicates of the rules"
      ],
      "types": [
        "parameter",
        "concept",
        "rules",
        "predicates"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The maximum number of predicates of the rules refers to the upper limit on the number of distinct predicates that can be included in the IOP rules, which affects the complexity and search space of potential rules in the context of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-3",
          "local_name": "maximum number of predicates of the rules",
          "local_types": [
            "parameter",
            "predicates",
            "rules"
          ],
          "iri": "Entity-maximum_number_of_predicate_of_the_rule-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-3",
          "local_name": "the maximum number of predicates of the rules",
          "local_types": [
            "concept",
            "predicates",
            "rules"
          ],
          "iri": "Entity-maximum_number_of_predicate_of_the_rule-Mention-2"
        }
      ],
      "relevance": 0.57421875
    },
    "Entity-p1__e__e1___p2__e1__e2___...__pt__e__q-1____eq_": {
      "node_id": "p1__e__e1___p2__e1__e2___...__pt__e__q-1____eq_",
      "disambiguation_index": 0,
      "label": "P1(e, e1), P2(e1, e2), ..., Pt(e(q-1)', eq)",
      "aliases": [
        "P1(e, e1), P2(e1, e2), ..., Pt(e(q-1)', eq)"
      ],
      "types": [
        "fact",
        "relation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'P1(e, e1), P2(e1, e2), ..., Pt(e(q-1)', eq)' refers to a sequence of predicate relationships in a knowledge graph that collectively define the head of a tree structure in SHACL shapes, where each predicate represents a fact connecting pairs of entities, thereby forming a path that can be used to validate or infer additional knowledge within the graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "P1(e, e1), P2(e1, e2), ..., Pt(e(q-1)', eq)",
          "local_types": [
            "fact",
            "relation"
          ],
          "iri": "Entity-p1__e__e1___p2__e1__e2___...__pt__e__q-1____eq_-Mention-1"
        }
      ],
      "relevance": 0.57421875
    },
    "Entity-the_number_of_target_predicate": {
      "node_id": "the_number_of_target_predicate",
      "disambiguation_index": 0,
      "label": "the number of target predicates",
      "aliases": [
        "the number of target predicates"
      ],
      "types": [
        "count",
        "predicate",
        "quantity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The number of target predicates refers to the specific count of predicates in a knowledge graph for which at least one Inverse Open Path (IOP) rule has been discovered, thereby determining the quantity of distinct tree structures that can be formed based on these rules.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-1-Sentence-3",
          "local_name": "the number of target predicates",
          "local_types": [
            "count",
            "predicate",
            "quantity"
          ],
          "iri": "Entity-the_number_of_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.57421875
    },
    "Entity-fast_matrix_and_vector_operation": {
      "node_id": "fast_matrix_and_vector_operation",
      "disambiguation_index": 0,
      "label": "fast matrix and vector operations",
      "aliases": [
        "fast matrix and vector operations"
      ],
      "types": [
        "operation",
        "vector operation",
        "matrix operation"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Fast matrix and vector operations refer to computational techniques that optimize the performance of mathematical operations involving matrices and vectors, enabling efficient evaluation of quality measures in the context of learning SHACL shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "fast matrix and vector operations",
          "local_types": [
            "operation",
            "vector operation",
            "matrix operation"
          ],
          "iri": "Entity-fast_matrix_and_vector_operation-Mention-1"
        }
      ],
      "relevance": 0.57421875
    },
    "Entity-dealing_with_uncertainty_in_the_constraint_and_the_learning_process": {
      "node_id": "dealing_with_uncertainty_in_the_constraint_and_the_learning_process",
      "disambiguation_index": 0,
      "label": "dealing with uncertainty in the constraints and the learning process",
      "aliases": [
        "dealing with uncertainty in the constraints and the learning process"
      ],
      "types": [
        "challenge",
        "uncertainty",
        "constraints",
        "learning process"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Dealing with uncertainty in the constraints and the learning process refers to the challenges and complexities involved in designing effective learning algorithms that can accurately identify and validate shape constraints from knowledge graphs, while managing the inherent uncertainties in the data and the learning outcomes.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-3",
          "local_name": "dealing with uncertainty in the constraints and the learning process",
          "local_types": [
            "challenge",
            "uncertainty",
            "constraints",
            "learning process"
          ],
          "iri": "Entity-dealing_with_uncertainty_in_the_constraint_and_the_learning_process-Mention-1"
        }
      ],
      "relevance": 0.57421875
    },
    "Entity-mined_rule": {
      "node_id": "mined_rule",
      "disambiguation_index": 0,
      "label": "mined rules",
      "aliases": [
        "mined rules"
      ],
      "types": [
        "algorithm output",
        "knowledge representation",
        "rule set",
        "data structure",
        "rule-based system",
        "rule",
        "data extraction",
        "data mining",
        "rule extraction"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Mined rules refer to the extracted patterns or constraints from knowledge graphs that can be utilized as foundational elements for constructing more complex structures, such as trees, in the context of shape learning and knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-5",
          "local_name": "mined rules",
          "local_types": [
            "rule",
            "data mining",
            "rule extraction"
          ],
          "iri": "Entity-mined_rule-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-4",
          "local_name": "mined rules",
          "local_types": [
            "data extraction",
            "rule",
            "knowledge representation"
          ],
          "iri": "Entity-mined_rule-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-1",
          "local_name": "mined rules",
          "local_types": [
            "data mining",
            "rule-based system"
          ],
          "iri": "Entity-mined_rule-Mention-3"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-1",
          "local_name": "mined rules",
          "local_types": [
            "data structure",
            "knowledge representation"
          ],
          "iri": "Entity-mined_rule-Mention-4"
        },
        {
          "reference": "Section-15-Paragraph-7-Sentence-1",
          "local_name": "mined rules",
          "local_types": [
            "rule set",
            "data mining",
            "rule-based system",
            "data structure"
          ],
          "iri": "Entity-mined_rule-Mention-5"
        },
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "mined rules",
          "local_types": [
            "algorithm output",
            "data structure"
          ],
          "iri": "Entity-mined_rule-Mention-6"
        }
      ],
      "relevance": 0.57373046875
    },
    "Entity-initial_iop_mining_time": {
      "node_id": "initial_iop_mining_time",
      "disambiguation_index": 0,
      "label": "initial IOP mining time",
      "aliases": [
        "initial IOP mining time",
        "the initial IOP mining time"
      ],
      "types": [
        "time",
        "IOP mining time",
        "IOP mining",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The initial IOP mining time refers to the duration required to discover and extract Inverse Open Path (IOP) rules from knowledge graphs before any aggregation into tree structures.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "initial IOP mining time",
          "local_types": [
            "time",
            "IOP mining"
          ],
          "iri": "Entity-initial_iop_mining_time-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "the initial IOP mining time",
          "local_types": [
            "metric",
            "IOP mining time"
          ],
          "iri": "Entity-initial_iop_mining_time-Mention-2"
        }
      ],
      "relevance": 0.57373046875
    },
    "Entity-fact_f": {
      "node_id": "fact_f",
      "disambiguation_index": 0,
      "label": "facts F",
      "aliases": [
        "facts F"
      ],
      "types": [
        "set",
        "fact set",
        "data structure",
        "fact",
        "data element"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'facts F' refers to the collection of factual statements or data entries associated with the entities in a knowledge graph (KG), which are utilized in the context of sampling and learning rules for shape constraints.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "facts F",
          "local_types": [
            "set",
            "fact set",
            "data structure",
            "fact",
            "data element"
          ],
          "iri": "Entity-fact_f-Mention-1"
        }
      ],
      "relevance": 0.5732421875
    },
    "Entity-sh__property_declaration": {
      "node_id": "sh__property_declaration",
      "disambiguation_index": 0,
      "label": "sh:property declaration",
      "aliases": [
        "sh:property declaration"
      ],
      "types": [
        "declaration",
        "property"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term 'sh:property declaration' refers to a component in the Shapes Constraint Language (SHACL) that specifies the properties of a shape, including the paths that connect nodes in a knowledge graph and their cardinality constraints.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-3",
          "local_name": "sh:property declaration",
          "local_types": [
            "declaration",
            "property"
          ],
          "iri": "Entity-sh__property_declaration-Mention-1"
        }
      ],
      "relevance": 0.5732421875
    },
    "Entity-body_target_predicate": {
      "node_id": "body_target_predicate",
      "disambiguation_index": 0,
      "label": "body target predicate",
      "aliases": [
        "body target predicate"
      ],
      "types": [
        "predicate",
        "logical construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'body target predicate' refers to a specific predicate Pt used in the context of learning Inverse Open Path (IOP) rules from knowledge graphs, which is essential for sampling related entities and facts for rule generation.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "body target predicate",
          "local_types": [
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-body_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.57275390625
    },
    "Entity-p2_t": {
      "node_id": "p2_t",
      "disambiguation_index": 0,
      "label": "P2_t",
      "aliases": [
        "P2_t",
        "P2_1"
      ],
      "types": [
        "parameter",
        "predicate",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P2_t is a variable representing a specific predicate in the context of Inverse Open Path rules, which connects entities in a knowledge graph through a defined relationship.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-3-Sentence-2",
          "local_name": "P2_t",
          "local_types": [
            "parameter",
            "predicate",
            "variable"
          ],
          "iri": "Entity-p2_t-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-3-Sentence-2",
          "local_name": "P2_1",
          "local_types": [
            "parameter",
            "predicate",
            "variable"
          ],
          "iri": "Entity-p2_t-Mention-2"
        }
      ],
      "relevance": 0.57275390625
    },
    "Entity-performance": {
      "node_id": "performance",
      "disambiguation_index": 0,
      "label": "performance",
      "aliases": [
        "performance"
      ],
      "types": [
        "evaluation metric",
        "evaluation",
        "comparison measure",
        "quality measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'performance' in this context refers to the effectiveness and capability of the SHACLEARNER system in successfully handling the task of learning shapes from massive knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-4",
          "local_name": "performance",
          "local_types": [
            "evaluation metric",
            "evaluation"
          ],
          "iri": "Entity-performance-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-4",
          "local_name": "performance",
          "local_types": [
            "evaluation metric",
            "quality measure"
          ],
          "iri": "Entity-performance-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "performance",
          "local_types": [
            "evaluation metric",
            "comparison measure"
          ],
          "iri": "Entity-performance-Mention-3"
        }
      ],
      "relevance": 0.57275390625
    },
    "Entity-rule_of_lower_quality": {
      "node_id": "rule_of_lower_quality",
      "disambiguation_index": 0,
      "label": "rules of lower quality",
      "aliases": [
        "rules of lower quality"
      ],
      "types": [
        "rule",
        "quality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'rules of lower quality' refers to the IOP rules that exhibit lower confidence and generality in the context of the SHACLEARNER system, which are less likely to be discovered due to the pruning methods employed during the rule learning process.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-5-Sentence-2",
          "local_name": "rules of lower quality",
          "local_types": [
            "rule",
            "quality"
          ],
          "iri": "Entity-rule_of_lower_quality-Mention-1"
        }
      ],
      "relevance": 0.57275390625
    },
    "Entity-mapreduce_implementation": {
      "node_id": "mapreduce_implementation",
      "disambiguation_index": 0,
      "label": "MapReduce implementation",
      "aliases": [
        "MapReduce implementation"
      ],
      "types": [
        "implementation",
        "framework"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "MapReduce implementation refers to the adaptation of the SHACLEARNER algorithm to utilize the MapReduce programming model, enabling efficient processing and analysis of extremely large knowledge graphs containing billions of facts.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-5-Sentence-2",
          "local_name": "MapReduce implementation",
          "local_types": [
            "implementation",
            "framework"
          ],
          "iri": "Entity-mapreduce_implementation-Mention-1"
        }
      ],
      "relevance": 0.57275390625
    },
    "Entity-p2_2_(1)": {
      "node_id": "p2_2_(1)",
      "disambiguation_index": 1,
      "label": "P'2_2",
      "aliases": [
        "P'm_2",
        "P'2_2"
      ],
      "types": [
        "function",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P'2_2 refers to a specific predicate in the general form of a tree structure used in the SHACLearner algorithm, representing a relationship between two entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'2_2",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-p2_2_(1)-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'm_2",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-p2_2_(1)-Mention-2"
        }
      ],
      "relevance": 0.572265625
    },
    "Entity-50": {
      "node_id": "50",
      "disambiguation_index": 0,
      "label": "50",
      "aliases": [
        "50"
      ],
      "types": [
        "number",
        "quantity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '50' refers to the number of target predicates randomly selected from Wikidata and DBpedia for the evaluation of the SHACLEARNER method in the context of learning SHACL shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-3",
          "local_name": "50",
          "local_types": [
            "number",
            "quantity"
          ],
          "iri": "Entity-50-Mention-1"
        }
      ],
      "relevance": 0.572265625
    },
    "Entity-major_approach_to_rule_learning": {
      "node_id": "major_approach_to_rule_learning",
      "disambiguation_index": 0,
      "label": "major approaches to rule learning",
      "aliases": [
        "major approaches to rule learning"
      ],
      "types": [
        "approach",
        "rule learning"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Major approaches to rule learning refer to the various methodologies and techniques employed in the field of knowledge graph rule learning that utilize specific measures, such as support, head coverage, and standard confidence, to evaluate and compare the quality and generalization capabilities of rules derived from data.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-6-Sentence-2",
          "local_name": "major approaches to rule learning",
          "local_types": [
            "approach",
            "rule learning"
          ],
          "iri": "Entity-major_approach_to_rule_learning-Mention-1"
        }
      ],
      "relevance": 0.572265625
    },
    "Entity-the_specific_body_target_predicate__pt": {
      "node_id": "the_specific_body_target_predicate__pt",
      "disambiguation_index": 0,
      "label": "the specific body target predicate, Pt",
      "aliases": [
        "the specific body target predicate, Pt"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The specific body target predicate, Pt, refers to a particular predicate in a knowledge graph that is used as a focal point for sampling related entities and facts in order to learn Inverse Open Path (IOP) rules for shape extraction.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "the specific body target predicate, Pt",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-the_specific_body_target_predicate__pt-Mention-1"
        }
      ],
      "relevance": 0.572265625
    },
    "Entity-r": {
      "node_id": "r",
      "disambiguation_index": 0,
      "label": "r",
      "aliases": [
        "R",
        "r"
      ],
      "types": [
        "set of real numbers",
        "mathematical object",
        "entity",
        "predicate",
        "relation",
        "variable",
        "data structure",
        "parameter",
        "tree",
        "software",
        "rule",
        "mathematical set",
        "mathematical symbol",
        "mathematical notation",
        "programming language"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'r' refers to a closed path (CP) rule in the form of a logical expression used in knowledge graph rule learning systems to infer relationships between entities.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-2",
          "local_name": "r",
          "local_types": [
            "mathematical symbol",
            "variable"
          ],
          "iri": "Entity-r-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-4",
          "local_name": "r",
          "local_types": [
            "relation",
            "predicate"
          ],
          "iri": "Entity-r-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "r",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-r-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-2",
          "local_name": "r",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-r-Mention-4"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-2",
          "local_name": "r",
          "local_types": [
            "mathematical object",
            "rule",
            "mathematical notation",
            "variable"
          ],
          "iri": "Entity-r-Mention-5"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-4",
          "local_name": "r",
          "local_types": [
            "relation",
            "variable"
          ],
          "iri": "Entity-r-Mention-6"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-1",
          "local_name": "r",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-r-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-2",
          "local_name": "r",
          "local_types": [
            "mathematical symbol",
            "variable"
          ],
          "iri": "Entity-r-Mention-8"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-5",
          "local_name": "r",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-r-Mention-9"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "r",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-r-Mention-10"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-11",
          "local_name": "R",
          "local_types": [
            "mathematical symbol",
            "variable"
          ],
          "iri": "Entity-r-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-12",
          "local_name": "R",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-r-Mention-12"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-13",
          "local_name": "R",
          "local_types": [
            "software",
            "programming language"
          ],
          "iri": "Entity-r-Mention-13"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "R",
          "local_types": [
            "mathematical set",
            "set of real numbers",
            "mathematical object"
          ],
          "iri": "Entity-r-Mention-14"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "r",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-r-Mention-15"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-2",
          "local_name": "r",
          "local_types": [
            "tree",
            "mathematical object",
            "variable",
            "data structure"
          ],
          "iri": "Entity-r-Mention-16"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-5",
          "local_name": "r",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-r-Mention-17"
        }
      ],
      "relevance": 0.57177734375
    },
    "Entity-the_experiment": {
      "node_id": "the_experiment",
      "disambiguation_index": 0,
      "label": "the experiments",
      "aliases": [
        "Our experiments",
        "the experiments"
      ],
      "types": [
        "experiment"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The experiments refer to the evaluations conducted to assess the effectiveness of the SHACLEARNER method in learning informative and intuitive shapes from large knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-2",
          "local_name": "the experiments",
          "local_types": [
            "experiment"
          ],
          "iri": "Entity-the_experiment-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "Our experiments",
          "local_types": [
            "experiment"
          ],
          "iri": "Entity-the_experiment-Mention-2"
        }
      ],
      "relevance": 0.57177734375
    },
    "Entity-the_least_constrained_shape": {
      "node_id": "the_least_constrained_shape",
      "disambiguation_index": 0,
      "label": "the least constrained shape",
      "aliases": [
        "the least constrained shape"
      ],
      "types": [
        "concept",
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The least constrained shape refers to the fundamental path structure in knowledge graphs that serves as a necessary condition for satisfying more complex shapes, allowing for the expression of basic relationships between entities without additional constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-1",
          "local_name": "the least constrained shape",
          "local_types": [
            "concept",
            "shape"
          ],
          "iri": "Entity-the_least_constrained_shape-Mention-1"
        }
      ],
      "relevance": 0.57177734375
    },
    "Entity-it_component": {
      "node_id": "it_component",
      "disambiguation_index": 0,
      "label": "its components",
      "aliases": [
        "its components"
      ],
      "types": [
        "components"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'its components' refers to the individual predicates Pt, P1, and P2 that together form the composite predicate P*(x, t) in the context of the Inverse Open Path (IOP) rules used for knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "its components",
          "local_types": [
            "components"
          ],
          "iri": "Entity-it_component-Mention-1"
        }
      ],
      "relevance": 0.57177734375
    },
    "Entity-fact_in_the_kg": {
      "node_id": "fact_in_the_kg",
      "disambiguation_index": 0,
      "label": "facts in the KG",
      "aliases": [
        "facts in the KG"
      ],
      "types": [
        "fact",
        "data",
        "knowledge graph",
        "knowledge representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Facts in the KG refer to the individual pieces of information or assertions represented within a knowledge graph, which describe relationships and properties of entities.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "facts in the KG",
          "local_types": [
            "data",
            "knowledge representation"
          ],
          "iri": "Entity-fact_in_the_kg-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "facts in the KG",
          "local_types": [
            "fact",
            "knowledge graph"
          ],
          "iri": "Entity-fact_in_the_kg-Mention-2"
        }
      ],
      "relevance": 0.5712890625
    },
    "Entity-the_sampled_kg_is_far_smaller_than_the_original_kg": {
      "node_id": "the_sampled_kg_is_far_smaller_than_the_original_kg",
      "disambiguation_index": 0,
      "label": "the sampled KG is far smaller than the original KG",
      "aliases": [
        "the sampled KG is far smaller than the original KG"
      ],
      "types": [
        "comparison",
        "knowledge graph"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A knowledge graph that has been reduced in size for analysis or processing, resulting in fewer entities and relationships compared to the original knowledge graph.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-5",
          "local_name": "the sampled KG is far smaller than the original KG",
          "local_types": [
            "comparison",
            "knowledge graph"
          ],
          "iri": "Entity-the_sampled_kg_is_far_smaller_than_the_original_kg-Mention-1"
        }
      ],
      "relevance": 0.57080078125
    },
    "Entity-p1_t": {
      "node_id": "p1_t",
      "disambiguation_index": 0,
      "label": "P1_t",
      "aliases": [
        "P1_t"
      ],
      "types": [
        "parameter",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P1_t is a variable representing a predicate in the context of Inverse Open Path rules, used to connect entities in a knowledge graph through a composite predicate structure.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-4",
          "local_name": "P1_t",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-p1_t-Mention-1"
        }
      ],
      "relevance": 0.57080078125
    },
    "Entity-such_constraint": {
      "node_id": "such_constraint",
      "disambiguation_index": 0,
      "label": "such constraints",
      "aliases": [
        "such constraints"
      ],
      "types": [
        "constraint"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'such constraints' refers to the schema constraints that are typically absent, uncertain, or frequently violated in knowledge graphs, which are intended to guide the population and maintenance of the graph data.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-5",
          "local_name": "such constraints",
          "local_types": [
            "constraint"
          ],
          "iri": "Entity-such_constraint-Mention-1"
        }
      ],
      "relevance": 0.57080078125
    },
    "Entity-inefficient_yet_complete": {
      "node_id": "inefficient_yet_complete",
      "disambiguation_index": 0,
      "label": "inefficient yet complete",
      "aliases": [
        "inefficient yet complete"
      ],
      "types": [
        "property",
        "characteristic"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'inefficient yet complete' refers to the ideal IOP rule learner variant of SHACLEARNER that generates and evaluates all possible rules without employing any sampling or heuristic pruning, thus ensuring comprehensive rule discovery at the cost of computational efficiency.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-2",
          "local_name": "inefficient yet complete",
          "local_types": [
            "property",
            "characteristic"
          ],
          "iri": "Entity-inefficient_yet_complete-Mention-1"
        }
      ],
      "relevance": 0.57080078125
    },
    "Entity-challenge": {
      "node_id": "challenge",
      "disambiguation_index": 0,
      "label": "challenge",
      "aliases": [
        "challenge"
      ],
      "types": [
        "problem",
        "obstacle"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'challenge' refers to the difficulty of designing an efficient learning method for SHACL shapes that effectively manages uncertainty in constraints and the learning process.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-3",
          "local_name": "challenge",
          "local_types": [
            "problem",
            "obstacle"
          ],
          "iri": "Entity-challenge-Mention-1"
        }
      ],
      "relevance": 0.5703125
    },
    "Entity-external_modelling_artefact": {
      "node_id": "external_modelling_artefact",
      "disambiguation_index": 0,
      "label": "external modelling artefacts",
      "aliases": [
        "external modelling artefacts"
      ],
      "types": [
        "modelling artefact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "External modelling artefacts refer to external resources or frameworks, such as ontologies or predefined patterns, that are used to assist in the creation or validation of SHACL shapes for knowledge graphs, which the authors of the paper choose to avoid in favor of deriving shapes directly from the knowledge graph itself.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-3",
          "local_name": "external modelling artefacts",
          "local_types": [
            "modelling artefact"
          ],
          "iri": "Entity-external_modelling_artefact-Mention-1"
        }
      ],
      "relevance": 0.5703125
    },
    "Entity-length_and_cardinality": {
      "node_id": "length_and_cardinality",
      "disambiguation_index": 0,
      "label": "length and cardinality",
      "aliases": [
        "length and cardinality"
      ],
      "types": [
        "length",
        "cardinality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'length and cardinality' refers to the characteristics of shapes discovered by the SHACLEARNER system, indicating the number of elements (length) and the number of distinct entities or instances (cardinality) that define the complexity and diversity of the shapes extracted from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-2-Sentence-4",
          "local_name": "length and cardinality",
          "local_types": [
            "length",
            "cardinality"
          ],
          "iri": "Entity-length_and_cardinality-Mention-1"
        }
      ],
      "relevance": 0.5703125
    },
    "Entity-opsc__r_": {
      "node_id": "opsc__r_",
      "disambiguation_index": 0,
      "label": "OPSC(r)",
      "aliases": [
        "OPSC(r)"
      ],
      "types": [
        "function",
        "mathematical expression",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "OPSC(r) refers to the open path standard confidence of an open path rule r, which is a measure of the ratio of the open path support of r to the number of entities satisfying the body of r in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-5-Sentence-3",
          "local_name": "OPSC(r)",
          "local_types": [
            "function",
            "mathematical expression",
            "mathematical notation"
          ],
          "iri": "Entity-opsc__r_-Mention-1"
        }
      ],
      "relevance": 0.56982421875
    },
    "Entity-ophc__r_": {
      "node_id": "ophc__r_",
      "disambiguation_index": 0,
      "label": "OPHC(r)",
      "aliases": [
        "OPHC(r)"
      ],
      "types": [
        "function",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "OPHC(r) refers to the open path head coverage of an open path rule r, which is a measure of the ratio of the open path support of r to the number of entities that satisfy the head of r in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-5-Sentence-4",
          "local_name": "OPHC(r)",
          "local_types": [
            "function",
            "mathematical expression"
          ],
          "iri": "Entity-ophc__r_-Mention-1"
        }
      ],
      "relevance": 0.56982421875
    },
    "Entity-a__p1___a__p2___...__a__pm_": {
      "node_id": "a__p1___a__p2___...__a__pm_",
      "disambiguation_index": 0,
      "label": "A(P1)*A(P2)*...*A(Pm)",
      "aliases": [
        "A(P1)*A(P2)*...*A(Pm)"
      ],
      "types": [
        "matrix expression",
        "mathematical expression",
        "mathematical notation",
        "function composition"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The expression A(P1)*A(P2)*...*A(Pm) represents the matrix product of the adjacency matrices corresponding to the predicates P1 through Pm in a knowledge graph, which is used to identify entities satisfying specific path conditions in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-2",
          "local_name": "A(P1)*A(P2)*...*A(Pm)",
          "local_types": [
            "matrix expression",
            "mathematical notation"
          ],
          "iri": "Entity-a__p1___a__p2___...__a__pm_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-3",
          "local_name": "A(P1)*A(P2)*...*A(Pm)",
          "local_types": [
            "mathematical expression",
            "function composition"
          ],
          "iri": "Entity-a__p1___a__p2___...__a__pm_-Mention-2"
        }
      ],
      "relevance": 0.56982421875
    },
    "Entity-left-hand_chart": {
      "node_id": "left-hand_chart",
      "disambiguation_index": 0,
      "label": "left-hand chart",
      "aliases": [
        "left-hand chart",
        "the left-hand chart"
      ],
      "types": [
        "data visualization",
        "visual representation",
        "chart"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The left-hand chart is a visual representation that illustrates the relationship between the proportion of quality rules and the Inverse Open Path Standard Confidence (IOPSC), showing a consistent decrease in quality as IOPSC increases.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-2",
          "local_name": "left-hand chart",
          "local_types": [
            "visual representation",
            "data visualization"
          ],
          "iri": "Entity-left-hand_chart-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-2",
          "local_name": "the left-hand chart",
          "local_types": [
            "chart"
          ],
          "iri": "Entity-left-hand_chart-Mention-2"
        }
      ],
      "relevance": 0.56982421875
    },
    "Entity-the_system_without_sampling__but_with_the_heuristic_rule_learning_module": {
      "node_id": "the_system_without_sampling__but_with_the_heuristic_rule_learning_module",
      "disambiguation_index": 0,
      "label": "the system without sampling, but with the heuristic rule learning module",
      "aliases": [
        "the system without sampling, but with the heuristic rule learning module"
      ],
      "types": [
        "system",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The system without sampling, but with the heuristic rule learning module refers to a variant of the SHACLEARNER algorithm that utilizes heuristic pruning techniques while processing the complete knowledge graph, as opposed to sampling, to learn IOP rules.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "the system without sampling, but with the heuristic rule learning module",
          "local_types": [
            "system",
            "algorithm"
          ],
          "iri": "Entity-the_system_without_sampling__but_with_the_heuristic_rule_learning_module-Mention-1"
        }
      ],
      "relevance": 0.56982421875
    },
    "Entity-section_4": {
      "node_id": "section_4",
      "disambiguation_index": 0,
      "label": "Section 4",
      "aliases": [
        "Section 4"
      ],
      "types": [
        "document part",
        "section",
        "part of paper"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Section 4 refers to the part of the paper where the authors discuss related work in the context of their research on learning SHACL shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-2",
          "local_name": "Section 4",
          "local_types": [
            "document part",
            "section",
            "part of paper"
          ],
          "iri": "Entity-section_4-Mention-1"
        }
      ],
      "relevance": 0.5693359375
    },
    "Entity-p___x__t_": {
      "node_id": "p___x__t_",
      "disambiguation_index": 0,
      "label": "P*(x, t)",
      "aliases": [
        "P*(x, t)"
      ],
      "types": [
        "predicate",
        "mathematical function",
        "mathematical expression",
        "probability function",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P*(x, t) is a composite predicate that represents a path connecting entities through a sequence of predicates Pt, P1, and P2, forming a logical expression used in the context of Inverse Open Path rules in knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-1",
          "local_name": "P*(x, t)",
          "local_types": [
            "predicate",
            "mathematical expression",
            "mathematical notation"
          ],
          "iri": "Entity-p___x__t_-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-3",
          "local_name": "P*(x, t)",
          "local_types": [
            "mathematical function",
            "probability function"
          ],
          "iri": "Entity-p___x__t_-Mention-2"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "P*(x, t)",
          "local_types": [
            "mathematical expression"
          ],
          "iri": "Entity-p___x__t_-Mention-3"
        }
      ],
      "relevance": 0.5693359375
    },
    "Entity-semantics_of_the_shacl_language": {
      "node_id": "semantics_of_the_shacl_language",
      "disambiguation_index": 0,
      "label": "semantics of the SHACL language",
      "aliases": [
        "SHACL semantics",
        "semantics of the SHACL language"
      ],
      "types": [
        "language specification",
        "semantics",
        "SHACL",
        "concept",
        "theory",
        "language"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The semantics of the SHACL language refers to the formal interpretation and meaning of the Shapes Constraint Language (SHACL), which is used to describe and validate the structure of RDF graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-1",
          "local_name": "semantics of the SHACL language",
          "local_types": [
            "theory",
            "language specification",
            "semantics",
            "language"
          ],
          "iri": "Entity-semantics_of_the_shacl_language-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-2",
          "local_name": "SHACL semantics",
          "local_types": [
            "semantics",
            "SHACL",
            "concept"
          ],
          "iri": "Entity-semantics_of_the_shacl_language-Mention-2"
        }
      ],
      "relevance": 0.5693359375
    },
    "Entity-nested_sh__path_declaration": {
      "node_id": "nested_sh__path_declaration",
      "disambiguation_index": 0,
      "label": "nested sh:path declarations",
      "aliases": [
        "nested sh:path declarations"
      ],
      "types": [
        "declaration",
        "path"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Nested sh:path declarations refer to a structured representation of paths within a SHACL property declaration, where multiple paths are organized hierarchically to define constraints on the relationships between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-3",
          "local_name": "nested sh:path declarations",
          "local_types": [
            "declaration",
            "path"
          ],
          "iri": "Entity-nested_sh__path_declaration-Mention-1"
        }
      ],
      "relevance": 0.5693359375
    },
    "Entity-e9": {
      "node_id": "e9",
      "disambiguation_index": 0,
      "label": "e9",
      "aliases": [
        "e9"
      ],
      "types": [
        "entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'e9' refers to a specific entity in a knowledge graph that can instantiate the variable z0 in the body part of an inverse open path (IOP) rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "e9",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e9-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-t": {
      "node_id": "t",
      "disambiguation_index": 0,
      "label": "t",
      "aliases": [
        "t"
      ],
      "types": [
        "variable",
        "mathematical symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention 't' refers to a variable used in the composite predicate representation of Inverse Open Path (IOP) rules, specifically in the context of connecting entities through a series of predicates in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "t",
          "local_types": [
            "variable",
            "mathematical symbol"
          ],
          "iri": "Entity-t-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-cardinality_expression": {
      "node_id": "cardinality_expression",
      "disambiguation_index": 0,
      "label": "cardinality expressions",
      "aliases": [
        "cardinality expressions"
      ],
      "types": [
        "mathematical concept",
        "concept",
        "expression",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Cardinality expressions refer to constraints in the Shapes Constraint Language (SHACL) that specify the minimum number of instances of a particular property that must be present in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "cardinality expressions",
          "local_types": [
            "mathematical concept",
            "concept",
            "expression",
            "mathematical expression"
          ],
          "iri": "Entity-cardinality_expression-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-complete": {
      "node_id": "complete",
      "disambiguation_index": 0,
      "label": "complete",
      "aliases": [
        "complete"
      ],
      "types": [
        "performance characteristic"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'complete' refers to the ideal IOP rule learner SHACLEARNER (-S-H), which is characterized by its ability to generate and evaluate all possible rules without any sampling or heuristic pruning, albeit with inefficiency.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-2",
          "local_name": "complete",
          "local_types": [
            "performance characteristic"
          ],
          "iri": "Entity-complete-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-more_complex_shape": {
      "node_id": "more_complex_shape",
      "disambiguation_index": 0,
      "label": "more complex shapes",
      "aliases": [
        "more complex shapes"
      ],
      "types": [
        "concept",
        "shapes",
        "complex shape",
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "More complex shapes refer to advanced structural patterns in knowledge graphs, such as trees and other intricate rule configurations, that are constructed using simple shape patterns augmented with additional constraints.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-2",
          "local_name": "more complex shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-more_complex_shape-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-3",
          "local_name": "more complex shapes",
          "local_types": [
            "shape",
            "complex shape"
          ],
          "iri": "Entity-more_complex_shape-Mention-2"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-2",
          "local_name": "more complex shapes",
          "local_types": [
            "concept",
            "shapes"
          ],
          "iri": "Entity-more_complex_shape-Mention-3"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-shape_in_the_form_of_a_path": {
      "node_id": "shape_in_the_form_of_a_path",
      "disambiguation_index": 0,
      "label": "shapes in the form of a path",
      "aliases": [
        "shapes in the form of a path"
      ],
      "types": [
        "shape",
        "path"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Shapes in the form of a path refer to a sequence of predicates in a knowledge graph that serve as a flexible and general template for defining more complex shapes, such as closed rules or trees, which impose additional constraints.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-3",
          "local_name": "shapes in the form of a path",
          "local_types": [
            "shape",
            "path"
          ],
          "iri": "Entity-shape_in_the_form_of_a_path-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-the_pattern_of_existential_variable_in_the_head_and_universal_variable_in_the_body": {
      "node_id": "the_pattern_of_existential_variable_in_the_head_and_universal_variable_in_the_body",
      "disambiguation_index": 0,
      "label": "the pattern of existential variables in the head and universal variables in the body",
      "aliases": [
        "the pattern of existential variables in the head and universal variables in the body"
      ],
      "types": [
        "concept",
        "variables"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The pattern of existential variables in the head and universal variables in the body refers to a formal structure in logic, specifically in the context of inverse open path rules (IOP), where the head of a rule contains existentially quantified variables that represent outcomes or conclusions, while the body consists of universally quantified variables that represent conditions or premises, and this pattern is significant in the study of existential rules within knowledge graph constraints.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-7",
          "local_name": "the pattern of existential variables in the head and universal variables in the body",
          "local_types": [
            "concept",
            "variables"
          ],
          "iri": "Entity-the_pattern_of_existential_variable_in_the_head_and_universal_variable_in_the_body-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-sampled_knowledge_graph": {
      "node_id": "sampled_knowledge_graph",
      "disambiguation_index": 0,
      "label": "sampled knowledge graph",
      "aliases": [
        "sampled knowledge graph"
      ],
      "types": [
        "knowledge graph"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A sampled knowledge graph is a reduced version of a knowledge graph that retains only the most relevant entities and predicates for a specific target predicate, facilitating more efficient learning and analysis of graph structures.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "sampled knowledge graph",
          "local_types": [
            "knowledge graph"
          ],
          "iri": "Entity-sampled_knowledge_graph-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-the_cardinality_(1)": {
      "node_id": "the_cardinality_(1)",
      "disambiguation_index": 1,
      "label": "the cardinality",
      "aliases": [
        "the cardinality"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The cardinality refers to the minimum number of instances that must be present in a specific path within a SHACL shape, as indicated by the sh:minCount annotation in the context of validating knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "the cardinality",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-the_cardinality_(1)-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-high_quality_rule": {
      "node_id": "high_quality_rule",
      "disambiguation_index": 0,
      "label": "high quality rules",
      "aliases": [
        "high quality rules"
      ],
      "types": [
        "rule",
        "quality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "High quality rules refer to the specific rules derived from knowledge graphs that meet established minimum quality thresholds for confidence and head coverage, indicating their reliability and relevance in expressing constraints on graph data.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-2",
          "local_name": "high quality rules",
          "local_types": [
            "rule",
            "quality"
          ],
          "iri": "Entity-high_quality_rule-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-iopsc_v_length": {
      "node_id": "iopsc_v_length",
      "disambiguation_index": 0,
      "label": "IOPSC vs length",
      "aliases": [
        "IOPSC vs length"
      ],
      "types": [
        "comparison"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "IOPSC vs length refers to the comparative analysis of the Inverse Open Path Standard Confidence (IOPSC) of learned rules in relation to their lengths, illustrating how the quality of these rules varies as their structural complexity increases.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-3",
          "local_name": "IOPSC vs length",
          "local_types": [
            "comparison"
          ],
          "iri": "Entity-iopsc_v_length-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-the_distribution_of_mined_rule_(1)": {
      "node_id": "the_distribution_of_mined_rule_(1)",
      "disambiguation_index": 1,
      "label": "The distribution of mined rules",
      "aliases": [
        "The distribution of mined rules"
      ],
      "types": [
        "distribution",
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The distribution of mined rules refers to the statistical representation of the various lengths, cardinalities, and quality measures of rules extracted from knowledge graphs, illustrating how these characteristics vary among the rules learned through the SHACLEARNER method.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-7-Sentence-1",
          "local_name": "The distribution of mined rules",
          "local_types": [
            "distribution",
            "rules"
          ],
          "iri": "Entity-the_distribution_of_mined_rule_(1)-Mention-1"
        }
      ],
      "relevance": 0.56884765625
    },
    "Entity-iop_rule_pt__x__y__-__p1__y__z___p2__z__t_": {
      "node_id": "iop_rule_pt__x__y__-__p1__y__z___p2__z__t_",
      "disambiguation_index": 0,
      "label": "IOP rule Pt(x, y) -> P1(y, z) ^ P2(z, t)",
      "aliases": [
        "IOP rule Pt(x, y) -> P1(y, z) ^ P2(z, t)"
      ],
      "types": [
        "predicate",
        "rule",
        "logical statement"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The IOP rule Pt(x, y) -> P1(y, z) ^ P2(z, t) is a logical statement that defines a relationship connecting entities through a sequence of predicates, facilitating the identification of paths in knowledge graphs that link the subject of the first predicate to the object of the last predicate.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "IOP rule Pt(x, y) -> P1(y, z) ^ P2(z, t)",
          "local_types": [
            "predicate",
            "rule",
            "logical statement"
          ],
          "iri": "Entity-iop_rule_pt__x__y__-__p1__y__z___p2__z__t_-Mention-1"
        }
      ],
      "relevance": 0.568359375
    },
    "Entity-satisfying_entity": {
      "node_id": "satisfying_entity",
      "disambiguation_index": 0,
      "label": "satisfying entities",
      "aliases": [
        "satisfying entities"
      ],
      "types": [
        "mathematical entity",
        "solution"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'satisfying entities' refers to the distinct entities in a knowledge graph that fulfill the conditions specified by a given rule, indicating their relevance to the rule's body and head in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-6",
          "local_name": "satisfying entities",
          "local_types": [
            "mathematical entity",
            "solution"
          ],
          "iri": "Entity-satisfying_entity-Mention-1"
        }
      ],
      "relevance": 0.56787109375
    },
    "Entity-unmodified_shaclearner": {
      "node_id": "unmodified_shaclearner",
      "disambiguation_index": 0,
      "label": "unmodified SHACLEARNER",
      "aliases": [
        "unmodified SHACLEARNER"
      ],
      "types": [
        "machine learning model",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The unmodified SHACLEARNER refers to the original version of the SHACLEARNER algorithm as described in Algorithm 1, which performs IOP rule learning without any sampling or heuristic pruning techniques.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-5",
          "local_name": "unmodified SHACLEARNER",
          "local_types": [
            "machine learning model",
            "algorithm"
          ],
          "iri": "Entity-unmodified_shaclearner-Mention-1"
        }
      ],
      "relevance": 0.56787109375
    },
    "Entity-nested_pattern": {
      "node_id": "nested_pattern",
      "disambiguation_index": 0,
      "label": "nested patterns",
      "aliases": [
        "nested patterns"
      ],
      "types": [
        "structure",
        "pattern",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Nested patterns refer to complex structures in SHACL shapes that resemble tree-like formations, allowing for the definition of hierarchical relationships within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-1",
          "local_name": "nested patterns",
          "local_types": [
            "structure",
            "pattern",
            "data structure"
          ],
          "iri": "Entity-nested_pattern-Mention-1"
        }
      ],
      "relevance": 0.5673828125
    },
    "Entity-tree-building_runtime": {
      "node_id": "tree-building_runtime",
      "disambiguation_index": 0,
      "label": "tree-building runtime",
      "aliases": [
        "tree-building runtime",
        "the average tree-building runtime"
      ],
      "types": [
        "time measurement",
        "runtime",
        "performance metric",
        "metric",
        "average"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'tree-building runtime' refers to the average time taken to aggregate Inverse Open Path (IOP) rules into tree structures from knowledge graphs, as reported in the evaluation of the SHACLEARNER method.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "tree-building runtime",
          "local_types": [
            "performance metric",
            "time measurement"
          ],
          "iri": "Entity-tree-building_runtime-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "the average tree-building runtime",
          "local_types": [
            "runtime",
            "average",
            "metric"
          ],
          "iri": "Entity-tree-building_runtime-Mention-2"
        }
      ],
      "relevance": 0.5673828125
    },
    "Entity-quality_measurement": {
      "node_id": "quality_measurement",
      "disambiguation_index": 0,
      "label": "quality measurements",
      "aliases": [
        "quality measurements"
      ],
      "types": [
        "evaluation metric",
        "measurement",
        "evaluation",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Quality measurements refer to formal metrics defined to evaluate the validity and effectiveness of Inverse Open Path rules in the context of knowledge graphs, indicating the strength of evidence and reliability of the learned shapes.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "quality measurements",
          "local_types": [
            "evaluation metric",
            "measurement",
            "evaluation",
            "metric"
          ],
          "iri": "Entity-quality_measurement-Mention-1"
        }
      ],
      "relevance": 0.56689453125
    },
    "Entity-greedysearch__r__mintreesc_": {
      "node_id": "greedysearch__r__mintreesc_",
      "disambiguation_index": 0,
      "label": "GreedySearch(R, MinTreeSC)",
      "aliases": [
        "GreedySearch(R, MinTreeSC)"
      ],
      "types": [
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "GreedySearch(R, MinTreeSC) refers to a process in the SHACLearner algorithm that constructs a tree structure from a set of inverse open path rules R, while adhering to a minimum tree shape constraint specified by MinTreeSC.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-12",
          "local_name": "GreedySearch(R, MinTreeSC)",
          "local_types": [
            "process"
          ],
          "iri": "Entity-greedysearch__r__mintreesc_-Mention-1"
        }
      ],
      "relevance": 0.56689453125
    },
    "Entity-proposed_system": {
      "node_id": "proposed_system",
      "disambiguation_index": 0,
      "label": "proposed system",
      "aliases": [
        "proposed system"
      ],
      "types": [
        "method",
        "system"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The proposed system refers to a novel method designed to automatically learn shapes from large knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-3",
          "local_name": "proposed system",
          "local_types": [
            "method",
            "system"
          ],
          "iri": "Entity-proposed_system-Mention-1"
        }
      ],
      "relevance": 0.56689453125
    },
    "Entity-diverse_shape": {
      "node_id": "diverse_shape",
      "disambiguation_index": 0,
      "label": "diverse shapes",
      "aliases": [
        "diverse shapes"
      ],
      "types": [
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'diverse shapes' refers to various structural representations of data in knowledge graphs, which can include rules, constraints, trees, and other forms that characterize the relationships and properties of entities within the graph.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "diverse shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-diverse_shape-Mention-1"
        }
      ],
      "relevance": 0.56689453125
    },
    "Entity-pair_of_entity_(1)": {
      "node_id": "pair_of_entity_(1)",
      "disambiguation_index": 1,
      "label": "pair of entities",
      "aliases": [
        "pair of entities"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'pair of entities' refers to two distinct entities in a knowledge graph that are evaluated for their relationship based on a composite predicate formed by a sequence of predicates in the context of learning and validating shapes using Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-3",
          "local_name": "pair of entities",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-pair_of_entity_(1)-Mention-1"
        }
      ],
      "relevance": 0.56689453125
    },
    "Entity-system": {
      "node_id": "system",
      "disambiguation_index": 0,
      "label": "system",
      "aliases": [
        "system"
      ],
      "types": [
        "technology",
        "software",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'system' refers to a method or framework for discovering patterns from massive knowledge graphs (KGs), which is not provided by the paper being discussed.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "system",
          "local_types": [
            "software",
            "methodology"
          ],
          "iri": "Entity-system-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-4",
          "local_name": "system",
          "local_types": [
            "software",
            "technology"
          ],
          "iri": "Entity-system-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-4",
          "local_name": "system",
          "local_types": [
            "software",
            "technology"
          ],
          "iri": "Entity-system-Mention-3"
        }
      ],
      "relevance": 0.56640625
    },
    "Entity-the_system_without_sampling": {
      "node_id": "the_system_without_sampling",
      "disambiguation_index": 0,
      "label": "the system without sampling",
      "aliases": [
        "the system without sampling"
      ],
      "types": [
        "system"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The system without sampling refers to a variant of the SHACLEARNER algorithm that utilizes the complete input knowledge graph for learning and evaluating IOP rules without employing any sampling techniques.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "the system without sampling",
          "local_types": [
            "system"
          ],
          "iri": "Entity-the_system_without_sampling-Mention-1"
        }
      ],
      "relevance": 0.56640625
    },
    "Entity-open_path_support": {
      "node_id": "open_path_support",
      "disambiguation_index": 0,
      "label": "open path support",
      "aliases": [
        "open path support"
      ],
      "types": [
        "parameter",
        "concept",
        "statistical measure",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Open path support is a statistical measure that quantifies the number of entity pairs satisfying the body of an open path rule in a knowledge graph, indicating the rule's effectiveness in capturing relationships between entities.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-5-Sentence-1",
          "local_name": "open path support",
          "local_types": [
            "parameter",
            "concept",
            "statistical measure",
            "metric"
          ],
          "iri": "Entity-open_path_support-Mention-1"
        }
      ],
      "relevance": 0.56591796875
    },
    "Entity-adjacency_matrix_representation_of_the_kg": {
      "node_id": "adjacency_matrix_representation_of_the_kg",
      "disambiguation_index": 0,
      "label": "adjacency matrix representation of the KG",
      "aliases": [
        "adjacency matrix representation",
        "adjacency matrix representation of the KG"
      ],
      "types": [
        "representation",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The adjacency matrix representation of the KG is a mathematical structure that encodes the relationships between entities in a knowledge graph (KG) as a square matrix, where each element indicates the presence or absence of a connection between pairs of entities.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-4",
          "local_name": "adjacency matrix representation of the KG",
          "local_types": [
            "representation"
          ],
          "iri": "Entity-adjacency_matrix_representation_of_the_kg-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-4",
          "local_name": "adjacency matrix representation",
          "local_types": [
            "representation",
            "matrix"
          ],
          "iri": "Entity-adjacency_matrix_representation_of_the_kg-Mention-2"
        }
      ],
      "relevance": 0.56591796875
    },
    "Entity-p1_2": {
      "node_id": "p1_2",
      "disambiguation_index": 0,
      "label": "P'1_2",
      "aliases": [
        "P'1_2"
      ],
      "types": [
        "function",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P'1_2 refers to a specific predicate in the context of a tree structure used in the SHACLearner algorithm, representing a relationship between two entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'1_2",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-p1_2-Mention-1"
        }
      ],
      "relevance": 0.56591796875
    },
    "Entity-a_method_(1)": {
      "node_id": "a_method_(1)",
      "disambiguation_index": 1,
      "label": "a method",
      "aliases": [
        "a method"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The method refers to a proposed approach for detecting potential violations of shapes in the context of SHACL by analyzing the interaction between a set of rules and the defined shapes.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-6-Sentence-2",
          "local_name": "a method",
          "local_types": [
            "method"
          ],
          "iri": "Entity-a_method_(1)-Mention-1"
        }
      ],
      "relevance": 0.56591796875
    },
    "Entity-well-defined_semantics": {
      "node_id": "well-defined_semantics",
      "disambiguation_index": 0,
      "label": "well-defined semantics",
      "aliases": [
        "well-defined semantics"
      ],
      "types": [
        "semantics",
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Well-defined semantics refers to a clear and precise interpretation of logical formalisms that allows for the derivation of SHACL shapes, ensuring that the meanings and implications of these shapes are unambiguous and systematically applicable in the context of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-3",
          "local_name": "well-defined semantics",
          "local_types": [
            "semantics",
            "concept"
          ],
          "iri": "Entity-well-defined_semantics-Mention-1"
        }
      ],
      "relevance": 0.56591796875
    },
    "Entity-greater_cardinality": {
      "node_id": "greater_cardinality",
      "disambiguation_index": 0,
      "label": "greater cardinalities",
      "aliases": [
        "higher cardinalities",
        "greater cardinalities"
      ],
      "types": [
        "cardinality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Greater cardinalities refer to the higher numerical constraints placed on the relationships or properties within knowledge graphs, which require more stringent conditions to be satisfied compared to lower cardinalities.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-6-Sentence-2",
          "local_name": "greater cardinalities",
          "local_types": [
            "cardinality"
          ],
          "iri": "Entity-greater_cardinality-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-3",
          "local_name": "higher cardinalities",
          "local_types": [
            "cardinality"
          ],
          "iri": "Entity-greater_cardinality-Mention-2"
        }
      ],
      "relevance": 0.56591796875
    },
    "Entity-consistent": {
      "node_id": "consistent",
      "disambiguation_index": 0,
      "label": "consistent",
      "aliases": [
        "consistent"
      ],
      "types": [
        "property",
        "quality"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'consistent' refers to the state of a knowledge graph (KG) being in accordance with defined constraints, ensuring that the data adheres to specified rules and maintains logical coherence.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-4",
          "local_name": "consistent",
          "local_types": [
            "property",
            "quality"
          ],
          "iri": "Entity-consistent-Mention-1"
        }
      ],
      "relevance": 0.5654296875
    },
    "Entity-the_sequence_of_predicate_p1__p2__...__pn": {
      "node_id": "the_sequence_of_predicate_p1__p2__...__pn",
      "disambiguation_index": 0,
      "label": "the sequence of predicates P1 ^ P2 ^ ... ^ Pn",
      "aliases": [
        "the sequence of predicates P1 ^ P2 ^ ... ^ Pn"
      ],
      "types": [
        "sequence",
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The sequence of predicates P1 ^ P2 ^ ... ^ Pn refers to the head of an inverse open path (IOP) rule in predicate logic, which represents a chain of relationships in a knowledge graph that must be satisfied given a specific body predicate Pt.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-4",
          "local_name": "the sequence of predicates P1 ^ P2 ^ ... ^ Pn",
          "local_types": [
            "sequence",
            "predicate"
          ],
          "iri": "Entity-the_sequence_of_predicate_p1__p2__...__pn-Mention-1"
        }
      ],
      "relevance": 0.5654296875
    },
    "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt": {
      "node_id": "entity_satisfying_the_subject_argument_of_the_body_predicate__pt",
      "disambiguation_index": 0,
      "label": "entities satisfying the subject argument of the body predicate, Pt",
      "aliases": [
        "entities satisfying the subject argument of the body predicate, Pt"
      ],
      "types": [
        "predicate",
        "entity",
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'entities satisfying the subject argument of the body predicate, Pt' refers to the specific entities that fulfill the subject role in the context of the predicate Pt within the framework of Inverse Open Path (IOP) rules, which are used to establish connections between entities in a knowledge graph through a series of predicates.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "entities satisfying the subject argument of the body predicate, Pt",
          "local_types": [
            "predicate",
            "entity",
            "argument"
          ],
          "iri": "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt-Mention-1"
        }
      ],
      "relevance": 0.5654296875
    },
    "Entity-the_tree_(1)": {
      "node_id": "the_tree_(1)",
      "disambiguation_index": 1,
      "label": "the trees",
      "aliases": [
        "the trees"
      ],
      "types": [
        "tree",
        "structure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The trees refer to nested patterns used in the context of SHACL shapes, which are structural representations of constraints in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-1",
          "local_name": "the trees",
          "local_types": [
            "tree",
            "structure"
          ],
          "iri": "Entity-the_tree_(1)-Mention-1"
        }
      ],
      "relevance": 0.5654296875
    },
    "Entity-the_performance_of_our_system": {
      "node_id": "the_performance_of_our_system",
      "disambiguation_index": 0,
      "label": "the performance of our system",
      "aliases": [
        "the performance of our system"
      ],
      "types": [
        "performance",
        "system"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The performance of our system refers to the effectiveness and practical applicability of the SHACLEARNER method in learning informative and diverse shapes from massive knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-4",
          "local_name": "the performance of our system",
          "local_types": [
            "performance",
            "system"
          ],
          "iri": "Entity-the_performance_of_our_system-Mention-1"
        }
      ],
      "relevance": 0.5654296875
    },
    "Entity-car2": {
      "node_id": "car2",
      "disambiguation_index": 0,
      "label": "Car=2",
      "aliases": [
        "Car=2"
      ],
      "types": [
        "parameter",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Car=2 refers to a parameter representing the minimum cardinality constraint in the context of evaluating the support of an IOP rule in the SHACLearner algorithm.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-5",
          "local_name": "Car=2",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-car2-Mention-1"
        }
      ],
      "relevance": 0.56494140625
    },
    "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl": {
      "node_id": "shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "disambiguation_index": 0,
      "label": "shapes that can be trivially expressed in a fragment of SHACL",
      "aliases": [
        "shapes that can be trivially expressed in a fragment of SHACL"
      ],
      "types": [
        "SHACL",
        "concept",
        "shape"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Shapes that can be trivially expressed in a fragment of SHACL refer to simple structural constraints or patterns that can be defined using a subset of the Shapes Constraint Language (SHACL), which is used for validating RDF data.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-3",
          "local_name": "shapes that can be trivially expressed in a fragment of SHACL",
          "local_types": [
            "SHACL",
            "concept",
            "shape"
          ],
          "iri": "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl-Mention-1"
        }
      ],
      "relevance": 0.564453125
    },
    "Entity-iophc__r2_": {
      "node_id": "iophc__r2_",
      "disambiguation_index": 0,
      "label": "IOPHC(r2)",
      "aliases": [
        "IOPHC(r2)"
      ],
      "types": [
        "function",
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "IOPHC(r2) is a metric that quantifies the head cardinality of the IOP rule r2, representing the ratio of distinct entities satisfying the head of the rule to the total number of entities satisfying the body of the rule in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-4",
          "local_name": "IOPHC(r2)",
          "local_types": [
            "function",
            "metric"
          ],
          "iri": "Entity-iophc__r2_-Mention-1"
        }
      ],
      "relevance": 0.564453125
    },
    "Entity-the_effectiveness_of_our_shaclearner": {
      "node_id": "the_effectiveness_of_our_shaclearner",
      "disambiguation_index": 0,
      "label": "the effectiveness of our SHACLEARNER",
      "aliases": [
        "the effectiveness of our SHACLEARNER"
      ],
      "types": [
        "effectiveness",
        "model"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The effectiveness of our SHACLEARNER refers to its ability to successfully learn and capture diverse and high-quality shapes from large knowledge graphs, demonstrating scalability and adaptability in handling varying complexities and structural features.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "the effectiveness of our SHACLEARNER",
          "local_types": [
            "effectiveness",
            "model"
          ],
          "iri": "Entity-the_effectiveness_of_our_shaclearner-Mention-1"
        }
      ],
      "relevance": 0.564453125
    },
    "Entity-three_entity__e3__e4__e5_": {
      "node_id": "three_entity__e3__e4__e5_",
      "disambiguation_index": 0,
      "label": "three entities (e3, e4, e5)",
      "aliases": [
        "three entities (e3, e4, e5)"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'three entities (e3, e4, e5)' refers to a specific set of entities in a knowledge graph that can be used to instantiate a variable in an inverse open path rule, satisfying both the head and body predicates of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "three entities (e3, e4, e5)",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-three_entity__e3__e4__e5_-Mention-1"
        }
      ],
      "relevance": 0.56396484375
    },
    "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2": {
      "node_id": "entity_forming_the_object_argument_of_the_last_predicate__p2",
      "disambiguation_index": 0,
      "label": "entities forming the object argument of the last predicate, P2",
      "aliases": [
        "entities forming the object argument of the last predicate, P2"
      ],
      "types": [
        "predicate",
        "entity",
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'entities forming the object argument of the last predicate, P2' refers to the specific entities that are connected by the predicate P2 in the context of an Inverse Open Path (IOP) rule, which serves to establish relationships between entities in a knowledge graph through a sequence of predicates.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "entities forming the object argument of the last predicate, P2",
          "local_types": [
            "predicate",
            "entity",
            "argument"
          ],
          "iri": "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2-Mention-1"
        }
      ],
      "relevance": 0.56396484375
    },
    "Entity-concept_or_class_membership": {
      "node_id": "concept_or_class_membership",
      "disambiguation_index": 0,
      "label": "concept or class membership",
      "aliases": [
        "concept or class membership"
      ],
      "types": [
        "concept",
        "membership"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Concept or class membership refers to the representation of entities in knowledge graphs (KGs) as instances of classes or types, typically modeled through binary facts that associate entities with their respective classes.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-1",
          "local_name": "concept or class membership",
          "local_types": [
            "concept",
            "membership"
          ],
          "iri": "Entity-concept_or_class_membership-Mention-1"
        }
      ],
      "relevance": 0.56396484375
    },
    "Entity-e1": {
      "node_id": "e1",
      "disambiguation_index": 0,
      "label": "e1",
      "aliases": [
        "e1",
        "E1"
      ],
      "types": [
        "collection",
        "element",
        "mathematical object",
        "set",
        "vector",
        "entity",
        "variable",
        "representation",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "e1 refers to an entity in a knowledge graph that can instantiate the variable z0 in the context of an inverse open path rule, contributing to the satisfaction of the head part of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "e1",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e1-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-5",
          "local_name": "E1",
          "local_types": [
            "collection",
            "entity",
            "mathematical notation",
            "set"
          ],
          "iri": "Entity-e1-Mention-2"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-4",
          "local_name": "e1",
          "local_types": [
            "mathematical object",
            "vector",
            "entity",
            "variable",
            "representation"
          ],
          "iri": "Entity-e1-Mention-3"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-5",
          "local_name": "e1",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-e1-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-3",
          "local_name": "e1",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e1-Mention-5"
        }
      ],
      "relevance": 0.5634765625
    },
    "Entity-practice": {
      "node_id": "practice",
      "disambiguation_index": 0,
      "label": "practice",
      "aliases": [
        "practice"
      ],
      "types": [
        "application",
        "real-world usage"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'practice' refers to the real-world application and effectiveness of the SHACLEARNER system in learning shapes from massive knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-4",
          "local_name": "practice",
          "local_types": [
            "application",
            "real-world usage"
          ],
          "iri": "Entity-practice-Mention-1"
        }
      ],
      "relevance": 0.5634765625
    },
    "Entity-a_path": {
      "node_id": "a_path",
      "disambiguation_index": 0,
      "label": "A path",
      "aliases": [
        "A path"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A path is a sequence of predicates in a knowledge graph that are linked by closed intermediate variables and end with open variables, serving as a foundational structure for defining more complex shapes.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-2",
          "local_name": "A path",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-a_path-Mention-1"
        }
      ],
      "relevance": 0.5634765625
    },
    "Entity-future_work_(1)": {
      "node_id": "future_work_(1)",
      "disambiguation_index": 1,
      "label": "future work",
      "aliases": [
        "future work"
      ],
      "types": [
        "research"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Future work refers to the planned subsequent research activities aimed at validating the learned shapes using SHACLearner through expert evaluation and enhancing the expressivity of these shapes, as well as redesigning the SHACLearner algorithm for scalability in processing extremely large knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-5-Sentence-1",
          "local_name": "future work",
          "local_types": [
            "research"
          ],
          "iri": "Entity-future_work_(1)-Mention-1"
        }
      ],
      "relevance": 0.5634765625
    },
    "Entity-x_and_z_i": {
      "node_id": "x_and_z_i",
      "disambiguation_index": 0,
      "label": "x and z_i",
      "aliases": [
        "x and z_i"
      ],
      "types": [
        "variables"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'x and z_i' refer to variables used in a shape from Wikidata that are instantiated by entities to express constraints in the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-2-Sentence-2",
          "local_name": "x and z_i",
          "local_types": [
            "variables"
          ],
          "iri": "Entity-x_and_z_i-Mention-1"
        }
      ],
      "relevance": 0.56298828125
    },
    "Entity-utility": {
      "node_id": "utility",
      "disambiguation_index": 0,
      "label": "utility",
      "aliases": [
        "utility"
      ],
      "types": [
        "utility",
        "usefulness",
        "benefit"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'utility' refers to the added value or benefit derived from effectively managing uncertainty in the constraints and learning process of SHACL shape learning from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-3",
          "local_name": "utility",
          "local_types": [
            "utility",
            "usefulness",
            "benefit"
          ],
          "iri": "Entity-utility-Mention-1"
        }
      ],
      "relevance": 0.56298828125
    },
    "Entity-specific_shape": {
      "node_id": "specific_shape",
      "disambiguation_index": 0,
      "label": "specific shapes",
      "aliases": [
        "specific shapes"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Specific shapes refer to simple shape patterns represented as paths over connected entities in knowledge graphs, which can be augmented with constraints and serve as foundational elements for constructing more complex shapes.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-1",
          "local_name": "specific shapes",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-specific_shape-Mention-1"
        }
      ],
      "relevance": 0.56298828125
    },
    "Entity-_x__zi__y_": {
      "node_id": "_x__zi__y_",
      "disambiguation_index": 0,
      "label": "{x, zi, y}",
      "aliases": [
        "{x, zi, y}"
      ],
      "types": [
        "entity variables"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term {x, zi, y} refers to a set of entity variables used in the context of open path rules (OPR) for knowledge graph completion, where each variable represents a distinct entity within the graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-3",
          "local_name": "{x, zi, y}",
          "local_types": [
            "entity variables"
          ],
          "iri": "Entity-_x__zi__y_-Mention-1"
        }
      ],
      "relevance": 0.56298828125
    },
    "Entity-previous_heuristic_rule_learner": {
      "node_id": "previous_heuristic_rule_learner",
      "disambiguation_index": 0,
      "label": "previous heuristic rule learners",
      "aliases": [
        "previous heuristic rule learners"
      ],
      "types": [
        "method",
        "learner"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Previous heuristic rule learners refer to earlier methods or algorithms that utilize heuristic approaches to learn rules or patterns from data, particularly in the context of knowledge graphs, and are exemplified by techniques like RESCAL that embed entities and predicates for effective representation.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-2",
          "local_name": "previous heuristic rule learners",
          "local_types": [
            "method",
            "learner"
          ],
          "iri": "Entity-previous_heuristic_rule_learner-Mention-1"
        }
      ],
      "relevance": 0.56298828125
    },
    "Entity-node": {
      "node_id": "node",
      "disambiguation_index": 0,
      "label": "node",
      "aliases": [
        "node"
      ],
      "types": [
        "graph element",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'node' refers to a specific point in a tree structure that represents a SHACL shape, which is used to validate and document knowledge graphs by defining paths and relationships between entities.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "node",
          "local_types": [
            "graph element",
            "data structure"
          ],
          "iri": "Entity-node-Mention-1"
        }
      ],
      "relevance": 0.5625
    },
    "Entity-satisfactory_performance": {
      "node_id": "satisfactory_performance",
      "disambiguation_index": 0,
      "label": "satisfactory performance",
      "aliases": [
        "satisfactory performance"
      ],
      "types": [
        "performance"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Satisfactory performance refers to the effective operation of the SHACLEARNER method in efficiently processing runtime and successfully mining a significant quantity of high-quality rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-1",
          "local_name": "satisfactory performance",
          "local_types": [
            "performance"
          ],
          "iri": "Entity-satisfactory_performance-Mention-1"
        }
      ],
      "relevance": 0.5625
    },
    "Entity-measure": {
      "node_id": "measure",
      "disambiguation_index": 0,
      "label": "measures",
      "aliases": [
        "measures"
      ],
      "types": [
        "metrics",
        "quantitative assessment"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'measures' refers to formal quality metrics used to evaluate the effectiveness and characteristics of Inverse Open Path rules in the context of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-4",
          "local_name": "measures",
          "local_types": [
            "metrics",
            "quantitative assessment"
          ],
          "iri": "Entity-measure-Mention-1"
        }
      ],
      "relevance": 0.56201171875
    },
    "Entity-this_lemma": {
      "node_id": "this_lemma",
      "disambiguation_index": 0,
      "label": "This lemma",
      "aliases": [
        "This lemma"
      ],
      "types": [
        "lemma"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This lemma states that the Inverse Open Path Support Confidence (IOPSC) of an Inverse Open Path (IOP) rule does not increase with the addition of more head predicates, which aids in the rule learning process by allowing the discarding of low-confidence rules without further checks on their extended versions.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-11-Sentence-1",
          "local_name": "This lemma",
          "local_types": [
            "lemma"
          ],
          "iri": "Entity-this_lemma-Mention-1"
        }
      ],
      "relevance": 0.56201171875
    },
    "Entity-the_second": {
      "node_id": "the_second",
      "disambiguation_index": 0,
      "label": "the second",
      "aliases": [
        "the second"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'the second' refers to the second IOP rule mentioned, which is a less constraining rule compared to the third IOP rule, indicating that it has a higher confidence based on the knowledge graph data.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-5",
          "local_name": "the second",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_second-Mention-1"
        }
      ],
      "relevance": 0.56201171875
    },
    "Entity-opsupp": {
      "node_id": "opsupp",
      "disambiguation_index": 0,
      "label": "OPsupp",
      "aliases": [
        "OPsupp"
      ],
      "types": [
        "statistical measure",
        "path type",
        "abbreviation",
        "variable",
        "entity type",
        "term",
        "parameter",
        "rule",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "OPsupp refers to the open path support metric, which quantifies the number of entity pairs satisfying the body of an open path rule in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-4-Sentence-1",
          "local_name": "OPsupp",
          "local_types": [
            "term",
            "path type",
            "abbreviation",
            "entity type"
          ],
          "iri": "Entity-opsupp-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-5",
          "local_name": "OPsupp",
          "local_types": [
            "statistical measure",
            "variable",
            "parameter",
            "rule",
            "metric"
          ],
          "iri": "Entity-opsupp-Mention-2"
        }
      ],
      "relevance": 0.5615234375
    },
    "Entity-op_rule_p1": {
      "node_id": "op_rule_p1",
      "disambiguation_index": 0,
      "label": "OP rule P1",
      "aliases": [
        "OP rule P1"
      ],
      "types": [
        "logical rule",
        "programming construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "OP rule P1 refers to a logical rule in the context of knowledge graphs that defines a relationship between entities, expressed in the form of a predicate logic statement linking a head predicate P1 to a sequence of body predicates P2 and P3.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "OP rule P1",
          "local_types": [
            "logical rule",
            "programming construct"
          ],
          "iri": "Entity-op_rule_p1-Mention-1"
        }
      ],
      "relevance": 0.5615234375
    },
    "Entity-semi-automatic_manner": {
      "node_id": "semi-automatic_manner",
      "disambiguation_index": 0,
      "label": "semi-automatic manner",
      "aliases": [
        "semi-automatic manner"
      ],
      "types": [
        "operation mode",
        "workflow",
        "process",
        "approach"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'semi-automatic manner' refers to a workflow where a sample of data is processed by a graph structure learner, which then presents the results through an interactive interface for human users to create SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "semi-automatic manner",
          "local_types": [
            "operation mode",
            "workflow",
            "process",
            "approach"
          ],
          "iri": "Entity-semi-automatic_manner-Mention-1"
        }
      ],
      "relevance": 0.5615234375
    },
    "Entity-heuristic_rule_learning_module": {
      "node_id": "heuristic_rule_learning_module",
      "disambiguation_index": 0,
      "label": "heuristic rule learning module",
      "aliases": [
        "the heuristic rule learning module",
        "heuristic rule learning module"
      ],
      "types": [
        "learning module",
        "module",
        "component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The heuristic rule learning module is a component of the SHACLEARNER system that employs heuristic pruning techniques to enhance the efficiency of learning rules from knowledge graphs without the use of sampling.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "heuristic rule learning module",
          "local_types": [
            "module",
            "component"
          ],
          "iri": "Entity-heuristic_rule_learning_module-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "the heuristic rule learning module",
          "local_types": [
            "module",
            "learning module"
          ],
          "iri": "Entity-heuristic_rule_learning_module-Mention-2"
        }
      ],
      "relevance": 0.5615234375
    },
    "Entity-p__1q": {
      "node_id": "p__1q",
      "disambiguation_index": 0,
      "label": "P'1^q",
      "aliases": [
        "P'1^q"
      ],
      "types": [
        "function",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P'1^q refers to a specific predicate in the context of a tree structure used in the SHACLearner algorithm, representing a relationship between entities z0 and z1^q within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'1^q",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-p__1q-Mention-1"
        }
      ],
      "relevance": 0.56103515625
    },
    "Entity-population": {
      "node_id": "population",
      "disambiguation_index": 0,
      "label": "population",
      "aliases": [
        "population"
      ],
      "types": [
        "process",
        "action"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'population' refers to the process of filling or enriching a knowledge graph (KG) with data, guided by specified shapes that outline the expected structure and attributes of the entities within the KG.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-3",
          "local_name": "population",
          "local_types": [
            "process",
            "action"
          ],
          "iri": "Entity-population-Mention-1"
        }
      ],
      "relevance": 0.560546875
    },
    "Entity-suppr": {
      "node_id": "suppr",
      "disambiguation_index": 0,
      "label": "suppr",
      "aliases": [
        "suppr"
      ],
      "types": [
        "mathematical term",
        "mathematical expression",
        "variable",
        "statistical term",
        "value",
        "parameter"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph rule learning, 'suppr' refers to the support measure that counts the number of instances where both the body and head of a closed path rule are satisfied by pairs of entities in the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-6",
          "local_name": "suppr",
          "local_types": [
            "mathematical expression",
            "variable"
          ],
          "iri": "Entity-suppr-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-3",
          "local_name": "suppr",
          "local_types": [
            "value",
            "mathematical term",
            "variable",
            "statistical term"
          ],
          "iri": "Entity-suppr-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-4",
          "local_name": "suppr",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-suppr-Mention-3"
        }
      ],
      "relevance": 0.560546875
    },
    "Entity-pn___z__n-1___y_": {
      "node_id": "pn___z__n-1___y_",
      "disambiguation_index": 0,
      "label": "Pn'(z(n-1), y)",
      "aliases": [
        "Pn'(z(n-1), y)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pn'(z(n-1), y) refers to a predicate in the head of an inverse open path (IOP) rule, which is a formal expression used to define relationships between entities in a knowledge graph, indicating that there exists a sequence of predicates leading to the entity y from the entity represented by z(n-1).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "Pn'(z(n-1), y)",
          "local_types": [
            "mathematical expression",
            "function"
          ],
          "iri": "Entity-pn___z__n-1___y_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "Pn'(z(n-1), y)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-pn___z__n-1___y_-Mention-2"
        }
      ],
      "relevance": 0.560546875
    },
    "Entity-two_open_variable": {
      "node_id": "two_open_variable",
      "disambiguation_index": 0,
      "label": "two open variables",
      "aliases": [
        "two open variables"
      ],
      "types": [
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'two open variables' refers to the two entity variables, y and x, in an open path rule (OP rule) used in knowledge graph completion, which are not closed by occurring in multiple predicate terms.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-3",
          "local_name": "two open variables",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-two_open_variable-Mention-1"
        }
      ],
      "relevance": 0.560546875
    },
    "Entity-fact_related_to_the_target_predicate": {
      "node_id": "fact_related_to_the_target_predicate",
      "disambiguation_index": 0,
      "label": "facts related to the target predicate",
      "aliases": [
        "facts related to the target predicate"
      ],
      "types": [
        "fact"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'facts related to the target predicate' refers to the specific constraints and conditions that property shapes impose on the data associated with a particular predicate in the context of the Shapes Constraint Language (SHACL) for validating knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "facts related to the target predicate",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-fact_related_to_the_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.56005859375
    },
    "Entity-weak_inference_rule": {
      "node_id": "weak_inference_rule",
      "disambiguation_index": 0,
      "label": "weak inference rules",
      "aliases": [
        "weak inference rules"
      ],
      "types": [
        "inference rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Weak inference rules refer to the flexible and less stringent logical guidelines used in knowledge graphs that allow for the derivation of conclusions from data, despite the absence of strong constraints.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-2",
          "local_name": "weak inference rules",
          "local_types": [
            "inference rule"
          ],
          "iri": "Entity-weak_inference_rule-Mention-1"
        }
      ],
      "relevance": 0.5595703125
    },
    "Entity-an_opportunity_to_work_sequentially_along_a_path_of_dependent_question": {
      "node_id": "an_opportunity_to_work_sequentially_along_a_path_of_dependent_question",
      "disambiguation_index": 0,
      "label": "an opportunity to work sequentially along a path of dependent questions",
      "aliases": [
        "an opportunity to work sequentially along a path of dependent questions"
      ],
      "types": [
        "opportunity",
        "methodology"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'an opportunity to work sequentially along a path of dependent questions' refers to a methodology in knowledge graph completion that allows for a depth-first questioning strategy, where each question is contingent on the answer to the previous one, thereby reducing cognitive load and enhancing the contextual understanding of the relationships within the graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-4",
          "local_name": "an opportunity to work sequentially along a path of dependent questions",
          "local_types": [
            "opportunity",
            "methodology"
          ],
          "iri": "Entity-an_opportunity_to_work_sequentially_along_a_path_of_dependent_question-Mention-1"
        }
      ],
      "relevance": 0.5595703125
    },
    "Entity-the_quantity_and_quality_of_distinct_rule_learnt": {
      "node_id": "the_quantity_and_quality_of_distinct_rule_learnt",
      "disambiguation_index": 0,
      "label": "the quantity and quality of distinct rules learnt",
      "aliases": [
        "the quantity and quality of distinct rules learnt"
      ],
      "types": [
        "evaluation criteria",
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The quantity and quality of distinct rules learnt refers to the evaluation criteria used to assess the effectiveness of knowledge graph rule-learning methods, specifically focusing on the number of rules generated and their respective quality metrics, such as confidence and coverage.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-1",
          "local_name": "the quantity and quality of distinct rules learnt",
          "local_types": [
            "evaluation criteria",
            "rules"
          ],
          "iri": "Entity-the_quantity_and_quality_of_distinct_rule_learnt-Mention-1"
        }
      ],
      "relevance": 0.5595703125
    },
    "Entity-the_example": {
      "node_id": "the_example",
      "disambiguation_index": 0,
      "label": "the example",
      "aliases": [
        "the example"
      ],
      "types": [
        "example"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The example illustrates the computation of the adjacency matrix product A(P1)*A(P2) and the resulting vector V^1(P1, P2) in the context of evaluating IOP rules for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-5",
          "local_name": "the example",
          "local_types": [
            "example"
          ],
          "iri": "Entity-the_example-Mention-1"
        }
      ],
      "relevance": 0.55908203125
    },
    "Entity-pt__x__z0_": {
      "node_id": "pt__x__z0_",
      "disambiguation_index": 0,
      "label": "P't(x, z0)",
      "aliases": [
        "P't(x, z0)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P't(x, z0) represents the body of a tree structure in the context of SHACL shapes, where it serves as a predicate indicating a relationship between the subject variable x and the shared variable z0, which is part of a larger expression defining paths and relationships in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P't(x, z0)",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-pt__x__z0_-Mention-1"
        }
      ],
      "relevance": 0.55908203125
    },
    "Entity-one_work": {
      "node_id": "one_work",
      "disambiguation_index": 0,
      "label": "One work",
      "aliases": [
        "One work"
      ],
      "types": [
        "research"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "One work refers to a research effort that utilizes two types of knowledge\u2014ontology constraint patterns and input ontologies\u2014to automatically generate SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-2",
          "local_name": "One work",
          "local_types": [
            "research"
          ],
          "iri": "Entity-one_work-Mention-1"
        }
      ],
      "relevance": 0.55908203125
    },
    "Entity-the_learnt_embeddings": {
      "node_id": "the_learnt_embeddings",
      "disambiguation_index": 0,
      "label": "the learnt embeddings",
      "aliases": [
        "the learnt embeddings"
      ],
      "types": [
        "embedding"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The learnt embeddings refer to the vector representations of entities in a knowledge graph that are generated during the learning process of the SHACLEARNER system, which are utilized in the scoring function to evaluate the quality of inferred rules.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-6-Sentence-2",
          "local_name": "the learnt embeddings",
          "local_types": [
            "embedding"
          ],
          "iri": "Entity-the_learnt_embeddings-Mention-1"
        }
      ],
      "relevance": 0.55908203125
    },
    "Entity-treesc": {
      "node_id": "treesc",
      "disambiguation_index": 0,
      "label": "TreeSC",
      "aliases": [
        "TreeSC"
      ],
      "types": [
        "function",
        "threshold",
        "concept",
        "algorithm",
        "model",
        "data structure",
        "theory",
        "term",
        "mathematical concept",
        "performance measure",
        "metric",
        "evaluation measure"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "TreeSC is a performance measure that quantifies the support of a tree structure derived from IOP rules in knowledge graphs, defined as the ratio of the number of entity pairs satisfying the tree's head to the total number of entities satisfying its body.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-6",
          "local_name": "TreeSC",
          "local_types": [
            "concept",
            "algorithm",
            "model",
            "data structure",
            "theory"
          ],
          "iri": "Entity-treesc-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-1",
          "local_name": "TreeSC",
          "local_types": [
            "function",
            "concept",
            "term",
            "mathematical concept",
            "metric",
            "evaluation measure"
          ],
          "iri": "Entity-treesc-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-3",
          "local_name": "TreeSC",
          "local_types": [
            "performance measure",
            "evaluation measure",
            "metric"
          ],
          "iri": "Entity-treesc-Mention-3"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-4",
          "local_name": "TreeSC",
          "local_types": [
            "threshold",
            "metric"
          ],
          "iri": "Entity-treesc-Mention-4"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "TreeSC",
          "local_types": [
            "evaluation measure",
            "metric"
          ],
          "iri": "Entity-treesc-Mention-5"
        }
      ],
      "relevance": 0.55859375
    },
    "Entity-entity_e": {
      "node_id": "entity_e",
      "disambiguation_index": 0,
      "label": "entities E",
      "aliases": [
        "entities E"
      ],
      "types": [
        "set",
        "entity",
        "data structure",
        "data element",
        "entity set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "entities E refers to the collection of individual items or nodes within a knowledge graph (KG) that are utilized in the context of sampling for learning shape patterns related to a specific target predicate.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "entities E",
          "local_types": [
            "set",
            "entity",
            "data structure",
            "data element",
            "entity set"
          ],
          "iri": "Entity-entity_e-Mention-1"
        }
      ],
      "relevance": 0.55859375
    },
    "Entity-feature": {
      "node_id": "feature",
      "disambiguation_index": 0,
      "label": "feature",
      "aliases": [
        "feature",
        "features"
      ],
      "types": [
        "attribute",
        "characteristic",
        "data attribute",
        "feature"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'feature' refers to an important characteristic of the SHACLEARNER system, specifically highlighting the significance of learning fully abstracted shapes to avoid the combinatorial explosion of partially instantiated shapes in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-2",
          "local_name": "feature",
          "local_types": [
            "characteristic",
            "attribute"
          ],
          "iri": "Entity-feature-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-3",
          "local_name": "features",
          "local_types": [
            "attribute",
            "characteristic",
            "data attribute",
            "feature"
          ],
          "iri": "Entity-feature-Mention-2"
        }
      ],
      "relevance": 0.55859375
    },
    "Entity-sample": {
      "node_id": "sample",
      "disambiguation_index": 0,
      "label": "sample",
      "aliases": [
        "The sample",
        "sample"
      ],
      "types": [
        "data",
        "input",
        "sample"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The sample refers to a subset of the knowledge graph that is selected using a sampling method to prune less relevant entities and predicates for the purpose of learning IOP rules.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-4",
          "local_name": "sample",
          "local_types": [
            "data",
            "input"
          ],
          "iri": "Entity-sample-Mention-1"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-4",
          "local_name": "The sample",
          "local_types": [
            "sample"
          ],
          "iri": "Entity-sample-Mention-2"
        }
      ],
      "relevance": 0.55810546875
    },
    "Entity-knowledge_panel": {
      "node_id": "knowledge_panel",
      "disambiguation_index": 0,
      "label": "knowledge panels",
      "aliases": [
        "knowledge panels"
      ],
      "types": [
        "information display",
        "user interface element",
        "search engine feature",
        "feature"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Knowledge panels are information displays that provide concise and relevant details about a specific entity, typically appearing in search engine results to enhance user experience.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-1",
          "local_name": "knowledge panels",
          "local_types": [
            "user interface element",
            "feature"
          ],
          "iri": "Entity-knowledge_panel-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "knowledge panels",
          "local_types": [
            "information display",
            "search engine feature",
            "feature"
          ],
          "iri": "Entity-knowledge_panel-Mention-2"
        }
      ],
      "relevance": 0.5576171875
    },
    "Entity-maximum_length": {
      "node_id": "maximum_length",
      "disambiguation_index": 0,
      "label": "maximum length",
      "aliases": [
        "maximum length"
      ],
      "types": [
        "parameter",
        "constraint"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'maximum length' refers to a constraint in the SHACLEARNER algorithm that limits the length of the generated Inverse Open Path (IOP) rules during the rule generation process.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-5",
          "local_name": "maximum length",
          "local_types": [
            "parameter",
            "constraint"
          ],
          "iri": "Entity-maximum_length-Mention-1"
        }
      ],
      "relevance": 0.5576171875
    },
    "Entity-annotation": {
      "node_id": "annotation",
      "disambiguation_index": 0,
      "label": "annotation",
      "aliases": [
        "annotation"
      ],
      "types": [
        "metadata",
        "data description"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'annotation' refers to the metadata associated with a branch in a SHACL tree that specifies the cardinality constraints for paths within the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-4",
          "local_name": "annotation",
          "local_types": [
            "metadata",
            "data description"
          ],
          "iri": "Entity-annotation-Mention-1"
        }
      ],
      "relevance": 0.5576171875
    },
    "Entity-shape_tree": {
      "node_id": "shape_tree",
      "disambiguation_index": 0,
      "label": "shape tree",
      "aliases": [
        "shape tree"
      ],
      "types": [
        "tree",
        "tree structure",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A shape tree is a structured representation of paths and relationships in a knowledge graph, used to facilitate sequential querying and validation of graph data through a depth-first approach.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-6",
          "local_name": "shape tree",
          "local_types": [
            "tree",
            "tree structure",
            "data structure"
          ],
          "iri": "Entity-shape_tree-Mention-1"
        }
      ],
      "relevance": 0.5576171875
    },
    "Entity-unary_predicate_which_have_at_least_one_hundred_fact": {
      "node_id": "unary_predicate_which_have_at_least_one_hundred_fact",
      "disambiguation_index": 0,
      "label": "unary predicates which have at least one hundred facts",
      "aliases": [
        "unary predicates which have at least one hundred facts",
        "unary predicates and facts"
      ],
      "types": [
        "predicate",
        "fact"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Unary predicates that are defined in knowledge graphs and have a minimum of one hundred associated facts, which are used to ensure meaningful learning and analysis of shapes in the context of knowledge graph processing.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-3",
          "local_name": "unary predicates which have at least one hundred facts",
          "local_types": [
            "predicate",
            "fact"
          ],
          "iri": "Entity-unary_predicate_which_have_at_least_one_hundred_fact-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-1",
          "local_name": "unary predicates and facts",
          "local_types": [
            "fact",
            "predicate"
          ],
          "iri": "Entity-unary_predicate_which_have_at_least_one_hundred_fact-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-5",
          "local_name": "unary predicates and facts",
          "local_types": [
            "predicate",
            "fact"
          ],
          "iri": "Entity-unary_predicate_which_have_at_least_one_hundred_fact-Mention-3"
        }
      ],
      "relevance": 0.55712890625
    },
    "Entity-p__1q__z0__z1q_": {
      "node_id": "p__1q__z0__z1q_",
      "disambiguation_index": 0,
      "label": "P'1^q(z0, z1^q)",
      "aliases": [
        "P'1^q(z0, z1^q)",
        "P'2^q(z1^q, z2^q)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "P'1^q(z0, z1^q) represents a specific predicate relationship in a tree structure derived from annotated Inverse Open Path rules, where z0 is a subject entity and z1^q is a set of object entities, used to express constraints on knowledge graph data.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'1^q(z0, z1^q)",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-p__1q__z0__z1q_-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'2^q(z1^q, z2^q)",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-p__1q__z0__z1q_-Mention-2"
        }
      ],
      "relevance": 0.55712890625
    },
    "Entity-p__1": {
      "node_id": "p__1",
      "disambiguation_index": 0,
      "label": "P'1",
      "aliases": [
        "P'1",
        "P'1_1"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P'1 refers to a predicate in the context of a tree structure used to represent relationships between entities in a knowledge graph, specifically as part of a formalism for deriving SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'1",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-p__1-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'1_1",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-p__1-Mention-2"
        }
      ],
      "relevance": 0.556640625
    },
    "Entity-shacl-sparql": {
      "node_id": "shacl-sparql",
      "disambiguation_index": 0,
      "label": "SHACL-SPARQL",
      "aliases": [
        "SHACL-SPARQL"
      ],
      "types": [
        "constraint language",
        "constraint",
        "query language",
        "standard",
        "specification"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "SHACL-SPARQL is a specification that combines the Shapes Constraint Language (SHACL) with SPARQL to define and query constraints on RDF data.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-3",
          "local_name": "SHACL-SPARQL",
          "local_types": [
            "constraint language",
            "constraint",
            "query language",
            "standard",
            "specification"
          ],
          "iri": "Entity-shacl-sparql-Mention-1"
        }
      ],
      "relevance": 0.556640625
    },
    "Entity-this_phenomenon": {
      "node_id": "this_phenomenon",
      "disambiguation_index": 0,
      "label": "this phenomenon",
      "aliases": [
        "this phenomenon"
      ],
      "types": [
        "phenomenon"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This phenomenon refers to the observed difference in the quality of learned rules from knowledge graphs, which is influenced by the intentional choice of type-like unary predicates as targets in DBpedia and Wikidata compared to the use of binary predicates in YAGO2s.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-5-Sentence-2",
          "local_name": "this phenomenon",
          "local_types": [
            "phenomenon"
          ],
          "iri": "Entity-this_phenomenon-Mention-1"
        }
      ],
      "relevance": 0.556640625
    },
    "Entity-this_manual_mode": {
      "node_id": "this_manual_mode",
      "disambiguation_index": 0,
      "label": "this manual mode",
      "aliases": [
        "this manual mode"
      ],
      "types": [
        "mode"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This manual mode refers to a traditional approach in which learned SHACL shapes are utilized to complete missing facts for specific predicates in a knowledge graph, facilitating the acquisition of entirely missing entity information.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-1",
          "local_name": "this manual mode",
          "local_types": [
            "mode"
          ],
          "iri": "Entity-this_manual_mode-Mention-1"
        }
      ],
      "relevance": 0.556640625
    },
    "Entity-path1__path2__...__pathq": {
      "node_id": "path1__path2__...__pathq",
      "disambiguation_index": 0,
      "label": "Path1 ^ Path2 ^ ... ^ Pathq",
      "aliases": [
        "Path1 ^ Path2 ^ ... ^ Pathq"
      ],
      "types": [
        "path",
        "mathematical expression",
        "branch",
        "sequence",
        "path representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'Path1 ^ Path2 ^ ... ^ Pathq' refers to the sequence of paths or branches that form the head of a tree structure in the context of SHACL shapes, where each path represents a relationship between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-4",
          "local_name": "Path1 ^ Path2 ^ ... ^ Pathq",
          "local_types": [
            "path",
            "mathematical expression",
            "branch",
            "sequence",
            "path representation"
          ],
          "iri": "Entity-path1__path2__...__pathq-Mention-1"
        }
      ],
      "relevance": 0.55615234375
    },
    "Entity-modelling_artefact": {
      "node_id": "modelling_artefact",
      "disambiguation_index": 0,
      "label": "modelling artefacts",
      "aliases": [
        "modelling artefacts"
      ],
      "types": [
        "tool",
        "resource"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Modelling artefacts refer to external resources or tools, such as ontologies or predefined patterns, that are used to assist in the creation or definition of SHACL shapes for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-3",
          "local_name": "modelling artefacts",
          "local_types": [
            "tool",
            "resource"
          ],
          "iri": "Entity-modelling_artefact-Mention-1"
        }
      ],
      "relevance": 0.55615234375
    },
    "Entity-entity_that_satisfy_the_first_argument_of_the_head": {
      "node_id": "entity_that_satisfy_the_first_argument_of_the_head",
      "disambiguation_index": 0,
      "label": "entities that satisfy the first argument of the head",
      "aliases": [
        "entities that satisfy the first argument of the head"
      ],
      "types": [
        "entity",
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Entities that satisfy the first argument of the head refer to the distinct entities in a knowledge graph that fulfill the conditions specified by the head of a given rule in the context of the Inverse Open Path rules, as determined by the matrix computations of the graph's adjacency representation.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "entities that satisfy the first argument of the head",
          "local_types": [
            "entity",
            "argument"
          ],
          "iri": "Entity-entity_that_satisfy_the_first_argument_of_the_head-Mention-1"
        }
      ],
      "relevance": 0.55615234375
    },
    "Entity-2_(1)": {
      "node_id": "2_(1)",
      "disambiguation_index": 1,
      "label": "2",
      "aliases": [
        "2"
      ],
      "types": [
        "number"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, '2' refers to the count of distinct entities that satisfy a specific rule in a knowledge graph, indicating the support of the rule when the cardinality constraint is set to 1.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-2",
          "local_name": "2",
          "local_types": [
            "number"
          ],
          "iri": "Entity-2_(1)-Mention-1"
        }
      ],
      "relevance": 0.55615234375
    },
    "Entity-atomic_body": {
      "node_id": "atomic_body",
      "disambiguation_index": 0,
      "label": "atomic body",
      "aliases": [
        "atomic body",
        "the atomic body"
      ],
      "types": [
        "mathematical concept",
        "concept",
        "model",
        "body"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'atomic body' refers to the specific part of an inverse open path (IOP) rule in predicate logic that is used to predict instances of the rule's head based on the relationships defined in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-5",
          "local_name": "atomic body",
          "local_types": [
            "concept",
            "model"
          ],
          "iri": "Entity-atomic_body-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-5",
          "local_name": "atomic body",
          "local_types": [
            "mathematical concept",
            "concept",
            "model"
          ],
          "iri": "Entity-atomic_body-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-5",
          "local_name": "the atomic body",
          "local_types": [
            "concept",
            "body"
          ],
          "iri": "Entity-atomic_body-Mention-3"
        }
      ],
      "relevance": 0.5556640625
    },
    "Entity-third_rule": {
      "node_id": "third_rule",
      "disambiguation_index": 0,
      "label": "third rule",
      "aliases": [
        "third rule",
        "the third rule"
      ],
      "types": [
        "rule",
        "guideline"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'third rule' refers to a specific IOP rule in the context of knowledge graph learning that requires a song to have at least two producers, making it more constraining than a previously mentioned rule.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-5",
          "local_name": "third rule",
          "local_types": [
            "rule",
            "guideline"
          ],
          "iri": "Entity-third_rule-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "the third rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-third_rule-Mention-2"
        }
      ],
      "relevance": 0.5556640625
    },
    "Entity-a_sample_of_data": {
      "node_id": "a_sample_of_data",
      "disambiguation_index": 0,
      "label": "a sample of data",
      "aliases": [
        "a sample of data"
      ],
      "types": [
        "data"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A sample of data refers to a subset of information extracted from a knowledge graph that is used as input for a graph structure learner to assist in the semi-automatic creation of SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "a sample of data",
          "local_types": [
            "data"
          ],
          "iri": "Entity-a_sample_of_data-Mention-1"
        }
      ],
      "relevance": 0.5556640625
    },
    "Entity-yago": {
      "node_id": "yago",
      "disambiguation_index": 0,
      "label": "Yago",
      "aliases": [
        "Yago"
      ],
      "types": [
        "knowledge graph",
        "dataset",
        "benchmark",
        "project",
        "database",
        "data source"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Yago is a large-scale knowledge graph and dataset that provides structured information about entities and their relationships, contributing to the development of public knowledge graphs alongside DBpedia.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "Yago",
          "local_types": [
            "knowledge graph",
            "database",
            "project",
            "data source"
          ],
          "iri": "Entity-yago-Mention-1"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-1",
          "local_name": "Yago",
          "local_types": [
            "knowledge graph",
            "benchmark",
            "dataset"
          ],
          "iri": "Entity-yago-Mention-2"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-rule_mining": {
      "node_id": "rule_mining",
      "disambiguation_index": 0,
      "label": "rule mining",
      "aliases": [
        "rule mining"
      ],
      "types": [
        "knowledge extraction",
        "methodology",
        "data mining",
        "research area"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Rule mining is a data mining technique used to discover interesting patterns or rules from large datasets, often applied in knowledge extraction and knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-1",
          "local_name": "rule mining",
          "local_types": [
            "knowledge extraction",
            "methodology",
            "data mining",
            "research area"
          ],
          "iri": "Entity-rule_mining-Mention-1"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-z_i": {
      "node_id": "z_i",
      "disambiguation_index": 0,
      "label": "z_i",
      "aliases": [
        "z_i"
      ],
      "types": [
        "mathematical entity",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, z_i refers to a variable used in a shape definition from Wikidata, which is instantiated by entities to express constraints in the Shapes Constraint Language (SHACL).",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-2-Sentence-2",
          "local_name": "z_i",
          "local_types": [
            "mathematical entity",
            "variable"
          ],
          "iri": "Entity-z_i-Mention-1"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-open": {
      "node_id": "open",
      "disambiguation_index": 0,
      "label": "open",
      "aliases": [
        "open"
      ],
      "types": [
        "state"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph rule mining, 'open' refers to a variable that does not occur in at least two distinct predicate terms, distinguishing it from a 'closed' variable.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-1",
          "local_name": "open",
          "local_types": [
            "state"
          ],
          "iri": "Entity-open-Mention-1"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-inferring_new_fact": {
      "node_id": "inferring_new_fact",
      "disambiguation_index": 0,
      "label": "inferring new facts",
      "aliases": [
        "inferring new facts"
      ],
      "types": [
        "process",
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Inferring new facts refers to the process of deriving additional information or knowledge from existing data within a knowledge graph, typically through the application of specific rules or constraints, such as Closed rules (CRs), that help to ensure the consistency and validity of the graph's data.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-2",
          "local_name": "inferring new facts",
          "local_types": [
            "process",
            "fact"
          ],
          "iri": "Entity-inferring_new_fact-Mention-1"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-r__(1)": {
      "node_id": "r__(1)",
      "disambiguation_index": 1,
      "label": "r'",
      "aliases": [
        "r'"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of inverse open path rules (IOP), 'r'' refers to a specific IOP rule that is derived from a general form of IOP rules, which can be shortened by removing the last head predicate while maintaining its structure and properties.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-2",
          "local_name": "r'",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-r__(1)-Mention-1"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-a_sampling_method_sampling": {
      "node_id": "a_sampling_method_sampling",
      "disambiguation_index": 0,
      "label": "a sampling method Sampling",
      "aliases": [
        "a sampling method Sampling"
      ],
      "types": [
        "method"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A sampling method Sampling refers to a technique used in the SHACLEARNER algorithm to selectively prune entities and predicates from a knowledge graph, thereby creating a sampled version that focuses on those most relevant to a specific target predicate.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "a sampling method Sampling",
          "local_types": [
            "method"
          ],
          "iri": "Entity-a_sampling_method_sampling-Mention-1"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-corresponding_fact_set_k_": {
      "node_id": "corresponding_fact_set_k_",
      "disambiguation_index": 0,
      "label": "corresponding fact set K'",
      "aliases": [
        "corresponding fact set K'"
      ],
      "types": [
        "fact set"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The corresponding fact set K' refers to a subset of facts from a knowledge graph that is derived from a sampled set of entities related to a specific target predicate, which is utilized for learning Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-4",
          "local_name": "corresponding fact set K'",
          "local_types": [
            "fact set"
          ],
          "iri": "Entity-corresponding_fact_set_k_-Mention-1"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-the_property_declaration": {
      "node_id": "the_property_declaration",
      "disambiguation_index": 0,
      "label": "the property declaration",
      "aliases": [
        "the property declaration"
      ],
      "types": [
        "property",
        "declaration"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The property declaration refers to a specific component in SHACL (Shapes Constraint Language) that defines constraints on properties within a knowledge graph, including cardinality constraints indicated by annotations.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-4",
          "local_name": "the property declaration",
          "local_types": [
            "property",
            "declaration"
          ],
          "iri": "Entity-the_property_declaration-Mention-1"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-tighter_restriction": {
      "node_id": "tighter_restriction",
      "disambiguation_index": 0,
      "label": "tighter restrictions",
      "aliases": [
        "tighter restrictions"
      ],
      "types": [
        "restrictions",
        "restriction"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Tighter restrictions refer to the increased constraints required to satisfy higher cardinality conditions in the context of learning rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-6-Sentence-2",
          "local_name": "tighter restrictions",
          "local_types": [
            "restrictions",
            "restriction"
          ],
          "iri": "Entity-tighter_restriction-Mention-1"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-x_(4)": {
      "node_id": "x_(4)",
      "disambiguation_index": 4,
      "label": "x",
      "aliases": [
        "x"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of SHACL shape learning from knowledge graphs, 'x' refers to a song entity that is required to be associated with an album which has a specific record label 'y'.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-3",
          "local_name": "x",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-x_(4)-Mention-1"
        }
      ],
      "relevance": 0.55517578125
    },
    "Entity-k": {
      "node_id": "k",
      "disambiguation_index": 0,
      "label": "K",
      "aliases": [
        "K",
        "k"
      ],
      "types": [
        "knowledge graph",
        "mathematical object",
        "set",
        "variable",
        "parameter",
        "mathematical structure",
        "symbol",
        "mathematical symbol",
        "mathematical notation",
        "graph"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "K refers to a knowledge graph, which is defined as a pair consisting of a set of entities E and a set of facts F, where all entities in F are also included in E.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-6",
          "local_name": "K",
          "local_types": [
            "knowledge graph",
            "mathematical object",
            "mathematical notation",
            "symbol"
          ],
          "iri": "Entity-k-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-5",
          "local_name": "K",
          "local_types": [
            "mathematical notation",
            "variable"
          ],
          "iri": "Entity-k-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-9",
          "local_name": "k",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-k-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-11",
          "local_name": "K",
          "local_types": [
            "mathematical symbol",
            "variable"
          ],
          "iri": "Entity-k-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "K",
          "local_types": [
            "mathematical object",
            "set",
            "mathematical structure",
            "mathematical notation",
            "graph"
          ],
          "iri": "Entity-k-Mention-5"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-2",
          "local_name": "K",
          "local_types": [
            "mathematical symbol",
            "mathematical object",
            "set"
          ],
          "iri": "Entity-k-Mention-6"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-4",
          "local_name": "K",
          "local_types": [
            "mathematical symbol",
            "variable"
          ],
          "iri": "Entity-k-Mention-7"
        }
      ],
      "relevance": 0.5546875
    },
    "Entity-target_predicate": {
      "node_id": "target_predicate",
      "disambiguation_index": 0,
      "label": "target predicate",
      "aliases": [
        "target predicates",
        "target predicate"
      ],
      "types": [
        "linguistic term",
        "logical predicate",
        "logical construct",
        "target",
        "predicate",
        "concept",
        "relation",
        "mathematical expression",
        "logical statement",
        "predicate logic",
        "data structure",
        "data attribute",
        "data element",
        "logical expression",
        "linguistic element",
        "logical condition"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'target predicate' refers to a specific predicate in the context of SHACL that is constrained by node shapes, exemplified by the unary predicate 'human', which is used to define conditions that entities must satisfy within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "target predicate",
          "local_types": [
            "predicate",
            "concept",
            "logical construct"
          ],
          "iri": "Entity-target_predicate-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-3",
          "local_name": "target predicate",
          "local_types": [
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-target_predicate-Mention-2"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-7",
          "local_name": "target predicate",
          "local_types": [
            "linguistic element",
            "predicate"
          ],
          "iri": "Entity-target_predicate-Mention-3"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "target predicate",
          "local_types": [
            "predicate",
            "relation",
            "logical statement"
          ],
          "iri": "Entity-target_predicate-Mention-4"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-3",
          "local_name": "target predicate",
          "local_types": [
            "linguistic term",
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-target_predicate-Mention-5"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-5",
          "local_name": "target predicate",
          "local_types": [
            "logical construct",
            "predicate",
            "logical statement"
          ],
          "iri": "Entity-target_predicate-Mention-6"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "target predicate",
          "local_types": [
            "predicate",
            "logical expression",
            "logical construct",
            "predicate logic"
          ],
          "iri": "Entity-target_predicate-Mention-7"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-2",
          "local_name": "target predicates",
          "local_types": [
            "predicate",
            "mathematical expression",
            "logical statement"
          ],
          "iri": "Entity-target_predicate-Mention-8"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-3",
          "local_name": "target predicates",
          "local_types": [
            "predicate",
            "data element",
            "concept"
          ],
          "iri": "Entity-target_predicate-Mention-9"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-4",
          "local_name": "target predicates",
          "local_types": [
            "target",
            "predicate"
          ],
          "iri": "Entity-target_predicate-Mention-10"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-7",
          "local_name": "target predicates",
          "local_types": [
            "predicate",
            "data structure"
          ],
          "iri": "Entity-target_predicate-Mention-11"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-8",
          "local_name": "target predicate",
          "local_types": [
            "concept",
            "linguistic element"
          ],
          "iri": "Entity-target_predicate-Mention-12"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "target predicates",
          "local_types": [
            "linguistic element",
            "predicate",
            "concept"
          ],
          "iri": "Entity-target_predicate-Mention-13"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "target predicates",
          "local_types": [
            "predicate",
            "concept"
          ],
          "iri": "Entity-target_predicate-Mention-14"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-2",
          "local_name": "target predicates",
          "local_types": [
            "logical predicate",
            "logical construct",
            "predicate",
            "data attribute",
            "logical statement"
          ],
          "iri": "Entity-target_predicate-Mention-15"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "target predicates",
          "local_types": [
            "predicate",
            "logical expression"
          ],
          "iri": "Entity-target_predicate-Mention-16"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-2",
          "local_name": "target predicates",
          "local_types": [
            "predicate",
            "concept",
            "logical construct"
          ],
          "iri": "Entity-target_predicate-Mention-17"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-3",
          "local_name": "target predicate",
          "local_types": [
            "predicate",
            "logical statement"
          ],
          "iri": "Entity-target_predicate-Mention-18"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-4",
          "local_name": "target predicate",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-target_predicate-Mention-19"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-3",
          "local_name": "target predicates",
          "local_types": [
            "predicate",
            "logical expression",
            "logical statement"
          ],
          "iri": "Entity-target_predicate-Mention-20"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-2",
          "local_name": "target predicates",
          "local_types": [
            "predicate",
            "logical condition"
          ],
          "iri": "Entity-target_predicate-Mention-21"
        },
        {
          "reference": "Section-18-Paragraph-3-Sentence-1",
          "local_name": "target predicate",
          "local_types": [
            "predicate",
            "logical statement",
            "logical construct"
          ],
          "iri": "Entity-target_predicate-Mention-22"
        }
      ],
      "relevance": 0.55419921875
    },
    "Entity-p3": {
      "node_id": "p3",
      "disambiguation_index": 0,
      "label": "P3",
      "aliases": [
        "P3"
      ],
      "types": [
        "predicate",
        "relation",
        "symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P3 refers to a predicate in the context of an open path rule, specifically representing a relationship between two entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "P3",
          "local_types": [
            "predicate",
            "relation",
            "symbol"
          ],
          "iri": "Entity-p3-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "P3",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p3-Mention-2"
        }
      ],
      "relevance": 0.55419921875
    },
    "Entity-p1__y__z_": {
      "node_id": "p1__y__z_",
      "disambiguation_index": 0,
      "label": "P1(y, z)",
      "aliases": [
        "P1(y, z)"
      ],
      "types": [
        "predicate",
        "mathematical expression",
        "logical expression",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P1(y, z) is a predicate in the context of an Inverse Open Path (IOP) rule that connects entities along a path defined by a chain of predicates, specifically linking the subject argument of the body predicate Pt to the object argument of the last predicate P2.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "P1(y, z)",
          "local_types": [
            "predicate",
            "logical expression"
          ],
          "iri": "Entity-p1__y__z_-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-1",
          "local_name": "P1(y, z)",
          "local_types": [
            "predicate",
            "mathematical expression",
            "mathematical notation"
          ],
          "iri": "Entity-p1__y__z_-Mention-2"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "P1(y, z)",
          "local_types": [
            "mathematical expression"
          ],
          "iri": "Entity-p1__y__z_-Mention-3"
        }
      ],
      "relevance": 0.55419921875
    },
    "Entity-_031_": {
      "node_id": "_031_",
      "disambiguation_index": 0,
      "label": "[0,3,1]",
      "aliases": [
        "[0,3,1]"
      ],
      "types": [
        "data structure",
        "vector"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '[0,3,1]' refers to the vector V^1(P1, P2), which represents the count of distinct entities satisfying a specific path rule in the context of adjacency matrix computations for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-5",
          "local_name": "[0,3,1]",
          "local_types": [
            "data structure",
            "vector"
          ],
          "iri": "Entity-_031_-Mention-1"
        }
      ],
      "relevance": 0.5537109375
    },
    "Entity-unary_predicate_human": {
      "node_id": "unary_predicate_human",
      "disambiguation_index": 0,
      "label": "unary predicate human",
      "aliases": [
        "unary predicate human"
      ],
      "types": [
        "predicate",
        "human"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term 'unary predicate human' refers to a logical expression in the context of the Shapes Constraint Language (SHACL) that identifies entities classified as 'human' within a knowledge graph, serving as a target for constraints that validate related properties of these entities.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "unary predicate human",
          "local_types": [
            "predicate",
            "human"
          ],
          "iri": "Entity-unary_predicate_human-Mention-1"
        }
      ],
      "relevance": 0.5537109375
    },
    "Entity-ptq__z__q-1__q__yq_": {
      "node_id": "ptq__z__q-1__q__yq_",
      "disambiguation_index": 0,
      "label": "P't^q(z(q-1)^q, y^q)",
      "aliases": [
        "P't^q(z(q-1)^q, y^q)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "P't^q(z(q-1)^q, y^q) represents a specific component of a tree structure in the context of SHACL shapes, where it denotes a predicate that connects entities in a knowledge graph, contributing to the overall logical expression of the tree's head and body in the learning process of shape constraints.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P't^q(z(q-1)^q, y^q)",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-ptq__z__q-1__q__yq_-Mention-1"
        }
      ],
      "relevance": 0.5537109375
    },
    "Entity-those_that_are_missed": {
      "node_id": "those_that_are_missed",
      "disambiguation_index": 0,
      "label": "those that are missed",
      "aliases": [
        "those that are missed"
      ],
      "types": [
        "constraint"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'those that are missed' refers to the constraints or knowledge that are not successfully identified or learned by the SHACLearner algorithm during the process of mining shape constraints from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-4",
          "local_name": "those that are missed",
          "local_types": [
            "constraint"
          ],
          "iri": "Entity-those_that_are_missed-Mention-1"
        }
      ],
      "relevance": 0.5537109375
    },
    "Entity-entity_pair": {
      "node_id": "entity_pair",
      "disambiguation_index": 0,
      "label": "entity pairs",
      "aliases": [
        "entity pairs"
      ],
      "types": [
        "knowledge graph component",
        "pair",
        "entity",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Entity pairs refer to pairs of entities in a knowledge graph that satisfy the conditions of a rule, allowing for the inference of new facts based on the relationships defined by the rule.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-2",
          "local_name": "entity pairs",
          "local_types": [
            "knowledge graph component",
            "pair",
            "entity",
            "data structure"
          ],
          "iri": "Entity-entity_pair-Mention-1"
        }
      ],
      "relevance": 0.55322265625
    },
    "Entity-set_of_pair_of_entity": {
      "node_id": "set_of_pair_of_entity",
      "disambiguation_index": 0,
      "label": "set of pairs of entities",
      "aliases": [
        "set of pairs of entities"
      ],
      "types": [
        "data structure",
        "mathematical concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'set of pairs of entities' refers to a collection of entity pairs (e, e1), ..., (e, eq) that fulfill the conditions specified by the head of a tree structure in the context of SHACL shapes, indicating relationships and facts within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "set of pairs of entities",
          "local_types": [
            "data structure",
            "mathematical concept"
          ],
          "iri": "Entity-set_of_pair_of_entity-Mention-1"
        }
      ],
      "relevance": 0.55322265625
    },
    "Entity-more_complex_tree": {
      "node_id": "more_complex_tree",
      "disambiguation_index": 0,
      "label": "more complex trees",
      "aliases": [
        "more complex trees"
      ],
      "types": [
        "tree"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'more complex trees' refer to advanced structural representations that are constructed from simpler shape patterns, specifically utilizing mined rules to enhance the validation and inference capabilities of the graph data.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-5",
          "local_name": "more complex trees",
          "local_types": [
            "tree"
          ],
          "iri": "Entity-more_complex_tree-Mention-1"
        }
      ],
      "relevance": 0.55322265625
    },
    "Entity-varying_confidence": {
      "node_id": "varying_confidence",
      "disambiguation_index": 0,
      "label": "varying confidence",
      "aliases": [
        "varying confidence"
      ],
      "types": [
        "confidence"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Varying confidence refers to the different levels of certainty associated with the shapes learned by the SHACLEARNER from knowledge graphs, indicating the reliability and quality of the discovered patterns.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "varying confidence",
          "local_types": [
            "confidence"
          ],
          "iri": "Entity-varying_confidence-Mention-1"
        }
      ],
      "relevance": 0.55322265625
    },
    "Entity-scoring_function_heuristic": {
      "node_id": "scoring_function_heuristic",
      "disambiguation_index": 0,
      "label": "scoring function heuristic",
      "aliases": [
        "scoring function heuristic",
        "the scoring function heuristic"
      ],
      "types": [
        "function",
        "heuristic",
        "evaluation method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The scoring function heuristic is a method used to evaluate and prune candidate rules in the context of learning optimal paths in knowledge graphs, specifically designed to enhance the selection of open path (OP) rules based on their quality and relevance.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-1-Sentence-2",
          "local_name": "scoring function heuristic",
          "local_types": [
            "function",
            "heuristic",
            "evaluation method"
          ],
          "iri": "Entity-scoring_function_heuristic-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-2",
          "local_name": "the scoring function heuristic",
          "local_types": [
            "function",
            "heuristic"
          ],
          "iri": "Entity-scoring_function_heuristic-Mention-2"
        }
      ],
      "relevance": 0.552734375
    },
    "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part": {
      "node_id": "the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part",
      "disambiguation_index": 0,
      "label": "the number of entities that can instantiate z0 to satisfy the head part",
      "aliases": [
        "the number of entities that can instantiate z0 to satisfy the body part",
        "the number of entities that can instantiate z0 to satisfy the head part"
      ],
      "types": [
        "entity",
        "entity count",
        "body part",
        "count",
        "head part"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'the number of entities that can instantiate z0 to satisfy the head part' refers to the count of distinct entities in a knowledge graph that can be linked to a specific predicate in the head of an inverse open path rule, indicating how many instances fulfill the conditions defined by that rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "the number of entities that can instantiate z0 to satisfy the head part",
          "local_types": [
            "count",
            "head part",
            "entity",
            "entity count"
          ],
          "iri": "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "the number of entities that can instantiate z0 to satisfy the body part",
          "local_types": [
            "count",
            "entity",
            "entity count",
            "body part"
          ],
          "iri": "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part-Mention-2"
        }
      ],
      "relevance": 0.552734375
    },
    "Entity-the_head_of_the_iop_rule": {
      "node_id": "the_head_of_the_iop_rule",
      "disambiguation_index": 0,
      "label": "the head of the IOP rule",
      "aliases": [
        "the head of the IOP rule"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The head of the IOP rule refers to the part of an Inverse Open Path rule that specifies the minimum cardinality constraints, which are conditions that dictate the minimum number of instances required for the rule to be satisfied.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-2-Sentence-3",
          "local_name": "the head of the IOP rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_head_of_the_iop_rule-Mention-1"
        }
      ],
      "relevance": 0.552734375
    },
    "Entity-specific_variable_binding_pattern": {
      "node_id": "specific_variable_binding_pattern",
      "disambiguation_index": 0,
      "label": "specific variable binding pattern",
      "aliases": [
        "specific variable binding pattern"
      ],
      "types": [
        "pattern"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'specific variable binding pattern' refers to a structured arrangement in predicate calculus rules where a single body atom is associated with a sequence of conjunctive atoms in the head, facilitating the formulation of Inverse Open Path rules for knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-2",
          "local_name": "specific variable binding pattern",
          "local_types": [
            "pattern"
          ],
          "iri": "Entity-specific_variable_binding_pattern-Mention-1"
        }
      ],
      "relevance": 0.5517578125
    },
    "Entity-the_given_form": {
      "node_id": "the_given_form",
      "disambiguation_index": 0,
      "label": "the given form",
      "aliases": [
        "the given form"
      ],
      "types": [
        "form"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The given form refers to a specific structure of open path (OP) rules in knowledge graph completion, characterized by a sequence of predicates and entity variables that imply the existence of a fact within the graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-4-Sentence-2",
          "local_name": "the given form",
          "local_types": [
            "form"
          ],
          "iri": "Entity-the_given_form-Mention-1"
        }
      ],
      "relevance": 0.5517578125
    },
    "Entity-fig_._2_(1)": {
      "node_id": "fig_._2_(1)",
      "disambiguation_index": 1,
      "label": "Fig. 2",
      "aliases": [
        "Fig. 2"
      ],
      "types": [
        "figure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Fig. 2 illustrates a SHACL shape from Wikidata that specifies the constraints for entities satisfying the predicate human, detailing the required paths related to citizenship, parentage, and native language.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "Fig. 2",
          "local_types": [
            "figure"
          ],
          "iri": "Entity-fig_._2_(1)-Mention-1"
        }
      ],
      "relevance": 0.5517578125
    },
    "Entity-exists__z__s__y__s_": {
      "node_id": "exists__z__s__y__s_",
      "disambiguation_index": 0,
      "label": "exists(z*s, y*s)",
      "aliases": [
        "exists(z*s, y*s)"
      ],
      "types": [
        "quantifier",
        "mathematical notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'exists(z*s, y*s)' refers to a quantifier in the context of a tree structure in the SHACL shapes framework, indicating the existence of a sequence of entities related by specific predicates within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "exists(z*s, y*s)",
          "local_types": [
            "quantifier",
            "mathematical notation"
          ],
          "iri": "Entity-exists__z__s__y__s_-Mention-1"
        }
      ],
      "relevance": 0.5517578125
    },
    "Entity-length": {
      "node_id": "length",
      "disambiguation_index": 0,
      "label": "length",
      "aliases": [
        "lengths",
        "length"
      ],
      "types": [
        "feature",
        "dimension",
        "property",
        "concept",
        "mathematical property",
        "measurement",
        "parameter",
        "length",
        "attribute"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'length' refers to the number of predicates in an inverse open path (IOP) rule, which affects the quality measure known as inverse open path standard confidence (IOPSC).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-1",
          "local_name": "length",
          "local_types": [
            "measurement",
            "parameter"
          ],
          "iri": "Entity-length-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "length",
          "local_types": [
            "attribute",
            "measurement",
            "length"
          ],
          "iri": "Entity-length-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-4",
          "local_name": "length",
          "local_types": [
            "measurement",
            "dimension"
          ],
          "iri": "Entity-length-Mention-3"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-2",
          "local_name": "lengths",
          "local_types": [
            "dimension",
            "property",
            "concept",
            "mathematical property",
            "measurement",
            "attribute"
          ],
          "iri": "Entity-length-Mention-4"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-3",
          "local_name": "length",
          "local_types": [
            "property",
            "measurement",
            "feature"
          ],
          "iri": "Entity-length-Mention-5"
        },
        {
          "reference": "Section-15-Paragraph-7-Sentence-1",
          "local_name": "lengths",
          "local_types": [
            "property",
            "concept",
            "mathematical property",
            "measurement",
            "parameter"
          ],
          "iri": "Entity-length-Mention-6"
        }
      ],
      "relevance": 0.55126953125
    },
    "Entity-ongoing_maintenance_and_extension": {
      "node_id": "ongoing_maintenance_and_extension",
      "disambiguation_index": 0,
      "label": "ongoing maintenance and extension",
      "aliases": [
        "ongoing maintenance and extension"
      ],
      "types": [
        "maintenance",
        "extension",
        "process"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Ongoing maintenance and extension refers to the continuous processes and activities required to manage and enhance the structure and integrity of knowledge graphs, particularly through the application of shape constraints that facilitate validation and editing tasks.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-5",
          "local_name": "ongoing maintenance and extension",
          "local_types": [
            "maintenance",
            "extension",
            "process"
          ],
          "iri": "Entity-ongoing_maintenance_and_extension-Mention-1"
        }
      ],
      "relevance": 0.55126953125
    },
    "Entity-subject_and_object_binding": {
      "node_id": "subject_and_object_binding",
      "disambiguation_index": 0,
      "label": "subject and object bindings",
      "aliases": [
        "subject and object bindings"
      ],
      "types": [
        "subject",
        "binding",
        "object"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Subject and object bindings refer to the swapping of predicates in knowledge graphs, where the roles of subjects and objects are interchanged, allowing for the formulation of inverse open path rules that express relationships between entities.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-2",
          "local_name": "subject and object bindings",
          "local_types": [
            "binding"
          ],
          "iri": "Entity-subject_and_object_binding-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-2",
          "local_name": "subject and object bindings",
          "local_types": [
            "binding",
            "subject",
            "object"
          ],
          "iri": "Entity-subject_and_object_binding-Mention-2"
        }
      ],
      "relevance": 0.55126953125
    },
    "Entity-these_predicate": {
      "node_id": "these_predicate",
      "disambiguation_index": 0,
      "label": "These predicates",
      "aliases": [
        "These predicates"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "These predicates refer to unary predicates in knowledge graphs that are associated with classes as their second argument, used for modeling type-like relationships in the context of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-2",
          "local_name": "These predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-these_predicate-Mention-1"
        }
      ],
      "relevance": 0.55126953125
    },
    "Entity-the_first_rule": {
      "node_id": "the_first_rule",
      "disambiguation_index": 0,
      "label": "The first rule",
      "aliases": [
        "The first rule"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The first rule refers to a specific Inverse Open Path (IOP) rule that states an entity 'x' should belong to an album that has 'y' as its record label, illustrating a relationship constraint within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-3",
          "local_name": "The first rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_first_rule-Mention-1"
        }
      ],
      "relevance": 0.55126953125
    },
    "Entity-head_instance": {
      "node_id": "head_instance",
      "disambiguation_index": 0,
      "label": "head instances",
      "aliases": [
        "head instances"
      ],
      "types": [
        "examples",
        "knowledge graph component",
        "data instances",
        "data instance"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Head instances refer to the inferred facts in a knowledge graph that satisfy the predicate of a rule, indicating the successful application of the rule to specific entity pairs.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-2",
          "local_name": "head instances",
          "local_types": [
            "data instance",
            "knowledge graph component"
          ],
          "iri": "Entity-head_instance-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-3",
          "local_name": "head instances",
          "local_types": [
            "data instances",
            "examples"
          ],
          "iri": "Entity-head_instance-Mention-2"
        }
      ],
      "relevance": 0.55078125
    },
    "Entity-z1": {
      "node_id": "z1",
      "disambiguation_index": 0,
      "label": "z1",
      "aliases": [
        "z1"
      ],
      "types": [
        "intermediate entity",
        "variable",
        "mathematical notation",
        "symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of open path rules for knowledge graph completion, 'z1' is a variable representing an entity that is connected to other entities through predicates in the graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "z1",
          "local_types": [
            "variable",
            "symbol"
          ],
          "iri": "Entity-z1-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "z1",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-z1-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "z1",
          "local_types": [
            "intermediate entity",
            "variable"
          ],
          "iri": "Entity-z1-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "z1",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-z1-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "z1",
          "local_types": [
            "variable",
            "mathematical notation"
          ],
          "iri": "Entity-z1-Mention-5"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "z1",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-z1-Mention-6"
        }
      ],
      "relevance": 0.55078125
    },
    "Entity-evaluation": {
      "node_id": "evaluation",
      "disambiguation_index": 0,
      "label": "evaluation",
      "aliases": [
        "evaluation"
      ],
      "types": [
        "assessment process",
        "assessment",
        "analysis"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'evaluation' refers to the final assessment process of an Inverse Open Path (IOP) rule, which is conducted in the subsequent step of the algorithm to determine its effectiveness and quality.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-5-Sentence-2",
          "local_name": "evaluation",
          "local_types": [
            "assessment",
            "analysis"
          ],
          "iri": "Entity-evaluation-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-1",
          "local_name": "evaluation",
          "local_types": [
            "assessment process"
          ],
          "iri": "Entity-evaluation-Mention-2"
        }
      ],
      "relevance": 0.55078125
    },
    "Entity-p__2q": {
      "node_id": "p__2q",
      "disambiguation_index": 0,
      "label": "P'2^q",
      "aliases": [
        "P'2^q"
      ],
      "types": [
        "function",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P'2^q refers to a specific predicate in the general form of a tree structure used in the context of SHACL shapes, representing a relationship between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'2^q",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-p__2q-Mention-1"
        }
      ],
      "relevance": 0.55078125
    },
    "Entity-the_same_variable_in_the_rule": {
      "node_id": "the_same_variable_in_the_rule",
      "disambiguation_index": 0,
      "label": "the same variable in the rule",
      "aliases": [
        "the same variable in the rule"
      ],
      "types": [
        "variable",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'the same variable in the rule' refers to predicate arguments within an Inverse Open Path (IOP) rule that share a common variable, indicating that these arguments should exhibit similar embedding representations in the context of knowledge graph learning.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-3-Sentence-1",
          "local_name": "the same variable in the rule",
          "local_types": [
            "variable",
            "rule"
          ],
          "iri": "Entity-the_same_variable_in_the_rule-Mention-1"
        }
      ],
      "relevance": 0.55078125
    },
    "Entity-stricter_quality_threshold": {
      "node_id": "stricter_quality_threshold",
      "disambiguation_index": 0,
      "label": "stricter quality thresholds",
      "aliases": [
        "stricter quality thresholds"
      ],
      "types": [
        "threshold",
        "quality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Stricter quality thresholds refer to higher standards or criteria applied to evaluate the quality of learned rules in knowledge graph rule-learning, ensuring that only rules meeting these enhanced criteria are retained for further analysis and application.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-4",
          "local_name": "stricter quality thresholds",
          "local_types": [
            "threshold",
            "quality"
          ],
          "iri": "Entity-stricter_quality_threshold-Mention-1"
        }
      ],
      "relevance": 0.55078125
    },
    "Entity-hole": {
      "node_id": "hole",
      "disambiguation_index": 0,
      "label": "HOLE",
      "aliases": [
        "HOLE"
      ],
      "types": [
        "embedding learner",
        "model",
        "algorithm",
        "embedding model"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "HOLE is an embedding learner algorithm designed to process and learn from large knowledge graphs, particularly in scenarios where traditional methods struggle with the scale of data.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-2",
          "local_name": "HOLE",
          "local_types": [
            "embedding learner",
            "model",
            "algorithm",
            "embedding model"
          ],
          "iri": "Entity-hole-Mention-1"
        }
      ],
      "relevance": 0.55029296875
    },
    "Entity-entity-instantiation": {
      "node_id": "entity-instantiation",
      "disambiguation_index": 0,
      "label": "entity-instantiation",
      "aliases": [
        "entity-instantiation of a CP rule",
        "entity-instantiation"
      ],
      "types": [
        "mapping",
        "entity",
        "concept",
        "CP rule",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'entity-instantiation' refers to the specific realization or assignment of entities within a closed path (CP) rule in knowledge graph reasoning, indicating that each instance of a CP rule corresponds to an instance of an open path (OP) rule, but the reverse is not true.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-6",
          "local_name": "entity-instantiation",
          "local_types": [
            "mapping",
            "process",
            "concept"
          ],
          "iri": "Entity-entity-instantiation-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-6",
          "local_name": "entity-instantiation of a CP rule",
          "local_types": [
            "entity",
            "CP rule"
          ],
          "iri": "Entity-entity-instantiation-Mention-2"
        }
      ],
      "relevance": 0.55029296875
    },
    "Entity-the_body_of_r": {
      "node_id": "the_body_of_r",
      "disambiguation_index": 0,
      "label": "the body of r",
      "aliases": [
        "the body of r"
      ],
      "types": [
        "body",
        "relation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The body of r refers to the predicate Pt in an inverse open path (IOP) rule, which is satisfied by a pair of entities (e'', e) if the fact Pt(e'', e) exists in the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-4-Sentence-4",
          "local_name": "the body of r",
          "local_types": [
            "body",
            "relation"
          ],
          "iri": "Entity-the_body_of_r-Mention-1"
        }
      ],
      "relevance": 0.55029296875
    },
    "Entity-p2_2__z1__z2_": {
      "node_id": "p2_2__z1__z2_",
      "disambiguation_index": 0,
      "label": "P'2_2(z1, z2)",
      "aliases": [
        "P'2_2(z1, z2)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "P'2_2(z1, z2) is a mathematical notation representing a specific predicate relationship in the context of a tree structure derived from annotated Inverse Open Path rules, where z1 and z2 are variables denoting entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'2_2(z1, z2)",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-p2_2__z1__z2_-Mention-1"
        }
      ],
      "relevance": 0.55029296875
    },
    "Entity-all_binary_predicate_of_yago2s": {
      "node_id": "all_binary_predicate_of_yago2s",
      "disambiguation_index": 0,
      "label": "all binary predicates of YAGO2s",
      "aliases": [
        "all binary predicates of YAGO2s"
      ],
      "types": [
        "predicate",
        "YAGO2"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "All binary predicates of YAGO2s refer to the 37 distinct relationships that connect pairs of entities within the YAGO2 knowledge graph, which are utilized as target predicates in the context of learning and evaluating shape constraints for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-4",
          "local_name": "all binary predicates of YAGO2s",
          "local_types": [
            "predicate",
            "YAGO2"
          ],
          "iri": "Entity-all_binary_predicate_of_yago2s-Mention-1"
        }
      ],
      "relevance": 0.55029296875
    },
    "Entity-sh__nodeshape": {
      "node_id": "sh__nodeshape",
      "disambiguation_index": 0,
      "label": "sh:nodeShape",
      "aliases": [
        "sh:nodeShape"
      ],
      "types": [
        "semantic web term",
        "shape",
        "SHACL",
        "predicate",
        "RDF term"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "sh:nodeShape is a predicate in the SHACL (Shapes Constraint Language) used to define a shape that specifies constraints on the structure of RDF data.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-3",
          "local_name": "sh:nodeShape",
          "local_types": [
            "semantic web term",
            "shape",
            "SHACL",
            "predicate",
            "RDF term"
          ],
          "iri": "Entity-sh__nodeshape-Mention-1"
        }
      ],
      "relevance": 0.5498046875
    },
    "Entity-over_11_million_fact": {
      "node_id": "over_11_million_fact",
      "disambiguation_index": 0,
      "label": "over 11 million facts",
      "aliases": [
        "over 11 million facts"
      ],
      "types": [
        "fact",
        "data"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'over 11 million facts' refers to the extensive dataset contained within the DBpedia knowledge graph, which serves as a benchmark for evaluating the SHACLEARNER system's ability to learn shapes from large-scale knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-2-Sentence-1",
          "local_name": "over 11 million facts",
          "local_types": [
            "fact",
            "data"
          ],
          "iri": "Entity-over_11_million_fact-Mention-1"
        }
      ],
      "relevance": 0.5498046875
    },
    "Entity-extension": {
      "node_id": "extension",
      "disambiguation_index": 0,
      "label": "extension",
      "aliases": [
        "extension"
      ],
      "types": [
        "process",
        "operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'extension' refers to the ongoing enhancement and maintenance of the graph's structure and data through the application of shape constraints.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-5",
          "local_name": "extension",
          "local_types": [
            "process",
            "operation"
          ],
          "iri": "Entity-extension-Mention-1"
        }
      ],
      "relevance": 0.54931640625
    },
    "Entity-p2__z1__z2_": {
      "node_id": "p2__z1__z2_",
      "disambiguation_index": 0,
      "label": "P2(z1, z2)",
      "aliases": [
        "P2(z1, y)",
        "P2(z0, z1)",
        "P2(z1, z2)",
        "P2'(z1, z2)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P2(z1, z2) is a binary predicate in a closed path rule that relates an intermediate entity z1 to another entity z2 within the context of knowledge graph rule learning.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-4-Sentence-1",
          "local_name": "P2(z1, z2)",
          "local_types": [
            "predicate",
            "mathematical expression"
          ],
          "iri": "Entity-p2__z1__z2_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "P2'(z1, z2)",
          "local_types": [
            "mathematical expression",
            "function"
          ],
          "iri": "Entity-p2__z1__z2_-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "P2'(z1, z2)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p2__z1__z2_-Mention-3"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "P2(z1, z2)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p2__z1__z2_-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "P2(z0, z1)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p2__z1__z2_-Mention-5"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "P2(z0, z1)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p2__z1__z2_-Mention-6"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "P2(z1, y)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p2__z1__z2_-Mention-7"
        }
      ],
      "relevance": 0.54931640625
    },
    "Entity-the_proportion_of_target_predicate": {
      "node_id": "the_proportion_of_target_predicate",
      "disambiguation_index": 0,
      "label": "the proportion of target predicates",
      "aliases": [
        "the proportion of target predicates"
      ],
      "types": [
        "metric",
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The proportion of target predicates refers to the metric that quantifies the fraction of selected target predicates from knowledge graphs for which at least one high-quality Inverse Open Path (IOP) rule was successfully learned.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "the proportion of target predicates",
          "local_types": [
            "metric",
            "predicate"
          ],
          "iri": "Entity-the_proportion_of_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.54931640625
    },
    "Entity-each_consists_of_a_head_at_the_front_of_the_implication_arrow": {
      "node_id": "each_consists_of_a_head_at_the_front_of_the_implication_arrow",
      "disambiguation_index": 0,
      "label": "Each consists of a head at the front of the implication arrow",
      "aliases": [
        "Each consists of a head at the front of the implication arrow"
      ],
      "types": [
        "statement",
        "logical structure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term refers to the structure of closed path rules in knowledge graph rule learning, where each rule is composed of a head that represents the conclusion at the front of the implication arrow and a body that contains the premises at the tail.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-4",
          "local_name": "Each consists of a head at the front of the implication arrow",
          "local_types": [
            "statement",
            "logical structure"
          ],
          "iri": "Entity-each_consists_of_a_head_at_the_front_of_the_implication_arrow-Mention-1"
        }
      ],
      "relevance": 0.54931640625
    },
    "Entity-the_rule_instance": {
      "node_id": "the_rule_instance",
      "disambiguation_index": 0,
      "label": "the rule instances",
      "aliases": [
        "the rule instances"
      ],
      "types": [
        "rule",
        "instance"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The rule instances refer to the specific pairs of entities in a knowledge graph that satisfy both the body and the head of a closed path rule, thereby allowing the inference of new facts based on the established relationships defined by the rule.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "the rule instances",
          "local_types": [
            "rule",
            "instance"
          ],
          "iri": "Entity-the_rule_instance-Mention-1"
        }
      ],
      "relevance": 0.54931640625
    },
    "Entity-an_instance_of_the_head": {
      "node_id": "an_instance_of_the_head",
      "disambiguation_index": 0,
      "label": "an instance of the head",
      "aliases": [
        "an instance of the head"
      ],
      "types": [
        "instance",
        "head"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An instance of the head refers to a specific entity or entities in a knowledge graph that satisfy the conditions defined by the head of an inverse open path (IOP) rule, indicating a relationship or pattern that can be derived from the rule's body.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-5",
          "local_name": "an instance of the head",
          "local_types": [
            "instance",
            "head"
          ],
          "iri": "Entity-an_instance_of_the_head-Mention-1"
        }
      ],
      "relevance": 0.54931640625
    },
    "Entity-new_predicate": {
      "node_id": "new_predicate",
      "disambiguation_index": 0,
      "label": "new predicates",
      "aliases": [
        "new predicates",
        "new predicate"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "New predicates refer to unary predicates generated from existing facts in knowledge graphs, specifically created to represent types or classes in a way that facilitates the learning of abstracted shapes for knowledge graph validation and analysis.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-4",
          "local_name": "new predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-new_predicate-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-5",
          "local_name": "new predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-new_predicate-Mention-2"
        }
      ],
      "relevance": 0.54931640625
    },
    "Entity-one_producer": {
      "node_id": "one_producer",
      "disambiguation_index": 0,
      "label": "one producer",
      "aliases": [
        "one producer"
      ],
      "types": [
        "producer"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs and SHACL shape learning, 'one producer' refers to a cardinality constraint indicating that a song entity must be associated with at least one producer entity.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "one producer",
          "local_types": [
            "producer"
          ],
          "iri": "Entity-one_producer-Mention-1"
        }
      ],
      "relevance": 0.54931640625
    },
    "Entity-the_characteristic_of_discovered_tree": {
      "node_id": "the_characteristic_of_discovered_tree",
      "disambiguation_index": 0,
      "label": "the characteristics of discovered trees",
      "aliases": [
        "the characteristics of discovered trees"
      ],
      "types": [
        "trees",
        "tree",
        "characteristics"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The characteristics of discovered trees refer to the structural and performance metrics of tree shapes generated from Inverse Open Path rules in knowledge graphs, including average TreeSC values, branch counts, and tree-building runtimes.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "the characteristics of discovered trees",
          "local_types": [
            "trees",
            "tree",
            "characteristics"
          ],
          "iri": "Entity-the_characteristic_of_discovered_tree-Mention-1"
        }
      ],
      "relevance": 0.54931640625
    },
    "Entity-the_additional_tree-shaped_constraint": {
      "node_id": "the_additional_tree-shaped_constraint",
      "disambiguation_index": 0,
      "label": "the additional tree-shaped constraint",
      "aliases": [
        "the additional tree-shaped constraint"
      ],
      "types": [
        "constraint",
        "tree"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The additional tree-shaped constraint refers to a specific limitation applied to the basic IOP-shaped constraint in the context of learning tree structures from knowledge graphs, which helps to simplify the resulting trees by pruning a significant percentage of IOP rules.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-2",
          "local_name": "the additional tree-shaped constraint",
          "local_types": [
            "constraint",
            "tree"
          ],
          "iri": "Entity-the_additional_tree-shaped_constraint-Mention-1"
        }
      ],
      "relevance": 0.54931640625
    },
    "Entity-pt_(1)": {
      "node_id": "pt_(1)",
      "disambiguation_index": 1,
      "label": "P't",
      "aliases": [
        "P't"
      ],
      "types": [
        "function",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P't refers to the body predicate of a tree structure in the context of SHACL shapes, representing a specific form of logical expression used to predict instances of the head of the tree based on paths or branches in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P't",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-pt_(1)-Mention-1"
        }
      ],
      "relevance": 0.548828125
    },
    "Entity-exists": {
      "node_id": "exists",
      "disambiguation_index": 0,
      "label": "exists",
      "aliases": [
        "exists"
      ],
      "types": [
        "quantifier",
        "logical operator"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'exists' refers to a logical quantifier used in the general form of a tree structure to indicate the presence of certain entities within a knowledge graph, specifically in the formulation of SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "exists",
          "local_types": [
            "quantifier",
            "logical operator"
          ],
          "iri": "Entity-exists-Mention-1"
        }
      ],
      "relevance": 0.548828125
    },
    "Entity-terminating_node": {
      "node_id": "terminating_node",
      "disambiguation_index": 0,
      "label": "terminating node",
      "aliases": [
        "terminating node"
      ],
      "types": [
        "graph theory",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'terminating node' refers to the endpoint in a tree structure within the context of SHACL shapes, where the cardinality of a path is determined and annotated, indicating the minimum number of instances required for that path in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-4",
          "local_name": "terminating node",
          "local_types": [
            "graph theory",
            "data structure"
          ],
          "iri": "Entity-terminating_node-Mention-1"
        }
      ],
      "relevance": 0.548828125
    },
    "Entity-sc_of_the_tree": {
      "node_id": "sc_of_the_tree",
      "disambiguation_index": 0,
      "label": "SC of the tree",
      "aliases": [
        "the SC of the tree",
        "SC of the tree"
      ],
      "types": [
        "tree",
        "SC",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The SC of the tree refers to the Shape Constraint value of the tree structure mined from knowledge graphs, which quantifies the quality or characteristics of the tree based on the discovered IOP rules.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-2",
          "local_name": "SC of the tree",
          "local_types": [
            "metric"
          ],
          "iri": "Entity-sc_of_the_tree-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-2",
          "local_name": "the SC of the tree",
          "local_types": [
            "SC",
            "tree"
          ],
          "iri": "Entity-sc_of_the_tree-Mention-2"
        }
      ],
      "relevance": 0.548828125
    },
    "Entity-this_potential_post-processing_step": {
      "node_id": "this_potential_post-processing_step",
      "disambiguation_index": 0,
      "label": "this potential post-processing step",
      "aliases": [
        "this potential post-processing step"
      ],
      "types": [
        "method",
        "post-processing"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This potential post-processing step refers to a future investigation aimed at simplifying and enhancing the interpretability of tree shapes derived from IOP rules by unifying variables that appear in multiple branches.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-5-Sentence-2",
          "local_name": "this potential post-processing step",
          "local_types": [
            "method",
            "post-processing"
          ],
          "iri": "Entity-this_potential_post-processing_step-Mention-1"
        }
      ],
      "relevance": 0.548828125
    },
    "Entity-the_ultimate_evaluation": {
      "node_id": "the_ultimate_evaluation",
      "disambiguation_index": 0,
      "label": "The ultimate evaluation",
      "aliases": [
        "The ultimate evaluation"
      ],
      "types": [
        "evaluation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The ultimate evaluation refers to the final assessment process of an Inverse Open Path (IOP) rule, which determines its effectiveness and quality based on specific criteria outlined in the subsequent steps of the algorithm.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-5-Sentence-2",
          "local_name": "The ultimate evaluation",
          "local_types": [
            "evaluation"
          ],
          "iri": "Entity-the_ultimate_evaluation-Mention-1"
        }
      ],
      "relevance": 0.54833984375
    },
    "Entity-an_entire_path_of_shape_predicate": {
      "node_id": "an_entire_path_of_shape_predicate",
      "disambiguation_index": 0,
      "label": "an entire path of shape predicates",
      "aliases": [
        "an entire path of shape predicates"
      ],
      "types": [
        "path",
        "shape predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An entire path of shape predicates refers to a sequence of connected predicates in a tree structure that defines relationships between entities in a knowledge graph, which can be removed to simplify the tree while maintaining its validity and potentially increasing its confidence measure.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "an entire path of shape predicates",
          "local_types": [
            "path",
            "shape predicate"
          ],
          "iri": "Entity-an_entire_path_of_shape_predicate-Mention-1"
        }
      ],
      "relevance": 0.54833984375
    },
    "Entity-maintenance": {
      "node_id": "maintenance",
      "disambiguation_index": 0,
      "label": "maintenance",
      "aliases": [
        "maintenance"
      ],
      "types": [
        "process",
        "operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'maintenance' refers to the ongoing processes and operations required to manage, validate, and extend the structure and data of large knowledge graphs, particularly in the absence of predefined shape constraints.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-5",
          "local_name": "maintenance",
          "local_types": [
            "process",
            "operation"
          ],
          "iri": "Entity-maintenance-Mention-1"
        }
      ],
      "relevance": 0.5478515625
    },
    "Entity-support": {
      "node_id": "support",
      "disambiguation_index": 0,
      "label": "support",
      "aliases": [
        "support"
      ],
      "types": [
        "statistical measure",
        "verb",
        "measure",
        "action",
        "concept",
        "theoretical framework",
        "evaluation metric",
        "rule learning"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of rule learning for knowledge graphs, 'support' refers to a measure that counts the number of instances where both the body and the head of a closed path rule are satisfied by pairs of entities in the graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-6-Sentence-2",
          "local_name": "support",
          "local_types": [
            "rule learning",
            "evaluation metric",
            "measure"
          ],
          "iri": "Entity-support-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-1",
          "local_name": "support",
          "local_types": [
            "statistical measure",
            "verb",
            "measure",
            "action",
            "evaluation metric",
            "rule learning"
          ],
          "iri": "Entity-support-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "support",
          "local_types": [
            "concept",
            "theoretical framework"
          ],
          "iri": "Entity-support-Mention-3"
        }
      ],
      "relevance": 0.5478515625
    },
    "Entity-lemma_1": {
      "node_id": "lemma_1",
      "disambiguation_index": 0,
      "label": "Lemma 1",
      "aliases": [
        "Lemma 1"
      ],
      "types": [
        "mathematical lemma",
        "mathematical statement",
        "theorem",
        "lemma"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Lemma 1 states that the Inverse Open Path Standard Confidence (IOPSC) of an IOP rule is non-increasing as the length of the rule increases, indicating that adding more head predicates to the rule can only decrease its confidence measure.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-1",
          "local_name": "Lemma 1",
          "local_types": [
            "mathematical lemma",
            "mathematical statement",
            "theorem",
            "lemma"
          ],
          "iri": "Entity-lemma_1-Mention-1"
        }
      ],
      "relevance": 0.54736328125
    },
    "Entity-the_body_of_the_shape": {
      "node_id": "the_body_of_the_shape",
      "disambiguation_index": 0,
      "label": "the body of the shape",
      "aliases": [
        "the body of the shape"
      ],
      "types": [
        "concept",
        "body",
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The body of the shape refers to the predicate Pt in a tree structure that defines the conditions under which a pair of entities satisfies the shape's constraints in the context of SHACL (Shapes Constraint Language) for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-4",
          "local_name": "the body of the shape",
          "local_types": [
            "concept",
            "body",
            "shape"
          ],
          "iri": "Entity-the_body_of_the_shape-Mention-1"
        }
      ],
      "relevance": 0.54736328125
    },
    "Entity-cardinality_of_a_path": {
      "node_id": "cardinality_of_a_path",
      "disambiguation_index": 0,
      "label": "Cardinality of a path",
      "aliases": [
        "Cardinality of a path"
      ],
      "types": [
        "concept",
        "path"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The cardinality of a path refers to the minimum number of instances that must be associated with a specific path in a knowledge graph, as indicated by the annotation at the terminating node of that path and specified using the sh:minCount property in SHACL.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-4",
          "local_name": "Cardinality of a path",
          "local_types": [
            "concept",
            "path"
          ],
          "iri": "Entity-cardinality_of_a_path-Mention-1"
        }
      ],
      "relevance": 0.54736328125
    },
    "Entity-e2": {
      "node_id": "e2",
      "disambiguation_index": 0,
      "label": "e2",
      "aliases": [
        "E2",
        "e2"
      ],
      "types": [
        "element",
        "mathematical object",
        "set member",
        "vector",
        "entity",
        "variable",
        "representation",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "e2 refers to an entity in a knowledge graph that can instantiate the variable z0 in the context of an inverse open path rule, satisfying the body part of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "e2",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e2-Mention-1"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-4",
          "local_name": "e2",
          "local_types": [
            "mathematical object",
            "vector",
            "entity",
            "variable",
            "representation",
            "matrix"
          ],
          "iri": "Entity-e2-Mention-2"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-5",
          "local_name": "e2",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-e2-Mention-3"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-3",
          "local_name": "e2",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e2-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "e2",
          "local_types": [
            "element",
            "entity"
          ],
          "iri": "Entity-e2-Mention-5"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-7",
          "local_name": "e2",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-e2-Mention-6"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-4",
          "local_name": "e2",
          "local_types": [
            "entity",
            "set member",
            "element"
          ],
          "iri": "Entity-e2-Mention-7"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-5",
          "local_name": "e2",
          "local_types": [
            "element",
            "set member"
          ],
          "iri": "Entity-e2-Mention-8"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-2",
          "local_name": "e2",
          "local_types": [
            "entity",
            "element",
            "set member"
          ],
          "iri": "Entity-e2-Mention-9"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-4",
          "local_name": "e2",
          "local_types": [
            "element",
            "set member"
          ],
          "iri": "Entity-e2-Mention-10"
        }
      ],
      "relevance": 0.546875
    },
    "Entity-the_annotation_of_the_branch_at_the_terminating_node": {
      "node_id": "the_annotation_of_the_branch_at_the_terminating_node",
      "disambiguation_index": 0,
      "label": "the annotation of the branch at the terminating node",
      "aliases": [
        "the annotation of the branch at the terminating node"
      ],
      "types": [
        "annotation",
        "branch",
        "node"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The annotation of the branch at the terminating node refers to the metadata that specifies the minimum cardinality constraint for a path in a SHACL shape, which is used to define how many instances of a particular relationship must exist in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-4",
          "local_name": "the annotation of the branch at the terminating node",
          "local_types": [
            "annotation",
            "branch",
            "node"
          ],
          "iri": "Entity-the_annotation_of_the_branch_at_the_terminating_node-Mention-1"
        }
      ],
      "relevance": 0.546875
    },
    "Entity-restriction": {
      "node_id": "restriction",
      "disambiguation_index": 0,
      "label": "restrictions",
      "aliases": [
        "restrictions"
      ],
      "types": [
        "constraint",
        "condition"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph rule learning, 'restrictions' refer to the constraints imposed by cardinality requirements that dictate the minimum or maximum number of instances that must satisfy a particular rule.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-6-Sentence-2",
          "local_name": "restrictions",
          "local_types": [
            "constraint",
            "condition"
          ],
          "iri": "Entity-restriction-Mention-1"
        }
      ],
      "relevance": 0.54638671875
    },
    "Entity-the_count": {
      "node_id": "the_count",
      "disambiguation_index": 0,
      "label": "the count",
      "aliases": [
        "the count"
      ],
      "types": [
        "count"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'the count' refers to the numerical tally of distinct entities that satisfy a specific condition or rule within a knowledge graph, particularly in relation to the evaluation of IOP rules.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-7",
          "local_name": "the count",
          "local_types": [
            "count"
          ],
          "iri": "Entity-the_count-Mention-1"
        }
      ],
      "relevance": 0.54638671875
    },
    "Entity-17_or_10__fewer_rule": {
      "node_id": "17_or_10__fewer_rule",
      "disambiguation_index": 0,
      "label": "17 or 10% fewer rules",
      "aliases": [
        "17 or 10% fewer rules"
      ],
      "types": [
        "comparison",
        "quantity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '17 or 10% fewer rules' refers to the comparative measure indicating that the SHACLEARNER variant (-S+H) learns 146 rules with an IOPSC in the range of [0.1, 0.3), which is 17 or 10% fewer than the 163 rules learned by the ideal IOP rule learner (-S-H).",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-4",
          "local_name": "17 or 10% fewer rules",
          "local_types": [
            "comparison",
            "quantity"
          ],
          "iri": "Entity-17_or_10__fewer_rule-Mention-1"
        }
      ],
      "relevance": 0.54638671875
    },
    "Entity-pi": {
      "node_id": "pi",
      "disambiguation_index": 0,
      "label": "Pi",
      "aliases": [
        "Pi"
      ],
      "types": [
        "function",
        "logical component",
        "knowledge graph element",
        "mathematical term",
        "relation",
        "predicate",
        "mathematical function",
        "mathematical operator"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "In this context, Pi refers to a predicate used in the formulation of open path rules within knowledge graphs, representing a logical relationship between entities.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-3",
          "local_name": "Pi",
          "local_types": [
            "predicate",
            "logical component",
            "mathematical term",
            "knowledge graph element"
          ],
          "iri": "Entity-pi-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-7",
          "local_name": "Pi",
          "local_types": [
            "relation",
            "mathematical function"
          ],
          "iri": "Entity-pi-Mention-2"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-10",
          "local_name": "Pi",
          "local_types": [
            "function",
            "mathematical operator"
          ],
          "iri": "Entity-pi-Mention-3"
        }
      ],
      "relevance": 0.5458984375
    },
    "Entity-a_system": {
      "node_id": "a_system",
      "disambiguation_index": 0,
      "label": "a system",
      "aliases": [
        "a system"
      ],
      "types": [
        "system"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'a system' refers to a method or framework for discovering patterns from massive knowledge graphs (KGs) that is not provided by the referenced paper.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "a system",
          "local_types": [
            "system"
          ],
          "iri": "Entity-a_system-Mention-1"
        }
      ],
      "relevance": 0.5458984375
    },
    "Entity-they": {
      "node_id": "they",
      "disambiguation_index": 0,
      "label": "they",
      "aliases": [
        "they"
      ],
      "types": [
        "pronoun"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'they' refers to rules in knowledge graph rule learning systems that are considered more useful if they generalize well and explain many facts.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-6-Sentence-1",
          "local_name": "they",
          "local_types": [
            "pronoun"
          ],
          "iri": "Entity-they-Mention-1"
        }
      ],
      "relevance": 0.5458984375
    },
    "Entity-formal_human-expert_evaluation": {
      "node_id": "formal_human-expert_evaluation",
      "disambiguation_index": 0,
      "label": "formal human-expert evaluation",
      "aliases": [
        "formal human-expert evaluation"
      ],
      "types": [
        "evaluation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Formal human-expert evaluation refers to a systematic assessment process conducted by knowledgeable individuals to validate the quality and effectiveness of the shapes learned by the SHACLEARNER algorithm in the context of knowledge graph validation and enhancement.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-5-Sentence-1",
          "local_name": "formal human-expert evaluation",
          "local_types": [
            "evaluation"
          ],
          "iri": "Entity-formal_human-expert_evaluation-Mention-1"
        }
      ],
      "relevance": 0.5458984375
    },
    "Entity-k_(1)": {
      "node_id": "k_(1)",
      "disambiguation_index": 1,
      "label": "|K|",
      "aliases": [
        "|K|"
      ],
      "types": [
        "mathematical variable",
        "size notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "|K| refers to the size notation representing the total number of entities |E| and facts |F| in a knowledge graph (KG), used to describe the complexity of the sampling algorithm.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-3",
          "local_name": "|K|",
          "local_types": [
            "mathematical variable",
            "size notation"
          ],
          "iri": "Entity-k_(1)-Mention-1"
        }
      ],
      "relevance": 0.54541015625
    },
    "Entity-treescmin_parameter": {
      "node_id": "treescmin_parameter",
      "disambiguation_index": 0,
      "label": "TreeSCMIN parameter",
      "aliases": [
        "TreeSCMIN parameter"
      ],
      "types": [
        "parameter",
        "algorithm setting",
        "configuration setting"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The TreeSCMIN parameter is a configuration setting used in the context of tree shape learning from knowledge graphs, specifically to define a minimum threshold for the Tree Shape Complexity (TreeSC) during the aggregation of Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "TreeSCMIN parameter",
          "local_types": [
            "parameter",
            "algorithm setting",
            "configuration setting"
          ],
          "iri": "Entity-treescmin_parameter-Mention-1"
        }
      ],
      "relevance": 0.54541015625
    },
    "Entity-inferred_head_instance": {
      "node_id": "inferred_head_instance",
      "disambiguation_index": 0,
      "label": "inferred head instances",
      "aliases": [
        "the inferred head instances",
        "inferred head instances"
      ],
      "types": [
        "head",
        "instance"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Inferred head instances refer to the specific facts in a knowledge graph that can be derived or predicted as true based on the satisfaction of the body of a closed path rule.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-2",
          "local_name": "inferred head instances",
          "local_types": [
            "instance",
            "head"
          ],
          "iri": "Entity-inferred_head_instance-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-2",
          "local_name": "the inferred head instances",
          "local_types": [
            "instance",
            "head"
          ],
          "iri": "Entity-inferred_head_instance-Mention-2"
        }
      ],
      "relevance": 0.544921875
    },
    "Entity-entity-free_rule": {
      "node_id": "entity-free_rule",
      "disambiguation_index": 0,
      "label": "entity-free rule",
      "aliases": [
        "an entity-free rule",
        "entity-free rule"
      ],
      "types": [
        "logical construct",
        "concept",
        "theoretical framework",
        "rule",
        "theoretical concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'entity-free rule' refers to a logical construct in the context of Inverse Open Path rules that allows for the evaluation of relationships between predicates without relying on specific entities, thereby facilitating the identification of valid paths in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-4",
          "local_name": "entity-free rule",
          "local_types": [
            "logical construct",
            "concept",
            "theoretical framework",
            "rule",
            "theoretical concept"
          ],
          "iri": "Entity-entity-free_rule-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-4",
          "local_name": "an entity-free rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-entity-free_rule-Mention-2"
        }
      ],
      "relevance": 0.544921875
    },
    "Entity-completion_strategy": {
      "node_id": "completion_strategy",
      "disambiguation_index": 0,
      "label": "completion strategy",
      "aliases": [
        "This completion strategy",
        "completion strategy"
      ],
      "types": [
        "approach",
        "strategy",
        "method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The completion strategy refers to a depth-first approach for human knowledge graph completion that utilizes a shape tree to sequentially navigate through dependent questions, thereby reducing cognitive load.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-6",
          "local_name": "completion strategy",
          "local_types": [
            "method",
            "approach"
          ],
          "iri": "Entity-completion_strategy-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-6",
          "local_name": "This completion strategy",
          "local_types": [
            "strategy"
          ],
          "iri": "Entity-completion_strategy-Mention-2"
        }
      ],
      "relevance": 0.544921875
    },
    "Entity-the_path_(1)": {
      "node_id": "the_path_(1)",
      "disambiguation_index": 1,
      "label": "the path",
      "aliases": [
        "the path"
      ],
      "types": [
        "path"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'the path' refers to a sequence of dependent questions or predicates that guide the querying process in a knowledge graph, facilitating a depth-first approach to knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-5",
          "local_name": "the path",
          "local_types": [
            "path"
          ],
          "iri": "Entity-the_path_(1)-Mention-1"
        }
      ],
      "relevance": 0.544921875
    },
    "Entity-readable_pattern": {
      "node_id": "readable_pattern",
      "disambiguation_index": 0,
      "label": "readable patterns",
      "aliases": [
        "readable patterns"
      ],
      "types": [
        "pattern",
        "representation",
        "format"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Readable patterns refer to the intuitive and structured representations of knowledge graph shapes that facilitate documentation and validation of the graph's data.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-1",
          "local_name": "readable patterns",
          "local_types": [
            "pattern",
            "representation",
            "format"
          ],
          "iri": "Entity-readable_pattern-Mention-1"
        }
      ],
      "relevance": 0.54443359375
    },
    "Entity-the_core_of_shacl": {
      "node_id": "the_core_of_shacl",
      "disambiguation_index": 0,
      "label": "the core of SHACL",
      "aliases": [
        "the core of SHACL"
      ],
      "types": [
        "SHACL",
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The core of SHACL refers to the fundamental aspect of the Shapes Constraint Language where node shapes impose constraints on a target predicate, while property shapes define constraints on the facts associated with that predicate.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "the core of SHACL",
          "local_types": [
            "SHACL",
            "concept"
          ],
          "iri": "Entity-the_core_of_shacl-Mention-1"
        }
      ],
      "relevance": 0.54443359375
    },
    "Entity-a_consistent_decrease_in_the_proportion_of_quality_rule": {
      "node_id": "a_consistent_decrease_in_the_proportion_of_quality_rule",
      "disambiguation_index": 0,
      "label": "a consistent decrease in the proportion of quality rules",
      "aliases": [
        "a consistent decrease in the proportion of quality rules"
      ],
      "types": [
        "observation",
        "quality rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'a consistent decrease in the proportion of quality rules' refers to the observed trend where the quality of rules, measured by Inverse Open Path Standard Confidence (IOPSC), diminishes as the confidence level of the rules increases, indicating that higher confidence rules tend to be less prevalent.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-2",
          "local_name": "a consistent decrease in the proportion of quality rules",
          "local_types": [
            "observation",
            "quality rules"
          ],
          "iri": "Entity-a_consistent_decrease_in_the_proportion_of_quality_rule-Mention-1"
        }
      ],
      "relevance": 0.54443359375
    },
    "Entity-pt__x__y_": {
      "node_id": "pt__x__y_",
      "disambiguation_index": 0,
      "label": "Pt(x, y)",
      "aliases": [
        "Pt(x, y)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical expression",
        "logical expression",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pt(x, y) is a closed path rule in the context of knowledge graph rule learning, representing a logical expression that infers a relationship between entities x and y based on a sequence of predicates connecting them.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-4-Sentence-1",
          "local_name": "Pt(x, y)",
          "local_types": [
            "function",
            "mathematical expression"
          ],
          "iri": "Entity-pt__x__y_-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "Pt(x, y)",
          "local_types": [
            "predicate",
            "logical expression"
          ],
          "iri": "Entity-pt__x__y_-Mention-2"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-1",
          "local_name": "Pt(x, y)",
          "local_types": [
            "predicate",
            "mathematical expression",
            "mathematical notation"
          ],
          "iri": "Entity-pt__x__y_-Mention-3"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "Pt(x, y)",
          "local_types": [
            "mathematical expression"
          ],
          "iri": "Entity-pt__x__y_-Mention-4"
        }
      ],
      "relevance": 0.5439453125
    },
    "Entity-rule_quality": {
      "node_id": "rule_quality",
      "disambiguation_index": 0,
      "label": "rule quality",
      "aliases": [
        "Rule quality",
        "rule quality"
      ],
      "types": [
        "evaluation criterion",
        "concept",
        "measurement",
        "quality measure",
        "evaluation metric",
        "performance measure",
        "rule",
        "quality",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Rule quality refers to the standardized measures, specifically standard confidence (SC) and head coverage (HC), used to evaluate and compare the effectiveness and generalization of rules in knowledge graph rule learning.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-1",
          "local_name": "rule quality",
          "local_types": [
            "evaluation criterion",
            "concept",
            "quality measure",
            "rule",
            "quality"
          ],
          "iri": "Entity-rule_quality-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-2",
          "local_name": "Rule quality",
          "local_types": [
            "evaluation metric",
            "measurement",
            "quality"
          ],
          "iri": "Entity-rule_quality-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-1",
          "local_name": "rule quality",
          "local_types": [
            "concept",
            "quality measure",
            "evaluation metric",
            "performance measure",
            "rule",
            "quality",
            "metric"
          ],
          "iri": "Entity-rule_quality-Mention-3"
        }
      ],
      "relevance": 0.5439453125
    },
    "Entity-a_fact_in_the_kg": {
      "node_id": "a_fact_in_the_kg",
      "disambiguation_index": 0,
      "label": "a fact in the KG",
      "aliases": [
        "a fact in the KG"
      ],
      "types": [
        "knowledge graph",
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A fact in the KG refers to an RDF triple that represents a relationship between entities in a knowledge graph, typically expressed in the form (subject, predicate, object).",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-4",
          "local_name": "a fact in the KG",
          "local_types": [
            "fact",
            "knowledge graph"
          ],
          "iri": "Entity-a_fact_in_the_kg-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-4",
          "local_name": "a fact in the KG",
          "local_types": [
            "fact",
            "knowledge graph"
          ],
          "iri": "Entity-a_fact_in_the_kg-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-4",
          "local_name": "a fact in the KG",
          "local_types": [
            "fact",
            "knowledge graph"
          ],
          "iri": "Entity-a_fact_in_the_kg-Mention-3"
        }
      ],
      "relevance": 0.5439453125
    },
    "Entity-the_body_and_the_head": {
      "node_id": "the_body_and_the_head",
      "disambiguation_index": 0,
      "label": "the body and the head",
      "aliases": [
        "the body and the head"
      ],
      "types": [
        "body",
        "head"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph rule learning, 'the body and the head' refer to the two components of a closed path rule, where the body consists of the conditions that must be satisfied to infer a conclusion represented by the head.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "the body and the head",
          "local_types": [
            "body",
            "head"
          ],
          "iri": "Entity-the_body_and_the_head-Mention-1"
        }
      ],
      "relevance": 0.5439453125
    },
    "Entity-entity-instantiation_of_the_related_op_rule": {
      "node_id": "entity-instantiation_of_the_related_op_rule",
      "disambiguation_index": 0,
      "label": "entity-instantiation of the related OP rule",
      "aliases": [
        "entity-instantiation of the related OP rule"
      ],
      "types": [
        "entity",
        "OP rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'entity-instantiation of the related OP rule' refers to a specific instance of an entity that satisfies the conditions defined by an open path (OP) rule in the context of knowledge graphs, indicating that the entity fulfills the rule's body and is linked to another entity through the predicates specified in the rule.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-6",
          "local_name": "entity-instantiation of the related OP rule",
          "local_types": [
            "entity",
            "OP rule"
          ],
          "iri": "Entity-entity-instantiation_of_the_related_op_rule-Mention-1"
        }
      ],
      "relevance": 0.5439453125
    },
    "Entity-pm_2__z__m-1___y2_": {
      "node_id": "pm_2__z__m-1___y2_",
      "disambiguation_index": 0,
      "label": "P'm_2(z(m-1), y2)",
      "aliases": [
        "P'm_2(z(m-1), y2)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "P'm_2(z(m-1), y2) represents a specific predicate relationship in a tree structure derived from annotated Inverse Open Path rules, where it connects the entity represented by z(m-1) to another entity y2, contributing to the overall shape of the tree in the context of knowledge graph validation and learning.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'm_2(z(m-1), y2)",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-pm_2__z__m-1___y2_-Mention-1"
        }
      ],
      "relevance": 0.5439453125
    },
    "Entity-the_relevance_of_the_rule": {
      "node_id": "the_relevance_of_the_rule",
      "disambiguation_index": 0,
      "label": "the relevance of the rule",
      "aliases": [
        "the relevance of the rule"
      ],
      "types": [
        "concept",
        "relevance"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The relevance of the rule refers to the degree to which a rule's consequent instances are supported by the instances of the target predicates in a knowledge graph, as measured by the Inverse Open Path Head Coverage (IOPHC).",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "the relevance of the rule",
          "local_types": [
            "concept",
            "relevance"
          ],
          "iri": "Entity-the_relevance_of_the_rule-Mention-1"
        }
      ],
      "relevance": 0.5439453125
    },
    "Entity-information_triggered_by_entity": {
      "node_id": "information_triggered_by_entity",
      "disambiguation_index": 0,
      "label": "information triggered by entities",
      "aliases": [
        "information triggered by entities"
      ],
      "types": [
        "information",
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Information triggered by entities refers to the data that can be automatically generated or completed based on the type or class declaration of entities within a knowledge graph, facilitated by the application of learned SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-4",
          "local_name": "information triggered by entities",
          "local_types": [
            "information",
            "entity"
          ],
          "iri": "Entity-information_triggered_by_entity-Mention-1"
        }
      ],
      "relevance": 0.5439453125
    },
    "Entity-rule_instance": {
      "node_id": "rule_instance",
      "disambiguation_index": 0,
      "label": "rule instances",
      "aliases": [
        "rule instances"
      ],
      "types": [
        "occurrence",
        "logical construct",
        "data structure",
        "instance",
        "example"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Rule instances refer to the specific occurrences of rules in a knowledge graph where both the body and head of the rule are satisfied, contributing to the measurement of support in rule learning.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "rule instances",
          "local_types": [
            "occurrence",
            "logical construct",
            "data structure",
            "instance",
            "example"
          ],
          "iri": "Entity-rule_instance-Mention-1"
        }
      ],
      "relevance": 0.54345703125
    },
    "Entity-y_and_x": {
      "node_id": "y_and_x",
      "disambiguation_index": 0,
      "label": "y and x",
      "aliases": [
        "y and x"
      ],
      "types": [
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of open path rules for knowledge graph completion, 'y and x' refer to two open entity variables that can represent any entities in the graph, used to express relationships and infer new facts.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-3",
          "local_name": "y and x",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-y_and_x-Mention-1"
        }
      ],
      "relevance": 0.54345703125
    },
    "Entity-e7": {
      "node_id": "e7",
      "disambiguation_index": 0,
      "label": "e7",
      "aliases": [
        "e7"
      ],
      "types": [
        "entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'e7' refers to an entity in a knowledge graph that can instantiate the variable z0 in the context of an inverse open path rule, contributing to the body part of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "e7",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e7-Mention-1"
        }
      ],
      "relevance": 0.54345703125
    },
    "Entity-l": {
      "node_id": "l",
      "disambiguation_index": 0,
      "label": "l",
      "aliases": [
        "l"
      ],
      "types": [
        "parameter",
        "integer",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'l' refers to the maximum rule length parameter used in the context of the Sampling method for learning IOP rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-3",
          "local_name": "l",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-l-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-9",
          "local_name": "l",
          "local_types": [
            "integer",
            "variable"
          ],
          "iri": "Entity-l-Mention-2"
        }
      ],
      "relevance": 0.54345703125
    },
    "Entity-logical_foundation_for_the_semantics_of_the_shacl_language": {
      "node_id": "logical_foundation_for_the_semantics_of_the_shacl_language",
      "disambiguation_index": 0,
      "label": "logical foundations for the semantics of the SHACL language",
      "aliases": [
        "logical foundations for the semantics of the SHACL language"
      ],
      "types": [
        "semantics",
        "SHACL",
        "foundation",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The logical foundations for the semantics of the SHACL language refer to the theoretical principles and formal frameworks that underpin the meaning and interpretation of the SHACL (Shapes Constraint Language), which is used for validating RDF data against a set of conditions.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-1",
          "local_name": "logical foundations for the semantics of the SHACL language",
          "local_types": [
            "semantics",
            "SHACL",
            "foundation",
            "concept"
          ],
          "iri": "Entity-logical_foundation_for_the_semantics_of_the_shacl_language-Mention-1"
        }
      ],
      "relevance": 0.54345703125
    },
    "Entity-_e2_": {
      "node_id": "_e2_",
      "disambiguation_index": 0,
      "label": "{e2}",
      "aliases": [
        "|{e2}|",
        "{e2}"
      ],
      "types": [
        "element",
        "set notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, {e2} refers to a specific entity within a knowledge graph that satisfies a given rule when the cardinality constraint (Car) is set to 2.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-5",
          "local_name": "{e2}",
          "local_types": [
            "element"
          ],
          "iri": "Entity-_e2_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-4",
          "local_name": "|{e2}|",
          "local_types": [
            "set notation"
          ],
          "iri": "Entity-_e2_-Mention-2"
        }
      ],
      "relevance": 0.54345703125
    },
    "Entity-the_first_rule_in_the_list": {
      "node_id": "the_first_rule_in_the_list",
      "disambiguation_index": 0,
      "label": "the first rule in the list",
      "aliases": [
        "the first rule in the list"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The first rule in the list refers to the initial IOP rule selected during the greedy search process for constructing a SHACL tree in the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-3",
          "local_name": "the first rule in the list",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_first_rule_in_the_list-Mention-1"
        }
      ],
      "relevance": 0.54345703125
    },
    "Entity-ultimate_evaluation": {
      "node_id": "ultimate_evaluation",
      "disambiguation_index": 0,
      "label": "ultimate evaluation",
      "aliases": [
        "ultimate evaluation"
      ],
      "types": [
        "evaluation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Ultimate evaluation refers to the comprehensive assessment process in the SHACLEARNER system that utilizes the complete input knowledge graph for evaluating the quality of learned rules without any sampling.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-1",
          "local_name": "ultimate evaluation",
          "local_types": [
            "evaluation"
          ],
          "iri": "Entity-ultimate_evaluation-Mention-1"
        }
      ],
      "relevance": 0.54345703125
    },
    "Entity-subject": {
      "node_id": "subject",
      "disambiguation_index": 0,
      "label": "subject",
      "aliases": [
        "subject"
      ],
      "types": [
        "entity",
        "binding",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of inverse open path rules (IOP), the term 'subject' refers to the variable that represents the entity in the body of the rule, which is universally quantified and can be bound to different instances in the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-2",
          "local_name": "subject",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-subject-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-2",
          "local_name": "subject",
          "local_types": [
            "entity",
            "binding"
          ],
          "iri": "Entity-subject-Mention-2"
        }
      ],
      "relevance": 0.54296875
    },
    "Entity-the_body": {
      "node_id": "the_body",
      "disambiguation_index": 0,
      "label": "the body",
      "aliases": [
        "the body"
      ],
      "types": [
        "component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of inverse open path rules, 'the body' refers to the part of the rule that consists of predicates and variables that must be satisfied in the knowledge graph to establish a relationship with the head of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-8-Sentence-4",
          "local_name": "the body",
          "local_types": [
            "component"
          ],
          "iri": "Entity-the_body-Mention-1"
        }
      ],
      "relevance": 0.54296875
    },
    "Entity-product": {
      "node_id": "product",
      "disambiguation_index": 0,
      "label": "product",
      "aliases": [
        "product"
      ],
      "types": [
        "mathematical operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'product' refers to the result of the matrix multiplication of adjacency matrices representing predicates in a knowledge graph, which is used to compute the number of distinct entities satisfying certain conditions in the evaluation of IOP rules.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-3",
          "local_name": "product",
          "local_types": [
            "mathematical operation"
          ],
          "iri": "Entity-product-Mention-1"
        }
      ],
      "relevance": 0.54296875
    },
    "Entity-rule_learning_experiment": {
      "node_id": "rule_learning_experiment",
      "disambiguation_index": 0,
      "label": "rule learning experiments",
      "aliases": [
        "rule learning experiments"
      ],
      "types": [
        "methodology",
        "research method",
        "experiment"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Rule learning experiments are systematic investigations designed to discover and evaluate rules or patterns from data, often used in the context of knowledge graphs and machine learning.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-2",
          "local_name": "rule learning experiments",
          "local_types": [
            "methodology",
            "research method",
            "experiment"
          ],
          "iri": "Entity-rule_learning_experiment-Mention-1"
        }
      ],
      "relevance": 0.54296875
    },
    "Entity-this_system": {
      "node_id": "this_system",
      "disambiguation_index": 0,
      "label": "This system",
      "aliases": [
        "This system"
      ],
      "types": [
        "system"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This system refers to an ideal IOP rule learner that comprehensively generates and evaluates all potential rules within a specified maximum length parameter, serving as a brute-force approach to rule learning.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-4",
          "local_name": "This system",
          "local_types": [
            "system"
          ],
          "iri": "Entity-this_system-Mention-1"
        }
      ],
      "relevance": 0.54296875
    },
    "Entity-the_number_of_entity_that_satisfy_the_head_of_the_rule": {
      "node_id": "the_number_of_entity_that_satisfy_the_head_of_the_rule",
      "disambiguation_index": 0,
      "label": "the number of entities that satisfy the head of the rule",
      "aliases": [
        "the number of entities that satisfy the head of the rule"
      ],
      "types": [
        "count",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The number of entities that satisfy the head of the rule refers to the count of distinct entities e' for which there exists at least one entity e'' that fulfills the condition defined by the head of the rule in the context of the Inverse Open Path rules applied to knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-5-Sentence-3",
          "local_name": "the number of entities that satisfy the head of the rule",
          "local_types": [
            "count",
            "rule"
          ],
          "iri": "Entity-the_number_of_entity_that_satisfy_the_head_of_the_rule-Mention-1"
        }
      ],
      "relevance": 0.54248046875
    },
    "Entity-the_rule_(1)": {
      "node_id": "the_rule_(1)",
      "disambiguation_index": 1,
      "label": "The rule",
      "aliases": [
        "The rule"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The rule refers to a closed path rule in knowledge graph rule learning, which is a logical expression that defines a relationship between entities through a sequence of predicates forming a single unbroken loop.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-6",
          "local_name": "The rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_rule_(1)-Mention-1"
        }
      ],
      "relevance": 0.54248046875
    },
    "Entity-p1__e__e1___p2__e1__e2___...__pn__e__n-1___e__": {
      "node_id": "p1__e__e1___p2__e1__e2___...__pn__e__n-1___e__",
      "disambiguation_index": 0,
      "label": "P1(e, e1), P2(e1, e2), ..., Pn(e(n-1), e')",
      "aliases": [
        "P1(e, e1), P2(e1, e2), ..., Pn(e(n-1), e')",
        "P1(e, e1), P2(e1, e2), ..., Pn(en\u22121, e')"
      ],
      "types": [
        "relations",
        "relationships",
        "predicate",
        "fact",
        "facts"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'P1(e, e1), P2(e1, e2), ..., Pn(e(n-1), e')' refers to a sequence of predicates that define a body of a closed-path rule in a knowledge graph, where each predicate represents a relationship between entities, and the entire sequence is used to infer a new fact about a pair of entities based on existing relationships in the graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "P1(e, e1), P2(e1, e2), ..., Pn(e(n-1), e')",
          "local_types": [
            "relations",
            "predicate",
            "facts"
          ],
          "iri": "Entity-p1__e__e1___p2__e1__e2___...__pn__e__n-1___e__-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "P1(e, e1), P2(e1, e2), ..., Pn(en\u22121, e')",
          "local_types": [
            "relations",
            "fact",
            "facts"
          ],
          "iri": "Entity-p1__e__e1___p2__e1__e2___...__pn__e__n-1___e__-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "P1(e, e1), P2(e1, e2), ..., Pn(e(n-1), e')",
          "local_types": [
            "facts",
            "relationships"
          ],
          "iri": "Entity-p1__e__e1___p2__e1__e2___...__pn__e__n-1___e__-Mention-3"
        }
      ],
      "relevance": 0.54248046875
    },
    "Entity-additional_constraint": {
      "node_id": "additional_constraint",
      "disambiguation_index": 0,
      "label": "additional constraints",
      "aliases": [
        "additional constraints"
      ],
      "types": [
        "constraint",
        "conditions",
        "limitations"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'additional constraints' refers to the supplementary conditions applied to paths in knowledge graphs that enable the derivation of alternative shapes, enhancing the expressiveness and validation of the graph data.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-2",
          "local_name": "additional constraints",
          "local_types": [
            "constraint",
            "conditions",
            "limitations"
          ],
          "iri": "Entity-additional_constraint-Mention-1"
        }
      ],
      "relevance": 0.5419921875
    },
    "Entity-pt__e__e__": {
      "node_id": "pt__e__e__",
      "disambiguation_index": 0,
      "label": "Pt(e, e')",
      "aliases": [
        "Pt(e, e')"
      ],
      "types": [
        "function",
        "predicate",
        "relation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pt(e, e') refers to a fact in a knowledge graph (KG) that indicates a relationship between two entities e and e', specifically denoting that the head of a closed path rule is satisfied by the pair of entities.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-4",
          "local_name": "Pt(e, e')",
          "local_types": [
            "function",
            "predicate"
          ],
          "iri": "Entity-pt__e__e__-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-4",
          "local_name": "Pt(e, e')",
          "local_types": [
            "relation",
            "function"
          ],
          "iri": "Entity-pt__e__e__-Mention-2"
        }
      ],
      "relevance": 0.5419921875
    },
    "Entity-large_data-first_graph_database": {
      "node_id": "large_data-first_graph_database",
      "disambiguation_index": 0,
      "label": "large data-first graph databases",
      "aliases": [
        "large data-first graph databases"
      ],
      "types": [
        "graph database",
        "database"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Large data-first graph databases are extensive graph-based data storage systems that prioritize the management and retrieval of large volumes of interconnected data while employing minimal inference rules and flexible data constraints.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-2",
          "local_name": "large data-first graph databases",
          "local_types": [
            "graph database",
            "database"
          ],
          "iri": "Entity-large_data-first_graph_database-Mention-1"
        }
      ],
      "relevance": 0.5419921875
    },
    "Entity-graph": {
      "node_id": "graph",
      "disambiguation_index": 0,
      "label": "graph",
      "aliases": [
        "graphs",
        "graph"
      ],
      "types": [
        "mathematical concept",
        "data structure",
        "mathematical structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'graph' refers to a mathematical structure used to represent relationships between entities in a knowledge graph, where entities are connected by links that can be unary or binary predicates.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-4",
          "local_name": "graph",
          "local_types": [
            "mathematical structure",
            "data structure"
          ],
          "iri": "Entity-graph-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-4",
          "local_name": "graphs",
          "local_types": [
            "data structure",
            "mathematical concept"
          ],
          "iri": "Entity-graph-Mention-2"
        }
      ],
      "relevance": 0.54150390625
    },
    "Entity-k____sampling__k__pt_": {
      "node_id": "k____sampling__k__pt_",
      "disambiguation_index": 0,
      "label": "K' := Sampling(K, Pt)",
      "aliases": [
        "K' := Sampling(K, Pt)"
      ],
      "types": [
        "operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "K' refers to the result of the operation that samples a knowledge graph K based on a target predicate Pt, which is used to derive specific patterns or rules from the graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-5",
          "local_name": "K' := Sampling(K, Pt)",
          "local_types": [
            "operation"
          ],
          "iri": "Entity-k____sampling__k__pt_-Mention-1"
        }
      ],
      "relevance": 0.54150390625
    },
    "Entity-headr__e_": {
      "node_id": "headr__e_",
      "disambiguation_index": 0,
      "label": "headr(e)",
      "aliases": [
        "headr(e)"
      ],
      "types": [
        "function",
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "headr(e) refers to the predicate that indicates the head of a tree structure in the context of SHACL shapes, representing a sequence of paths or branches that satisfy certain conditions in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-5",
          "local_name": "headr(e)",
          "local_types": [
            "function",
            "predicate"
          ],
          "iri": "Entity-headr__e_-Mention-1"
        }
      ],
      "relevance": 0.54150390625
    },
    "Entity-poor_quality_rule": {
      "node_id": "poor_quality_rule",
      "disambiguation_index": 0,
      "label": "poor quality rules",
      "aliases": [
        "poor quality rules"
      ],
      "types": [
        "quality rules",
        "rule",
        "quality measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Poor quality rules refer to the rules learned from knowledge graphs that do not meet the established minimum quality thresholds for confidence and coverage, indicating a higher statistical likelihood of being less reliable or informative.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-5",
          "local_name": "poor quality rules",
          "local_types": [
            "quality rules",
            "rule",
            "quality measure"
          ],
          "iri": "Entity-poor_quality_rule-Mention-1"
        }
      ],
      "relevance": 0.54150390625
    },
    "Entity-sampling__k__pt_": {
      "node_id": "sampling__k__pt_",
      "disambiguation_index": 0,
      "label": "Sampling(K, Pt)",
      "aliases": [
        "Sampling(K, Pt)"
      ],
      "types": [
        "function",
        "process"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Sampling(K, Pt) refers to the process of extracting a subset of a knowledge graph K that is relevant to a specific target predicate Pt, which is used as input for further analysis and rule learning.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-5",
          "local_name": "Sampling(K, Pt)",
          "local_types": [
            "function",
            "process"
          ],
          "iri": "Entity-sampling__k__pt_-Mention-1"
        }
      ],
      "relevance": 0.54150390625
    },
    "Entity-e___e1__e2__e3_": {
      "node_id": "e___e1__e2__e3_",
      "disambiguation_index": 0,
      "label": "E = {e1, e2, e3}",
      "aliases": [
        "E = {e1, e2, e3}"
      ],
      "types": [
        "set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "E = {e1, e2, e3} represents a set of entities within a knowledge graph, specifically used in the context of evaluating rules and predicates related to the adjacency matrices of the graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-3-Sentence-3",
          "local_name": "E = {e1, e2, e3}",
          "local_types": [
            "set"
          ],
          "iri": "Entity-e___e1__e2__e3_-Mention-1"
        }
      ],
      "relevance": 0.541015625
    },
    "Entity-class_and_type_information": {
      "node_id": "class_and_type_information",
      "disambiguation_index": 0,
      "label": "class and type information",
      "aliases": [
        "class and type information",
        "the class and type information"
      ],
      "types": [
        "information representation",
        "data structure",
        "information"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'class and type information' refers to the representation of classes and types in knowledge graphs as unary predicates, which facilitates the learning of abstracted shapes without specific entity instances.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-1",
          "local_name": "class and type information",
          "local_types": [
            "data structure",
            "information representation"
          ],
          "iri": "Entity-class_and_type_information-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-6-Sentence-1",
          "local_name": "the class and type information",
          "local_types": [
            "information"
          ],
          "iri": "Entity-class_and_type_information-Mention-2"
        }
      ],
      "relevance": 0.541015625
    },
    "Entity-ideal": {
      "node_id": "ideal",
      "disambiguation_index": 0,
      "label": "ideal",
      "aliases": [
        "ideal"
      ],
      "types": [
        "concept",
        "theoretical model"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'ideal' refers to a theoretical model of the SHACLEARNER system that performs a complete and exhaustive search for IOP rules without any pruning or sampling, thereby ensuring all possible rules are generated and evaluated.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-3",
          "local_name": "ideal",
          "local_types": [
            "concept",
            "theoretical model"
          ],
          "iri": "Entity-ideal-Mention-1"
        }
      ],
      "relevance": 0.541015625
    },
    "Entity-difference_between_the_formalism": {
      "node_id": "difference_between_the_formalism",
      "disambiguation_index": 0,
      "label": "differences between the formalisms",
      "aliases": [
        "differences between the formalisms"
      ],
      "types": [
        "differences",
        "formalisms"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'differences between the formalisms' refers to the variations in the syntactic and structural characteristics of various formal systems used to express constraints and patterns in knowledge graphs, such as SHACL, ShEx, and others.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-5",
          "local_name": "differences between the formalisms",
          "local_types": [
            "differences",
            "formalisms"
          ],
          "iri": "Entity-difference_between_the_formalism-Mention-1"
        }
      ],
      "relevance": 0.541015625
    },
    "Entity-the_right_hand_chart": {
      "node_id": "the_right_hand_chart",
      "disambiguation_index": 0,
      "label": "the right hand chart",
      "aliases": [
        "the right hand chart"
      ],
      "types": [
        "chart"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The right hand chart refers to a graphical representation in the paper that illustrates the distribution of mined rules with respect to the Inverse Open Path Head Coverage (IOPHC) quality measure, highlighting the relationship between increasing IOPHC values and the proportion of quality rules.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-3",
          "local_name": "the right hand chart",
          "local_types": [
            "chart"
          ],
          "iri": "Entity-the_right_hand_chart-Mention-1"
        }
      ],
      "relevance": 0.541015625
    },
    "Entity-tree": {
      "node_id": "tree",
      "disambiguation_index": 0,
      "label": "trees",
      "aliases": [
        "trees",
        "Tree",
        "tree"
      ],
      "types": [
        "graph structure",
        "hierarchical structure",
        "graph",
        "computer science",
        "graph theory",
        "concept",
        "model",
        "structure",
        "mathematical structure",
        "trees",
        "mathematical object",
        "shape",
        "entity",
        "data structure",
        "tree",
        "mathematical concept",
        "hierarchical model",
        "natural resource",
        "output",
        "plant"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'trees' refer to a specific type of hierarchical structure used to represent relationships and constraints among entities, serving as a foundational building block for more complex shape patterns in graph theory.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "trees",
          "local_types": [
            "graph structure",
            "concept",
            "data structure",
            "structure",
            "hierarchical structure"
          ],
          "iri": "Entity-tree-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-2-Sentence-2",
          "local_name": "trees",
          "local_types": [
            "shape",
            "data structure",
            "tree",
            "structure",
            "graph"
          ],
          "iri": "Entity-tree-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "trees",
          "local_types": [
            "graph structure",
            "structure",
            "data structure"
          ],
          "iri": "Entity-tree-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-3",
          "local_name": "tree",
          "local_types": [
            "concept",
            "data structure",
            "graph",
            "mathematical object"
          ],
          "iri": "Entity-tree-Mention-4"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-4",
          "local_name": "tree",
          "local_types": [
            "data structure",
            "entity"
          ],
          "iri": "Entity-tree-Mention-5"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-7",
          "local_name": "tree",
          "local_types": [
            "structure",
            "data structure",
            "graph"
          ],
          "iri": "Entity-tree-Mention-6"
        },
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "trees",
          "local_types": [
            "tree",
            "data structure",
            "shape"
          ],
          "iri": "Entity-tree-Mention-7"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-3",
          "local_name": "trees",
          "local_types": [
            "tree",
            "structure",
            "data structure",
            "graph"
          ],
          "iri": "Entity-tree-Mention-8"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-5",
          "local_name": "trees",
          "local_types": [
            "data structure",
            "graph"
          ],
          "iri": "Entity-tree-Mention-9"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-4",
          "local_name": "Tree",
          "local_types": [
            "output",
            "data structure",
            "graph"
          ],
          "iri": "Entity-tree-Mention-10"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-12",
          "local_name": "Tree",
          "local_types": [
            "data structure"
          ],
          "iri": "Entity-tree-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-13",
          "local_name": "Tree",
          "local_types": [
            "computer science",
            "data structure"
          ],
          "iri": "Entity-tree-Mention-12"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-7",
          "local_name": "tree",
          "local_types": [
            "data structure",
            "graph"
          ],
          "iri": "Entity-tree-Mention-13"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-5",
          "local_name": "trees",
          "local_types": [
            "data structure"
          ],
          "iri": "Entity-tree-Mention-14"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "tree",
          "local_types": [
            "mathematical concept",
            "data structure"
          ],
          "iri": "Entity-tree-Mention-15"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-4",
          "local_name": "tree",
          "local_types": [
            "data structure",
            "mathematical concept"
          ],
          "iri": "Entity-tree-Mention-16"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-7",
          "local_name": "tree",
          "local_types": [
            "data structure",
            "graph structure"
          ],
          "iri": "Entity-tree-Mention-17"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-1",
          "local_name": "Tree",
          "local_types": [
            "concept",
            "data structure",
            "mathematical structure"
          ],
          "iri": "Entity-tree-Mention-18"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-1",
          "local_name": "tree",
          "local_types": [
            "data structure",
            "graph structure"
          ],
          "iri": "Entity-tree-Mention-19"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-3",
          "local_name": "tree",
          "local_types": [
            "data structure",
            "hierarchical model"
          ],
          "iri": "Entity-tree-Mention-20"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-4",
          "local_name": "tree",
          "local_types": [
            "data structure"
          ],
          "iri": "Entity-tree-Mention-21"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "tree",
          "local_types": [
            "data structure",
            "graph theory"
          ],
          "iri": "Entity-tree-Mention-22"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-8",
          "local_name": "trees",
          "local_types": [
            "data structure"
          ],
          "iri": "Entity-tree-Mention-23"
        },
        {
          "reference": "Section-12-Paragraph-9-Sentence-1",
          "local_name": "tree",
          "local_types": [
            "data structure",
            "hierarchical model"
          ],
          "iri": "Entity-tree-Mention-24"
        },
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "tree",
          "local_types": [
            "data structure",
            "graph"
          ],
          "iri": "Entity-tree-Mention-25"
        },
        {
          "reference": "Section-12-Paragraph-9-Sentence-3",
          "local_name": "tree",
          "local_types": [
            "data structure",
            "graph"
          ],
          "iri": "Entity-tree-Mention-26"
        },
        {
          "reference": "Section-13-Paragraph-3-Sentence-1",
          "local_name": "trees",
          "local_types": [
            "graph structure",
            "concept",
            "structure",
            "data structure"
          ],
          "iri": "Entity-tree-Mention-27"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-6",
          "local_name": "trees",
          "local_types": [
            "structure",
            "data structure",
            "graph",
            "shape"
          ],
          "iri": "Entity-tree-Mention-28"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-1",
          "local_name": "trees",
          "local_types": [
            "graph",
            "structure",
            "model",
            "data structure"
          ],
          "iri": "Entity-tree-Mention-29"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "trees",
          "local_types": [
            "data structure",
            "graph"
          ],
          "iri": "Entity-tree-Mention-30"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-3",
          "local_name": "trees",
          "local_types": [
            "natural resource",
            "plant"
          ],
          "iri": "Entity-tree-Mention-31"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "trees",
          "local_types": [
            "structure",
            "data structure"
          ],
          "iri": "Entity-tree-Mention-32"
        },
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "trees",
          "local_types": [
            "structure"
          ],
          "iri": "Entity-tree-Mention-33"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-1",
          "local_name": "trees",
          "local_types": [
            "structure",
            "graph",
            "data structure"
          ],
          "iri": "Entity-tree-Mention-34"
        },
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "trees",
          "local_types": [
            "structure"
          ],
          "iri": "Entity-tree-Mention-35"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-2",
          "local_name": "trees",
          "local_types": [
            "trees",
            "concept",
            "data structure",
            "structure",
            "graph"
          ],
          "iri": "Entity-tree-Mention-36"
        }
      ],
      "relevance": 0.54052734375
    },
    "Entity-massive": {
      "node_id": "massive",
      "disambiguation_index": 0,
      "label": "massive",
      "aliases": [
        "massive"
      ],
      "types": [
        "size descriptor"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'massive' refers to the large scale and extensive size of knowledge graphs (KGs), indicating that they contain a vast amount of data and diverse information.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-2",
          "local_name": "massive",
          "local_types": [
            "size descriptor"
          ],
          "iri": "Entity-massive-Mention-1"
        }
      ],
      "relevance": 0.54052734375
    },
    "Entity-shacl_advanced_feature": {
      "node_id": "shacl_advanced_feature",
      "disambiguation_index": 0,
      "label": "SHACL advanced features",
      "aliases": [
        "SHACL advanced features"
      ],
      "types": [
        "extension",
        "feature"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "SHACL advanced features refer to additional capabilities and enhancements of the Shapes Constraint Language (SHACL) that extend its functionality for validating RDF data.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-1",
          "local_name": "SHACL advanced features",
          "local_types": [
            "extension",
            "feature"
          ],
          "iri": "Entity-shacl_advanced_feature-Mention-1"
        }
      ],
      "relevance": 0.54052734375
    },
    "Entity-result_of_an_experimental_evaluation": {
      "node_id": "result_of_an_experimental_evaluation",
      "disambiguation_index": 0,
      "label": "results of an experimental evaluation",
      "aliases": [
        "results of an experimental evaluation"
      ],
      "types": [
        "results",
        "evaluation"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The 'results of an experimental evaluation' refer to the findings and insights derived from testing the SHACLEARNER system on real-world knowledge graphs, which are discussed in Section 5 of the paper.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-3",
          "local_name": "results of an experimental evaluation",
          "local_types": [
            "results",
            "evaluation"
          ],
          "iri": "Entity-result_of_an_experimental_evaluation-Mention-1"
        }
      ],
      "relevance": 0.54052734375
    },
    "Entity-p__1__z0__z1_": {
      "node_id": "p__1__z0__z1_",
      "disambiguation_index": 0,
      "label": "P'1(z0, z1)",
      "aliases": [
        "P'1(z0, z1)",
        "P'1_1(z1, z2)",
        "P'1_2(z0, z1)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "P'1(z0, z1) represents a predicate in the context of a tree structure derived from annotated Inverse Open Path rules, where it connects the variable z0 to z1, indicating a relationship between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'1(z0, z1)",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-p__1__z0__z1_-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'1_1(z1, z2)",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-p__1__z0__z1_-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "P'1_2(z0, z1)",
          "local_types": [
            "function",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-p__1__z0__z1_-Mention-3"
        }
      ],
      "relevance": 0.54052734375
    },
    "Entity-all_predicate_in_the_sampled_k_": {
      "node_id": "all_predicate_in_the_sampled_k_",
      "disambiguation_index": 0,
      "label": "all predicates in the sampled K'",
      "aliases": [
        "all predicates in the sampled K'"
      ],
      "types": [
        "predicate",
        "sample"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'all predicates in the sampled K'' refers to the complete set of relational expressions derived from a subset of a knowledge graph, which are utilized to compute embeddings for both the predicates and their associated subject and object arguments in the context of the SHACLEARNER method.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-1",
          "local_name": "all predicates in the sampled K'",
          "local_types": [
            "predicate",
            "sample"
          ],
          "iri": "Entity-all_predicate_in_the_sampled_k_-Mention-1"
        }
      ],
      "relevance": 0.5400390625
    },
    "Entity-shape_of_varying_complexity_and_diversity": {
      "node_id": "shape_of_varying_complexity_and_diversity",
      "disambiguation_index": 0,
      "label": "shapes of varying complexity and diversity",
      "aliases": [
        "shapes of varying complexity and diversity"
      ],
      "types": [
        "shape",
        "complexity",
        "diversity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'shapes of varying complexity and diversity' refers to the different structural patterns and configurations that can be learned from knowledge graphs, characterized by their differences in length, cardinality, and overall structural features.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-2-Sentence-4",
          "local_name": "shapes of varying complexity and diversity",
          "local_types": [
            "shape",
            "complexity",
            "diversity"
          ],
          "iri": "Entity-shape_of_varying_complexity_and_diversity-Mention-1"
        }
      ],
      "relevance": 0.5400390625
    },
    "Entity-element": {
      "node_id": "element",
      "disambiguation_index": 0,
      "label": "elements",
      "aliases": [
        "elements"
      ],
      "types": [
        "mathematical object",
        "component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'elements' refers to the individual entries or values within the adjacency matrices that represent the relationships between entities in a knowledge graph, specifically those that are used in the computation of quality measures for shape learning.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-2",
          "local_name": "elements",
          "local_types": [
            "mathematical object",
            "component"
          ],
          "iri": "Entity-element-Mention-1"
        }
      ],
      "relevance": 0.53955078125
    },
    "Entity-body_predicate": {
      "node_id": "body_predicate",
      "disambiguation_index": 0,
      "label": "body predicate",
      "aliases": [
        "The body predicate",
        "body predicate"
      ],
      "types": [
        "predicate",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The body predicate refers to a specific component in SHACL (Shapes Constraint Language) that is defined as sh:nodeShape, which represents the core structure of a shape in a knowledge graph, indicating the conditions that must be satisfied by the entities involved.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-3",
          "local_name": "body predicate",
          "local_types": [
            "concept",
            "predicate"
          ],
          "iri": "Entity-body_predicate-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-3",
          "local_name": "The body predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-body_predicate-Mention-2"
        }
      ],
      "relevance": 0.53955078125
    },
    "Entity-learning_partially_instantiated_shape": {
      "node_id": "learning_partially_instantiated_shape",
      "disambiguation_index": 0,
      "label": "learning partially instantiated shapes",
      "aliases": [
        "learning partially instantiated shapes"
      ],
      "types": [
        "concept",
        "process",
        "shapes"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Learning partially instantiated shapes refers to the process of deriving shapes from knowledge graphs that are not fully defined, which can lead to a combinatorial increase in the variety of possible shapes that can be generated.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-2",
          "local_name": "learning partially instantiated shapes",
          "local_types": [
            "concept",
            "process",
            "shapes"
          ],
          "iri": "Entity-learning_partially_instantiated_shape-Mention-1"
        }
      ],
      "relevance": 0.5390625
    },
    "Entity-such_tree": {
      "node_id": "such_tree",
      "disambiguation_index": 0,
      "label": "such trees",
      "aliases": [
        "such trees"
      ],
      "types": [
        "tree"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Such trees refer to complex structures in knowledge graphs that are constructed from simpler path shapes, serving as foundational elements for enhancing knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-5",
          "local_name": "such trees",
          "local_types": [
            "tree"
          ],
          "iri": "Entity-such_tree-Mention-1"
        }
      ],
      "relevance": 0.5390625
    },
    "Entity-fact_about_those_predicate": {
      "node_id": "fact_about_those_predicate",
      "disambiguation_index": 0,
      "label": "facts about those predicates",
      "aliases": [
        "facts about those predicates"
      ],
      "types": [
        "predicate",
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'facts about those predicates' refers to the specific pieces of information or assertions related to predicates in a knowledge graph that are deemed less relevant and are excluded during the sampling process for learning IOP rules.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-5",
          "local_name": "facts about those predicates",
          "local_types": [
            "predicate",
            "fact"
          ],
          "iri": "Entity-fact_about_those_predicate-Mention-1"
        }
      ],
      "relevance": 0.5390625
    },
    "Entity-it_more_curated_development": {
      "node_id": "it_more_curated_development",
      "disambiguation_index": 0,
      "label": "its more curated development",
      "aliases": [
        "its more curated development"
      ],
      "types": [
        "development"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'its more curated development' refers to the structured and refined nature of the YAGO2 knowledge graph, which results in a higher tendency towards complex cardinality constraints in the rules learned from it compared to other knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-6-Sentence-3",
          "local_name": "its more curated development",
          "local_types": [
            "development"
          ],
          "iri": "Entity-it_more_curated_development-Mention-1"
        }
      ],
      "relevance": 0.5390625
    },
    "Entity-the_beginning_of_each_branch": {
      "node_id": "the_beginning_of_each_branch",
      "disambiguation_index": 0,
      "label": "the beginning of each branch",
      "aliases": [
        "the beginning of each branch"
      ],
      "types": [
        "branch"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The beginning of each branch refers to the initial values that represent the cardinality of each branch in a tree structure derived from IOP rules in the context of knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-2",
          "local_name": "the beginning of each branch",
          "local_types": [
            "branch"
          ],
          "iri": "Entity-the_beginning_of_each_branch-Mention-1"
        }
      ],
      "relevance": 0.5390625
    },
    "Entity-the_sampling_process": {
      "node_id": "the_sampling_process",
      "disambiguation_index": 0,
      "label": "the sampling process",
      "aliases": [
        "the sampling process"
      ],
      "types": [
        "process"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The sampling process refers to a method of selecting a subset of entities and their associated facts from a knowledge graph, specifically focusing on those related to a target predicate, in order to facilitate efficient learning of shape patterns while reducing the complexity of handling large-scale knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-5",
          "local_name": "the sampling process",
          "local_types": [
            "process"
          ],
          "iri": "Entity-the_sampling_process-Mention-1"
        }
      ],
      "relevance": 0.53857421875
    },
    "Entity-learning_each_target_predicate": {
      "node_id": "learning_each_target_predicate",
      "disambiguation_index": 0,
      "label": "learning each target predicate",
      "aliases": [
        "learning each target predicate"
      ],
      "types": [
        "learning",
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'learning each target predicate' refers to the process of applying a specified time limit, in this case 10 hours, to the task of discovering and formulating rules associated with specific predicates in knowledge graphs, which are essential for validating and structuring the data represented in those graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-8",
          "local_name": "learning each target predicate",
          "local_types": [
            "learning",
            "predicate"
          ],
          "iri": "Entity-learning_each_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.53857421875
    },
    "Entity-language": {
      "node_id": "language",
      "disambiguation_index": 0,
      "label": "language",
      "aliases": [
        "language"
      ],
      "types": [
        "linguistic entity",
        "communication system",
        "entity",
        "concept",
        "type",
        "linguistic category"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'language' refers to a specific entity type that is associated with the property shape in the Shapes Constraint Language (SHACL), which constrains the relationships of entities in a knowledge graph, particularly in relation to the native language of individuals.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "language",
          "local_types": [
            "entity",
            "concept",
            "linguistic category",
            "communication system"
          ],
          "iri": "Entity-language-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "language",
          "local_types": [
            "linguistic entity",
            "communication system",
            "entity",
            "concept",
            "type"
          ],
          "iri": "Entity-language-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "language",
          "local_types": [
            "entity",
            "concept"
          ],
          "iri": "Entity-language-Mention-3"
        }
      ],
      "relevance": 0.5380859375
    },
    "Entity-wikidataup": {
      "node_id": "wikidataup",
      "disambiguation_index": 0,
      "label": "Wikidata+UP",
      "aliases": [
        "Wikidata+UP"
      ],
      "types": [
        "knowledge graph",
        "database"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Wikidata+UP refers to a specific subset of the Wikidata knowledge graph that focuses on unary predicates representing occupations, categorizing entities such as singers or entrepreneurs as persons based on their associated roles.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-3",
          "local_name": "Wikidata+UP",
          "local_types": [
            "knowledge graph",
            "database"
          ],
          "iri": "Entity-wikidataup-Mention-1"
        }
      ],
      "relevance": 0.5380859375
    },
    "Entity-first_row": {
      "node_id": "first_row",
      "disambiguation_index": 0,
      "label": "first row",
      "aliases": [
        "first row",
        "the first row"
      ],
      "types": [
        "row",
        "data",
        "reference point",
        "data point"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'first row' refers to the initial entry in a table that displays the number of IOP rules learned by the ideal SHACLEARNER variant (-S-H) without any pruning, serving as a baseline for comparison with other variants.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-4",
          "local_name": "first row",
          "local_types": [
            "data point",
            "reference point"
          ],
          "iri": "Entity-first_row-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-4",
          "local_name": "the first row",
          "local_types": [
            "data",
            "row"
          ],
          "iri": "Entity-first_row-Mention-2"
        }
      ],
      "relevance": 0.5380859375
    },
    "Entity-an_example": {
      "node_id": "an_example",
      "disambiguation_index": 0,
      "label": "an example",
      "aliases": [
        "an example"
      ],
      "types": [
        "example"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'an example' refers to a specific instance used to demonstrate the computation of IOPSC and IOPHC quality measures in the context of evaluating IOP rules within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-3-Sentence-1",
          "local_name": "an example",
          "local_types": [
            "example"
          ],
          "iri": "Entity-an_example-Mention-1"
        }
      ],
      "relevance": 0.5380859375
    },
    "Entity-the_pair__e___e_": {
      "node_id": "the_pair__e___e_",
      "disambiguation_index": 0,
      "label": "the pairs (e', e)",
      "aliases": [
        "the pairs (e', e)"
      ],
      "types": [
        "pair"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The pairs (e', e) refer to the distinct entities e' that satisfy the body of a given IOP rule, as extracted from the adjacency matrix representation of a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-1",
          "local_name": "the pairs (e', e)",
          "local_types": [
            "pair"
          ],
          "iri": "Entity-the_pair__e___e_-Mention-1"
        }
      ],
      "relevance": 0.5380859375
    },
    "Entity-this_feature": {
      "node_id": "this_feature",
      "disambiguation_index": 0,
      "label": "This feature",
      "aliases": [
        "This feature"
      ],
      "types": [
        "feature"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This feature refers to the ability to learn fully abstracted shapes from knowledge graphs, which is crucial to avoid the combinatorial explosion of partially instantiated shapes during the shape learning process.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-2",
          "local_name": "This feature",
          "local_types": [
            "feature"
          ],
          "iri": "Entity-this_feature-Mention-1"
        }
      ],
      "relevance": 0.5380859375
    },
    "Entity-alternative_formalism": {
      "node_id": "alternative_formalism",
      "disambiguation_index": 0,
      "label": "alternative formalisms",
      "aliases": [
        "alternative formalisms"
      ],
      "types": [
        "formalism"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Alternative formalisms refer to various established methods for expressing shapes and constraints in knowledge graphs, such as closed rules, trees, existential rules, and graph functional dependencies, which serve as different representations of the same underlying concepts.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "alternative formalisms",
          "local_types": [
            "formalism"
          ],
          "iri": "Entity-alternative_formalism-Mention-1"
        }
      ],
      "relevance": 0.53759765625
    },
    "Entity-subsequent_data_cleaning": {
      "node_id": "subsequent_data_cleaning",
      "disambiguation_index": 0,
      "label": "subsequent data cleaning",
      "aliases": [
        "subsequent data cleaning"
      ],
      "types": [
        "data cleaning"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Subsequent data cleaning refers to the process of utilizing identified frequent patterns or shapes within a knowledge graph to correct errors and enhance the quality of the data during ongoing data entry and maintenance.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-6",
          "local_name": "subsequent data cleaning",
          "local_types": [
            "data cleaning"
          ],
          "iri": "Entity-subsequent_data_cleaning-Mention-1"
        }
      ],
      "relevance": 0.537109375
    },
    "Entity-each_column": {
      "node_id": "each_column",
      "disambiguation_index": 0,
      "label": "each column",
      "aliases": [
        "each column"
      ],
      "types": [
        "data structure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'each column' refers to the individual columns of an adjacency matrix representation of a knowledge graph, where summing these columns helps in identifying distinct entities that satisfy certain conditions related to the rules being evaluated.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-2",
          "local_name": "each column",
          "local_types": [
            "data structure"
          ],
          "iri": "Entity-each_column-Mention-1"
        }
      ],
      "relevance": 0.537109375
    },
    "Entity-scope_of_knowledge": {
      "node_id": "scope_of_knowledge",
      "disambiguation_index": 0,
      "label": "scope of knowledge",
      "aliases": [
        "scope of knowledge"
      ],
      "types": [
        "scope",
        "knowledge"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The 'scope of knowledge' refers to the formalism of constraints that delineate the range and limitations of information that can be obtained from schema-free knowledge bases, particularly in the context of learning shape constraints from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-2",
          "local_name": "scope of knowledge",
          "local_types": [
            "scope",
            "knowledge"
          ],
          "iri": "Entity-scope_of_knowledge-Mention-1"
        }
      ],
      "relevance": 0.537109375
    },
    "Entity-z0": {
      "node_id": "z0",
      "disambiguation_index": 0,
      "label": "z0",
      "aliases": [
        "z0"
      ],
      "types": [
        "intermediate entity",
        "variable",
        "parameter",
        "symbol",
        "identifier",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "z0 is a variable representing an entity in the context of open path rules for knowledge graph completion, used to denote a specific position in a sequence of predicates.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "z0",
          "local_types": [
            "variable",
            "symbol"
          ],
          "iri": "Entity-z0-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-1",
          "local_name": "z0",
          "local_types": [
            "identifier",
            "variable",
            "symbol"
          ],
          "iri": "Entity-z0-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "z0",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-z0-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "z0",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-z0-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "z0",
          "local_types": [
            "intermediate entity",
            "variable"
          ],
          "iri": "Entity-z0-Mention-5"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "z0",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-z0-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "z0",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-z0-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "z0",
          "local_types": [
            "variable",
            "mathematical notation"
          ],
          "iri": "Entity-z0-Mention-8"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "z0",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-z0-Mention-9"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-6",
          "local_name": "z0",
          "local_types": [
            "identifier",
            "variable"
          ],
          "iri": "Entity-z0-Mention-10"
        }
      ],
      "relevance": 0.53662109375
    },
    "Entity-closed": {
      "node_id": "closed",
      "disambiguation_index": 0,
      "label": "closed",
      "aliases": [
        "closed"
      ],
      "types": [
        "condition",
        "state"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph rules, 'closed' refers to a condition where all variables in a rule occur in at least two distinct predicate terms, indicating that the rule is fully defined without any open variables.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-2",
          "local_name": "closed",
          "local_types": [
            "condition",
            "state"
          ],
          "iri": "Entity-closed-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-1",
          "local_name": "closed",
          "local_types": [
            "state"
          ],
          "iri": "Entity-closed-Mention-2"
        }
      ],
      "relevance": 0.53662109375
    },
    "Entity-p0": {
      "node_id": "p0",
      "disambiguation_index": 0,
      "label": "P0",
      "aliases": [
        "P0"
      ],
      "types": [
        "parameter",
        "predicate",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P0 refers to a predicate in the context of knowledge graphs, representing a relationship between two entities e1 and e2, which is used in a scoring function to evaluate the plausibility of that relationship.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-4",
          "local_name": "P0",
          "local_types": [
            "parameter",
            "predicate",
            "variable"
          ],
          "iri": "Entity-p0-Mention-1"
        }
      ],
      "relevance": 0.53662109375
    },
    "Entity-uncertainty": {
      "node_id": "uncertainty",
      "disambiguation_index": 0,
      "label": "uncertainty",
      "aliases": [
        "uncertainty"
      ],
      "types": [
        "challenge",
        "concept",
        "mathematical principle"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of this paper, 'uncertainty' refers to the inherent variability and lack of precision in the constraints and learning processes involved in extracting and validating shapes from knowledge graphs, which complicates the design of efficient learning methods.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-3",
          "local_name": "uncertainty",
          "local_types": [
            "challenge",
            "concept",
            "mathematical principle"
          ],
          "iri": "Entity-uncertainty-Mention-1"
        }
      ],
      "relevance": 0.53662109375
    },
    "Entity-link_between_the_variable": {
      "node_id": "link_between_the_variable",
      "disambiguation_index": 0,
      "label": "links between the variables",
      "aliases": [
        "links between the variables"
      ],
      "types": [
        "links",
        "variables"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'links between the variables' refers to the connections or relationships represented as paths in a knowledge graph, specifically in the context of closed path rules that form unbroken loops connecting different entities through predicates.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-6",
          "local_name": "links between the variables",
          "local_types": [
            "links",
            "variables"
          ],
          "iri": "Entity-link_between_the_variable-Mention-1"
        }
      ],
      "relevance": 0.53662109375
    },
    "Entity-every_kg_fact": {
      "node_id": "every_kg_fact",
      "disambiguation_index": 0,
      "label": "every KG fact",
      "aliases": [
        "every KG fact"
      ],
      "types": [
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Every KG fact refers to an RDF triple in a knowledge graph, representing a relationship between entities, where each fact is a specific instance of a predicate linking two entities or an entity to itself.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "every KG fact",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-every_kg_fact-Mention-1"
        }
      ],
      "relevance": 0.53662109375
    },
    "Entity-human__x__x__-__nativelanguage__x__z3___language__z3__z3_": {
      "node_id": "human__x__x__-__nativelanguage__x__z3___language__z3__z3_",
      "disambiguation_index": 0,
      "label": "human(x, x) -> nativeLanguage(x, z3) ^ language(z3, z3)",
      "aliases": [
        "human(x, x) -> nativeLanguage(x, z3) ^ language(z3, z3)"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'human(x, x) -> nativeLanguage(x, z3) ^ language(z3, z3)' represents an inverse open path (IOP) rule that asserts that for every human entity x, there exists a language z3 such that x has a native language z3, and z3 is recognized as a language.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "human(x, x) -> nativeLanguage(x, z3) ^ language(z3, z3)",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-human__x__x__-__nativelanguage__x__z3___language__z3__z3_-Mention-1"
        }
      ],
      "relevance": 0.53662109375
    },
    "Entity-data_scheme": {
      "node_id": "data_scheme",
      "disambiguation_index": 0,
      "label": "data schemes",
      "aliases": [
        "data schemes"
      ],
      "types": [
        "data structure",
        "schema"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Data schemes refer to the frameworks or structures that define how data is organized, stored, and manipulated within knowledge graphs, particularly in the context of their weak constraints and inference rules.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-2",
          "local_name": "data schemes",
          "local_types": [
            "data structure",
            "schema"
          ],
          "iri": "Entity-data_scheme-Mention-1"
        }
      ],
      "relevance": 0.5361328125
    },
    "Entity-e8": {
      "node_id": "e8",
      "disambiguation_index": 0,
      "label": "e8",
      "aliases": [
        "e8"
      ],
      "types": [
        "entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'e8' refers to a specific entity in a knowledge graph that can instantiate the variable z0 in the context of an inverse open path rule, contributing to the body part of the rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "e8",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e8-Mention-1"
        }
      ],
      "relevance": 0.5361328125
    },
    "Entity-pair": {
      "node_id": "pair",
      "disambiguation_index": 0,
      "label": "pairs",
      "aliases": [
        "pairs"
      ],
      "types": [
        "mathematical concept",
        "relation",
        "set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'pairs' refers to the ordered sets of entities (e, e') that are linked by a specified path in a knowledge graph, which satisfy the conditions of a given rule.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-1",
          "local_name": "pairs",
          "local_types": [
            "mathematical concept",
            "relation",
            "set"
          ],
          "iri": "Entity-pair-Mention-1"
        }
      ],
      "relevance": 0.5361328125
    },
    "Entity-each_variant": {
      "node_id": "each_variant",
      "disambiguation_index": 0,
      "label": "each variant",
      "aliases": [
        "each variant"
      ],
      "types": [
        "variant"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Each variant refers to the different configurations of the SHACLEARNER system, specifically the variations in its sampling and heuristic pruning methods that affect the quality and quantity of the learnt IOP rules.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-4",
          "local_name": "each variant",
          "local_types": [
            "variant"
          ],
          "iri": "Entity-each_variant-Mention-1"
        }
      ],
      "relevance": 0.5361328125
    },
    "Entity-e6": {
      "node_id": "e6",
      "disambiguation_index": 0,
      "label": "e6",
      "aliases": [
        "e6"
      ],
      "types": [
        "entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'e6' refers to one of the entities in a knowledge graph that can instantiate the variable z0 to satisfy the body part of an inverse open path rule.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "e6",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e6-Mention-1"
        }
      ],
      "relevance": 0.53564453125
    },
    "Entity-annotation_value": {
      "node_id": "annotation_value",
      "disambiguation_index": 0,
      "label": "annotation value",
      "aliases": [
        "annotation value"
      ],
      "types": [
        "value"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'annotation value' refers to a numerical representation of the shape constraint (SC) of a tree structure derived from IOP rules in knowledge graphs, indicating the quality or confidence of the tree's shape.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-2",
          "local_name": "annotation value",
          "local_types": [
            "value"
          ],
          "iri": "Entity-annotation_value-Mention-1"
        }
      ],
      "relevance": 0.53564453125
    },
    "Entity-both_kind_of_error": {
      "node_id": "both_kind_of_error",
      "disambiguation_index": 0,
      "label": "Both kinds of errors",
      "aliases": [
        "Both kinds of errors"
      ],
      "types": [
        "error"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Both kinds of errors refer to the errors of omission and commission that occur in knowledge graphs, which can be identified and corrected through the application of schema constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-4",
          "local_name": "Both kinds of errors",
          "local_types": [
            "error"
          ],
          "iri": "Entity-both_kind_of_error-Mention-1"
        }
      ],
      "relevance": 0.53564453125
    },
    "Entity-an_extensive_representation_of_predicate_and_entity": {
      "node_id": "an_extensive_representation_of_predicate_and_entity",
      "disambiguation_index": 0,
      "label": "an extensive representation of predicates and entities",
      "aliases": [
        "an extensive representation of predicates and entities"
      ],
      "types": [
        "representation",
        "predicates",
        "entities"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An extensive representation of predicates and entities refers to the comprehensive embedding of both predicates and entities in a knowledge graph, achieved through the RESCAL model, which facilitates the learning of relationships and structures within the graph data.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-2",
          "local_name": "an extensive representation of predicates and entities",
          "local_types": [
            "representation",
            "predicates",
            "entities"
          ],
          "iri": "Entity-an_extensive_representation_of_predicate_and_entity-Mention-1"
        }
      ],
      "relevance": 0.53564453125
    },
    "Entity-the_head_(1)": {
      "node_id": "the_head_(1)",
      "disambiguation_index": 1,
      "label": "the head",
      "aliases": [
        "the head"
      ],
      "types": [
        "head",
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the discussed IOP rule, 'the head' refers to the part of the rule that specifies the conclusion or outcome, represented by a predicate that connects entities in the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "the head",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-the_head_(1)-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-1",
          "local_name": "the head",
          "local_types": [
            "head"
          ],
          "iri": "Entity-the_head_(1)-Mention-2"
        }
      ],
      "relevance": 0.53564453125
    },
    "Entity-z2": {
      "node_id": "z2",
      "disambiguation_index": 0,
      "label": "z2",
      "aliases": [
        "z2"
      ],
      "types": [
        "final entity",
        "mathematical notation",
        "variable",
        "symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of open path rules for knowledge graph completion, 'z2' is a variable representing an entity that is part of a predicate relationship in a sequence of predicates connecting other entities.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "z2",
          "local_types": [
            "variable",
            "symbol"
          ],
          "iri": "Entity-z2-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "z2",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-z2-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "z2",
          "local_types": [
            "final entity",
            "variable"
          ],
          "iri": "Entity-z2-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "z2",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-z2-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "z2",
          "local_types": [
            "variable",
            "mathematical notation"
          ],
          "iri": "Entity-z2-Mention-5"
        }
      ],
      "relevance": 0.53515625
    },
    "Entity-form__3_": {
      "node_id": "form__3_",
      "disambiguation_index": 0,
      "label": "form (3)",
      "aliases": [
        "form (3)",
        "the form (3)"
      ],
      "types": [
        "mathematical notation",
        "expression",
        "form"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'form (3)' refers to the general structure of an inverse open path (IOP) rule in predicate logic, which is defined as Pt'(x, z0) -> exists(z1, ..., z(n-1), y) P1'(z0, z1) ^ P2'(z1, z2) ^ ... ^ Pn'(z(n-1), y), where the predicates can be either in their original or reversed forms.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-4-Sentence-2",
          "local_name": "form (3)",
          "local_types": [
            "mathematical notation",
            "expression"
          ],
          "iri": "Entity-form__3_-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-10-Sentence-2",
          "local_name": "the form (3)",
          "local_types": [
            "form"
          ],
          "iri": "Entity-form__3_-Mention-2"
        }
      ],
      "relevance": 0.53515625
    },
    "Entity-_e2__e3__(1)": {
      "node_id": "_e2__e3__(1)",
      "disambiguation_index": 1,
      "label": "{e2, e3}",
      "aliases": [
        "{e2, e3}"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term {e2, e3} refers to a set of two entities in a knowledge graph that satisfy a specific rule under consideration, indicating their relevance in the context of evaluating the rule's conditions.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-4",
          "local_name": "{e2, e3}",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-_e2__e3__(1)-Mention-1"
        }
      ],
      "relevance": 0.53515625
    },
    "Entity-the_result": {
      "node_id": "the_result",
      "disambiguation_index": 0,
      "label": "the results",
      "aliases": [
        "the results"
      ],
      "types": [
        "results"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The results refer to the findings from the experiments that demonstrate the efficiency of aggregating Inverse Open Path (IOP) rules into tree structures, indicating a significant reduction in running time compared to the initial IOP mining process.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "the results",
          "local_types": [
            "results"
          ],
          "iri": "Entity-the_result-Mention-1"
        }
      ],
      "relevance": 0.53515625
    },
    "Entity-schimatos": {
      "node_id": "schimatos",
      "disambiguation_index": 0,
      "label": "Schimatos",
      "aliases": [
        "Schimatos",
        "an editor called Schimatos"
      ],
      "types": [
        "software",
        "tool",
        "editor"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Schimatos is an editor designed for manual knowledge graph completion, utilizing learned SHACL shapes to facilitate efficient and interpretable human validation of graph data.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-3",
          "local_name": "Schimatos",
          "local_types": [
            "software",
            "tool",
            "editor"
          ],
          "iri": "Entity-schimatos-Mention-1"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-3",
          "local_name": "an editor called Schimatos",
          "local_types": [
            "software",
            "editor"
          ],
          "iri": "Entity-schimatos-Mention-2"
        }
      ],
      "relevance": 0.53466796875
    },
    "Entity-tree___greedysearch__r__mintreesc_": {
      "node_id": "tree___greedysearch__r__mintreesc_",
      "disambiguation_index": 0,
      "label": "Tree := GreedySearch(R, MinTreeSC)",
      "aliases": [
        "Tree := GreedySearch(R, MinTreeSC)"
      ],
      "types": [
        "operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Tree is the result of applying a greedy search algorithm to a set of inverse open path rules R, with a minimum tree shape constraint specified by MinTreeSC.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-12",
          "local_name": "Tree := GreedySearch(R, MinTreeSC)",
          "local_types": [
            "operation"
          ],
          "iri": "Entity-tree___greedysearch__r__mintreesc_-Mention-1"
        }
      ],
      "relevance": 0.53466796875
    },
    "Entity-vector": {
      "node_id": "vector",
      "disambiguation_index": 0,
      "label": "vectors",
      "aliases": [
        "vectors",
        "vector"
      ],
      "types": [
        "linear algebra",
        "mathematical object",
        "data structure",
        "vector"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph embeddings, 'vectors' refer to mathematical representations of entities and predicates, specifically the subject and object argument embeddings associated with each predicate in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-2-Sentence-3",
          "local_name": "vectors",
          "local_types": [
            "mathematical object",
            "vector",
            "data structure"
          ],
          "iri": "Entity-vector-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-3",
          "local_name": "vector",
          "local_types": [
            "mathematical object",
            "linear algebra"
          ],
          "iri": "Entity-vector-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-4",
          "local_name": "vector",
          "local_types": [
            "mathematical object",
            "data structure"
          ],
          "iri": "Entity-vector-Mention-3"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-3",
          "local_name": "vectors",
          "local_types": [
            "mathematical object",
            "data structure"
          ],
          "iri": "Entity-vector-Mention-4"
        }
      ],
      "relevance": 0.53466796875
    },
    "Entity-small_amount_of_data": {
      "node_id": "small_amount_of_data",
      "disambiguation_index": 0,
      "label": "small amount of data",
      "aliases": [
        "small amount of data",
        "a small amount of data"
      ],
      "types": [
        "data"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The phrase 'small amount of data' refers to the limited dataset utilized by certain procedural methods for learning SHACL shapes from knowledge graphs, which are noted to lack scalability and logical foundations.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-1-Sentence-3",
          "local_name": "small amount of data",
          "local_types": [
            "data"
          ],
          "iri": "Entity-small_amount_of_data-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-3",
          "local_name": "a small amount of data",
          "local_types": [
            "data"
          ],
          "iri": "Entity-small_amount_of_data-Mention-2"
        }
      ],
      "relevance": 0.53466796875
    },
    "Entity-an_interactive_framework": {
      "node_id": "an_interactive_framework",
      "disambiguation_index": 0,
      "label": "an interactive framework",
      "aliases": [
        "an interactive framework"
      ],
      "types": [
        "framework"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An interactive framework refers to a system that allows users to define SHACL shapes of varying complexities, including nested patterns, through a user-friendly interface.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-1",
          "local_name": "an interactive framework",
          "local_types": [
            "framework"
          ],
          "iri": "Entity-an_interactive_framework-Mention-1"
        }
      ],
      "relevance": 0.53466796875
    },
    "Entity-the_statistical_likelihood_of_poor_quality_rule": {
      "node_id": "the_statistical_likelihood_of_poor_quality_rule",
      "disambiguation_index": 0,
      "label": "the statistical likelihood of poor quality rules",
      "aliases": [
        "the statistical likelihood of poor quality rules"
      ],
      "types": [
        "statistical concept",
        "quality"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The statistical likelihood of poor quality rules refers to the increased probability of generating rules that do not meet established quality thresholds during the learning process of shape constraints from knowledge graphs, indicating that many learned rules may be of low quality.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-5",
          "local_name": "the statistical likelihood of poor quality rules",
          "local_types": [
            "statistical concept",
            "quality"
          ],
          "iri": "Entity-the_statistical_likelihood_of_poor_quality_rule-Mention-1"
        }
      ],
      "relevance": 0.53466796875
    },
    "Entity-opsupp__r_": {
      "node_id": "opsupp__r_",
      "disambiguation_index": 0,
      "label": "OPsupp(r)",
      "aliases": [
        "OPsupp(r)"
      ],
      "types": [
        "function",
        "mathematical expression",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "OPsupp(r) is a mathematical expression that represents the open path support of an open path rule r in a knowledge graph, defined as the count of entities e that satisfy the body of r and have a corresponding fact in the head of r.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-5-Sentence-2",
          "local_name": "OPsupp(r)",
          "local_types": [
            "function",
            "mathematical expression",
            "mathematical notation"
          ],
          "iri": "Entity-opsupp__r_-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-3",
          "local_name": "OPsupp(r)",
          "local_types": [
            "function",
            "mathematical expression",
            "mathematical notation"
          ],
          "iri": "Entity-opsupp__r_-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-4",
          "local_name": "OPsupp(r)",
          "local_types": [
            "mathematical expression",
            "function"
          ],
          "iri": "Entity-opsupp__r_-Mention-3"
        }
      ],
      "relevance": 0.5341796875
    },
    "Entity-the_running_time_for_aggregating_iop_rule_into_tree": {
      "node_id": "the_running_time_for_aggregating_iop_rule_into_tree",
      "disambiguation_index": 0,
      "label": "the running time for aggregating IOP rules into trees",
      "aliases": [
        "the running time for aggregating IOP rules into trees"
      ],
      "types": [
        "running time",
        "IOP rules",
        "performance metric",
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The running time for aggregating IOP rules into trees refers to the computational duration required to combine individual Inverse Open Path (IOP) rules into structured tree representations, which is significantly less than the time taken to initially mine these IOP rules.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "the running time for aggregating IOP rules into trees",
          "local_types": [
            "running time",
            "IOP rules",
            "performance metric",
            "metric"
          ],
          "iri": "Entity-the_running_time_for_aggregating_iop_rule_into_tree-Mention-1"
        }
      ],
      "relevance": 0.5341796875
    },
    "Entity-knowledge_that_can_be_acquired": {
      "node_id": "knowledge_that_can_be_acquired",
      "disambiguation_index": 0,
      "label": "knowledge that can be acquired",
      "aliases": [
        "knowledge that can be acquired"
      ],
      "types": [
        "knowledge"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'knowledge that can be acquired' refers to the formal constraints and rules that define the potential information and relationships that can be extracted or inferred from schema-free knowledge bases, particularly in the context of learning shape constraints for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-2",
          "local_name": "knowledge that can be acquired",
          "local_types": [
            "knowledge"
          ],
          "iri": "Entity-knowledge_that_can_be_acquired-Mention-1"
        }
      ],
      "relevance": 0.53369140625
    },
    "Entity-single_unbroken_loop_of_link": {
      "node_id": "single_unbroken_loop_of_link",
      "disambiguation_index": 0,
      "label": "single unbroken loop of links",
      "aliases": [
        "single unbroken loop of links",
        "single unbroken loop"
      ],
      "types": [
        "link structure",
        "loop"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'single unbroken loop of links' refers to a closed path in a knowledge graph rule, which is a sequence of linked entities that forms a continuous cycle, allowing for the inference of relationships between them.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-6",
          "local_name": "single unbroken loop of links",
          "local_types": [
            "loop",
            "link structure"
          ],
          "iri": "Entity-single_unbroken_loop_of_link-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-6",
          "local_name": "single unbroken loop",
          "local_types": [
            "loop"
          ],
          "iri": "Entity-single_unbroken_loop_of_link-Mention-2"
        }
      ],
      "relevance": 0.53271484375
    },
    "Entity-the_outside": {
      "node_id": "the_outside",
      "disambiguation_index": 0,
      "label": "the outside",
      "aliases": [
        "the outside"
      ],
      "types": [
        "context"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'the outside' refers to the scope in which free variables are universally quantified in the formal representation of SHACL trees, indicating that these variables can take on any value within the defined constraints of the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-3",
          "local_name": "the outside",
          "local_types": [
            "context"
          ],
          "iri": "Entity-the_outside-Mention-1"
        }
      ],
      "relevance": 0.53271484375
    },
    "Entity-another_work": {
      "node_id": "another_work",
      "disambiguation_index": 0,
      "label": "Another work",
      "aliases": [
        "Another work"
      ],
      "types": [
        "research"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Another work refers to a research effort that offers an interactive framework for defining SHACL shapes of varying complexities, including nested patterns akin to tree structures.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-1",
          "local_name": "Another work",
          "local_types": [
            "research"
          ],
          "iri": "Entity-another_work-Mention-1"
        }
      ],
      "relevance": 0.53271484375
    },
    "Entity-high_iophc": {
      "node_id": "high_iophc",
      "disambiguation_index": 0,
      "label": "high IOPHC",
      "aliases": [
        "high IOPHC"
      ],
      "types": [
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "High IOPHC refers to a metric indicating the proportion of rule consequent instances that are justified by target predicate instances in a knowledge graph, thereby reflecting the relevance of the rule to the target predicate.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-5",
          "local_name": "high IOPHC",
          "local_types": [
            "metric"
          ],
          "iri": "Entity-high_iophc-Mention-1"
        }
      ],
      "relevance": 0.53271484375
    },
    "Entity-error": {
      "node_id": "error",
      "disambiguation_index": 0,
      "label": "errors",
      "aliases": [
        "errors"
      ],
      "types": [
        "issue",
        "problem"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'errors' refers to inaccuracies in knowledge graphs that arise from omissions and commissions during the data population process, which can be identified and corrected through the application of schema constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-4",
          "local_name": "errors",
          "local_types": [
            "issue",
            "problem"
          ],
          "iri": "Entity-error-Mention-1"
        }
      ],
      "relevance": 0.5322265625
    },
    "Entity-head_coverage__hc_": {
      "node_id": "head_coverage__hc_",
      "disambiguation_index": 0,
      "label": "head coverage (HC)",
      "aliases": [
        "HC",
        "head coverage (HC)"
      ],
      "types": [
        "statistical measure",
        "measure",
        "method",
        "coverage",
        "statistical concept",
        "coverage measure",
        "metric",
        "evaluation measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Head coverage (HC) is a statistical measure that quantifies the proportion of facts satisfying the head of a rule that can be inferred by satisfying the rule's body in the context of knowledge graph rule learning.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-1",
          "local_name": "head coverage (HC)",
          "local_types": [
            "statistical measure",
            "measure",
            "coverage",
            "coverage measure",
            "metric"
          ],
          "iri": "Entity-head_coverage__hc_-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-4",
          "local_name": "HC",
          "local_types": [
            "method",
            "evaluation measure",
            "metric"
          ],
          "iri": "Entity-head_coverage__hc_-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "HC",
          "local_types": [
            "statistical concept"
          ],
          "iri": "Entity-head_coverage__hc_-Mention-3"
        }
      ],
      "relevance": 0.5322265625
    },
    "Entity-human__z2__z2_": {
      "node_id": "human__z2__z2_",
      "disambiguation_index": 0,
      "label": "human(z2, z2)",
      "aliases": [
        "human(z2)",
        "human(z2, z2)"
      ],
      "types": [
        "function",
        "predicate",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'human(z2, z2)' refers to a logical expression in the context of a tree structure used in the SHACLearner algorithm, indicating that the entity represented by 'z2' is a human and is related to itself in the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "human(z2, z2)",
          "local_types": [
            "function",
            "logical expression"
          ],
          "iri": "Entity-human__z2__z2_-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "human(z2)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-human__z2__z2_-Mention-2"
        }
      ],
      "relevance": 0.5322265625
    },
    "Entity-quality": {
      "node_id": "quality",
      "disambiguation_index": 0,
      "label": "quality",
      "aliases": [
        "quality"
      ],
      "types": [
        "characteristic",
        "evaluation criterion",
        "measurement",
        "evaluation metric",
        "performance measure",
        "metric",
        "attribute"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'quality' refers to the measure of validity and reliability of the graph's data, which can be assessed through the application of shapes that define constraints and patterns within the graph.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-2-Sentence-1",
          "local_name": "quality",
          "local_types": [
            "attribute",
            "measurement"
          ],
          "iri": "Entity-quality-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-1",
          "local_name": "quality",
          "local_types": [
            "measurement",
            "evaluation metric"
          ],
          "iri": "Entity-quality-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-2",
          "local_name": "quality",
          "local_types": [
            "evaluation criterion",
            "metric"
          ],
          "iri": "Entity-quality-Mention-3"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-2",
          "local_name": "quality",
          "local_types": [
            "evaluation metric",
            "performance measure"
          ],
          "iri": "Entity-quality-Mention-4"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-4",
          "local_name": "quality",
          "local_types": [
            "attribute",
            "characteristic"
          ],
          "iri": "Entity-quality-Mention-5"
        }
      ],
      "relevance": 0.53173828125
    },
    "Entity-parameter": {
      "node_id": "parameter",
      "disambiguation_index": 0,
      "label": "Parameters",
      "aliases": [
        "Parameters"
      ],
      "types": [
        "parameter",
        "concept",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the algorithm, 'Parameters' refers to the variable 'max rule length l', which defines the maximum length of the rules to be learned from the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-3",
          "local_name": "Parameters",
          "local_types": [
            "parameter",
            "concept",
            "variable"
          ],
          "iri": "Entity-parameter-Mention-1"
        }
      ],
      "relevance": 0.53173828125
    },
    "Entity-for_2___k___l": {
      "node_id": "for_2___k___l",
      "disambiguation_index": 0,
      "label": "for 2 <= k <= l",
      "aliases": [
        "for 2 <= k <= l"
      ],
      "types": [
        "loop"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'for 2 <= k <= l' refers to a loop construct in the algorithm that iterates over values of k, starting from 2 up to a maximum value l, to compute sets of entities related to a target predicate in the context of sampling from a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-6",
          "local_name": "for 2 <= k <= l",
          "local_types": [
            "loop"
          ],
          "iri": "Entity-for_2___k___l-Mention-1"
        }
      ],
      "relevance": 0.53173828125
    },
    "Entity-k-cliques": {
      "node_id": "k-cliques",
      "disambiguation_index": 0,
      "label": "k-cliques",
      "aliases": [
        "k-cliques"
      ],
      "types": [
        "graph structure",
        "graph theory",
        "concept",
        "formalism",
        "mathematical concept",
        "mathematical structure",
        "graph pattern",
        "pattern"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "k-cliques are subsets of vertices in a graph where every two distinct vertices are adjacent, forming a complete subgraph of size k.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "k-cliques",
          "local_types": [
            "graph structure",
            "graph theory",
            "concept",
            "formalism",
            "mathematical concept",
            "mathematical structure",
            "graph pattern",
            "pattern"
          ],
          "iri": "Entity-k-cliques-Mention-1"
        }
      ],
      "relevance": 0.53125
    },
    "Entity-p1__x__z0_": {
      "node_id": "p1__x__z0_",
      "disambiguation_index": 0,
      "label": "P1(x, z0)",
      "aliases": [
        "P1(z0, x)",
        "P1(x, z0)",
        "P1(z0, z1)"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P1(x, z0) is a predicate in the context of inverse open path rules, representing a relationship where the entity x is linked to another entity z0 through a specific path defined by the predicates P2 and P3.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "P1(x, z0)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p1__x__z0_-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "P1(z0, z1)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p1__x__z0_-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "P1(x, z0)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p1__x__z0_-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "P1(x, z0)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p1__x__z0_-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "P1(z0, x)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p1__x__z0_-Mention-5"
        }
      ],
      "relevance": 0.53125
    },
    "Entity-input_graph": {
      "node_id": "input_graph",
      "disambiguation_index": 0,
      "label": "input graph",
      "aliases": [
        "input graph"
      ],
      "types": [
        "graph",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An input graph is a data structure consisting of a set of vertices and edges that represents relationships or connections between entities, typically used as the initial data for processing in graph algorithms.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-4",
          "local_name": "input graph",
          "local_types": [
            "graph",
            "data structure"
          ],
          "iri": "Entity-input_graph-Mention-1"
        }
      ],
      "relevance": 0.53125
    },
    "Entity-occupation": {
      "node_id": "occupation",
      "disambiguation_index": 0,
      "label": "occupations",
      "aliases": [
        "the occupations",
        "occupations"
      ],
      "types": [
        "profession",
        "entity",
        "concept",
        "type",
        "occupation",
        "job type",
        "job category",
        "category"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of Wikidata+UP, 'occupations' refers to unary predicates that categorize entities as specific job roles or professions, such as 'singer' or 'entrepreneur', which are associated with individuals in the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-3",
          "local_name": "occupations",
          "local_types": [
            "profession",
            "entity",
            "concept",
            "type",
            "occupation",
            "job type",
            "category"
          ],
          "iri": "Entity-occupation-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-4",
          "local_name": "occupations",
          "local_types": [
            "profession",
            "job category"
          ],
          "iri": "Entity-occupation-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-4",
          "local_name": "the occupations",
          "local_types": [
            "occupation"
          ],
          "iri": "Entity-occupation-Mention-3"
        }
      ],
      "relevance": 0.53125
    },
    "Entity-cover": {
      "node_id": "cover",
      "disambiguation_index": 0,
      "label": "cover",
      "aliases": [
        "cover"
      ],
      "types": [
        "rule learning",
        "method",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of rule learning in inductive logic programming, 'cover' refers to a measure that quantifies the proportion of facts satisfying the head of a rule that can be inferred by satisfying the rule's body.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-5",
          "local_name": "cover",
          "local_types": [
            "rule learning",
            "method",
            "concept"
          ],
          "iri": "Entity-cover-Mention-1"
        }
      ],
      "relevance": 0.53076171875
    },
    "Entity-zn1": {
      "node_id": "zn1",
      "disambiguation_index": 0,
      "label": "zn\u22121",
      "aliases": [
        "zn\u22121"
      ],
      "types": [
        "variable",
        "symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'zn\u22121' refers to a variable in the context of open path rules used for knowledge graph completion, representing an entity that is part of a sequence of predicates connecting other entities in the graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "zn\u22121",
          "local_types": [
            "variable",
            "symbol"
          ],
          "iri": "Entity-zn1-Mention-1"
        }
      ],
      "relevance": 0.53076171875
    },
    "Entity-father__x__z2_": {
      "node_id": "father__x__z2_",
      "disambiguation_index": 0,
      "label": "father(x, z2)",
      "aliases": [
        "father(x, z2)"
      ],
      "types": [
        "function",
        "predicate",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The expression 'father(x, z2)' represents a logical relationship in a knowledge graph indicating that entity 'x' is the father of entity 'z2', as part of a tree structure used to define shapes in the context of SHACL shape learning.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "father(x, z2)",
          "local_types": [
            "function",
            "logical expression"
          ],
          "iri": "Entity-father__x__z2_-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "father(x, z2)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-father__x__z2_-Mention-2"
        }
      ],
      "relevance": 0.53076171875
    },
    "Entity-ten_of_billion_of_fact": {
      "node_id": "ten_of_billion_of_fact",
      "disambiguation_index": 0,
      "label": "tens of billions of facts",
      "aliases": [
        "tens of billions of facts"
      ],
      "types": [
        "data quantity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'tens of billions of facts' refers to the vast quantity of data points contained within extremely large knowledge graphs, such as the latest version of Wikidata, which the SHACLEARNER algorithm aims to process and analyze.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-5-Sentence-2",
          "local_name": "tens of billions of facts",
          "local_types": [
            "data quantity"
          ],
          "iri": "Entity-ten_of_billion_of_fact-Mention-1"
        }
      ],
      "relevance": 0.53076171875
    },
    "Entity-satisfies": {
      "node_id": "satisfies",
      "disambiguation_index": 0,
      "label": "satisfies",
      "aliases": [
        "satisfies"
      ],
      "types": [
        "verb",
        "action"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of closed path rules in knowledge graph rule learning, 'satisfies' refers to the relationship where a pair of entities meets the conditions specified by the body of a rule and also confirms the fact represented by the rule's head.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-1",
          "local_name": "satisfies",
          "local_types": [
            "verb",
            "action"
          ],
          "iri": "Entity-satisfies-Mention-1"
        }
      ],
      "relevance": 0.5302734375
    },
    "Entity-return_k_": {
      "node_id": "return_k_",
      "disambiguation_index": 0,
      "label": "return K'",
      "aliases": [
        "return K'"
      ],
      "types": [
        "output"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "K' refers to a subgraph of the input knowledge graph K, which is computed by the Sampling() method to include a bounded number of entities related to a specific target predicate Pt.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-11",
          "local_name": "return K'",
          "local_types": [
            "output"
          ],
          "iri": "Entity-return_k_-Mention-1"
        }
      ],
      "relevance": 0.5302734375
    },
    "Entity-car_value_1__2__and_3": {
      "node_id": "car_value_1__2__and_3",
      "disambiguation_index": 0,
      "label": "Car values 1, 2, and 3",
      "aliases": [
        "Car values 1, 2, and 3"
      ],
      "types": [
        "value",
        "parameter"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Car values 1, 2, and 3 refer to the distinct cardinality parameters used in the evaluation of the IOP rules r1, r2, and r3, which determine the minimum number of entities satisfying the conditions of the rules.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "Car values 1, 2, and 3",
          "local_types": [
            "value",
            "parameter"
          ],
          "iri": "Entity-car_value_1__2__and_3-Mention-1"
        }
      ],
      "relevance": 0.5302734375
    },
    "Entity-quantity": {
      "node_id": "quantity",
      "disambiguation_index": 0,
      "label": "quantity",
      "aliases": [
        "quantity"
      ],
      "types": [
        "evaluation metric",
        "metric",
        "measurement",
        "evaluation criterion"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of evaluating knowledge graph rule-learning methods, 'quantity' refers to the numerical measure of distinct rules that have been learned.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-1",
          "local_name": "quantity",
          "local_types": [
            "measurement",
            "evaluation metric"
          ],
          "iri": "Entity-quantity-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-2",
          "local_name": "quantity",
          "local_types": [
            "evaluation criterion",
            "metric"
          ],
          "iri": "Entity-quantity-Mention-2"
        }
      ],
      "relevance": 0.5302734375
    },
    "Entity-car1": {
      "node_id": "car1",
      "disambiguation_index": 0,
      "label": "Car=1",
      "aliases": [
        "Car=1"
      ],
      "types": [
        "entity",
        "cardinality",
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Car=1 refers to a cardinality constraint indicating that at least one entity must satisfy a specific rule in the context of knowledge graph validation.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-6",
          "local_name": "Car=1",
          "local_types": [
            "entity",
            "cardinality"
          ],
          "iri": "Entity-car1-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-4",
          "local_name": "Car=1",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-car1-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-2",
          "local_name": "Car=1",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-car1-Mention-3"
        }
      ],
      "relevance": 0.5302734375
    },
    "Entity-pn": {
      "node_id": "pn",
      "disambiguation_index": 0,
      "label": "Pn",
      "aliases": [
        "Pn"
      ],
      "types": [
        "predicate",
        "mathematical function",
        "relation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pn refers to a binary predicate in the context of knowledge graphs, representing a relationship between two entities e and e' within the framework of closed path rules.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "Pn",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-pn-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "Pn",
          "local_types": [
            "predicate",
            "mathematical function"
          ],
          "iri": "Entity-pn-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "Pn",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-pn-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "Pn",
          "local_types": [
            "relation",
            "predicate"
          ],
          "iri": "Entity-pn-Mention-4"
        }
      ],
      "relevance": 0.52978515625
    },
    "Entity-entity_variable": {
      "node_id": "entity_variable",
      "disambiguation_index": 0,
      "label": "entity variables",
      "aliases": [
        "entity variables"
      ],
      "types": [
        "variable",
        "variable type",
        "logical variable",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Entity variables refer to the placeholders in a knowledge graph that represent entities in the context of open path rules, where they can be either open or closed based on their occurrence in predicate terms.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-3",
          "local_name": "entity variables",
          "local_types": [
            "variable",
            "variable type",
            "logical variable",
            "data structure"
          ],
          "iri": "Entity-entity_variable-Mention-1"
        }
      ],
      "relevance": 0.52978515625
    },
    "Entity-line_1": {
      "node_id": "line_1",
      "disambiguation_index": 0,
      "label": "line 1",
      "aliases": [
        "line 1"
      ],
      "types": [
        "code reference",
        "line"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Line 1 refers to the first step in Algorithm 1 of the paper, which describes the Sampling() method that computes a fragment of the knowledge graph K' by identifying entities related to a specified target predicate Pt.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "line 1",
          "local_types": [
            "code reference",
            "line"
          ],
          "iri": "Entity-line_1-Mention-1"
        }
      ],
      "relevance": 0.52978515625
    },
    "Entity-type_of_entity": {
      "node_id": "type_of_entity",
      "disambiguation_index": 0,
      "label": "type of entities",
      "aliases": [
        "type of entities"
      ],
      "types": [
        "entity type"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'type of entities' refers to the classification of entities within a knowledge graph that defines the constraints on their relationships and the nature of the data they can represent, particularly in the context of Functional Graph Dependencies (FGDs).",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-3",
          "local_name": "type of entities",
          "local_types": [
            "entity type"
          ],
          "iri": "Entity-type_of_entity-Mention-1"
        }
      ],
      "relevance": 0.52978515625
    },
    "Entity-domain_and_range_of_predicate": {
      "node_id": "domain_and_range_of_predicate",
      "disambiguation_index": 0,
      "label": "domain and range of predicates",
      "aliases": [
        "domain and range of predicates"
      ],
      "types": [
        "predicate",
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The domain and range of predicates refer to the types of entities that can be the subject and object, respectively, in relationships defined by predicates within a knowledge graph, which are essential for establishing constraints and ensuring the consistency of the graph's data.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-3",
          "local_name": "domain and range of predicates",
          "local_types": [
            "predicate",
            "concept"
          ],
          "iri": "Entity-domain_and_range_of_predicate-Mention-1"
        }
      ],
      "relevance": 0.52978515625
    },
    "Entity-the_predicate_argument": {
      "node_id": "the_predicate_argument",
      "disambiguation_index": 0,
      "label": "The predicate arguments",
      "aliases": [
        "The predicate arguments"
      ],
      "types": [
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The predicate arguments refer to the components of a logical rule in the context of Inverse Open Path (IOP) rules, specifically the entities and predicates that are linked by shared variables and whose embeddings are expected to exhibit similarity.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-3-Sentence-1",
          "local_name": "The predicate arguments",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-the_predicate_argument-Mention-1"
        }
      ],
      "relevance": 0.52978515625
    },
    "Entity-a_node_in_the_tree": {
      "node_id": "a_node_in_the_tree",
      "disambiguation_index": 0,
      "label": "a node in the tree",
      "aliases": [
        "a node in the tree"
      ],
      "types": [
        "node",
        "structure"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A node in the tree refers to a specific point within a hierarchical structure of SHACL shapes, where paths from a target predicate converge, allowing for the representation of constraints and relationships in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "a node in the tree",
          "local_types": [
            "node",
            "structure"
          ],
          "iri": "Entity-a_node_in_the_tree-Mention-1"
        }
      ],
      "relevance": 0.52978515625
    },
    "Entity-e__k-1_": {
      "node_id": "e__k-1_",
      "disambiguation_index": 0,
      "label": "E(k-1)",
      "aliases": [
        "E(k-1)"
      ],
      "types": [
        "mathematical notation",
        "set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "E(k-1) refers to the set of entities in the knowledge graph that are related to the entities in the previous sampling iteration, specifically those entities that are connected to the target predicate Pt.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-7",
          "local_name": "E(k-1)",
          "local_types": [
            "mathematical notation",
            "set"
          ],
          "iri": "Entity-e__k-1_-Mention-1"
        }
      ],
      "relevance": 0.529296875
    },
    "Entity-the_process_of_constructing_one_kind_of_more_complex_shape": {
      "node_id": "the_process_of_constructing_one_kind_of_more_complex_shape",
      "disambiguation_index": 0,
      "label": "the process of constructing one kind of more complex shape",
      "aliases": [
        "the process of constructing one kind of more complex shape"
      ],
      "types": [
        "process",
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The process of constructing one kind of more complex shape refers to the method of aggregating simpler path-based structures into more intricate forms, such as trees, within the context of knowledge graphs to enhance data representation and validation.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-3",
          "local_name": "the process of constructing one kind of more complex shape",
          "local_types": [
            "process",
            "shape"
          ],
          "iri": "Entity-the_process_of_constructing_one_kind_of_more_complex_shape-Mention-1"
        }
      ],
      "relevance": 0.529296875
    },
    "Entity-common_underlying_form": {
      "node_id": "common_underlying_form",
      "disambiguation_index": 0,
      "label": "common underlying form",
      "aliases": [
        "the common underlying form",
        "common underlying form"
      ],
      "types": [
        "theoretical construct",
        "concept",
        "form"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'common underlying form' refers to the fundamental structure of paths that serves as the basis for expressing various shapes in knowledge graphs, with additional constraints applied to create more complex shapes.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-2",
          "local_name": "common underlying form",
          "local_types": [
            "concept",
            "theoretical construct"
          ],
          "iri": "Entity-common_underlying_form-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-4-Sentence-2",
          "local_name": "the common underlying form",
          "local_types": [
            "concept",
            "form"
          ],
          "iri": "Entity-common_underlying_form-Mention-2"
        }
      ],
      "relevance": 0.52880859375
    },
    "Entity-e1__e2__e3": {
      "node_id": "e1__e2__e3",
      "disambiguation_index": 0,
      "label": "e1, e2, e3",
      "aliases": [
        "e1, e2, e3"
      ],
      "types": [
        "entity",
        "data element"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'e1, e2, e3' refers to a set of entities within a knowledge graph, specifically representing three distinct nodes that are involved in various predicate relationships as defined by the facts in the graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-3-Sentence-3",
          "local_name": "e1, e2, e3",
          "local_types": [
            "entity",
            "data element"
          ],
          "iri": "Entity-e1__e2__e3-Mention-1"
        }
      ],
      "relevance": 0.52880859375
    },
    "Entity-the_body_and_head_predicate": {
      "node_id": "the_body_and_head_predicate",
      "disambiguation_index": 0,
      "label": "the body and head predicates",
      "aliases": [
        "the body and head predicates"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The body and head predicates refer to the components of an inverse open path (IOP) rule in predicate logic, where the body consists of the predicate Pt that establishes a relationship between entities, and the head comprises a sequence of predicates that describe the outcomes or conclusions derived from that relationship.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "the body and head predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-the_body_and_head_predicate-Mention-1"
        }
      ],
      "relevance": 0.52880859375
    },
    "Entity-rule_language": {
      "node_id": "rule_language",
      "disambiguation_index": 0,
      "label": "rule languages",
      "aliases": [
        "various rule languages",
        "rule languages"
      ],
      "types": [
        "rule language",
        "formal language",
        "language",
        "programming language"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Rule languages are formal languages used in knowledge graph rule learning systems to express rules, enabling the formulation of logical implications that can infer new facts based on existing relationships within the graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-2",
          "local_name": "rule languages",
          "local_types": [
            "formal language",
            "language",
            "programming language"
          ],
          "iri": "Entity-rule_language-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-2",
          "local_name": "various rule languages",
          "local_types": [
            "language",
            "rule language"
          ],
          "iri": "Entity-rule_language-Mention-2"
        }
      ],
      "relevance": 0.5283203125
    },
    "Entity-body": {
      "node_id": "body",
      "disambiguation_index": 0,
      "label": "body",
      "aliases": [
        "body"
      ],
      "types": [
        "logical component",
        "logical construct",
        "part of rule",
        "concept",
        "component",
        "rule",
        "structure",
        "part",
        "proposition"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of closed path rules in knowledge graph rule learning, the term 'body' refers to the part of the rule that specifies the conditions or predicates that must be satisfied in order to infer a conclusion represented by the head of the rule.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-4",
          "local_name": "body",
          "local_types": [
            "proposition",
            "logical component",
            "component"
          ],
          "iri": "Entity-body-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-5-Sentence-1",
          "local_name": "body",
          "local_types": [
            "component"
          ],
          "iri": "Entity-body-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "body",
          "local_types": [
            "component"
          ],
          "iri": "Entity-body-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "body",
          "local_types": [
            "component",
            "logical construct"
          ],
          "iri": "Entity-body-Mention-4"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-2",
          "local_name": "body",
          "local_types": [
            "component"
          ],
          "iri": "Entity-body-Mention-5"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-4",
          "local_name": "body",
          "local_types": [
            "component",
            "part of rule"
          ],
          "iri": "Entity-body-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-4",
          "local_name": "body",
          "local_types": [
            "part",
            "concept",
            "component"
          ],
          "iri": "Entity-body-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-1",
          "local_name": "body",
          "local_types": [
            "component",
            "part"
          ],
          "iri": "Entity-body-Mention-8"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "body",
          "local_types": [
            "component",
            "rule"
          ],
          "iri": "Entity-body-Mention-9"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-4",
          "local_name": "body",
          "local_types": [
            "component",
            "part"
          ],
          "iri": "Entity-body-Mention-10"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-6",
          "local_name": "body",
          "local_types": [
            "component",
            "structure"
          ],
          "iri": "Entity-body-Mention-11"
        }
      ],
      "relevance": 0.5283203125
    },
    "Entity-sc__r_": {
      "node_id": "sc__r_",
      "disambiguation_index": 0,
      "label": "SC(r)",
      "aliases": [
        "SC(r)"
      ],
      "types": [
        "mathematical notation",
        "formula",
        "statistical measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "SC(r) is a statistical measure that quantifies the standard confidence of a closed path rule in a knowledge graph, defined as the ratio of the number of instances where both the body and head of the rule are satisfied to the total number of instances satisfying the body.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-9-Sentence-3",
          "local_name": "SC(r)",
          "local_types": [
            "mathematical notation",
            "formula",
            "statistical measure"
          ],
          "iri": "Entity-sc__r_-Mention-1"
        }
      ],
      "relevance": 0.5283203125
    },
    "Entity-the_subsequent_value": {
      "node_id": "the_subsequent_value",
      "disambiguation_index": 0,
      "label": "the subsequent values",
      "aliases": [
        "the subsequent values"
      ],
      "types": [
        "values"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The subsequent values refer to the branch cardinality indicators that follow the initial annotation value in the context of tree structures derived from IOP rules in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-2",
          "local_name": "the subsequent values",
          "local_types": [
            "values"
          ],
          "iri": "Entity-the_subsequent_value-Mention-1"
        }
      ],
      "relevance": 0.5283203125
    },
    "Entity-entity_e1__...__e__n-1_": {
      "node_id": "entity_e1__...__e__n-1_",
      "disambiguation_index": 0,
      "label": "entities e1, ..., e(n-1)",
      "aliases": [
        "entities e1, ..., e(n-1)",
        "entities e1, ..., en\u22121"
      ],
      "types": [
        "entities",
        "entity list"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'entities e1, ..., e(n-1)' refers to a sequence of intermediary entities in a knowledge graph that are involved in satisfying the body of a closed path rule, where these entities are connected through a series of predicates leading from a subject entity 'e' to an object entity 'e'.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "entities e1, ..., e(n-1)",
          "local_types": [
            "entities"
          ],
          "iri": "Entity-entity_e1__...__e__n-1_-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "entities e1, ..., en\u22121",
          "local_types": [
            "entities",
            "entity list"
          ],
          "iri": "Entity-entity_e1__...__e__n-1_-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "entities e1, ..., e(n-1)",
          "local_types": [
            "entities"
          ],
          "iri": "Entity-entity_e1__...__e__n-1_-Mention-3"
        }
      ],
      "relevance": 0.52783203125
    },
    "Entity-satisfying_entity_e2_and_e3": {
      "node_id": "satisfying_entity_e2_and_e3",
      "disambiguation_index": 0,
      "label": "satisfying entities e2 and e3",
      "aliases": [
        "satisfying entities e2 and e3"
      ],
      "types": [
        "entity",
        "entities"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'satisfying entities e2 and e3' refers to the specific entities in a knowledge graph that fulfill the conditions of a given rule when the cardinality constraint (Car) is set to 1, indicating that both entities meet the criteria defined by the rule.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-6",
          "local_name": "satisfying entities e2 and e3",
          "local_types": [
            "entity",
            "entities"
          ],
          "iri": "Entity-satisfying_entity_e2_and_e3-Mention-1"
        }
      ],
      "relevance": 0.52783203125
    },
    "Entity-wikidata": {
      "node_id": "wikidata",
      "disambiguation_index": 0,
      "label": "Wikidata",
      "aliases": [
        "Wikidata"
      ],
      "types": [
        "knowledge graph",
        "dataset",
        "KG",
        "benchmark",
        "database",
        "knowledge base",
        "semantic web",
        "data source"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "Wikidata is a collaboratively edited knowledge base that serves as a central storage for structured data, providing a platform for sharing and linking data across various projects and applications.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-1",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge graph",
            "KG",
            "dataset",
            "data source"
          ],
          "iri": "Entity-wikidata-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-1-Sentence-4",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge graph",
            "knowledge base",
            "database",
            "data source"
          ],
          "iri": "Entity-wikidata-Mention-2"
        },
        {
          "reference": "Section-5-Paragraph-2-Sentence-2",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge graph",
            "knowledge base",
            "database"
          ],
          "iri": "Entity-wikidata-Mention-3"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-2",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge graph",
            "benchmark",
            "dataset"
          ],
          "iri": "Entity-wikidata-Mention-4"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-1",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge graph",
            "dataset",
            "database",
            "knowledge base",
            "semantic web"
          ],
          "iri": "Entity-wikidata-Mention-5"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-3",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge graph",
            "knowledge base",
            "database"
          ],
          "iri": "Entity-wikidata-Mention-6"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-6",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge base",
            "dataset"
          ],
          "iri": "Entity-wikidata-Mention-7"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-1",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge graph",
            "dataset",
            "database"
          ],
          "iri": "Entity-wikidata-Mention-8"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-2",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge base",
            "semantic web",
            "database"
          ],
          "iri": "Entity-wikidata-Mention-9"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-1",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge graph",
            "benchmark",
            "dataset"
          ],
          "iri": "Entity-wikidata-Mention-10"
        },
        {
          "reference": "Section-18-Paragraph-5-Sentence-2",
          "local_name": "Wikidata",
          "local_types": [
            "knowledge graph",
            "dataset",
            "benchmark",
            "database",
            "knowledge base"
          ],
          "iri": "Entity-wikidata-Mention-11"
        }
      ],
      "relevance": 0.52734375
    },
    "Entity-foundation": {
      "node_id": "foundation",
      "disambiguation_index": 0,
      "label": "foundations",
      "aliases": [
        "foundations"
      ],
      "types": [
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'foundations' refers to the fundamental concepts and principles that underpin the subsequent discussion and development of the SHACL learning method in the paper.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "foundations",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-foundation-Mention-1"
        }
      ],
      "relevance": 0.52734375
    },
    "Entity-range": {
      "node_id": "range",
      "disambiguation_index": 0,
      "label": "range",
      "aliases": [
        "range"
      ],
      "types": [
        "range",
        "mathematical concept",
        "interval"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'range' refers to the set of entities that can be related to a specific entity through a given predicate, defining the constraints on the types of entities that can appear as the output of that predicate.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-3",
          "local_name": "range",
          "local_types": [
            "range"
          ],
          "iri": "Entity-range-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-1",
          "local_name": "range",
          "local_types": [
            "interval",
            "mathematical concept"
          ],
          "iri": "Entity-range-Mention-2"
        }
      ],
      "relevance": 0.52734375
    },
    "Entity-predicate_p_k": {
      "node_id": "predicate_p_k",
      "disambiguation_index": 0,
      "label": "predicate P_k",
      "aliases": [
        "P_k",
        "predicate P_k"
      ],
      "types": [
        "mathematical object",
        "predicate",
        "relation",
        "mathematical entity",
        "variable",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "predicate P_k refers to a matrix representation of a predicate in the RESCAL embedding framework, which captures the relationships between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "predicate P_k",
          "local_types": [
            "mathematical object",
            "predicate",
            "relation",
            "mathematical entity",
            "matrix"
          ],
          "iri": "Entity-predicate_p_k-Mention-1"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-2",
          "local_name": "predicate P_k",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-predicate_p_k-Mention-2"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "P_k",
          "local_types": [
            "predicate",
            "variable"
          ],
          "iri": "Entity-predicate_p_k-Mention-3"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-2",
          "local_name": "P_k",
          "local_types": [
            "predicate",
            "variable"
          ],
          "iri": "Entity-predicate_p_k-Mention-4"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-3",
          "local_name": "predicate P_k",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-predicate_p_k-Mention-5"
        }
      ],
      "relevance": 0.52734375
    },
    "Entity-74": {
      "node_id": "74",
      "disambiguation_index": 0,
      "label": "74",
      "aliases": [
        "74"
      ],
      "types": [
        "number",
        "quantity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '74' refers to the total number of target predicates selected from the YAGO2 knowledge graph for the evaluation of the SHACLEARNER method.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-7",
          "local_name": "74",
          "local_types": [
            "number",
            "quantity"
          ],
          "iri": "Entity-74-Mention-1"
        }
      ],
      "relevance": 0.52734375
    },
    "Entity-rule_consequent_instance": {
      "node_id": "rule_consequent_instance",
      "disambiguation_index": 0,
      "label": "rule consequent instances",
      "aliases": [
        "rule consequent instances"
      ],
      "types": [
        "data instance",
        "consequence"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Rule consequent instances refer to the specific instances in a knowledge graph that are derived or justified by the application of a rule, indicating their relevance to the target predicates within the graph.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "rule consequent instances",
          "local_types": [
            "data instance",
            "consequence"
          ],
          "iri": "Entity-rule_consequent_instance-Mention-1"
        }
      ],
      "relevance": 0.52685546875
    },
    "Entity-satisfaction_of_a_more_complex_shape": {
      "node_id": "satisfaction_of_a_more_complex_shape",
      "disambiguation_index": 0,
      "label": "satisfaction of a more complex shape",
      "aliases": [
        "satisfaction of a more complex shape"
      ],
      "types": [
        "condition"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'satisfaction of a more complex shape' refers to the fulfillment of conditions defined by intricate structural patterns in knowledge graphs, which build upon simpler, less-constrained shapes, indicating that while simpler shapes must be satisfied for the more complex ones to be valid, they alone do not guarantee the validity of the complex shapes.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-1",
          "local_name": "satisfaction of a more complex shape",
          "local_types": [
            "condition"
          ],
          "iri": "Entity-satisfaction_of_a_more_complex_shape-Mention-1"
        }
      ],
      "relevance": 0.52685546875
    },
    "Entity-all_rule": {
      "node_id": "all_rule",
      "disambiguation_index": 0,
      "label": "all rules",
      "aliases": [
        "all rules"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'all rules' refers to the general set of rules that can be learned by the OPRL algorithm, specifically highlighting its limitation to only learning the minimum cardinality of 1 for these rules.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-2-Sentence-3",
          "local_name": "all rules",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-all_rule-Mention-1"
        }
      ],
      "relevance": 0.52685546875
    },
    "Entity-the_size_of_the_problem": {
      "node_id": "the_size_of_the_problem",
      "disambiguation_index": 0,
      "label": "the size of the problem",
      "aliases": [
        "the size of the problem"
      ],
      "types": [
        "problem",
        "size"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The size of the problem refers to the complexity and scale of the knowledge graph (KG) being analyzed, particularly in terms of the number of entities and facts, which can be significantly reduced through the sampling method described in the paper.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-1",
          "local_name": "the size of the problem",
          "local_types": [
            "problem",
            "size"
          ],
          "iri": "Entity-the_size_of_the_problem-Mention-1"
        }
      ],
      "relevance": 0.52685546875
    },
    "Entity-the_head_(2)": {
      "node_id": "the_head_(2)",
      "disambiguation_index": 2,
      "label": "the head",
      "aliases": [
        "the head"
      ],
      "types": [
        "head"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph rule learning, 'the head' refers to the common variable that connects the entities in a binary predicate, serving as a crucial component in the evaluation of target predicates.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "the head",
          "local_types": [
            "head"
          ],
          "iri": "Entity-the_head_(2)-Mention-1"
        }
      ],
      "relevance": 0.52685546875
    },
    "Entity-date": {
      "node_id": "date",
      "disambiguation_index": 0,
      "label": "date",
      "aliases": [
        "date"
      ],
      "types": [
        "data type"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of SHACL shapes, 'date' refers to a data type that specifies the expected format for a person's birth date attribute within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-2",
          "local_name": "date",
          "local_types": [
            "data type"
          ],
          "iri": "Entity-date-Mention-1"
        }
      ],
      "relevance": 0.5263671875
    },
    "Entity-sparse": {
      "node_id": "sparse",
      "disambiguation_index": 0,
      "label": "sparse",
      "aliases": [
        "sparse"
      ],
      "types": [
        "property",
        "characteristic"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'sparse' refers to the characteristic of real-world knowledge graphs (KGs) where only a small proportion of entities are associated with any given predicate, indicating a low density of relationships among the entities.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "sparse",
          "local_types": [
            "property",
            "characteristic"
          ],
          "iri": "Entity-sparse-Mention-1"
        }
      ],
      "relevance": 0.5263671875
    },
    "Entity-ek": {
      "node_id": "ek",
      "disambiguation_index": 0,
      "label": "Ek",
      "aliases": [
        "Ek"
      ],
      "types": [
        "collection",
        "variable",
        "mathematical notation",
        "set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Ek refers to a set of entities in a knowledge graph that are related to a target predicate through a specific relationship defined in the context of the sampling algorithm.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-7",
          "local_name": "Ek",
          "local_types": [
            "collection",
            "variable",
            "mathematical notation",
            "set"
          ],
          "iri": "Entity-ek-Mention-1"
        }
      ],
      "relevance": 0.5263671875
    },
    "Entity-step": {
      "node_id": "step",
      "disambiguation_index": 0,
      "label": "step",
      "aliases": [
        "step"
      ],
      "types": [
        "process",
        "phase"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'step' refers to a phase in the process of evaluating an Inverse Open Path (IOP) rule within the algorithm described, indicating a subsequent action that follows the generation of candidate rules.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-5-Sentence-2",
          "local_name": "step",
          "local_types": [
            "process",
            "phase"
          ],
          "iri": "Entity-step-Mention-1"
        }
      ],
      "relevance": 0.5263671875
    },
    "Entity-sh__property": {
      "node_id": "sh__property",
      "disambiguation_index": 0,
      "label": "sh:property",
      "aliases": [
        "sh:property"
      ],
      "types": [
        "semantic web term",
        "property",
        "SHACL",
        "predicate",
        "RDF term"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "sh:property is a semantic web term that represents a property in the context of SHACL (Shapes Constraint Language), used to define constraints on RDF data.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-3",
          "local_name": "sh:property",
          "local_types": [
            "semantic web term",
            "property",
            "SHACL",
            "predicate",
            "RDF term"
          ],
          "iri": "Entity-sh__property-Mention-1"
        }
      ],
      "relevance": 0.5263671875
    },
    "Entity-heuristic_mechanism": {
      "node_id": "heuristic_mechanism",
      "disambiguation_index": 0,
      "label": "heuristic mechanisms",
      "aliases": [
        "heuristic mechanisms"
      ],
      "types": [
        "method",
        "algorithm",
        "problem-solving method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Heuristic mechanisms refer to problem-solving methods that utilize practical approaches and rules of thumb to efficiently reduce the search space and improve the performance of algorithms, particularly in the context of learning rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-1",
          "local_name": "heuristic mechanisms",
          "local_types": [
            "method",
            "algorithm",
            "problem-solving method"
          ],
          "iri": "Entity-heuristic_mechanism-Mention-1"
        }
      ],
      "relevance": 0.5263671875
    },
    "Entity-f": {
      "node_id": "f",
      "disambiguation_index": 0,
      "label": "F",
      "aliases": [
        "F"
      ],
      "types": [
        "collection",
        "predicate collection",
        "mathematical object",
        "predicate set",
        "fact set",
        "set",
        "predicate",
        "fact",
        "mathematical notation",
        "facts"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'F' refers to the set of facts that are part of the knowledge graph, which consists of RDF triples representing relationships between entities.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-6",
          "local_name": "F",
          "local_types": [
            "collection",
            "mathematical object",
            "set",
            "fact",
            "facts"
          ],
          "iri": "Entity-f-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "F",
          "local_types": [
            "fact set"
          ],
          "iri": "Entity-f-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "F",
          "local_types": [
            "predicate collection",
            "predicate set",
            "set",
            "predicate",
            "mathematical notation"
          ],
          "iri": "Entity-f-Mention-3"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "F",
          "local_types": [
            "mathematical object",
            "set"
          ],
          "iri": "Entity-f-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-3",
          "local_name": "F",
          "local_types": [
            "collection",
            "mathematical notation",
            "set"
          ],
          "iri": "Entity-f-Mention-5"
        }
      ],
      "relevance": 0.52587890625
    },
    "Entity-rule_learning": {
      "node_id": "rule_learning",
      "disambiguation_index": 0,
      "label": "rule learning",
      "aliases": [
        "rule learning"
      ],
      "types": [
        "learning",
        "machine learning",
        "algorithm",
        "process",
        "approach",
        "data mining"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Rule learning is a data mining and machine learning approach that focuses on discovering patterns and relationships in data by generating rules that can be used for classification or prediction.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-6-Sentence-2",
          "local_name": "rule learning",
          "local_types": [
            "approach",
            "data mining",
            "algorithm",
            "machine learning"
          ],
          "iri": "Entity-rule_learning-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-5",
          "local_name": "rule learning",
          "local_types": [
            "machine learning",
            "data mining"
          ],
          "iri": "Entity-rule_learning-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-11-Sentence-1",
          "local_name": "rule learning",
          "local_types": [
            "learning",
            "algorithm",
            "process",
            "machine learning"
          ],
          "iri": "Entity-rule_learning-Mention-3"
        }
      ],
      "relevance": 0.52587890625
    },
    "Entity-target_predicate_instance": {
      "node_id": "target_predicate_instance",
      "disambiguation_index": 0,
      "label": "target predicate instances",
      "aliases": [
        "target predicate instances"
      ],
      "types": [
        "predicate",
        "instance",
        "data instance"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Target predicate instances refer to the specific instances in a knowledge graph that are associated with a particular predicate, which are used to evaluate the confidence and relevance of rules derived from the graph.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "target predicate instances",
          "local_types": [
            "predicate",
            "instance",
            "data instance"
          ],
          "iri": "Entity-target_predicate_instance-Mention-1"
        }
      ],
      "relevance": 0.52587890625
    },
    "Entity-each_argument": {
      "node_id": "each_argument",
      "disambiguation_index": 0,
      "label": "each argument",
      "aliases": [
        "each argument"
      ],
      "types": [
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'each argument' refers to the individual entities or parameters associated with a target predicate for which a tree structure is constructed by aggregating mined Inverse Open Path (IOP) rules.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-7",
          "local_name": "each argument",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-each_argument-Mention-1"
        }
      ],
      "relevance": 0.52587890625
    },
    "Entity-covered_head_instance": {
      "node_id": "covered_head_instance",
      "disambiguation_index": 0,
      "label": "covered head instances",
      "aliases": [
        "covered head instances"
      ],
      "types": [
        "instance",
        "instances"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Covered head instances refer to the instances in a knowledge graph that are relevant to the consequent of a rule, indicating the proportion of rule consequent instances that are justified by target predicate instances.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-3",
          "local_name": "covered head instances",
          "local_types": [
            "instance",
            "instances"
          ],
          "iri": "Entity-covered_head_instance-Mention-1"
        }
      ],
      "relevance": 0.52587890625
    },
    "Entity-p": {
      "node_id": "p",
      "disambiguation_index": 0,
      "label": "P",
      "aliases": [
        "P"
      ],
      "types": [
        "datatype",
        "class",
        "variable",
        "parameter",
        "output"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P refers to a class or datatype in the context of RDF triples, specifically used to represent unary predicates in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-5",
          "local_name": "P",
          "local_types": [
            "datatype",
            "class"
          ],
          "iri": "Entity-p-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-6",
          "local_name": "P",
          "local_types": [
            "variable",
            "output"
          ],
          "iri": "Entity-p-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-9",
          "local_name": "P",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-p-Mention-3"
        }
      ],
      "relevance": 0.525390625
    },
    "Entity-the_count_is_1": {
      "node_id": "the_count_is_1",
      "disambiguation_index": 0,
      "label": "the count is 1",
      "aliases": [
        "the count is 1"
      ],
      "types": [
        "count"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'the count is 1' refers to the number of distinct entities that satisfy a specific rule in the context of the SHACLearner algorithm when the cardinality constraint (Car) is set to 2.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-7",
          "local_name": "the count is 1",
          "local_types": [
            "count"
          ],
          "iri": "Entity-the_count_is_1-Mention-1"
        }
      ],
      "relevance": 0.525390625
    },
    "Entity-r3": {
      "node_id": "r3",
      "disambiguation_index": 0,
      "label": "r3",
      "aliases": [
        "r3"
      ],
      "types": [
        "parameter",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "r3 is a version of the IOP rule r that corresponds to a cardinality constraint value of 3.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "r3",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-r3-Mention-1"
        }
      ],
      "relevance": 0.525390625
    },
    "Entity-_-sh_": {
      "node_id": "_-sh_",
      "disambiguation_index": 0,
      "label": "(-S+H)",
      "aliases": [
        "(-S+H)"
      ],
      "types": [
        "variant",
        "notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "(-S+H) refers to a variant of the SHACLEARNER algorithm that operates without sampling the knowledge graph but employs heuristic pruning to learn and evaluate rules, impacting the quantity and quality of the rules generated.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-6-Sentence-1",
          "local_name": "(-S+H)",
          "local_types": [
            "variant",
            "notation"
          ],
          "iri": "Entity-_-sh_-Mention-1"
        }
      ],
      "relevance": 0.525390625
    },
    "Entity-a_rule": {
      "node_id": "a_rule",
      "disambiguation_index": 0,
      "label": "a rule",
      "aliases": [
        "a rule"
      ],
      "types": [
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph completion, 'a rule' refers to a formal expression that defines relationships between entities in the graph, specifically indicating whether all variables in the rule are closed, meaning they appear in at least two distinct predicate terms.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-2",
          "local_name": "a rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-a_rule-Mention-1"
        }
      ],
      "relevance": 0.52490234375
    },
    "Entity-the_quantifier": {
      "node_id": "the_quantifier",
      "disambiguation_index": 0,
      "label": "the quantifiers",
      "aliases": [
        "the quantifiers"
      ],
      "types": [
        "quantifier"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The quantifiers refer to the logical symbols used in formal rules, specifically in the context of Inverse Open Path (IOP) rules, where they indicate the scope of variables, such as universal and existential quantification, that are often omitted for brevity in the representation of these rules.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-3",
          "local_name": "the quantifiers",
          "local_types": [
            "quantifier"
          ],
          "iri": "Entity-the_quantifier-Mention-1"
        }
      ],
      "relevance": 0.52490234375
    },
    "Entity-this_sampling": {
      "node_id": "this_sampling",
      "disambiguation_index": 0,
      "label": "This sampling",
      "aliases": [
        "This sampling"
      ],
      "types": [
        "methodology"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This sampling refers to a method for extracting a manageable subset of entities and facts from a knowledge graph, which is crucial for enabling embedding learners to process large-scale knowledge graphs that contain millions of entities.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-2",
          "local_name": "This sampling",
          "local_types": [
            "methodology"
          ],
          "iri": "Entity-this_sampling-Mention-1"
        }
      ],
      "relevance": 0.52490234375
    },
    "Entity-__000____021____100__": {
      "node_id": "__000____021____100__",
      "disambiguation_index": 0,
      "label": "[[0,0,0],[0,2,1],[1,0,0]]",
      "aliases": [
        "[[0,0,0],[0,2,1],[1,0,0]]"
      ],
      "types": [
        "data structure",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention [[0,0,0],[0,2,1],[1,0,0]] refers to a specific adjacency matrix representation of a knowledge graph, illustrating the connections between entities based on the predicates P1 and P2.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-5",
          "local_name": "[[0,0,0],[0,2,1],[1,0,0]]",
          "local_types": [
            "data structure",
            "matrix"
          ],
          "iri": "Entity-__000____021____100__-Mention-1"
        }
      ],
      "relevance": 0.5244140625
    },
    "Entity-the_running_time_in_hour": {
      "node_id": "the_running_time_in_hour",
      "disambiguation_index": 0,
      "label": "the running times in hours",
      "aliases": [
        "the running times in hours"
      ],
      "types": [
        "time",
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The running times in hours refers to the average duration, measured in hours, taken to learn distinct rules from knowledge graphs during the evaluation of the SHACLEARNER method.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "the running times in hours",
          "local_types": [
            "time",
            "metric"
          ],
          "iri": "Entity-the_running_time_in_hour-Mention-1"
        }
      ],
      "relevance": 0.5244140625
    },
    "Entity-their_length": {
      "node_id": "their_length",
      "disambiguation_index": 0,
      "label": "their lengths",
      "aliases": [
        "their lengths"
      ],
      "types": [
        "length"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'their lengths' refers to the varying lengths of the mined rules in the context of knowledge graph rule learning, indicating that as the length of these rules increases, the number of such rules also tends to increase due to the expanding space of possible rule configurations.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-7-Sentence-1",
          "local_name": "their lengths",
          "local_types": [
            "length"
          ],
          "iri": "Entity-their_length-Mention-1"
        }
      ],
      "relevance": 0.5244140625
    },
    "Entity-designing_an_efficient_learning_method": {
      "node_id": "designing_an_efficient_learning_method",
      "disambiguation_index": 0,
      "label": "designing an efficient learning method",
      "aliases": [
        "designing an efficient learning method"
      ],
      "types": [
        "method",
        "learning"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Designing an efficient learning method refers to the development of algorithms and techniques that effectively learn shape constraints from knowledge graphs while managing uncertainty and ensuring scalability in the learning process.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-3",
          "local_name": "designing an efficient learning method",
          "local_types": [
            "method",
            "learning"
          ],
          "iri": "Entity-designing_an_efficient_learning_method-Mention-1"
        }
      ],
      "relevance": 0.5244140625
    },
    "Entity-one_shared_variable": {
      "node_id": "one_shared_variable",
      "disambiguation_index": 0,
      "label": "one shared variable",
      "aliases": [
        "one shared variable"
      ],
      "types": [
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of SHACL trees derived from annotated IOP rules, 'one shared variable' refers to a common variable, denoted as z0, that connects all head branches and the body of the tree, facilitating the instantiation of the atomic body to predict instances of the head.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-6",
          "local_name": "one shared variable",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-one_shared_variable-Mention-1"
        }
      ],
      "relevance": 0.52392578125
    },
    "Entity-an_opportunity_for_improving_tree_shape": {
      "node_id": "an_opportunity_for_improving_tree_shape",
      "disambiguation_index": 0,
      "label": "an opportunity for improving tree shapes",
      "aliases": [
        "an opportunity for improving tree shapes"
      ],
      "types": [
        "opportunity",
        "improvement"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'an opportunity for improving tree shapes' refers to the potential for enhancing the simplicity and interpretability of tree structures derived from knowledge graphs by consolidating variables that appear in multiple branches of the trees.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "an opportunity for improving tree shapes",
          "local_types": [
            "opportunity",
            "improvement"
          ],
          "iri": "Entity-an_opportunity_for_improving_tree_shape-Mention-1"
        }
      ],
      "relevance": 0.52392578125
    },
    "Entity-easier_interpretation": {
      "node_id": "easier_interpretation",
      "disambiguation_index": 0,
      "label": "easier interpretation",
      "aliases": [
        "easier interpretation"
      ],
      "types": [
        "concept",
        "interpretation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'easier interpretation' refers to the potential enhancement of tree shapes in knowledge graphs by simplifying their structure through the unification of variables in predicates across multiple branches, making the shapes more intuitive and comprehensible.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "easier interpretation",
          "local_types": [
            "concept",
            "interpretation"
          ],
          "iri": "Entity-easier_interpretation-Mention-1"
        }
      ],
      "relevance": 0.5234375
    },
    "Entity-an_extra_dimension_of_challenge": {
      "node_id": "an_extra_dimension_of_challenge",
      "disambiguation_index": 0,
      "label": "an extra dimension of challenge",
      "aliases": [
        "an extra dimension of challenge"
      ],
      "types": [
        "challenge"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'an extra dimension of challenge' refers to the added complexity and difficulty in designing an efficient learning method for shape constraints in knowledge graphs, particularly due to the uncertainty involved in the constraints and the learning process.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-3",
          "local_name": "an extra dimension of challenge",
          "local_types": [
            "challenge"
          ],
          "iri": "Entity-an_extra_dimension_of_challenge-Mention-1"
        }
      ],
      "relevance": 0.5234375
    },
    "Entity-head_of_the_rule": {
      "node_id": "head_of_the_rule",
      "disambiguation_index": 0,
      "label": "head of the rule",
      "aliases": [
        "head of the rule"
      ],
      "types": [
        "rule component",
        "logical construct",
        "logic",
        "rule",
        "head"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'head of the rule' refers to the predicate or conclusion of a closed path rule in knowledge graph rule learning, which is inferred based on the satisfaction of the rule's body.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-1",
          "local_name": "head of the rule",
          "local_types": [
            "rule component",
            "rule",
            "head",
            "logic"
          ],
          "iri": "Entity-head_of_the_rule-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-3",
          "local_name": "head of the rule",
          "local_types": [
            "rule component",
            "logical construct"
          ],
          "iri": "Entity-head_of_the_rule-Mention-2"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-definition_1": {
      "node_id": "definition_1",
      "disambiguation_index": 0,
      "label": "Definition 1",
      "aliases": [
        "Definition 1"
      ],
      "types": [
        "reference",
        "concept",
        "definition"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Definition 1 defines the concepts of 'satisfies' and 'support' in the context of closed path rules in knowledge graphs, specifying how a pair of entities satisfies the body and head of a rule and quantifying the support as the count of rule instances where both body and head are satisfied.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-1",
          "local_name": "Definition 1",
          "local_types": [
            "concept",
            "definition"
          ],
          "iri": "Entity-definition_1-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-2",
          "local_name": "Definition 1",
          "local_types": [
            "reference",
            "definition"
          ],
          "iri": "Entity-definition_1-Mention-2"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-building_block": {
      "node_id": "building_block",
      "disambiguation_index": 0,
      "label": "building block",
      "aliases": [
        "building blocks",
        "building block",
        "The building block"
      ],
      "types": [
        "construct",
        "concept",
        "component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'building block' refers to a sequence of predicates that serves as the fundamental component for expressing various shape constraints in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-6",
          "local_name": "building block",
          "local_types": [
            "concept",
            "component"
          ],
          "iri": "Entity-building_block-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-5",
          "local_name": "building blocks",
          "local_types": [
            "construct",
            "concept",
            "component"
          ],
          "iri": "Entity-building_block-Mention-2"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-6",
          "local_name": "The building block",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-building_block-Mention-3"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-r____empty": {
      "node_id": "r____empty",
      "disambiguation_index": 0,
      "label": "R' := empty",
      "aliases": [
        "R' := empty"
      ],
      "types": [
        "initialization"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "R' is initialized as an empty set that will later be populated with IOP rules during the execution of the SHACLearner algorithm.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-7",
          "local_name": "R' := empty",
          "local_types": [
            "initialization"
          ],
          "iri": "Entity-r____empty-Mention-1"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-pair__e___e_": {
      "node_id": "pair__e___e_",
      "disambiguation_index": 0,
      "label": "pairs (e', e)",
      "aliases": [
        "the pairs (e, e')",
        "pairs (e', e)"
      ],
      "types": [
        "data representation",
        "tuple",
        "pair"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'pairs (e', e)' refers to the distinct pairs of entities where e' satisfies the body of a rule and e is connected to e' through a specific path in the context of evaluating rules in a knowledge graph using adjacency matrices.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-1",
          "local_name": "pairs (e', e)",
          "local_types": [
            "data representation",
            "tuple"
          ],
          "iri": "Entity-pair__e___e_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-1",
          "local_name": "the pairs (e, e')",
          "local_types": [
            "pair"
          ],
          "iri": "Entity-pair__e___e_-Mention-2"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-language__z3__z3_": {
      "node_id": "language__z3__z3_",
      "disambiguation_index": 0,
      "label": "language(z3, z3)",
      "aliases": [
        "language(z3)",
        "language(z3, z3)"
      ],
      "types": [
        "function",
        "predicate",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'language(z3, z3)' refers to a logical expression within a tree structure in the context of SHACL shapes, representing a relationship where 'z3' is an entity that denotes a language associated with another entity 'x' in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "language(z3, z3)",
          "local_types": [
            "function",
            "logical expression"
          ],
          "iri": "Entity-language__z3__z3_-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "language(z3)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-language__z3__z3_-Mention-2"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-new_one": {
      "node_id": "new_one",
      "disambiguation_index": 0,
      "label": "new ones",
      "aliases": [
        "new ones"
      ],
      "types": [
        "data",
        "information"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'new ones' refers to the newly created unary predicates and facts that are added to the knowledge graph to enhance its structure and facilitate the learning of shapes.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-4",
          "local_name": "new ones",
          "local_types": [
            "data",
            "information"
          ],
          "iri": "Entity-new_one-Mention-1"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-unary_occupation_predicate": {
      "node_id": "unary_occupation_predicate",
      "disambiguation_index": 0,
      "label": "unary occupation predicates",
      "aliases": [
        "unary occupation predicates"
      ],
      "types": [
        "predicate",
        "logical construct",
        "occupation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Unary occupation predicates refer to logical constructs in knowledge graphs that represent occupations as single-argument predicates, typically used to classify entities such as persons based on their roles or jobs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-5",
          "local_name": "unary occupation predicates",
          "local_types": [
            "predicate",
            "logical construct",
            "occupation"
          ],
          "iri": "Entity-unary_occupation_predicate-Mention-1"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-maximum_length_parameter": {
      "node_id": "maximum_length_parameter",
      "disambiguation_index": 0,
      "label": "maximum length parameter",
      "aliases": [
        "maximum length parameter"
      ],
      "types": [
        "parameter",
        "limit",
        "configuration parameter"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The maximum length parameter refers to the upper limit on the length of the rules that the ideal IOP rule learner can generate and evaluate in the SHACLEARNER system.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-4",
          "local_name": "maximum length parameter",
          "local_types": [
            "parameter",
            "limit",
            "configuration parameter"
          ],
          "iri": "Entity-maximum_length_parameter-Mention-1"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-maximum_number_of_predicate": {
      "node_id": "maximum_number_of_predicate",
      "disambiguation_index": 0,
      "label": "maximum number of predicates",
      "aliases": [
        "maximum number of predicates"
      ],
      "types": [
        "parameter",
        "rule characteristic"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'maximum number of predicates' refers to a parameter that defines the upper limit on the number of predicates that can be included in the rules used for discovering shapes in knowledge graphs, impacting the complexity and search space of potential rules.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-3",
          "local_name": "maximum number of predicates",
          "local_types": [
            "parameter",
            "rule characteristic"
          ],
          "iri": "Entity-maximum_number_of_predicate-Mention-1"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-human__x_": {
      "node_id": "human__x_",
      "disambiguation_index": 0,
      "label": "human(x)",
      "aliases": [
        "human(x)"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'human(x)' refers to a unary predicate in the context of Shapes Constraint Language (SHACL) that indicates whether an entity x is classified as a human, serving as a basis for defining constraints on related properties in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "human(x)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-human__x_-Mention-1"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-the_complexity_of_the_sampling_algorithm": {
      "node_id": "the_complexity_of_the_sampling_algorithm",
      "disambiguation_index": 0,
      "label": "the complexity of the sampling algorithm",
      "aliases": [
        "the complexity of the sampling algorithm"
      ],
      "types": [
        "complexity",
        "algorithm"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The complexity of the sampling algorithm refers to the computational complexity associated with the process of sampling a subgraph from a knowledge graph, which is quantified as O(|K|), where |K| represents the product of the number of entities |E| and the number of facts |F| in the original graph.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-3",
          "local_name": "the complexity of the sampling algorithm",
          "local_types": [
            "complexity",
            "algorithm"
          ],
          "iri": "Entity-the_complexity_of_the_sampling_algorithm-Mention-1"
        }
      ],
      "relevance": 0.52294921875
    },
    "Entity-graph_database": {
      "node_id": "graph_database",
      "disambiguation_index": 0,
      "label": "graph databases",
      "aliases": [
        "graph databases"
      ],
      "types": [
        "database",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Graph databases are a type of database designed to store, manage, and query data structured as graphs, where entities are represented as nodes and relationships as edges.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-2",
          "local_name": "graph databases",
          "local_types": [
            "database",
            "data structure"
          ],
          "iri": "Entity-graph_database-Mention-1"
        }
      ],
      "relevance": 0.5224609375
    },
    "Entity-generality": {
      "node_id": "generality",
      "disambiguation_index": 0,
      "label": "generality",
      "aliases": [
        "generality"
      ],
      "types": [
        "evaluation metric",
        "quality",
        "conceptual measure",
        "quality measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Generality refers to a quality measure that indicates the extent to which the learned shapes from knowledge graphs can be applied broadly across different contexts or datasets.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-3",
          "local_name": "generality",
          "local_types": [
            "evaluation metric",
            "quality",
            "conceptual measure",
            "quality measure"
          ],
          "iri": "Entity-generality-Mention-1"
        }
      ],
      "relevance": 0.5224609375
    },
    "Entity-variable_binding_pattern": {
      "node_id": "variable_binding_pattern",
      "disambiguation_index": 0,
      "label": "variable binding pattern",
      "aliases": [
        "variable binding pattern"
      ],
      "types": [
        "binding pattern",
        "variable structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'variable binding pattern' refers to a specific structure in predicate calculus rules where a single body atom is associated with a sequence of conjunctive atoms in the head, which is used to define relationships and constraints in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-2",
          "local_name": "variable binding pattern",
          "local_types": [
            "binding pattern",
            "variable structure"
          ],
          "iri": "Entity-variable_binding_pattern-Mention-1"
        }
      ],
      "relevance": 0.5224609375
    },
    "Entity-pruned": {
      "node_id": "pruned",
      "disambiguation_index": 0,
      "label": "pruned",
      "aliases": [
        "pruned"
      ],
      "types": [
        "operation",
        "action",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'pruned' refers to the process of eliminating at least 44% of Inverse Open Path (IOP) rules to enforce a tree-shaped constraint, thereby simplifying the structure of the mined trees.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-2",
          "local_name": "pruned",
          "local_types": [
            "operation",
            "action",
            "process"
          ],
          "iri": "Entity-pruned-Mention-1"
        }
      ],
      "relevance": 0.5224609375
    },
    "Entity-a_tree": {
      "node_id": "a_tree",
      "disambiguation_index": 0,
      "label": "a tree",
      "aliases": [
        "a tree"
      ],
      "types": [
        "tree",
        "structure",
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'a tree' refers to a complex shape structure that is constructed from paths, representing hierarchical relationships among entities, and is used to express constraints and expectations about the associated facts of those entities.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-3",
          "local_name": "a tree",
          "local_types": [
            "tree",
            "structure",
            "shape"
          ],
          "iri": "Entity-a_tree-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "a tree",
          "local_types": [
            "tree"
          ],
          "iri": "Entity-a_tree-Mention-2"
        }
      ],
      "relevance": 0.5224609375
    },
    "Entity-100__sc_and_hc": {
      "node_id": "100__sc_and_hc",
      "disambiguation_index": 0,
      "label": "100% SC and HC",
      "aliases": [
        "100% SC and HC"
      ],
      "types": [
        "confidence",
        "coverage",
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '100% SC and HC' refers to a non-recursive rule in knowledge graph rule learning that achieves perfect standard confidence and head coverage, indicating that all instances of the rule head are fully explained by the rule body, rendering the rule and its inferred facts redundant.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "100% SC and HC",
          "local_types": [
            "confidence",
            "coverage",
            "metric"
          ],
          "iri": "Entity-100__sc_and_hc-Mention-1"
        }
      ],
      "relevance": 0.5224609375
    },
    "Entity-entity_e_(1)": {
      "node_id": "entity_e_(1)",
      "disambiguation_index": 1,
      "label": "entity e",
      "aliases": [
        "entity e"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Entity e refers to an instance in a knowledge graph that satisfies a specific predicate Pt, which is used in the context of inverse open path rules to determine the cardinality of distinct instantiations of a rule's head.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "entity e",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-entity_e_(1)-Mention-1"
        }
      ],
      "relevance": 0.5224609375
    },
    "Entity-__e2__e3__": {
      "node_id": "__e2__e3__",
      "disambiguation_index": 0,
      "label": "|{e2, e3}|",
      "aliases": [
        "|{e2, e3}|"
      ],
      "types": [
        "set notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term |{e2, e3}| represents the cardinality of the set containing entities e2 and e3, indicating that there are 2 distinct entities satisfying the conditions of the IOP rule for a given cardinality value.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-2",
          "local_name": "|{e2, e3}|",
          "local_types": [
            "set notation"
          ],
          "iri": "Entity-__e2__e3__-Mention-1"
        }
      ],
      "relevance": 0.5224609375
    },
    "Entity-convenient_syntactic_sugar": {
      "node_id": "convenient_syntactic_sugar",
      "disambiguation_index": 0,
      "label": "convenient syntactic sugar",
      "aliases": [
        "convenient syntactic sugar"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Convenient syntactic sugar refers to the use of self-loop links for unary predicates in knowledge graphs, which simplifies the representation of data while maintaining the triple format of the original input.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-3",
          "local_name": "convenient syntactic sugar",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-convenient_syntactic_sugar-Mention-1"
        }
      ],
      "relevance": 0.5224609375
    },
    "Entity-entity_(2)": {
      "node_id": "entity_(2)",
      "disambiguation_index": 2,
      "label": "entities",
      "aliases": [
        "entities"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In this context, 'entities' refers to the individual items or nodes within a knowledge graph that meet specific criteria defined by target predicates, which are used to derive shapes that describe relationships and constraints among them.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-1-Sentence-2",
          "local_name": "entities",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-entity_(2)-Mention-1"
        }
      ],
      "relevance": 0.5224609375
    },
    "Entity-the_output": {
      "node_id": "the_output",
      "disambiguation_index": 0,
      "label": "the output",
      "aliases": [
        "the output"
      ],
      "types": [
        "result"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The output refers to the results generated by a graph structure learner, which are presented in an interactive interface to assist a human user in creating SHACL shapes.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "the output",
          "local_types": [
            "result"
          ],
          "iri": "Entity-the_output-Mention-1"
        }
      ],
      "relevance": 0.52197265625
    },
    "Entity-e3": {
      "node_id": "e3",
      "disambiguation_index": 0,
      "label": "e3",
      "aliases": [
        "e3"
      ],
      "types": [
        "entity",
        "variable",
        "set member",
        "element"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "e3 is one of the three entities that can instantiate the variable z0 in the context of the inverse open path rule, satisfying the predicates P1 and the conjunction of P2 and P3.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "e3",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e3-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "e3",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e3-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-3",
          "local_name": "e3",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e3-Mention-3"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "e3",
          "local_types": [
            "element",
            "entity"
          ],
          "iri": "Entity-e3-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-4",
          "local_name": "e3",
          "local_types": [
            "entity",
            "set member",
            "element"
          ],
          "iri": "Entity-e3-Mention-5"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-2",
          "local_name": "e3",
          "local_types": [
            "entity",
            "element",
            "set member"
          ],
          "iri": "Entity-e3-Mention-6"
        }
      ],
      "relevance": 0.521484375
    },
    "Entity-count_1": {
      "node_id": "count_1",
      "disambiguation_index": 0,
      "label": "count 1",
      "aliases": [
        "count 1"
      ],
      "types": [
        "count"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'count 1' refers to the number of distinct entities that satisfy a specific condition in a knowledge graph when a cardinality constraint (Car) of 2 is applied.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-5",
          "local_name": "count 1",
          "local_types": [
            "count"
          ],
          "iri": "Entity-count_1-Mention-1"
        }
      ],
      "relevance": 0.521484375
    },
    "Entity-p1": {
      "node_id": "p1",
      "disambiguation_index": 0,
      "label": "P1",
      "aliases": [
        "P2",
        "P1"
      ],
      "types": [
        "function",
        "mathematical object",
        "mathematical function",
        "relation",
        "predicate",
        "variable",
        "parameter",
        "mathematical variable",
        "symbol",
        "mathematical notation"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "P1 refers to a predicate in the context of a knowledge graph, specifically representing a binary relation between entities in the form of an adjacency matrix.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-4-Sentence-1",
          "local_name": "P1",
          "local_types": [
            "function",
            "mathematical object",
            "predicate",
            "mathematical variable",
            "symbol"
          ],
          "iri": "Entity-p1-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "P1",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-p1-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "P1",
          "local_types": [
            "predicate",
            "mathematical function"
          ],
          "iri": "Entity-p1-Mention-3"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "P1",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-p1-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "P1",
          "local_types": [
            "predicate",
            "symbol"
          ],
          "iri": "Entity-p1-Mention-5"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "P1",
          "local_types": [
            "predicate",
            "relation",
            "symbol"
          ],
          "iri": "Entity-p1-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "P1",
          "local_types": [
            "predicate",
            "symbol"
          ],
          "iri": "Entity-p1-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "P1",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p1-Mention-8"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "P1",
          "local_types": [
            "predicate",
            "symbol"
          ],
          "iri": "Entity-p1-Mention-9"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "P1",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-p1-Mention-10"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-4",
          "local_name": "P1",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-p1-Mention-11"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "P1",
          "local_types": [
            "predicate",
            "function"
          ],
          "iri": "Entity-p1-Mention-12"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "P1",
          "local_types": [
            "function",
            "predicate"
          ],
          "iri": "Entity-p1-Mention-13"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-1",
          "local_name": "P1",
          "local_types": [
            "predicate",
            "function"
          ],
          "iri": "Entity-p1-Mention-14"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "P1",
          "local_types": [
            "predicate",
            "function"
          ],
          "iri": "Entity-p1-Mention-15"
        },
        {
          "reference": "Section-11-Paragraph-4-Sentence-1",
          "local_name": "P2",
          "local_types": [
            "function",
            "mathematical object",
            "predicate",
            "mathematical variable",
            "symbol"
          ],
          "iri": "Entity-p1-Mention-16"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "P2",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-p1-Mention-17"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "P2",
          "local_types": [
            "predicate",
            "mathematical function"
          ],
          "iri": "Entity-p1-Mention-18"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "P2",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-p1-Mention-19"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "P2",
          "local_types": [
            "predicate",
            "symbol"
          ],
          "iri": "Entity-p1-Mention-20"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "P2",
          "local_types": [
            "predicate",
            "relation",
            "symbol"
          ],
          "iri": "Entity-p1-Mention-21"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-2",
          "local_name": "P2",
          "local_types": [
            "predicate",
            "relation",
            "symbol"
          ],
          "iri": "Entity-p1-Mention-22"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "P2",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-p1-Mention-23"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "P2",
          "local_types": [
            "predicate",
            "symbol"
          ],
          "iri": "Entity-p1-Mention-24"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "P2",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-p1-Mention-25"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-4",
          "local_name": "P2",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-p1-Mention-26"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "P2",
          "local_types": [
            "function",
            "predicate"
          ],
          "iri": "Entity-p1-Mention-27"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-1",
          "local_name": "P2",
          "local_types": [
            "predicate",
            "function"
          ],
          "iri": "Entity-p1-Mention-28"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "P2",
          "local_types": [
            "predicate",
            "function"
          ],
          "iri": "Entity-p1-Mention-29"
        }
      ],
      "relevance": 0.52099609375
    },
    "Entity-a__pk_": {
      "node_id": "a__pk_",
      "disambiguation_index": 0,
      "label": "A(Pk)",
      "aliases": [
        "A(Pk)"
      ],
      "types": [
        "function",
        "matrix",
        "mathematical object",
        "function output"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A(Pk) is a binary adjacency matrix representation of a knowledge graph, where the [i, j]-th element indicates the presence (1) or absence (0) of a fact represented by the predicate Pk between entities ei and ej.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "A(Pk)",
          "local_types": [
            "function",
            "function output",
            "mathematical object",
            "matrix"
          ],
          "iri": "Entity-a__pk_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-4",
          "local_name": "A(Pk)",
          "local_types": [
            "mathematical object",
            "matrix"
          ],
          "iri": "Entity-a__pk_-Mention-2"
        }
      ],
      "relevance": 0.52099609375
    },
    "Entity-distinct_e_s": {
      "node_id": "distinct_e_s",
      "disambiguation_index": 0,
      "label": "distinct e's",
      "aliases": [
        "distinct e's"
      ],
      "types": [
        "mathematical concept",
        "mathematical entity",
        "entity",
        "set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'distinct e's' refers to the unique entities in a knowledge graph that satisfy certain conditions defined by a rule, as determined by counting non-zero elements in a vector derived from matrix computations of the graph's adjacency matrices.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-3",
          "local_name": "distinct e's",
          "local_types": [
            "mathematical concept",
            "mathematical entity",
            "set"
          ],
          "iri": "Entity-distinct_e_s-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-2",
          "local_name": "distinct e's",
          "local_types": [
            "mathematical concept",
            "entity"
          ],
          "iri": "Entity-distinct_e_s-Mention-2"
        }
      ],
      "relevance": 0.52099609375
    },
    "Entity-other_predicate": {
      "node_id": "other_predicate",
      "disambiguation_index": 0,
      "label": "other predicates",
      "aliases": [
        "other predicates"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'other predicates' refers to additional properties or relationships that can be associated with entities beyond the primary target predicate, facilitating the completion of missing facts and enhancing the overall data structure.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-1",
          "local_name": "other predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-other_predicate-Mention-1"
        }
      ],
      "relevance": 0.52099609375
    },
    "Entity-predicate_term": {
      "node_id": "predicate_term",
      "disambiguation_index": 0,
      "label": "predicate terms",
      "aliases": [
        "predicate terms"
      ],
      "types": [
        "logical construct",
        "mathematical term",
        "mathematical expression",
        "term",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Predicate terms refer to the distinct logical constructs or expressions that represent relationships between entities in a knowledge graph, specifically in the context of open path rules used for knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-1",
          "local_name": "predicate terms",
          "local_types": [
            "logical construct",
            "mathematical term",
            "mathematical expression",
            "term",
            "logical expression"
          ],
          "iri": "Entity-predicate_term-Mention-1"
        }
      ],
      "relevance": 0.5205078125
    },
    "Entity-the_whole_path": {
      "node_id": "the_whole_path",
      "disambiguation_index": 0,
      "label": "the whole path",
      "aliases": [
        "the whole path"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The whole path refers to a composite predicate formed by the conjunction of multiple predicates that connect entities in a knowledge graph, represented mathematically as P*(x, t) = Pt(x, y) ^ P1(y, z) ^ P2(z, t).",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-1",
          "local_name": "the whole path",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-the_whole_path-Mention-1"
        }
      ],
      "relevance": 0.5205078125
    },
    "Entity-ev": {
      "node_id": "ev",
      "disambiguation_index": 0,
      "label": "Ev",
      "aliases": [
        "Ev"
      ],
      "types": [
        "function",
        "environment",
        "method",
        "entity",
        "mathematical operation",
        "system",
        "module",
        "process",
        "evaluation",
        "evaluation method"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Ev refers to the evaluation method used in the SHACLEARNER algorithm, which is distinct from the evaluation module of the OPRL algorithm.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-2-Sentence-4",
          "local_name": "Ev",
          "local_types": [
            "method",
            "module",
            "evaluation method"
          ],
          "iri": "Entity-ev-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-11",
          "local_name": "Ev",
          "local_types": [
            "function",
            "method",
            "mathematical operation"
          ],
          "iri": "Entity-ev-Mention-2"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-6",
          "local_name": "Ev",
          "local_types": [
            "environment",
            "entity",
            "method",
            "system",
            "module",
            "process",
            "evaluation",
            "evaluation method"
          ],
          "iri": "Entity-ev-Mention-3"
        }
      ],
      "relevance": 0.52001953125
    },
    "Entity-the_number_of_distinct_instantiation_of_head_r__e__e__": {
      "node_id": "the_number_of_distinct_instantiation_of_head_r__e__e__",
      "disambiguation_index": 0,
      "label": "the number of distinct instantiations of head_r(e, e')",
      "aliases": [
        "the number of distinct instantiations of head_r(e, e')"
      ],
      "types": [
        "quantity",
        "instantiation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The number of distinct instantiations of head_r(e, e') refers to the count of unique pairs of entities (e, e') that satisfy the head of an annotated inverse open path rule in a knowledge graph, ensuring that this count meets or exceeds a specified cardinality requirement.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "the number of distinct instantiations of head_r(e, e')",
          "local_types": [
            "quantity",
            "instantiation"
          ],
          "iri": "Entity-the_number_of_distinct_instantiation_of_head_r__e__e__-Mention-1"
        }
      ],
      "relevance": 0.52001953125
    },
    "Entity-representation_formalism": {
      "node_id": "representation_formalism",
      "disambiguation_index": 0,
      "label": "representation formalism",
      "aliases": [
        "representation formalism",
        "the representation formalism"
      ],
      "types": [
        "data representation",
        "methodology",
        "framework",
        "formalism"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'representation formalism' refers to the specific methodology or framework used by other works to output data representations, which in this context is noted to be less effective and harder to compare with the Inverse Open Path (IOP) rules proposed in the paper.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-1-Sentence-3",
          "local_name": "representation formalism",
          "local_types": [
            "data representation",
            "methodology",
            "framework",
            "formalism"
          ],
          "iri": "Entity-representation_formalism-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-3",
          "local_name": "the representation formalism",
          "local_types": [
            "formalism"
          ],
          "iri": "Entity-representation_formalism-Mention-2"
        }
      ],
      "relevance": 0.52001953125
    },
    "Entity-an_interactive_interface": {
      "node_id": "an_interactive_interface",
      "disambiguation_index": 0,
      "label": "an interactive interface",
      "aliases": [
        "an interactive interface"
      ],
      "types": [
        "interface"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "An interactive interface refers to a user-friendly platform that allows human users to engage with and manipulate data outputs from a graph structure learner to create SHACL shapes in a semi-automatic manner.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "an interactive interface",
          "local_types": [
            "interface"
          ],
          "iri": "Entity-an_interactive_interface-Mention-1"
        }
      ],
      "relevance": 0.52001953125
    },
    "Entity-variable": {
      "node_id": "variable",
      "disambiguation_index": 0,
      "label": "variables",
      "aliases": [
        "variables",
        "variable"
      ],
      "types": [
        "mathematical object",
        "mathematical term",
        "mathematical entity",
        "variable",
        "parameter",
        "mathematical concept",
        "data element",
        "logical variable",
        "symbol",
        "mathematical symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'variables' refers to the placeholders or symbols used in closed path rules to represent entities within a knowledge graph, which are involved in the relationships defined by the rules.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-6",
          "local_name": "variables",
          "local_types": [
            "parameter",
            "mathematical term",
            "mathematical entity",
            "symbol"
          ],
          "iri": "Entity-variable-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-5-Sentence-1",
          "local_name": "variables",
          "local_types": [
            "mathematical entity",
            "mathematical object",
            "variable",
            "symbol"
          ],
          "iri": "Entity-variable-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-1",
          "local_name": "variable",
          "local_types": [
            "mathematical concept",
            "symbol"
          ],
          "iri": "Entity-variable-Mention-3"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-2",
          "local_name": "variables",
          "local_types": [
            "mathematical concept",
            "symbol"
          ],
          "iri": "Entity-variable-Mention-4"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-3",
          "local_name": "variables",
          "local_types": [
            "mathematical entity",
            "symbol"
          ],
          "iri": "Entity-variable-Mention-5"
        },
        {
          "reference": "Section-10-Paragraph-3-Sentence-1",
          "local_name": "variable",
          "local_types": [
            "variable",
            "mathematical concept",
            "logical variable",
            "symbol",
            "mathematical symbol"
          ],
          "iri": "Entity-variable-Mention-6"
        },
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "variables",
          "local_types": [
            "parameter",
            "mathematical entity",
            "data element",
            "variable"
          ],
          "iri": "Entity-variable-Mention-7"
        }
      ],
      "relevance": 0.51953125
    },
    "Entity-definition_2": {
      "node_id": "definition_2",
      "disambiguation_index": 0,
      "label": "Definition 2",
      "aliases": [
        "Definition 2"
      ],
      "types": [
        "concept",
        "definition"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Definition 2 defines the concepts of standard confidence and head coverage in the context of closed path rules for knowledge graph rule learning, providing mathematical formulations to quantify the quality and explanatory power of such rules.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-9-Sentence-1",
          "local_name": "Definition 2",
          "local_types": [
            "concept",
            "definition"
          ],
          "iri": "Entity-definition_2-Mention-1"
        }
      ],
      "relevance": 0.51953125
    },
    "Entity-ei": {
      "node_id": "ei",
      "disambiguation_index": 0,
      "label": "Ei",
      "aliases": [
        "ei",
        "Ei"
      ],
      "types": [
        "element",
        "variable",
        "set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Ei refers to a set of entities sampled from a knowledge graph that are related to a target predicate, used in the context of learning shape patterns.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-9",
          "local_name": "Ei",
          "local_types": [
            "element",
            "set"
          ],
          "iri": "Entity-ei-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "ei",
          "local_types": [
            "variable",
            "element"
          ],
          "iri": "Entity-ei-Mention-2"
        }
      ],
      "relevance": 0.51953125
    },
    "Entity-set__a__pk___k_in_1_.._m_": {
      "node_id": "set__a__pk___k_in_1_.._m_",
      "disambiguation_index": 0,
      "label": "set {A(Pk) | k in 1..m}",
      "aliases": [
        "set {A(Pk) | k in 1..m}"
      ],
      "types": [
        "set",
        "mathematical construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'set {A(Pk) | k in 1..m}' refers to a collection of binary adjacency matrices corresponding to each predicate Pk in a knowledge graph, where each matrix A(Pk) indicates the presence or absence of relationships between entities in the graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-4",
          "local_name": "set {A(Pk) | k in 1..m}",
          "local_types": [
            "set",
            "mathematical construct"
          ],
          "iri": "Entity-set__a__pk___k_in_1_.._m_-Mention-1"
        }
      ],
      "relevance": 0.51953125
    },
    "Entity-contextual_connection": {
      "node_id": "contextual_connection",
      "disambiguation_index": 0,
      "label": "contextual connections",
      "aliases": [
        "contextual connections"
      ],
      "types": [
        "cognitive concept",
        "relationship",
        "connection"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'contextual connections' refers to the cognitive relationships and dependencies between successive questions in a depth-first questioning strategy that aids in reducing cognitive load during human interaction with knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-7",
          "local_name": "contextual connections",
          "local_types": [
            "cognitive concept",
            "relationship",
            "connection"
          ],
          "iri": "Entity-contextual_connection-Mention-1"
        }
      ],
      "relevance": 0.51953125
    },
    "Entity-type": {
      "node_id": "type",
      "disambiguation_index": 0,
      "label": "types",
      "aliases": [
        "types",
        "type"
      ],
      "types": [
        "classification",
        "concept",
        "category"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'types' refers to classifications, concepts, or categories used to represent and distinguish entities within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-1",
          "local_name": "types",
          "local_types": [
            "classification",
            "category"
          ],
          "iri": "Entity-type-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-3",
          "local_name": "types",
          "local_types": [
            "category",
            "classification"
          ],
          "iri": "Entity-type-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-6-Sentence-1",
          "local_name": "type",
          "local_types": [
            "concept",
            "category"
          ],
          "iri": "Entity-type-Mention-3"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-2",
          "local_name": "types",
          "local_types": [
            "classification",
            "category"
          ],
          "iri": "Entity-type-Mention-4"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-3",
          "local_name": "types",
          "local_types": [
            "concept",
            "category"
          ],
          "iri": "Entity-type-Mention-5"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-4",
          "local_name": "type",
          "local_types": [
            "classification",
            "concept",
            "category"
          ],
          "iri": "Entity-type-Mention-6"
        }
      ],
      "relevance": 0.51953125
    },
    "Entity-information": {
      "node_id": "information",
      "disambiguation_index": 0,
      "label": "information",
      "aliases": [
        "information"
      ],
      "types": [
        "data",
        "knowledge"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'information' refers to the data or facts that are generated and completed through the use of shapes in knowledge graphs, particularly for entities that have limited initial data, enabling the automatic creation of dynamic data entry forms.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-4",
          "local_name": "information",
          "local_types": [
            "data",
            "knowledge"
          ],
          "iri": "Entity-information-Mention-1"
        }
      ],
      "relevance": 0.51953125
    },
    "Entity-car2_(1)": {
      "node_id": "car2_(1)",
      "disambiguation_index": 1,
      "label": "Car=2",
      "aliases": [
        "Car=2"
      ],
      "types": [
        "parameter",
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Car=2 refers to a cardinality constraint in the context of a rule in knowledge graph processing, indicating that only one entity (e2) satisfies the specified condition when the minimum cardinality is set to 2.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-7",
          "local_name": "Car=2",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-car2_(1)-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-5",
          "local_name": "Car=2",
          "local_types": [
            "parameter"
          ],
          "iri": "Entity-car2_(1)-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-4",
          "local_name": "Car=2",
          "local_types": [
            "parameter"
          ],
          "iri": "Entity-car2_(1)-Mention-3"
        }
      ],
      "relevance": 0.51953125
    },
    "Entity-the_largest_proportion_of_rule": {
      "node_id": "the_largest_proportion_of_rule",
      "disambiguation_index": 0,
      "label": "the largest proportion of rules",
      "aliases": [
        "the largest proportion of rules"
      ],
      "types": [
        "rules",
        "proportion"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The largest proportion of rules refers to the subset of mined rules from knowledge graphs that possess a cardinality of 1, indicating they have the least stringent requirements for validation within the graph.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-6-Sentence-1",
          "local_name": "the largest proportion of rules",
          "local_types": [
            "rules",
            "proportion"
          ],
          "iri": "Entity-the_largest_proportion_of_rule-Mention-1"
        }
      ],
      "relevance": 0.51953125
    },
    "Entity-contributor": {
      "node_id": "contributor",
      "disambiguation_index": 0,
      "label": "contributors",
      "aliases": [
        "contributors"
      ],
      "types": [
        "entity",
        "individual",
        "participants",
        "individuals"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'contributors' refers to individuals or entities that actively participate in the extension and enhancement of a knowledge graph (KG) by adding data and information in a flexible and unstructured manner.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-1",
          "local_name": "contributors",
          "local_types": [
            "entity",
            "individual",
            "participants",
            "individuals"
          ],
          "iri": "Entity-contributor-Mention-1"
        }
      ],
      "relevance": 0.51904296875
    },
    "Entity-_a__pk___k_in_1_.._m_": {
      "node_id": "_a__pk___k_in_1_.._m_",
      "disambiguation_index": 0,
      "label": "{A(Pk) | k in 1..m}",
      "aliases": [
        "{A(Pk) | k in 1..m}"
      ],
      "types": [
        "matrix",
        "collection of matrices",
        "set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention {A(Pk) | k in 1..m} refers to a collection of binary adjacency matrices representing the relationships between entities in a knowledge graph, where each matrix A(Pk) corresponds to a specific predicate Pk and indicates the presence or absence of relationships between pairs of entities.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-4",
          "local_name": "{A(Pk) | k in 1..m}",
          "local_types": [
            "matrix",
            "collection of matrices",
            "set"
          ],
          "iri": "Entity-_a__pk___k_in_1_.._m_-Mention-1"
        }
      ],
      "relevance": 0.51904296875
    },
    "Entity-50___31___and_56_": {
      "node_id": "50___31___and_56_",
      "disambiguation_index": 0,
      "label": "50%, 31%, and 56%",
      "aliases": [
        "50%, 31%, and 56%",
        "56%"
      ],
      "types": [
        "percentage"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '50%, 31%, and 56%' refers to the average proportions of branches in the mined trees relative to the corresponding number of mined rules in the context of learning SHACL shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "50%, 31%, and 56%",
          "local_types": [
            "percentage"
          ],
          "iri": "Entity-50___31___and_56_-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "56%",
          "local_types": [
            "percentage"
          ],
          "iri": "Entity-50___31___and_56_-Mention-2"
        }
      ],
      "relevance": 0.51904296875
    },
    "Entity-k___e__f_": {
      "node_id": "k___e__f_",
      "disambiguation_index": 0,
      "label": "K = (E, F)",
      "aliases": [
        "K = (E, F)"
      ],
      "types": [
        "mathematical notation",
        "definition"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "K = (E, F) represents a knowledge graph, where E is the set of entities and F is the set of facts, ensuring that all entities in F are also included in E.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-6",
          "local_name": "K = (E, F)",
          "local_types": [
            "mathematical notation",
            "definition"
          ],
          "iri": "Entity-k___e__f_-Mention-1"
        }
      ],
      "relevance": 0.51904296875
    },
    "Entity-the_predicate_of_the_head": {
      "node_id": "the_predicate_of_the_head",
      "disambiguation_index": 0,
      "label": "the predicate of the head",
      "aliases": [
        "the rule head",
        "the predicate of the head"
      ],
      "types": [
        "head",
        "predicate",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The predicate of the head refers to the main component of a closed path rule in knowledge graph rule learning, which is the expression that defines the relationship or fact being inferred from the body of the rule.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-5",
          "local_name": "the predicate of the head",
          "local_types": [
            "head",
            "predicate"
          ],
          "iri": "Entity-the_predicate_of_the_head-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "the rule head",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_predicate_of_the_head-Mention-2"
        }
      ],
      "relevance": 0.51904296875
    },
    "Entity-a_key_feature_in_their_syntax": {
      "node_id": "a_key_feature_in_their_syntax",
      "disambiguation_index": 0,
      "label": "a key feature in their syntax",
      "aliases": [
        "a key feature in their syntax"
      ],
      "types": [
        "feature",
        "syntax"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'a key feature in their syntax' refers to the fundamental characteristic shared by various formalisms for expressing shape constraints in knowledge graphs, specifically the use of a sequence of predicates as the building block for these constraints.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-5",
          "local_name": "a key feature in their syntax",
          "local_types": [
            "feature",
            "syntax"
          ],
          "iri": "Entity-a_key_feature_in_their_syntax-Mention-1"
        }
      ],
      "relevance": 0.51904296875
    },
    "Entity-p__e_": {
      "node_id": "p__e_",
      "disambiguation_index": 0,
      "label": "P(e)",
      "aliases": [
        "P(e)",
        "P(e, e)"
      ],
      "types": [
        "function",
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P(e) refers to a unary predicate in the context of knowledge graphs, representing a relationship where the entity e is related to itself, often used to denote class assertions or self-loops in the graph structure.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-3",
          "local_name": "P(e)",
          "local_types": [
            "function",
            "predicate"
          ],
          "iri": "Entity-p__e_-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-3",
          "local_name": "P(e, e)",
          "local_types": [
            "predicate",
            "function"
          ],
          "iri": "Entity-p__e_-Mention-2"
        }
      ],
      "relevance": 0.5185546875
    },
    "Entity-vector_v1": {
      "node_id": "vector_v1",
      "disambiguation_index": 0,
      "label": "vector V^1",
      "aliases": [
        "V^1",
        "vector V^1"
      ],
      "types": [
        "mathematical object",
        "mathematical notation",
        "vector"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "vector V^1 refers to a mathematical object that represents the count of distinct entities satisfying a specific path rule in a knowledge graph, obtained by summing the rows of the product of adjacency matrices corresponding to the predicates in the rule.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-3",
          "local_name": "vector V^1",
          "local_types": [
            "mathematical object",
            "vector"
          ],
          "iri": "Entity-vector_v1-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-3",
          "local_name": "V^1",
          "local_types": [
            "vector",
            "mathematical notation"
          ],
          "iri": "Entity-vector_v1-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "V^1",
          "local_types": [
            "vector",
            "mathematical notation"
          ],
          "iri": "Entity-vector_v1-Mention-3"
        }
      ],
      "relevance": 0.5185546875
    },
    "Entity-quality_threshold": {
      "node_id": "quality_threshold",
      "disambiguation_index": 0,
      "label": "quality thresholds",
      "aliases": [
        "quality thresholds"
      ],
      "types": [
        "criteria",
        "standards",
        "measurement standard"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Quality thresholds refer to the minimum standards that must be met for uncertain shapes to be presented as standard SHACL shapes, ensuring that only shapes of sufficient quality are retained.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-1",
          "local_name": "quality thresholds",
          "local_types": [
            "criteria",
            "measurement standard"
          ],
          "iri": "Entity-quality_threshold-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-4",
          "local_name": "quality thresholds",
          "local_types": [
            "criteria",
            "standards"
          ],
          "iri": "Entity-quality_threshold-Mention-2"
        }
      ],
      "relevance": 0.5185546875
    },
    "Entity-x_(2)": {
      "node_id": "x_(2)",
      "disambiguation_index": 2,
      "label": "x",
      "aliases": [
        "x"
      ],
      "types": [
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'x' refers to a specific poker hand in the unary predicate 'fullHouse(x)', which is used to represent a type of hand in a knowledge graph constructed for evaluating the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-9",
          "local_name": "x",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-x_(2)-Mention-1"
        }
      ],
      "relevance": 0.5185546875
    },
    "Entity-the_proportion_of_mined_rule": {
      "node_id": "the_proportion_of_mined_rule",
      "disambiguation_index": 0,
      "label": "the proportion of mined rules",
      "aliases": [
        "the proportion of mined rules"
      ],
      "types": [
        "proportion",
        "rules"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The proportion of mined rules refers to the quantitative measure of distinct rules that have been successfully extracted from knowledge graphs, indicating the relative frequency of these rules across various feature values in the context of evaluating the performance of a rule-learning method.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-4",
          "local_name": "the proportion of mined rules",
          "local_types": [
            "proportion",
            "rules"
          ],
          "iri": "Entity-the_proportion_of_mined_rule-Mention-1"
        }
      ],
      "relevance": 0.5185546875
    },
    "Entity-domain": {
      "node_id": "domain",
      "disambiguation_index": 0,
      "label": "domain",
      "aliases": [
        "domain"
      ],
      "types": [
        "domain"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'domain' refers to the set of entities that can be related by a specific predicate, defining the types of entities that are permissible as the subject of that predicate.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-3",
          "local_name": "domain",
          "local_types": [
            "domain"
          ],
          "iri": "Entity-domain-Mention-1"
        }
      ],
      "relevance": 0.51806640625
    },
    "Entity-schema-free_knowledge_base": {
      "node_id": "schema-free_knowledge_base",
      "disambiguation_index": 0,
      "label": "schema-free knowledge bases",
      "aliases": [
        "schema-free knowledge bases"
      ],
      "types": [
        "knowledge base",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Schema-free knowledge bases are data structures that store information without a predefined schema, allowing for flexible and dynamic representation of knowledge, often used in modern knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-2",
          "local_name": "schema-free knowledge bases",
          "local_types": [
            "knowledge base",
            "data structure"
          ],
          "iri": "Entity-schema-free_knowledge_base-Mention-1"
        }
      ],
      "relevance": 0.51806640625
    },
    "Entity-the_one_from_wikidata": {
      "node_id": "the_one_from_wikidata",
      "disambiguation_index": 0,
      "label": "the one from Wikidata",
      "aliases": [
        "the one from Wikidata"
      ],
      "types": [
        "Wikidata",
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The one from Wikidata refers to a specific type-like predicate used in the context of knowledge graph modeling, which serves to generate unary predicates and facts for the learning process described in the paper.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-1",
          "local_name": "the one from Wikidata",
          "local_types": [
            "Wikidata",
            "predicate"
          ],
          "iri": "Entity-the_one_from_wikidata-Mention-1"
        }
      ],
      "relevance": 0.51806640625
    },
    "Entity-predicate_that_occur_in_multiple_branch": {
      "node_id": "predicate_that_occur_in_multiple_branch",
      "disambiguation_index": 0,
      "label": "predicates that occur in multiple branches",
      "aliases": [
        "predicates that occur in multiple branches"
      ],
      "types": [
        "predicates",
        "branches"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Predicates that occur in multiple branches refer to the variables or elements within the predicates of a knowledge graph that are shared across different branches of a tree structure, indicating potential redundancy or opportunities for simplification in the representation of relationships among entities.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "predicates that occur in multiple branches",
          "local_types": [
            "predicates",
            "branches"
          ],
          "iri": "Entity-predicate_that_occur_in_multiple_branch-Mention-1"
        }
      ],
      "relevance": 0.51806640625
    },
    "Entity-process": {
      "node_id": "process",
      "disambiguation_index": 0,
      "label": "process",
      "aliases": [
        "process"
      ],
      "types": [
        "methodology",
        "procedure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'process' refers to the method of constructing complex shapes, specifically trees, from simpler path structures within the context of knowledge graph data.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-3",
          "local_name": "process",
          "local_types": [
            "methodology",
            "procedure"
          ],
          "iri": "Entity-process-Mention-1"
        }
      ],
      "relevance": 0.517578125
    },
    "Entity-approach": {
      "node_id": "approach",
      "disambiguation_index": 0,
      "label": "approach",
      "aliases": [
        "approach"
      ],
      "types": [
        "technique",
        "method",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'approach' refers to a simplified method for reducing the complexity of sampling a knowledge graph by focusing on a bounded number of entities related to a target predicate.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-1",
          "local_name": "approach",
          "local_types": [
            "method",
            "technique"
          ],
          "iri": "Entity-approach-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "approach",
          "local_types": [
            "technique",
            "method",
            "methodology"
          ],
          "iri": "Entity-approach-Mention-2"
        }
      ],
      "relevance": 0.517578125
    },
    "Entity-rule_of_low_quality": {
      "node_id": "rule_of_low_quality",
      "disambiguation_index": 0,
      "label": "rules of low quality",
      "aliases": [
        "rules of low quality"
      ],
      "types": [
        "criteria",
        "rules",
        "quality",
        "guideline"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'rules of low quality' refers to the set of learned rules in knowledge graph rule-learning that do not meet the established minimum quality thresholds for confidence and head coverage, indicating they may be less reliable or informative.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-3",
          "local_name": "rules of low quality",
          "local_types": [
            "criteria",
            "rules",
            "quality",
            "guideline"
          ],
          "iri": "Entity-rule_of_low_quality-Mention-1"
        }
      ],
      "relevance": 0.517578125
    },
    "Entity-the_numerator": {
      "node_id": "the_numerator",
      "disambiguation_index": 0,
      "label": "the numerator",
      "aliases": [
        "the numerator"
      ],
      "types": [
        "mathematical term",
        "numerator"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "In the context of IOP rules, 'the numerator' refers to the count of distinct instantiations of the head of the rule that satisfy the conditions set by the body predicates in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-4",
          "local_name": "the numerator",
          "local_types": [
            "mathematical term",
            "numerator"
          ],
          "iri": "Entity-the_numerator-Mention-1"
        }
      ],
      "relevance": 0.517578125
    },
    "Entity-two_vector": {
      "node_id": "two_vector",
      "disambiguation_index": 0,
      "label": "two vectors",
      "aliases": [
        "two vectors"
      ],
      "types": [
        "vector"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graph embeddings, 'two vectors' refers to the representations of the subject and object arguments of a predicate, denoted as P1_k and P2_k, which are computed to capture the relationships between entities in the graph.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-2-Sentence-3",
          "local_name": "two vectors",
          "local_types": [
            "vector"
          ],
          "iri": "Entity-two_vector-Mention-1"
        }
      ],
      "relevance": 0.517578125
    },
    "Entity-non-recursive_rule": {
      "node_id": "non-recursive_rule",
      "disambiguation_index": 0,
      "label": "non-recursive rule",
      "aliases": [
        "A non-recursive rule",
        "non-recursive rule"
      ],
      "types": [
        "non-recursive",
        "rule",
        "logic rule",
        "logical construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A non-recursive rule is a type of logical rule in knowledge graph systems that, when it achieves both 100% standard confidence and head coverage, indicates that all facts inferred by the rule are redundant with respect to the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "non-recursive rule",
          "local_types": [
            "non-recursive",
            "rule",
            "logic rule",
            "logical construct"
          ],
          "iri": "Entity-non-recursive_rule-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "A non-recursive rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-non-recursive_rule-Mention-2"
        }
      ],
      "relevance": 0.51708984375
    },
    "Entity-y": {
      "node_id": "y",
      "disambiguation_index": 0,
      "label": "y",
      "aliases": [
        "y"
      ],
      "types": [
        "variable",
        "symbol",
        "mathematical symbol",
        "entity variable",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of open path rules for knowledge graph completion, 'y' represents an entity variable that is part of a logical expression indicating the existence of a relationship between entities in the graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "y",
          "local_types": [
            "variable",
            "symbol"
          ],
          "iri": "Entity-y-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-3",
          "local_name": "y",
          "local_types": [
            "entity variable"
          ],
          "iri": "Entity-y-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-3",
          "local_name": "y",
          "local_types": [
            "variable",
            "symbol"
          ],
          "iri": "Entity-y-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "y",
          "local_types": [
            "variable",
            "mathematical notation"
          ],
          "iri": "Entity-y-Mention-4"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "y",
          "local_types": [
            "variable",
            "mathematical symbol"
          ],
          "iri": "Entity-y-Mention-5"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "y",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-y-Mention-6"
        }
      ],
      "relevance": 0.51708984375
    },
    "Entity-exists__z1__...__z__n-1___y_": {
      "node_id": "exists__z1__...__z__n-1___y_",
      "disambiguation_index": 0,
      "label": "exists(z1, ..., z(n-1), y)",
      "aliases": [
        "exists(z1, ..., z(n-1), y)"
      ],
      "types": [
        "quantifier",
        "logical expression",
        "quantifier expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'exists(z1, ..., z(n-1), y)' represents a logical expression in the context of inverse open path (IOP) rules, indicating the existence of entities z1 through z(n-1) that satisfy a sequence of predicates leading to the entity y.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-1",
          "local_name": "exists(z1, ..., z(n-1), y)",
          "local_types": [
            "quantifier",
            "logical expression",
            "quantifier expression"
          ],
          "iri": "Entity-exists__z1__...__z__n-1___y_-Mention-1"
        }
      ],
      "relevance": 0.51708984375
    },
    "Entity-number_of_entity": {
      "node_id": "number_of_entity",
      "disambiguation_index": 0,
      "label": "number of entities",
      "aliases": [
        "number of entities",
        "the number of entities"
      ],
      "types": [
        "entity",
        "quantity",
        "entity count"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'number of entities' refers to the quantity of distinct entities that can be associated with a specific predicate within a knowledge graph, as defined by Functional Graph Dependencies (FGDs) in the context of schema constraints.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-3",
          "local_name": "number of entities",
          "local_types": [
            "quantity",
            "entity count"
          ],
          "iri": "Entity-number_of_entity-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-3",
          "local_name": "the number of entities",
          "local_types": [
            "quantity",
            "entity"
          ],
          "iri": "Entity-number_of_entity-Mention-2"
        }
      ],
      "relevance": 0.51708984375
    },
    "Entity-the_least_stringent_requirement": {
      "node_id": "the_least_stringent_requirement",
      "disambiguation_index": 0,
      "label": "the least stringent requirements",
      "aliases": [
        "the least stringent requirements"
      ],
      "types": [
        "requirements"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The least stringent requirements refer to the minimal cardinality constraints that must be satisfied for rules mined from knowledge graphs, specifically indicating that a cardinality of 1 requires the least amount of restrictions to be met.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-6-Sentence-1",
          "local_name": "the least stringent requirements",
          "local_types": [
            "requirements"
          ],
          "iri": "Entity-the_least_stringent_requirement-Mention-1"
        }
      ],
      "relevance": 0.51708984375
    },
    "Entity-multidimensional_relational_database_scheme": {
      "node_id": "multidimensional_relational_database_scheme",
      "disambiguation_index": 0,
      "label": "multidimensional relational database schemes",
      "aliases": [
        "multidimensional relational database schemes"
      ],
      "types": [
        "data structure",
        "database scheme",
        "data model",
        "database schema",
        "database"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Multidimensional relational database schemes refer to structured frameworks that organize data into multiple dimensions, allowing for complex queries and analysis, and can potentially be derived from the patterns and structures found within knowledge graph data.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-5",
          "local_name": "multidimensional relational database schemes",
          "local_types": [
            "data structure",
            "database scheme",
            "data model",
            "database schema",
            "database"
          ],
          "iri": "Entity-multidimensional_relational_database_scheme-Mention-1"
        }
      ],
      "relevance": 0.5166015625
    },
    "Entity-hc__r_": {
      "node_id": "hc__r_",
      "disambiguation_index": 0,
      "label": "HC(r)",
      "aliases": [
        "HC(r)"
      ],
      "types": [
        "mathematical function",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "HC(r) refers to the head coverage metric, which quantifies the proportion of facts satisfying the head of a rule that can be inferred by satisfying the rule's body in the context of knowledge graph rule learning.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-9-Sentence-4",
          "local_name": "HC(r)",
          "local_types": [
            "mathematical function",
            "metric"
          ],
          "iri": "Entity-hc__r_-Mention-1"
        }
      ],
      "relevance": 0.5166015625
    },
    "Entity-v1__p1__p2____031_": {
      "node_id": "v1__p1__p2____031_",
      "disambiguation_index": 0,
      "label": "V^1(P1, P2) = [0,3,1]",
      "aliases": [
        "V^1(P1, P2) = [0,3,1]"
      ],
      "types": [
        "vector equation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "V^1(P1, P2) = [0,3,1] represents a vector indicating the count of distinct entities satisfying a specific rule derived from the adjacency matrix product of predicates P1 and P2 in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-5",
          "local_name": "V^1(P1, P2) = [0,3,1]",
          "local_types": [
            "vector equation"
          ],
          "iri": "Entity-v1__p1__p2____031_-Mention-1"
        }
      ],
      "relevance": 0.51611328125
    },
    "Entity-common_representation": {
      "node_id": "common_representation",
      "disambiguation_index": 0,
      "label": "common representation",
      "aliases": [
        "common representation",
        "a common representation"
      ],
      "types": [
        "data format",
        "concept",
        "representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'common representation' refers to an abstract model used in the context of knowledge graphs that distinctly categorizes entities and predicates, facilitating the learning and representation of shapes in a structured manner.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-2",
          "local_name": "common representation",
          "local_types": [
            "data format",
            "representation"
          ],
          "iri": "Entity-common_representation-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-2",
          "local_name": "a common representation",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-common_representation-Mention-2"
        }
      ],
      "relevance": 0.51611328125
    },
    "Entity-a_body_at_the_tail": {
      "node_id": "a_body_at_the_tail",
      "disambiguation_index": 0,
      "label": "a body at the tail",
      "aliases": [
        "a body at the tail"
      ],
      "types": [
        "statement",
        "logical structure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of closed-path rules in knowledge graph rule learning, 'a body at the tail' refers to the part of the rule that specifies the conditions or predicates that must be satisfied in order to infer a conclusion represented by the head of the rule.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-4",
          "local_name": "a body at the tail",
          "local_types": [
            "statement",
            "logical structure"
          ],
          "iri": "Entity-a_body_at_the_tail-Mention-1"
        }
      ],
      "relevance": 0.51611328125
    },
    "Entity-it_body": {
      "node_id": "it_body",
      "disambiguation_index": 0,
      "label": "its body",
      "aliases": [
        "its body"
      ],
      "types": [
        "body"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the discussed IOP rule, 'its body' refers to the part of the rule that specifies the conditions or predicates that must be satisfied by entities in the knowledge graph for the rule to hold true.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "its body",
          "local_types": [
            "body"
          ],
          "iri": "Entity-it_body-Mention-1"
        }
      ],
      "relevance": 0.51611328125
    },
    "Entity-dbpedia_3.8": {
      "node_id": "dbpedia_3.8",
      "disambiguation_index": 0,
      "label": "DBpedia 3.8",
      "aliases": [
        "DBpedia 3.8",
        "DBPedia",
        "DBpedia"
      ],
      "types": [
        "knowledge graph",
        "dataset",
        "KG",
        "benchmark",
        "project",
        "database",
        "knowledge base",
        "semantic web",
        "data source"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "DBpedia 3.8 is a version of the DBpedia knowledge graph, which extracts structured information from Wikipedia and provides it as a dataset for semantic web applications.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-1",
          "local_name": "DBpedia 3.8",
          "local_types": [
            "knowledge graph",
            "KG",
            "dataset"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-1",
          "local_name": "DBpedia 3.8",
          "local_types": [
            "knowledge graph",
            "knowledge base",
            "semantic web",
            "database"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "database",
            "project",
            "data source"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-4-Sentence-3",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "dataset",
            "database",
            "knowledge base",
            "semantic web",
            "data source"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-4"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-1",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "dataset",
            "database"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-5"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-2",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "benchmark",
            "dataset"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-6"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-2",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "dataset",
            "database",
            "knowledge base",
            "semantic web"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-7"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-3",
          "local_name": "DBPedia",
          "local_types": [
            "knowledge graph",
            "knowledge base",
            "database"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-8"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-6",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge base",
            "dataset"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-9"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-1",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "dataset",
            "database"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-10"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-2",
          "local_name": "DBPedia",
          "local_types": [
            "knowledge base",
            "semantic web",
            "database"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-11"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-1",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "dataset",
            "database",
            "knowledge base",
            "semantic web"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-12"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-1",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "dataset",
            "database",
            "knowledge base",
            "data source"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-13"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-1",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "benchmark",
            "dataset"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-14"
        },
        {
          "reference": "Section-1-Paragraph-3-Sentence-1",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "dataset",
            "data source"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-15"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-1",
          "local_name": "DBpedia",
          "local_types": [
            "knowledge graph",
            "dataset"
          ],
          "iri": "Entity-dbpedia_3.8-Mention-16"
        }
      ],
      "relevance": 0.515625
    },
    "Entity-satisfaction": {
      "node_id": "satisfaction",
      "disambiguation_index": 0,
      "label": "satisfaction",
      "aliases": [
        "satisfaction"
      ],
      "types": [
        "condition",
        "concept",
        "psychological state"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of this paper, 'satisfaction' refers to the fulfillment of conditions or constraints associated with shapes in knowledge graphs, specifically indicating that a less-constrained shape must be satisfied as a prerequisite for the satisfaction of more complex shapes.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-1",
          "local_name": "satisfaction",
          "local_types": [
            "condition",
            "concept",
            "psychological state"
          ],
          "iri": "Entity-satisfaction-Mention-1"
        }
      ],
      "relevance": 0.515625
    },
    "Entity-schema_information": {
      "node_id": "schema_information",
      "disambiguation_index": 0,
      "label": "schema information",
      "aliases": [
        "schema information"
      ],
      "types": [
        "schema",
        "data structure",
        "information",
        "metadata"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Schema information refers to the structured metadata that defines the constraints and types of data within a knowledge graph, enabling validation and inference processes.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-1",
          "local_name": "schema information",
          "local_types": [
            "schema",
            "data structure",
            "metadata"
          ],
          "iri": "Entity-schema_information-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "schema information",
          "local_types": [
            "data structure",
            "information",
            "metadata"
          ],
          "iri": "Entity-schema_information-Mention-2"
        }
      ],
      "relevance": 0.515625
    },
    "Entity-type_predicate": {
      "node_id": "type_predicate",
      "disambiguation_index": 0,
      "label": "type predicates",
      "aliases": [
        "type predicates"
      ],
      "types": [
        "data representation",
        "predicate",
        "data type"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Type predicates refer to unary predicates that represent classes or types in knowledge graphs, facilitating the transformation and representation of entities and their relationships for experimental purposes.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-1",
          "local_name": "type predicates",
          "local_types": [
            "data representation",
            "predicate",
            "data type"
          ],
          "iri": "Entity-type_predicate-Mention-1"
        }
      ],
      "relevance": 0.515625
    },
    "Entity-the_rule": {
      "node_id": "the_rule",
      "disambiguation_index": 0,
      "label": "the rule",
      "aliases": [
        "the rule"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The rule refers to a formal expression in knowledge graph rule learning that defines a relationship between entities through a head and a body, allowing for the inference of new facts based on existing data in the graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-5",
          "local_name": "the rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_rule-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-2",
          "local_name": "the rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_rule-Mention-2"
        }
      ],
      "relevance": 0.515625
    },
    "Entity-average_treesc": {
      "node_id": "average_treesc",
      "disambiguation_index": 0,
      "label": "average TreeSC",
      "aliases": [
        "average TreeSC"
      ],
      "types": [
        "TreeSC",
        "average",
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The average TreeSC refers to the mean structural complexity metric of tree shapes derived from Inverse Open Path rules in knowledge graphs, indicating the overall complexity and characteristics of the discovered trees.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "average TreeSC",
          "local_types": [
            "TreeSC",
            "average",
            "metric"
          ],
          "iri": "Entity-average_treesc-Mention-1"
        }
      ],
      "relevance": 0.515625
    },
    "Entity-p1__z0__z1___p2__z1__z2___...__pn__zn1__y___x_pt__x__z0_": {
      "node_id": "p1__z0__z1___p2__z1__z2___...__pn__zn1__y___x_pt__x__z0_",
      "disambiguation_index": 0,
      "label": "P1(z0, z1) \u2227 P2(z1, z2) \u2227 ... \u2227 Pn(zn\u22121, y) \u2192 \u2203x Pt(x, z0)",
      "aliases": [
        "P1(z0, z1) \u2227 P2(z1, z2) \u2227 ... \u2227 Pn(zn\u22121, y) \u2192 \u2203x Pt(x, z0)"
      ],
      "types": [
        "formula",
        "rule representation",
        "rule",
        "logical expression",
        "formal representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention refers to an open path rule in knowledge graph completion, which asserts that if a sequence of predicates holds between a series of entities, then there exists an entity related to the initial entity through a specified predicate.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "P1(z0, z1) \u2227 P2(z1, z2) \u2227 ... \u2227 Pn(zn\u22121, y) \u2192 \u2203x Pt(x, z0)",
          "local_types": [
            "formula",
            "rule representation",
            "rule",
            "logical expression",
            "formal representation"
          ],
          "iri": "Entity-p1__z0__z1___p2__z1__z2___...__pn__zn1__y___x_pt__x__z0_-Mention-1"
        }
      ],
      "relevance": 0.51513671875
    },
    "Entity-completion_question": {
      "node_id": "completion_question",
      "disambiguation_index": 0,
      "label": "completion questions",
      "aliases": [
        "completion questions"
      ],
      "types": [
        "cognitive task",
        "question type",
        "question"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Completion questions refer to a type of inquiry used in knowledge graph completion that follows a depth-first strategy, where each question is dependent on the answer to the previous one, thereby reducing cognitive load for the respondent.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-7",
          "local_name": "completion questions",
          "local_types": [
            "cognitive task",
            "question type",
            "question"
          ],
          "iri": "Entity-completion_question-Mention-1"
        }
      ],
      "relevance": 0.51513671875
    },
    "Entity-phenomenon": {
      "node_id": "phenomenon",
      "disambiguation_index": 0,
      "label": "phenomenon",
      "aliases": [
        "phenomenon"
      ],
      "types": [
        "event",
        "observable occurrence"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'phenomenon' refers to the observed occurrence of a higher proportion of quality rules being learned from DBpedia compared to other knowledge graphs, which may be attributed to the intentional choice of type-like unary predicates as targets in the learning process.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-5-Sentence-2",
          "local_name": "phenomenon",
          "local_types": [
            "event",
            "observable occurrence"
          ],
          "iri": "Entity-phenomenon-Mention-1"
        }
      ],
      "relevance": 0.51513671875
    },
    "Entity-the_satisfaction_of_a_less-constrained_shape": {
      "node_id": "the_satisfaction_of_a_less-constrained_shape",
      "disambiguation_index": 0,
      "label": "the satisfaction of a less-constrained shape",
      "aliases": [
        "the satisfaction of a less-constrained shape"
      ],
      "types": [
        "condition"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The satisfaction of a less-constrained shape refers to the fulfillment of basic structural requirements in a knowledge graph, which is essential for validating more complex shapes that impose additional constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-1",
          "local_name": "the satisfaction of a less-constrained shape",
          "local_types": [
            "condition"
          ],
          "iri": "Entity-the_satisfaction_of_a_less-constrained_shape-Mention-1"
        }
      ],
      "relevance": 0.51513671875
    },
    "Entity-the_adjacency_matrix": {
      "node_id": "the_adjacency_matrix",
      "disambiguation_index": 0,
      "label": "The adjacency matrices",
      "aliases": [
        "The adjacency matrices"
      ],
      "types": [
        "mathematical object",
        "matrix"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The adjacency matrices are square binary matrices representing the relationships between entities in a knowledge graph, where each matrix corresponds to a specific predicate and indicates the presence or absence of connections between entities.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-4-Sentence-1",
          "local_name": "The adjacency matrices",
          "local_types": [
            "mathematical object",
            "matrix"
          ],
          "iri": "Entity-the_adjacency_matrix-Mention-1"
        }
      ],
      "relevance": 0.51513671875
    },
    "Entity-the_count_of_distinct_e_s": {
      "node_id": "the_count_of_distinct_e_s",
      "disambiguation_index": 0,
      "label": "the count of distinct e's",
      "aliases": [
        "the count of distinct e's"
      ],
      "types": [
        "count",
        "distinct",
        "distinct entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The count of distinct e's refers to the number of unique entities in a knowledge graph that satisfy a given condition, determined by counting the non-zero elements in a vector derived from matrix computations related to the graph's adjacency matrices.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-4",
          "local_name": "the count of distinct e's",
          "local_types": [
            "count",
            "distinct",
            "distinct entity"
          ],
          "iri": "Entity-the_count_of_distinct_e_s-Mention-1"
        }
      ],
      "relevance": 0.5146484375
    },
    "Entity-cardinality_of_1": {
      "node_id": "cardinality_of_1",
      "disambiguation_index": 0,
      "label": "cardinality of 1",
      "aliases": [
        "cardinality of 1"
      ],
      "types": [
        "cardinality"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term 'cardinality of 1' refers to a condition in knowledge graph rule learning where a rule requires exactly one instance of a particular relationship or attribute to be satisfied, indicating the least stringent requirement for the validation of shapes in the graph.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-6-Sentence-1",
          "local_name": "cardinality of 1",
          "local_types": [
            "cardinality"
          ],
          "iri": "Entity-cardinality_of_1-Mention-1"
        }
      ],
      "relevance": 0.5146484375
    },
    "Entity-structural_feature": {
      "node_id": "structural_feature",
      "disambiguation_index": 0,
      "label": "structural features",
      "aliases": [
        "structural features"
      ],
      "types": [
        "property",
        "characteristic",
        "feature"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'structural features' refers to the various characteristics of shapes in knowledge graphs, specifically their depth and width, which contribute to the overall structure and quality of the shapes learned from the data.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-3",
          "local_name": "structural features",
          "local_types": [
            "property",
            "characteristic",
            "feature"
          ],
          "iri": "Entity-structural_feature-Mention-1"
        }
      ],
      "relevance": 0.51416015625
    },
    "Entity-fact": {
      "node_id": "fact",
      "disambiguation_index": 0,
      "label": "facts",
      "aliases": [
        "fact",
        "facts"
      ],
      "types": [
        "truth value",
        "data",
        "truth",
        "data point",
        "RDF triple",
        "knowledge representation",
        "concept",
        "data structure",
        "statement",
        "fact",
        "data element",
        "truth statement",
        "information",
        "link",
        "proposition",
        "knowledge"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'facts' refer to the specific pieces of information or data points that are associated with entities, such as attributes or relationships that can be expected to exist for a given entity type, like a song.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-5",
          "local_name": "facts",
          "local_types": [
            "data",
            "information"
          ],
          "iri": "Entity-fact-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "fact",
          "local_types": [
            "RDF triple",
            "concept",
            "data structure",
            "information",
            "link"
          ],
          "iri": "Entity-fact-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-6",
          "local_name": "facts",
          "local_types": [
            "fact",
            "data element",
            "information"
          ],
          "iri": "Entity-fact-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-5-Sentence-1",
          "local_name": "fact",
          "local_types": [
            "truth value",
            "RDF triple",
            "statement",
            "fact",
            "link",
            "proposition"
          ],
          "iri": "Entity-fact-Mention-4"
        },
        {
          "reference": "Section-3-Paragraph-6-Sentence-1",
          "local_name": "facts",
          "local_types": [
            "RDF triple",
            "data",
            "information",
            "link"
          ],
          "iri": "Entity-fact-Mention-5"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "facts",
          "local_types": [
            "truth",
            "data point",
            "RDF triple",
            "truth statement",
            "link"
          ],
          "iri": "Entity-fact-Mention-6"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-4",
          "local_name": "facts",
          "local_types": [
            "RDF triple",
            "data",
            "information",
            "link"
          ],
          "iri": "Entity-fact-Mention-7"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-4",
          "local_name": "fact",
          "local_types": [
            "statement",
            "proposition"
          ],
          "iri": "Entity-fact-Mention-8"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "facts",
          "local_types": [
            "data",
            "information"
          ],
          "iri": "Entity-fact-Mention-9"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "facts",
          "local_types": [
            "information",
            "data"
          ],
          "iri": "Entity-fact-Mention-10"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-2",
          "local_name": "facts",
          "local_types": [
            "data",
            "information",
            "data point"
          ],
          "iri": "Entity-fact-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "facts",
          "local_types": [
            "fact",
            "data",
            "information",
            "data point"
          ],
          "iri": "Entity-fact-Mention-12"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-1",
          "local_name": "facts",
          "local_types": [
            "information",
            "data"
          ],
          "iri": "Entity-fact-Mention-13"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-5",
          "local_name": "facts",
          "local_types": [
            "data",
            "information"
          ],
          "iri": "Entity-fact-Mention-14"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-4",
          "local_name": "fact",
          "local_types": [
            "statement",
            "proposition"
          ],
          "iri": "Entity-fact-Mention-15"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-5",
          "local_name": "fact",
          "local_types": [
            "statement",
            "proposition"
          ],
          "iri": "Entity-fact-Mention-16"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "fact",
          "local_types": [
            "concept",
            "statement"
          ],
          "iri": "Entity-fact-Mention-17"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "facts",
          "local_types": [
            "data",
            "knowledge",
            "information",
            "data point"
          ],
          "iri": "Entity-fact-Mention-18"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-4",
          "local_name": "fact",
          "local_types": [
            "truth statement",
            "knowledge representation"
          ],
          "iri": "Entity-fact-Mention-19"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-3",
          "local_name": "facts",
          "local_types": [
            "data point",
            "information"
          ],
          "iri": "Entity-fact-Mention-20"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-1",
          "local_name": "facts",
          "local_types": [
            "data point",
            "information"
          ],
          "iri": "Entity-fact-Mention-21"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-8",
          "local_name": "facts",
          "local_types": [
            "information",
            "data"
          ],
          "iri": "Entity-fact-Mention-22"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-1",
          "local_name": "facts",
          "local_types": [
            "fact",
            "data",
            "information"
          ],
          "iri": "Entity-fact-Mention-23"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-4",
          "local_name": "facts",
          "local_types": [
            "fact",
            "data",
            "information"
          ],
          "iri": "Entity-fact-Mention-24"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-1",
          "local_name": "facts",
          "local_types": [
            "data",
            "information"
          ],
          "iri": "Entity-fact-Mention-25"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-3",
          "local_name": "facts",
          "local_types": [
            "data point",
            "information"
          ],
          "iri": "Entity-fact-Mention-26"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-4",
          "local_name": "facts",
          "local_types": [
            "data",
            "information"
          ],
          "iri": "Entity-fact-Mention-27"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-5",
          "local_name": "facts",
          "local_types": [
            "data",
            "information"
          ],
          "iri": "Entity-fact-Mention-28"
        }
      ],
      "relevance": 0.51416015625
    },
    "Entity-zi": {
      "node_id": "zi",
      "disambiguation_index": 0,
      "label": "zi",
      "aliases": [
        "zi"
      ],
      "types": [
        "entity variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'zi' refers to an entity variable used in the definition of open path rules for knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-3",
          "local_name": "zi",
          "local_types": [
            "entity variable"
          ],
          "iri": "Entity-zi-Mention-1"
        }
      ],
      "relevance": 0.51416015625
    },
    "Entity-v2": {
      "node_id": "v2",
      "disambiguation_index": 0,
      "label": "V^2",
      "aliases": [
        "V^2"
      ],
      "types": [
        "mathematical notation",
        "vector"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "V^2 refers to a vector that is obtained by summing the columns of an adjacency matrix and transposing the result, representing the count of distinct entities satisfying a specific condition in the context of knowledge graph rule evaluation.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-2",
          "local_name": "V^2",
          "local_types": [
            "vector",
            "mathematical notation"
          ],
          "iri": "Entity-v2-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "V^2",
          "local_types": [
            "vector",
            "mathematical notation"
          ],
          "iri": "Entity-v2-Mention-2"
        }
      ],
      "relevance": 0.51416015625
    },
    "Entity-country__z1__z1_": {
      "node_id": "country__z1__z1_",
      "disambiguation_index": 0,
      "label": "country(z1, z1)",
      "aliases": [
        "country(z1, z1)",
        "country(z1)"
      ],
      "types": [
        "function",
        "predicate",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'country(z1, z1)' refers to a logical expression within a tree structure in the context of SHACL shapes, indicating a relationship where 'z1' is an entity representing a country associated with another entity in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "country(z1, z1)",
          "local_types": [
            "function",
            "logical expression"
          ],
          "iri": "Entity-country__z1__z1_-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "country(z1)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-country__z1__z1_-Mention-2"
        }
      ],
      "relevance": 0.51416015625
    },
    "Entity-classic_version": {
      "node_id": "classic_version",
      "disambiguation_index": 0,
      "label": "classic version",
      "aliases": [
        "classic version",
        "the classic version"
      ],
      "types": [
        "original version",
        "version",
        "reference model"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'classic version' refers to the original representation of poker hands used as a basis for adapting the Poker knowledge graph (KG) to ensure it is rich and correct for evaluation experiments.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-4",
          "local_name": "classic version",
          "local_types": [
            "original version",
            "reference model"
          ],
          "iri": "Entity-classic_version-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-4",
          "local_name": "the classic version",
          "local_types": [
            "version"
          ],
          "iri": "Entity-classic_version-Mention-2"
        }
      ],
      "relevance": 0.51416015625
    },
    "Entity-count_2": {
      "node_id": "count_2",
      "disambiguation_index": 0,
      "label": "count 2",
      "aliases": [
        "count 2",
        "a count of 2"
      ],
      "types": [
        "count",
        "number"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'count 2' refers to the number of distinct entities that satisfy a specific condition in a knowledge graph, indicating that two entities meet the criteria defined by the rule being evaluated.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "count 2",
          "local_types": [
            "count",
            "number"
          ],
          "iri": "Entity-count_2-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-6",
          "local_name": "a count of 2",
          "local_types": [
            "count"
          ],
          "iri": "Entity-count_2-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-4",
          "local_name": "count 2",
          "local_types": [
            "count"
          ],
          "iri": "Entity-count_2-Mention-3"
        }
      ],
      "relevance": 0.51416015625
    },
    "Entity-entity_e_i": {
      "node_id": "entity_e_i",
      "disambiguation_index": 0,
      "label": "entity e_i",
      "aliases": [
        "entity e_i",
        "e_i",
        "E_i"
      ],
      "types": [
        "mathematical object",
        "data point",
        "vector",
        "entity",
        "mathematical entity",
        "variable",
        "representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "entity e_i refers to a specific entity in a knowledge graph that is being embedded into a vector representation using the RESCAL method.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "entity e_i",
          "local_types": [
            "mathematical object",
            "vector",
            "data point",
            "entity",
            "mathematical entity"
          ],
          "iri": "Entity-entity_e_i-Mention-1"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "E_i",
          "local_types": [
            "mathematical object",
            "vector",
            "entity",
            "variable",
            "representation"
          ],
          "iri": "Entity-entity_e_i-Mention-2"
        }
      ],
      "relevance": 0.513671875
    },
    "Entity-hour": {
      "node_id": "hour",
      "disambiguation_index": 0,
      "label": "hours",
      "aliases": [
        "hours"
      ],
      "types": [
        "time unit",
        "measurement"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'hours' refers to the time limit set for learning each target predicate in the evaluation of knowledge graph rule-learning methods.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "hours",
          "local_types": [
            "time unit",
            "measurement"
          ],
          "iri": "Entity-hour-Mention-1"
        }
      ],
      "relevance": 0.513671875
    },
    "Entity-a_person": {
      "node_id": "a_person",
      "disambiguation_index": 0,
      "label": "a person",
      "aliases": [
        "a person"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of SHACL shapes for knowledge graphs, 'a person' refers to an entity type that is required to possess specific attributes such as a name, birth date, and place of birth, each with defined data types.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-2",
          "local_name": "a person",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-a_person-Mention-1"
        }
      ],
      "relevance": 0.513671875
    },
    "Entity-to_connect": {
      "node_id": "to_connect",
      "disambiguation_index": 0,
      "label": "to connect",
      "aliases": [
        "to connect"
      ],
      "types": [
        "action"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'to connect' refers to the action of establishing a relationship between entities through predicates, facilitating the representation of data and the learning of rules that define these relationships.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "to connect",
          "local_types": [
            "action"
          ],
          "iri": "Entity-to_connect-Mention-1"
        }
      ],
      "relevance": 0.513671875
    },
    "Entity-depth": {
      "node_id": "depth",
      "disambiguation_index": 0,
      "label": "depth",
      "aliases": [
        "depth"
      ],
      "types": [
        "dimension",
        "structural feature",
        "measurement",
        "quality measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'depth' refers to a structural feature that indicates the number of levels or layers within a shape, contributing to the overall complexity and organization of the graph's data representation.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-3",
          "local_name": "depth",
          "local_types": [
            "dimension",
            "structural feature",
            "measurement",
            "quality measure"
          ],
          "iri": "Entity-depth-Mention-1"
        }
      ],
      "relevance": 0.51318359375
    },
    "Entity-alternative_shape": {
      "node_id": "alternative_shape",
      "disambiguation_index": 0,
      "label": "alternative shapes",
      "aliases": [
        "alternative shapes"
      ],
      "types": [
        "geometric figure",
        "mathematical object",
        "shape"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Alternative shapes refer to different geometric configurations or structures that can be derived from a common underlying path in knowledge graphs, influenced by additional constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-2",
          "local_name": "alternative shapes",
          "local_types": [
            "geometric figure",
            "mathematical object",
            "shape"
          ],
          "iri": "Entity-alternative_shape-Mention-1"
        }
      ],
      "relevance": 0.51318359375
    },
    "Entity-355": {
      "node_id": "355",
      "disambiguation_index": 0,
      "label": "355",
      "aliases": [
        "355"
      ],
      "types": [
        "number",
        "quantity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '355' refers to a specific unary predicate selected from DBpedia for the evaluation of knowledge graph rule-learning methods.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-3",
          "local_name": "355",
          "local_types": [
            "number",
            "quantity"
          ],
          "iri": "Entity-355-Mention-1"
        }
      ],
      "relevance": 0.51318359375
    },
    "Entity-reverse_form": {
      "node_id": "reverse_form",
      "disambiguation_index": 0,
      "label": "reverse form",
      "aliases": [
        "reverse form"
      ],
      "types": [
        "form",
        "structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'reverse form' refers to a binary target predicate in knowledge graph rule learning, where the subject argument is used to connect the head of the predicate instead of the object argument, contrasting with its 'straight form'.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "reverse form",
          "local_types": [
            "form",
            "structure"
          ],
          "iri": "Entity-reverse_form-Mention-1"
        }
      ],
      "relevance": 0.51318359375
    },
    "Entity-the_set_of_such_entity": {
      "node_id": "the_set_of_such_entity",
      "disambiguation_index": 0,
      "label": "the set of such entities",
      "aliases": [
        "the set of such entities"
      ],
      "types": [
        "set"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The set of such entities refers to the collection of distinct entities in a knowledge graph that satisfy a specific rule condition, as determined by the cardinality constraint applied to the rule.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-4",
          "local_name": "the set of such entities",
          "local_types": [
            "set"
          ],
          "iri": "Entity-the_set_of_such_entity-Mention-1"
        }
      ],
      "relevance": 0.51318359375
    },
    "Entity-data-first_approach": {
      "node_id": "data-first_approach",
      "disambiguation_index": 0,
      "label": "data-first approach",
      "aliases": [
        "data-first approach"
      ],
      "types": [
        "approach",
        "methodology",
        "philosophy"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'data-first approach' refers to a methodology in knowledge graph development that prioritizes the use of raw data to allow contributors to extend the graph in a flexible and unrestricted manner, contrasting with traditional schema-based constraints found in relational databases.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-1",
          "local_name": "data-first approach",
          "local_types": [
            "approach",
            "methodology",
            "philosophy"
          ],
          "iri": "Entity-data-first_approach-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-2-Sentence-5",
          "local_name": "data-first approach",
          "local_types": [
            "approach",
            "methodology"
          ],
          "iri": "Entity-data-first_approach-Mention-2"
        }
      ],
      "relevance": 0.51220703125
    },
    "Entity-new_fact": {
      "node_id": "new_fact",
      "disambiguation_index": 0,
      "label": "new facts",
      "aliases": [
        "new facts"
      ],
      "types": [
        "fact"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'new facts' refers to the additional information or data points that can be inferred from a knowledge graph using Closed rules (CRs) as a formalism.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-2",
          "local_name": "new facts",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-new_fact-Mention-1"
        }
      ],
      "relevance": 0.51220703125
    },
    "Entity-fact_pk__ei__ej_": {
      "node_id": "fact_pk__ei__ej_",
      "disambiguation_index": 0,
      "label": "fact Pk(ei, ej)",
      "aliases": [
        "the fact Pk(ei, ej)",
        "fact Pk(ei, ej)"
      ],
      "types": [
        "predicate",
        "fact",
        "relation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention 'fact Pk(ei, ej)' refers to a specific relationship or predicate in a knowledge graph, indicating that the predicate Pk holds true for the entities ei and ej, represented as a binary value in the adjacency matrix A(Pk).",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "fact Pk(ei, ej)",
          "local_types": [
            "fact",
            "predicate",
            "relation"
          ],
          "iri": "Entity-fact_pk__ei__ej_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "the fact Pk(ei, ej)",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-fact_pk__ei__ej_-Mention-2"
        }
      ],
      "relevance": 0.51220703125
    },
    "Entity-triple_format": {
      "node_id": "triple_format",
      "disambiguation_index": 0,
      "label": "triple format",
      "aliases": [
        "triple format"
      ],
      "types": [
        "data representation",
        "knowledge graph",
        "format"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'triple format' refers to a data representation method used in knowledge graphs where information is structured as subject-predicate-object triples, facilitating the organization and querying of graph data.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-3",
          "local_name": "triple format",
          "local_types": [
            "data representation",
            "knowledge graph",
            "format"
          ],
          "iri": "Entity-triple_format-Mention-1"
        }
      ],
      "relevance": 0.51220703125
    },
    "Entity-interestingness": {
      "node_id": "interestingness",
      "disambiguation_index": 0,
      "label": "interestingness",
      "aliases": [
        "interestingness"
      ],
      "types": [
        "measure",
        "concept",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'interestingness' refers to a measure of the quantified uncertainty associated with a candidate shape in the process of selecting it for validation or verification within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-1",
          "local_name": "interestingness",
          "local_types": [
            "measure",
            "concept",
            "metric"
          ],
          "iri": "Entity-interestingness-Mention-1"
        }
      ],
      "relevance": 0.51220703125
    },
    "Entity-head": {
      "node_id": "head",
      "disambiguation_index": 0,
      "label": "head",
      "aliases": [
        "head"
      ],
      "types": [
        "logical structure",
        "rule",
        "linguistic term",
        "predicate component",
        "graph theory",
        "mathematical term",
        "relation",
        "concept",
        "theoretical framework",
        "atom",
        "part",
        "part of knowledge base",
        "logical component",
        "part of rule",
        "entity",
        "mathematical concept",
        "proposition",
        "function",
        "logical construct",
        "component",
        "theoretical construct",
        "grammatical function"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'head' refers to the part of a logical rule in predicate calculus that consists of a chain of conjunctive atoms, which is used to express relationships and constraints in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-2",
          "local_name": "head",
          "local_types": [
            "logical component",
            "atom"
          ],
          "iri": "Entity-head-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-4",
          "local_name": "head",
          "local_types": [
            "proposition",
            "logical component",
            "component"
          ],
          "iri": "Entity-head-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-5",
          "local_name": "head",
          "local_types": [
            "linguistic term",
            "grammatical function"
          ],
          "iri": "Entity-head-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-5-Sentence-1",
          "local_name": "head",
          "local_types": [
            "component"
          ],
          "iri": "Entity-head-Mention-4"
        },
        {
          "reference": "Section-3-Paragraph-6-Sentence-2",
          "local_name": "head",
          "local_types": [
            "component"
          ],
          "iri": "Entity-head-Mention-5"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-4",
          "local_name": "head",
          "local_types": [
            "function",
            "relation",
            "component"
          ],
          "iri": "Entity-head-Mention-6"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "head",
          "local_types": [
            "component",
            "logical construct"
          ],
          "iri": "Entity-head-Mention-7"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-1",
          "local_name": "head",
          "local_types": [
            "component"
          ],
          "iri": "Entity-head-Mention-8"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-1",
          "local_name": "head",
          "local_types": [
            "component"
          ],
          "iri": "Entity-head-Mention-9"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-4",
          "local_name": "head",
          "local_types": [
            "concept",
            "part of rule",
            "component"
          ],
          "iri": "Entity-head-Mention-10"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-5",
          "local_name": "head",
          "local_types": [
            "concept",
            "entity"
          ],
          "iri": "Entity-head-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-4",
          "local_name": "head",
          "local_types": [
            "part",
            "concept",
            "component"
          ],
          "iri": "Entity-head-Mention-12"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-1",
          "local_name": "head",
          "local_types": [
            "component",
            "part"
          ],
          "iri": "Entity-head-Mention-13"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "head",
          "local_types": [
            "component",
            "part of knowledge base"
          ],
          "iri": "Entity-head-Mention-14"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "head",
          "local_types": [
            "component",
            "rule"
          ],
          "iri": "Entity-head-Mention-15"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "head",
          "local_types": [
            "concept",
            "theoretical construct"
          ],
          "iri": "Entity-head-Mention-16"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-1",
          "local_name": "head",
          "local_types": [
            "graph theory",
            "mathematical term",
            "concept",
            "theoretical framework"
          ],
          "iri": "Entity-head-Mention-17"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "head",
          "local_types": [
            "logical structure",
            "mathematical term"
          ],
          "iri": "Entity-head-Mention-18"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-4",
          "local_name": "head",
          "local_types": [
            "part",
            "mathematical concept",
            "component"
          ],
          "iri": "Entity-head-Mention-19"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-5",
          "local_name": "head",
          "local_types": [
            "concept",
            "entity"
          ],
          "iri": "Entity-head-Mention-20"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "head",
          "local_types": [
            "predicate component",
            "logical construct"
          ],
          "iri": "Entity-head-Mention-21"
        }
      ],
      "relevance": 0.51171875
    },
    "Entity-million_of_entity": {
      "node_id": "million_of_entity",
      "disambiguation_index": 0,
      "label": "millions of entities",
      "aliases": [
        "millions of entities"
      ],
      "types": [
        "entity",
        "data characteristic",
        "quantity",
        "data quantity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'millions of entities' refers to the large number of individual items or nodes present in knowledge graphs, such as YAGO2, which are utilized in the context of machine learning and data processing.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-2",
          "local_name": "millions of entities",
          "local_types": [
            "entity",
            "data characteristic",
            "quantity",
            "data quantity"
          ],
          "iri": "Entity-million_of_entity-Mention-1"
        }
      ],
      "relevance": 0.51171875
    },
    "Entity-the_number_of_entity_that_join_the_head_of_the_rule_to_it_body": {
      "node_id": "the_number_of_entity_that_join_the_head_of_the_rule_to_it_body",
      "disambiguation_index": 0,
      "label": "the number of entities that join the head of the rule to its body",
      "aliases": [
        "the number of entities that join the head of the rule to its body"
      ],
      "types": [
        "count",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The number of entities that join the head of the rule to its body refers to the count of distinct entities that satisfy both the head and body conditions of a given rule in the context of knowledge graph shape learning.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "the number of entities that join the head of the rule to its body",
          "local_types": [
            "count",
            "rule"
          ],
          "iri": "Entity-the_number_of_entity_that_join_the_head_of_the_rule_to_it_body-Mention-1"
        }
      ],
      "relevance": 0.51171875
    },
    "Entity-sh__mincount": {
      "node_id": "sh__mincount",
      "disambiguation_index": 0,
      "label": "sh:minCount",
      "aliases": [
        "sh:minCount"
      ],
      "types": [
        "annotation",
        "semantic web term",
        "property",
        "SHACL",
        "sh",
        "semantic web"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "sh:minCount is a property in the SHACL (Shapes Constraint Language) used to specify the minimum number of instances of a particular node that must be present in a data graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-4",
          "local_name": "sh:minCount",
          "local_types": [
            "annotation",
            "semantic web term",
            "property",
            "SHACL",
            "sh",
            "semantic web"
          ],
          "iri": "Entity-sh__mincount-Mention-1"
        }
      ],
      "relevance": 0.51171875
    },
    "Entity-class": {
      "node_id": "class",
      "disambiguation_index": 0,
      "label": "classes",
      "aliases": [
        "class",
        "classes and types",
        "classes"
      ],
      "types": [
        "class",
        "concept",
        "type",
        "classification",
        "category"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of Description Logic ontologies, 'classes' refer to unary predicates that represent categories or types of entities within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-3",
          "local_name": "classes",
          "local_types": [
            "concept",
            "category"
          ],
          "iri": "Entity-class-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-6-Sentence-1",
          "local_name": "class",
          "local_types": [
            "concept",
            "category"
          ],
          "iri": "Entity-class-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-1",
          "local_name": "classes",
          "local_types": [
            "category",
            "classification"
          ],
          "iri": "Entity-class-Mention-3"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-2",
          "local_name": "classes",
          "local_types": [
            "classification",
            "category"
          ],
          "iri": "Entity-class-Mention-4"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-3",
          "local_name": "classes",
          "local_types": [
            "concept",
            "category"
          ],
          "iri": "Entity-class-Mention-5"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-2",
          "local_name": "class",
          "local_types": [
            "category",
            "type"
          ],
          "iri": "Entity-class-Mention-6"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-3",
          "local_name": "classes",
          "local_types": [
            "category",
            "classification"
          ],
          "iri": "Entity-class-Mention-7"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-3",
          "local_name": "classes and types",
          "local_types": [
            "class",
            "type"
          ],
          "iri": "Entity-class-Mention-8"
        }
      ],
      "relevance": 0.51171875
    },
    "Entity-formalism_of_constraint": {
      "node_id": "formalism_of_constraint",
      "disambiguation_index": 0,
      "label": "formalism of constraints",
      "aliases": [
        "formalism of constraints"
      ],
      "types": [
        "constraint",
        "constraint representation",
        "formalism",
        "theoretical framework"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'formalism of constraints' refers to the theoretical framework that defines the rules and limitations governing the representation and acquisition of knowledge from schema-free knowledge bases, particularly in the context of learning shape constraints for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-2",
          "local_name": "formalism of constraints",
          "local_types": [
            "constraint",
            "constraint representation",
            "formalism",
            "theoretical framework"
          ],
          "iri": "Entity-formalism_of_constraint-Mention-1"
        }
      ],
      "relevance": 0.51171875
    },
    "Entity-entity_and_predicate": {
      "node_id": "entity_and_predicate",
      "disambiguation_index": 0,
      "label": "entities and predicates",
      "aliases": [
        "predicates and entities",
        "entities and predicates"
      ],
      "types": [
        "predicate",
        "entity",
        "entities",
        "predicates"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'entities and predicates' refer to the fundamental components where entities represent the nodes or objects within the graph, and predicates denote the relationships or properties that connect these entities.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "entities and predicates",
          "local_types": [
            "entities",
            "predicates"
          ],
          "iri": "Entity-entity_and_predicate-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-1",
          "local_name": "predicates and entities",
          "local_types": [
            "predicate",
            "entity"
          ],
          "iri": "Entity-entity_and_predicate-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-2",
          "local_name": "entities and predicates",
          "local_types": [
            "entity",
            "predicate"
          ],
          "iri": "Entity-entity_and_predicate-Mention-3"
        }
      ],
      "relevance": 0.51171875
    },
    "Entity-pt": {
      "node_id": "pt",
      "disambiguation_index": 0,
      "label": "Pt",
      "aliases": [
        "Pt"
      ],
      "types": [
        "function",
        "mathematical object",
        "point",
        "entity",
        "relation",
        "predicate",
        "mathematical function",
        "variable",
        "parameter",
        "mathematical variable",
        "logical expression",
        "symbol",
        "mathematical notation"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Pt refers to a target predicate used in the Sampling() method of the algorithm, which identifies entities related to it within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "Pt",
          "local_types": [
            "entity",
            "predicate"
          ],
          "iri": "Entity-pt-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-4-Sentence-1",
          "local_name": "Pt",
          "local_types": [
            "function",
            "mathematical object",
            "predicate",
            "mathematical variable",
            "symbol"
          ],
          "iri": "Entity-pt-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-6",
          "local_name": "Pt",
          "local_types": [
            "relation",
            "function"
          ],
          "iri": "Entity-pt-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-4",
          "local_name": "Pt",
          "local_types": [
            "function",
            "relation"
          ],
          "iri": "Entity-pt-Mention-4"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "Pt",
          "local_types": [
            "predicate",
            "mathematical function"
          ],
          "iri": "Entity-pt-Mention-5"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-4",
          "local_name": "Pt",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-pt-Mention-6"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-2",
          "local_name": "Pt",
          "local_types": [
            "function",
            "relation"
          ],
          "iri": "Entity-pt-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-4",
          "local_name": "Pt",
          "local_types": [
            "predicate",
            "logical expression"
          ],
          "iri": "Entity-pt-Mention-8"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-7",
          "local_name": "Pt",
          "local_types": [
            "mathematical notation",
            "function"
          ],
          "iri": "Entity-pt-Mention-9"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "Pt",
          "local_types": [
            "relation",
            "predicate"
          ],
          "iri": "Entity-pt-Mention-10"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-5",
          "local_name": "Pt",
          "local_types": [
            "parameter",
            "mathematical notation",
            "variable"
          ],
          "iri": "Entity-pt-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-9",
          "local_name": "Pt",
          "local_types": [
            "variable",
            "parameter"
          ],
          "iri": "Entity-pt-Mention-12"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-5",
          "local_name": "Pt",
          "local_types": [
            "relation",
            "mathematical function"
          ],
          "iri": "Entity-pt-Mention-13"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "Pt",
          "local_types": [
            "function",
            "mathematical notation"
          ],
          "iri": "Entity-pt-Mention-14"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-4",
          "local_name": "Pt",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-pt-Mention-15"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "Pt",
          "local_types": [
            "function",
            "predicate"
          ],
          "iri": "Entity-pt-Mention-16"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-2",
          "local_name": "Pt",
          "local_types": [
            "function",
            "mathematical function",
            "relation",
            "predicate"
          ],
          "iri": "Entity-pt-Mention-17"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "Pt",
          "local_types": [
            "function",
            "relation"
          ],
          "iri": "Entity-pt-Mention-18"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-1",
          "local_name": "Pt",
          "local_types": [
            "predicate",
            "function"
          ],
          "iri": "Entity-pt-Mention-19"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "Pt",
          "local_types": [
            "predicate",
            "function"
          ],
          "iri": "Entity-pt-Mention-20"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-4",
          "local_name": "Pt",
          "local_types": [
            "point",
            "variable",
            "mathematical notation"
          ],
          "iri": "Entity-pt-Mention-21"
        }
      ],
      "relevance": 0.51123046875
    },
    "Entity-the_time_of_learning": {
      "node_id": "the_time_of_learning",
      "disambiguation_index": 0,
      "label": "the time of learning",
      "aliases": [
        "the time of learning"
      ],
      "types": [
        "time",
        "learning"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The time of learning refers to the specific period during which rules are learned from knowledge graphs, characterized by the selection of quality thresholds that can be adjusted post-learning to enhance the accuracy and relevance of the mined rules.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-4",
          "local_name": "the time of learning",
          "local_types": [
            "time",
            "learning"
          ],
          "iri": "Entity-the_time_of_learning-Mention-1"
        }
      ],
      "relevance": 0.51123046875
    },
    "Entity-pi__e__e___or_pi__e___e_": {
      "node_id": "pi__e__e___or_pi__e___e_",
      "disambiguation_index": 0,
      "label": "Pi(e, e') or Pi(e', e)",
      "aliases": [
        "Pi(e, e') or Pi(e', e)"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pi(e, e') or Pi(e', e) refers to a predicate logic expression used in the context of Inverse Open Path rules to denote relationships between entities e and e' in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-7",
          "local_name": "Pi(e, e') or Pi(e', e)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-pi__e__e___or_pi__e___e_-Mention-1"
        }
      ],
      "relevance": 0.5107421875
    },
    "Entity-_0_1_2__t": {
      "node_id": "_0_1_2__t",
      "disambiguation_index": 0,
      "label": "[0 1 2]^T",
      "aliases": [
        "[0 1 2]^T"
      ],
      "types": [
        "vector"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "[0 1 2]^T represents a transposed vector indicating the count of distinct entities satisfying a specific condition in a knowledge graph, where the elements correspond to the number of entities that meet the criteria defined by the rule being evaluated.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "[0 1 2]^T",
          "local_types": [
            "vector"
          ],
          "iri": "Entity-_0_1_2__t-Mention-1"
        }
      ],
      "relevance": 0.5107421875
    },
    "Entity-the_atomic_body": {
      "node_id": "the_atomic_body",
      "disambiguation_index": 0,
      "label": "the atomic body",
      "aliases": [
        "the atomic body"
      ],
      "types": [
        "concept",
        "body"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The atomic body refers to the foundational component of a SHACL tree structure that is used to predict instances of the tree's head by establishing relationships between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-5",
          "local_name": "the atomic body",
          "local_types": [
            "concept",
            "body"
          ],
          "iri": "Entity-the_atomic_body-Mention-1"
        }
      ],
      "relevance": 0.5107421875
    },
    "Entity-y_(1)": {
      "node_id": "y_(1)",
      "disambiguation_index": 1,
      "label": "y",
      "aliases": [
        "y"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the SHACL learning process, 'y' refers to the record label associated with a music album, which is a specific attribute used in the rule indicating the relationship between an album and its label.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-3",
          "local_name": "y",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-y_(1)-Mention-1"
        }
      ],
      "relevance": 0.5107421875
    },
    "Entity-e5": {
      "node_id": "e5",
      "disambiguation_index": 0,
      "label": "e5",
      "aliases": [
        "e5"
      ],
      "types": [
        "entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'e5' refers to one of the three entities (e3, e4, e5) that can instantiate the variable z0 in the context of an inverse open path rule, satisfying the predicates P1 and the conjunction of P2 and P3.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "e5",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e5-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "e5",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e5-Mention-2"
        }
      ],
      "relevance": 0.51025390625
    },
    "Entity-size": {
      "node_id": "size",
      "disambiguation_index": 0,
      "label": "size",
      "aliases": [
        "size"
      ],
      "types": [
        "mathematical concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'size' refers to the number of sampled entities related to a target predicate, which is expressed as 2l|F||E| in the worst-case scenario.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "size",
          "local_types": [
            "mathematical concept"
          ],
          "iri": "Entity-size-Mention-1"
        }
      ],
      "relevance": 0.51025390625
    },
    "Entity-embedding-based_method": {
      "node_id": "embedding-based_method",
      "disambiguation_index": 0,
      "label": "embedding-based method",
      "aliases": [
        "embedding-based method"
      ],
      "types": [
        "technique",
        "method",
        "learning method",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An embedding-based method is a computational technique that utilizes vector representations of data to facilitate learning and inference tasks, often applied in the context of knowledge graphs and rule discovery.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "embedding-based method",
          "local_types": [
            "technique",
            "method",
            "learning method",
            "methodology"
          ],
          "iri": "Entity-embedding-based_method-Mention-1"
        }
      ],
      "relevance": 0.509765625
    },
    "Entity-measure_support": {
      "node_id": "measure_support",
      "disambiguation_index": 0,
      "label": "measures support",
      "aliases": [
        "measures support"
      ],
      "types": [
        "measure",
        "evaluation measure",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'measures support' refers to a quantitative metric used in rule learning to count the instances where both the body and head of a closed path rule are satisfied in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-6-Sentence-2",
          "local_name": "measures support",
          "local_types": [
            "measure",
            "evaluation measure",
            "metric"
          ],
          "iri": "Entity-measure_support-Mention-1"
        }
      ],
      "relevance": 0.509765625
    },
    "Entity-p_(1)": {
      "node_id": "p_(1)",
      "disambiguation_index": 1,
      "label": "P",
      "aliases": [
        "P"
      ],
      "types": [
        "set"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "P refers to the set of all predicates in the set F of a knowledge graph K, which is used to define relationships between entities.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "P",
          "local_types": [
            "set"
          ],
          "iri": "Entity-p_(1)-Mention-1"
        }
      ],
      "relevance": 0.509765625
    },
    "Entity-the_matrix_product_a__p1___a__p2___...__a__pm_": {
      "node_id": "the_matrix_product_a__p1___a__p2___...__a__pm_",
      "disambiguation_index": 0,
      "label": "the matrix product A(P1)*A(P2)*...*A(Pm)",
      "aliases": [
        "the matrix product A(P1)*A(P2)*...*A(Pm)"
      ],
      "types": [
        "matrix product"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The matrix product A(P1)*A(P2)*...*A(Pm) represents the combined adjacency matrix of multiple predicates in a knowledge graph, where each matrix A(Pk) indicates the binary relationships defined by the predicate Pk, and the product is used to identify entities that satisfy specific structural rules based on cardinality constraints.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-2",
          "local_name": "the matrix product A(P1)*A(P2)*...*A(Pm)",
          "local_types": [
            "matrix product"
          ],
          "iri": "Entity-the_matrix_product_a__p1___a__p2___...__a__pm_-Mention-1"
        }
      ],
      "relevance": 0.509765625
    },
    "Entity-the_property": {
      "node_id": "the_property",
      "disambiguation_index": 0,
      "label": "the property",
      "aliases": [
        "the property"
      ],
      "types": [
        "property"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of SHACL shapes and knowledge graphs, 'the property' refers to a characteristic or attribute of a tree structure that indicates the relationship between the confidence levels of the original tree and the pruned tree, specifically that the confidence of the pruned tree is always greater than or equal to that of the original tree.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "the property",
          "local_types": [
            "property"
          ],
          "iri": "Entity-the_property-Mention-1"
        }
      ],
      "relevance": 0.509765625
    },
    "Entity-partially_instantiated_shape": {
      "node_id": "partially_instantiated_shape",
      "disambiguation_index": 0,
      "label": "partially instantiated shapes",
      "aliases": [
        "partially instantiated shapes"
      ],
      "types": [
        "geometric figure",
        "abstract concept",
        "shape"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Partially instantiated shapes refer to geometric or abstract representations of structures that are not fully defined or completed, allowing for the exploration of various configurations and relationships within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-1",
          "local_name": "partially instantiated shapes",
          "local_types": [
            "geometric figure",
            "abstract concept",
            "shape"
          ],
          "iri": "Entity-partially_instantiated_shape-Mention-1"
        }
      ],
      "relevance": 0.50927734375
    },
    "Entity-class_assertion": {
      "node_id": "class_assertion",
      "disambiguation_index": 0,
      "label": "class assertions",
      "aliases": [
        "class assertions"
      ],
      "types": [
        "class",
        "assertion",
        "concept",
        "semantic representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Class assertions refer to unary predicates in a knowledge graph that indicate the type of an entity, typically expressed in RDF triples as (e, rdf:type, P), where P represents a class or datatype.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-5",
          "local_name": "class assertions",
          "local_types": [
            "class",
            "assertion",
            "concept",
            "semantic representation"
          ],
          "iri": "Entity-class_assertion-Mention-1"
        }
      ],
      "relevance": 0.5087890625
    },
    "Entity-support_of_r": {
      "node_id": "support_of_r",
      "disambiguation_index": 0,
      "label": "support of r",
      "aliases": [
        "support of r",
        "the support of r"
      ],
      "types": [
        "support",
        "relation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'support of r' refers to a measure that counts the number of instances in a knowledge graph where both the body and head of a closed path rule are satisfied.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "support of r",
          "local_types": [
            "support"
          ],
          "iri": "Entity-support_of_r-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-5",
          "local_name": "the support of r",
          "local_types": [
            "support",
            "relation"
          ],
          "iri": "Entity-support_of_r-Mention-2"
        }
      ],
      "relevance": 0.5087890625
    },
    "Entity-pair_of_entity__e__e__": {
      "node_id": "pair_of_entity__e__e__",
      "disambiguation_index": 0,
      "label": "pair of entities (e, e')",
      "aliases": [
        "A pair of entities (e, e')",
        "pair of entities (e, e')",
        "(e', e)",
        "a pair of entities (e, e')"
      ],
      "types": [
        "entity pair"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'pair of entities (e, e')' refers to two specific entities in a knowledge graph that fulfill the conditions of an open path rule by satisfying the body of the rule through a sequence of predicate relationships.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "pair of entities (e, e')",
          "local_types": [
            "entity pair"
          ],
          "iri": "Entity-pair_of_entity__e__e__-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-4",
          "local_name": "(e', e)",
          "local_types": [
            "entity pair"
          ],
          "iri": "Entity-pair_of_entity__e__e__-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "A pair of entities (e, e')",
          "local_types": [
            "entity pair"
          ],
          "iri": "Entity-pair_of_entity__e__e__-Mention-3"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "A pair of entities (e, e')",
          "local_types": [
            "entity pair"
          ],
          "iri": "Entity-pair_of_entity__e__e__-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "a pair of entities (e, e')",
          "local_types": [
            "entity pair"
          ],
          "iri": "Entity-pair_of_entity__e__e__-Mention-5"
        }
      ],
      "relevance": 0.5087890625
    },
    "Entity-p1_k": {
      "node_id": "p1_k",
      "disambiguation_index": 0,
      "label": "P1_k",
      "aliases": [
        "P2_k",
        "P1_k"
      ],
      "types": [
        "data representation",
        "representation",
        "vector"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P1_k is a vector representation of the subject argument associated with the predicate P_k in the context of knowledge graph embeddings.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-2-Sentence-3",
          "local_name": "P1_k",
          "local_types": [
            "data representation",
            "representation",
            "vector"
          ],
          "iri": "Entity-p1_k-Mention-1"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-3",
          "local_name": "P2_k",
          "local_types": [
            "data representation",
            "representation",
            "vector"
          ],
          "iri": "Entity-p1_k-Mention-2"
        }
      ],
      "relevance": 0.5087890625
    },
    "Entity-element_with_value___car_of_v1__a__p1___a__p2___...__a__pm__": {
      "node_id": "element_with_value___car_of_v1__a__p1___a__p2___...__a__pm__",
      "disambiguation_index": 0,
      "label": "elements with value >= Car of V^1(A(P1)*A(P2)*...*A(Pm))",
      "aliases": [
        "elements with value >= Car of V^1(A(P1)*A(P2)*...*A(Pm))"
      ],
      "types": [
        "mathematical entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'elements with value >= Car of V^1(A(P1)*A(P2)*...*A(Pm))' refers to the distinct entities in a knowledge graph that satisfy a specific rule's head condition, determined by the cardinality threshold 'Car' applied to the result of the matrix product of adjacency matrices corresponding to predicates P1 through Pm.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "elements with value >= Car of V^1(A(P1)*A(P2)*...*A(Pm))",
          "local_types": [
            "mathematical entity"
          ],
          "iri": "Entity-element_with_value___car_of_v1__a__p1___a__p2___...__a__pm__-Mention-1"
        }
      ],
      "relevance": 0.5087890625
    },
    "Entity-graph_data": {
      "node_id": "graph_data",
      "disambiguation_index": 0,
      "label": "graph data",
      "aliases": [
        "graph data"
      ],
      "types": [
        "data",
        "data structure",
        "data type"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Graph data refers to a type of data that is structured in a graph format, consisting of nodes and edges that represent relationships between entities.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-3",
          "local_name": "graph data",
          "local_types": [
            "data",
            "data structure",
            "data type"
          ],
          "iri": "Entity-graph_data-Mention-1"
        }
      ],
      "relevance": 0.50830078125
    },
    "Entity-pn__zn-1__y_": {
      "node_id": "pn__zn-1__y_",
      "disambiguation_index": 0,
      "label": "Pn(zn-1, y)",
      "aliases": [
        "Pn(zn\u22121, y)",
        "Pn(zn-1, y)"
      ],
      "types": [
        "predicate",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pn(zn-1, y) represents a predicate in a closed-path rule that relates the variable zn-1 to the variable y, forming part of a logical expression used to infer relationships in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-4-Sentence-1",
          "local_name": "Pn(zn-1, y)",
          "local_types": [
            "predicate",
            "mathematical expression"
          ],
          "iri": "Entity-pn__zn-1__y_-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "Pn(zn\u22121, y)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-pn__zn-1__y_-Mention-2"
        }
      ],
      "relevance": 0.50830078125
    },
    "Entity-depth-first_questioning_strategy": {
      "node_id": "depth-first_questioning_strategy",
      "disambiguation_index": 0,
      "label": "depth-first questioning strategy",
      "aliases": [
        "depth-first questioning strategy"
      ],
      "types": [
        "questioning technique",
        "strategy",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The depth-first questioning strategy is a method for human interaction with knowledge graphs that sequentially asks dependent questions along a path, thereby reducing cognitive load by leveraging contextual connections between successive inquiries.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-7",
          "local_name": "depth-first questioning strategy",
          "local_types": [
            "questioning technique",
            "strategy",
            "methodology"
          ],
          "iri": "Entity-depth-first_questioning_strategy-Mention-1"
        }
      ],
      "relevance": 0.50830078125
    },
    "Entity-development": {
      "node_id": "development",
      "disambiguation_index": 0,
      "label": "development",
      "aliases": [
        "development"
      ],
      "types": [
        "process",
        "activity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'development' refers to the process of curating and enhancing the structure and quality of the YAGO2 knowledge graph, which results in a tendency towards higher cardinalities in the rules mined from it.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-6-Sentence-3",
          "local_name": "development",
          "local_types": [
            "process",
            "activity"
          ],
          "iri": "Entity-development-Mention-1"
        }
      ],
      "relevance": 0.50830078125
    },
    "Entity-a_formalisation_of_the_approach": {
      "node_id": "a_formalisation_of_the_approach",
      "disambiguation_index": 0,
      "label": "A formalisation of the approach",
      "aliases": [
        "A formalisation of the approach",
        "a formalisation of the approach"
      ],
      "types": [
        "approach",
        "formalisation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A formalisation of the approach refers to a structured representation of a method for defining SHACL shapes, although it lacks essential quality measures for effective large-scale shape mining.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-2",
          "local_name": "A formalisation of the approach",
          "local_types": [
            "approach",
            "formalisation"
          ],
          "iri": "Entity-a_formalisation_of_the_approach-Mention-1"
        }
      ],
      "relevance": 0.50830078125
    },
    "Entity-size_2lfe": {
      "node_id": "size_2lfe",
      "disambiguation_index": 0,
      "label": "size 2l|F||E|",
      "aliases": [
        "size 2l|F||E|"
      ],
      "types": [
        "complexity",
        "mathematical expression",
        "size"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'size 2l|F||E|' refers to the worst-case size of the set of sampled entities for a target predicate in a knowledge graph, which is determined by the number of facts F and entities E, scaled by a factor of 2 raised to the power of the maximum rule length l.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "size 2l|F||E|",
          "local_types": [
            "complexity",
            "mathematical expression",
            "size"
          ],
          "iri": "Entity-size_2lfe-Mention-1"
        }
      ],
      "relevance": 0.5078125
    },
    "Entity-v1__p1__p2_": {
      "node_id": "v1__p1__p2_",
      "disambiguation_index": 0,
      "label": "V^1(P1, P2)",
      "aliases": [
        "V^1(P1, P2)"
      ],
      "types": [
        "mathematical expression",
        "vector"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "V^1(P1, P2) refers to a vector that represents the count of distinct entities satisfying a specific path defined by the predicates P1 and P2 in the context of an adjacency matrix representation of a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-5",
          "local_name": "V^1(P1, P2)",
          "local_types": [
            "mathematical expression",
            "vector"
          ],
          "iri": "Entity-v1__p1__p2_-Mention-1"
        }
      ],
      "relevance": 0.5078125
    },
    "Entity-self-loop_link": {
      "node_id": "self-loop_link",
      "disambiguation_index": 0,
      "label": "self-loop links",
      "aliases": [
        "self-loop links"
      ],
      "types": [
        "graph theory",
        "link structure",
        "link"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Self-loop links are edges in a graph that connect a vertex to itself, often used in graph theory to represent relationships or properties of a single entity.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-3",
          "local_name": "self-loop links",
          "local_types": [
            "graph theory",
            "link structure",
            "link"
          ],
          "iri": "Entity-self-loop_link-Mention-1"
        }
      ],
      "relevance": 0.5078125
    },
    "Entity-editor": {
      "node_id": "editor",
      "disambiguation_index": 0,
      "label": "editor",
      "aliases": [
        "editor"
      ],
      "types": [
        "software",
        "tool"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'editor' refers to Schimatos, a software tool designed for manual knowledge graph completion, which utilizes the learned SHACL shapes for efficient and interpretable human validation.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-3",
          "local_name": "editor",
          "local_types": [
            "software",
            "tool"
          ],
          "iri": "Entity-editor-Mention-1"
        }
      ],
      "relevance": 0.5078125
    },
    "Entity-the_label_of_a_link_in_the_graph": {
      "node_id": "the_label_of_a_link_in_the_graph",
      "disambiguation_index": 0,
      "label": "the label of a link in the graph",
      "aliases": [
        "the label of a link in the graph"
      ],
      "types": [
        "label",
        "link",
        "graph"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The label of a link in the graph refers to a unary predicate that represents a self-loop in a knowledge graph, allowing it to act as a descriptor for the relationship between an entity and itself, similar to how binary predicates denote relationships between two distinct entities.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-4",
          "local_name": "the label of a link in the graph",
          "local_types": [
            "label",
            "link",
            "graph"
          ],
          "iri": "Entity-the_label_of_a_link_in_the_graph-Mention-1"
        }
      ],
      "relevance": 0.5078125
    },
    "Entity-a_class": {
      "node_id": "a_class",
      "disambiguation_index": 0,
      "label": "a class",
      "aliases": [
        "a class"
      ],
      "types": [
        "class"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'a class' refers to a type of entity that is represented as a unary predicate, which serves as a category or classification for instances within the graph.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-2",
          "local_name": "a class",
          "local_types": [
            "class"
          ],
          "iri": "Entity-a_class-Mention-1"
        }
      ],
      "relevance": 0.5078125
    },
    "Entity-k__ef": {
      "node_id": "k__ef",
      "disambiguation_index": 0,
      "label": "|K| = |E||F|",
      "aliases": [
        "|K| = |E||F|"
      ],
      "types": [
        "equation",
        "notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "|K| = |E||F| represents the size of a knowledge graph K, defined as the product of the number of entities |E| and the number of facts |F| within that graph.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-3",
          "local_name": "|K| = |E||F|",
          "local_types": [
            "equation",
            "notation"
          ],
          "iri": "Entity-k__ef-Mention-1"
        }
      ],
      "relevance": 0.50732421875
    },
    "Entity-the_body_of_the_rule": {
      "node_id": "the_body_of_the_rule",
      "disambiguation_index": 0,
      "label": "the body of the rule",
      "aliases": [
        "the body of the rule"
      ],
      "types": [
        "body"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The body of the rule refers to the predicate Pt in an inverse open path (IOP) rule, which serves as the foundational component that predicts the instances of the rule's head, represented by a sequence of predicates.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-4",
          "local_name": "the body of the rule",
          "local_types": [
            "body"
          ],
          "iri": "Entity-the_body_of_the_rule-Mention-1"
        }
      ],
      "relevance": 0.5068359375
    },
    "Entity-bounded_number_of_entity": {
      "node_id": "bounded_number_of_entity",
      "disambiguation_index": 0,
      "label": "bounded number of entities",
      "aliases": [
        "bounded number of entities"
      ],
      "types": [
        "entities"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'bounded number of entities' refers to a limited subset of entities within a knowledge graph that are specifically related to a target predicate, used in the context of sampling to facilitate the learning of shape patterns without overwhelming computational resources.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "bounded number of entities",
          "local_types": [
            "entities"
          ],
          "iri": "Entity-bounded_number_of_entity-Mention-1"
        }
      ],
      "relevance": 0.5068359375
    },
    "Entity-the_body_(1)": {
      "node_id": "the_body_(1)",
      "disambiguation_index": 1,
      "label": "the body",
      "aliases": [
        "the body"
      ],
      "types": [
        "body"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of SHACL trees, 'the body' refers to the predicate Pt that represents the conditions or facts in a knowledge graph that must be satisfied for the tree structure to hold true.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-6",
          "local_name": "the body",
          "local_types": [
            "body"
          ],
          "iri": "Entity-the_body_(1)-Mention-1"
        }
      ],
      "relevance": 0.5068359375
    },
    "Entity-headr__e__(1)": {
      "node_id": "headr__e__(1)",
      "disambiguation_index": 1,
      "label": "headr(e)",
      "aliases": [
        "headr(e)"
      ],
      "types": [
        "function"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'headr(e)' refers to the set of pairs of entities that satisfy the head of a tree-shaped rule r in a knowledge graph, indicating the existence of specific sequences of entities connected by predicates that are factual in the graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "headr(e)",
          "local_types": [
            "function"
          ],
          "iri": "Entity-headr__e__(1)-Mention-1"
        }
      ],
      "relevance": 0.5068359375
    },
    "Entity-the_subject_argument": {
      "node_id": "the_subject_argument",
      "disambiguation_index": 0,
      "label": "the subject argument",
      "aliases": [
        "the subject argument"
      ],
      "types": [
        "argument"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The subject argument refers to the variable in the context of the algorithm that is used to bind the left-hand tree in the derivation of SHACL shapes from annotated Inverse Open Path rules.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-2",
          "local_name": "the subject argument",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-the_subject_argument-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-3",
          "local_name": "the subject argument",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-the_subject_argument-Mention-2"
        }
      ],
      "relevance": 0.50634765625
    },
    "Entity-real_application": {
      "node_id": "real_application",
      "disambiguation_index": 0,
      "label": "real applications",
      "aliases": [
        "real applications"
      ],
      "types": [
        "application",
        "application context",
        "practical use case"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'real applications' refers to practical scenarios where the highest quality rules learned from knowledge graphs are retained and utilized for effective decision-making and actions.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-5-Sentence-4",
          "local_name": "real applications",
          "local_types": [
            "application",
            "application context",
            "practical use case"
          ],
          "iri": "Entity-real_application-Mention-1"
        }
      ],
      "relevance": 0.50634765625
    },
    "Entity-___e__e____body_r__e__e____": {
      "node_id": "___e__e____body_r__e__e____",
      "disambiguation_index": 0,
      "label": "|{ (e, e') : body_r(e, e') }|",
      "aliases": [
        "|{ (e, e') : body_r(e, e') }|"
      ],
      "types": [
        "set",
        "count"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term |{ (e, e') : body_r(e, e') }| refers to the set of entity pairs (e, e') that satisfy the body of a closed path rule r in a knowledge graph, which is used to quantify the support of the rule.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-9-Sentence-3",
          "local_name": "|{ (e, e') : body_r(e, e') }|",
          "local_types": [
            "set",
            "count"
          ],
          "iri": "Entity-___e__e____body_r__e__e____-Mention-1"
        }
      ],
      "relevance": 0.50634765625
    },
    "Entity-non-increasing_with_length": {
      "node_id": "non-increasing_with_length",
      "disambiguation_index": 0,
      "label": "non-increasing with length",
      "aliases": [
        "non-increasing with length"
      ],
      "types": [
        "property"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'non-increasing with length' refers to the property of the inverse open path support (IOPSC) of an IOP rule, which states that as the length of the rule increases by adding more head predicates, the IOPSC value does not increase and can only remain the same or decrease.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-1",
          "local_name": "non-increasing with length",
          "local_types": [
            "property"
          ],
          "iri": "Entity-non-increasing_with_length-Mention-1"
        }
      ],
      "relevance": 0.50634765625
    },
    "Entity-close_neighbour": {
      "node_id": "close_neighbour",
      "disambiguation_index": 0,
      "label": "close neighbours",
      "aliases": [
        "close neighbours"
      ],
      "types": [
        "concept",
        "relation",
        "neighbour",
        "entity relationship",
        "relationship"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'close neighbours' refers to entities that are not directly related to a target predicate but are adjacent or connected to entities that are directly related, thereby forming a network of related entities.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-6-Sentence-4",
          "local_name": "close neighbours",
          "local_types": [
            "concept",
            "relation",
            "neighbour",
            "entity relationship",
            "relationship"
          ],
          "iri": "Entity-close_neighbour-Mention-1"
        }
      ],
      "relevance": 0.505859375
    },
    "Entity-one_hundred_fact": {
      "node_id": "one_hundred_fact",
      "disambiguation_index": 0,
      "label": "one hundred facts",
      "aliases": [
        "one hundred facts"
      ],
      "types": [
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'one hundred facts' refers to a threshold used in the context of knowledge graph learning, specifically indicating unary predicates that must have at least one hundred associated facts to be considered for the learning process.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-3",
          "local_name": "one hundred facts",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-one_hundred_fact-Mention-1"
        }
      ],
      "relevance": 0.505859375
    },
    "Entity-chain_of_predicate": {
      "node_id": "chain_of_predicate",
      "disambiguation_index": 0,
      "label": "chain of predicates",
      "aliases": [
        "chain of predicates"
      ],
      "types": [
        "logical structure",
        "sequence"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'chain of predicates' refers to a sequence of predicates in a logical rule that connects entities through their arguments, forming a composite predicate that represents a path in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "chain of predicates",
          "local_types": [
            "logical structure",
            "sequence"
          ],
          "iri": "Entity-chain_of_predicate-Mention-1"
        }
      ],
      "relevance": 0.50537109375
    },
    "Entity-pi__e__e__": {
      "node_id": "pi__e__e__",
      "disambiguation_index": 0,
      "label": "Pi(e, e')",
      "aliases": [
        "Pi(e, e')",
        "Pi(e', e)"
      ],
      "types": [
        "function",
        "relation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Pi(e, e') refers to a relation in the knowledge graph that connects entities e and e' through a specific predicate, allowing for the identification of related entities during the sampling process in the context of learning shape constraints.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-7",
          "local_name": "Pi(e, e')",
          "local_types": [
            "relation"
          ],
          "iri": "Entity-pi__e__e__-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-7",
          "local_name": "Pi(e', e)",
          "local_types": [
            "relation"
          ],
          "iri": "Entity-pi__e__e__-Mention-2"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-10",
          "local_name": "Pi(e, e')",
          "local_types": [
            "function"
          ],
          "iri": "Entity-pi__e__e__-Mention-3"
        }
      ],
      "relevance": 0.50537109375
    },
    "Entity-plain_predicate": {
      "node_id": "plain_predicate",
      "disambiguation_index": 0,
      "label": "plain predicates",
      "aliases": [
        "plain predicates"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Plain predicates refer to the treatment of all properties in the SHACLearner framework as indistinguishable entities, encompassing both object and datatype properties without making any distinction between them.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "plain predicates",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-plain_predicate-Mention-1"
        }
      ],
      "relevance": 0.50537109375
    },
    "Entity-our_new_one": {
      "node_id": "our_new_one",
      "disambiguation_index": 0,
      "label": "our new ones",
      "aliases": [
        "our new ones"
      ],
      "types": [
        "new predicates",
        "predicate",
        "new facts",
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'our new ones' refers to the newly generated unary predicates and associated facts that are added to the knowledge graph to enhance its structure and facilitate the learning of shapes.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-4",
          "local_name": "our new ones",
          "local_types": [
            "new predicates",
            "predicate",
            "new facts",
            "fact"
          ],
          "iri": "Entity-our_new_one-Mention-1"
        }
      ],
      "relevance": 0.50537109375
    },
    "Entity-relation_p0": {
      "node_id": "relation_p0",
      "disambiguation_index": 0,
      "label": "relation P0",
      "aliases": [
        "relation P0"
      ],
      "types": [
        "relation",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "relation P0 refers to a specific predicate in a knowledge graph that establishes a relationship between two entities, e1 and e2, and is evaluated for its plausibility using a scoring function based on their embeddings.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-5",
          "local_name": "relation P0",
          "local_types": [
            "relation",
            "concept"
          ],
          "iri": "Entity-relation_p0-Mention-1"
        }
      ],
      "relevance": 0.50439453125
    },
    "Entity-fully_abstracted__entity-free__shape": {
      "node_id": "fully_abstracted__entity-free__shape",
      "disambiguation_index": 0,
      "label": "fully abstracted (entity-free) shapes",
      "aliases": [
        "fully abstracted (entity-free) shapes"
      ],
      "types": [
        "shape"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Fully abstracted (entity-free) shapes refer to generalized representations of structural patterns in knowledge graphs that do not rely on specific entity instances, allowing for the learning of shapes based solely on type and class information represented as unary predicates.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-1",
          "local_name": "fully abstracted (entity-free) shapes",
          "local_types": [
            "shape"
          ],
          "iri": "Entity-fully_abstracted__entity-free__shape-Mention-1"
        }
      ],
      "relevance": 0.50439453125
    },
    "Entity-type_or_class_declaration": {
      "node_id": "type_or_class_declaration",
      "disambiguation_index": 0,
      "label": "type or class declaration",
      "aliases": [
        "type or class declaration"
      ],
      "types": [
        "concept",
        "class",
        "type"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A type or class declaration refers to a formal specification in a knowledge graph that defines the category or classification of an entity, which can be utilized to trigger automated processes such as dynamic data entry forms for completing information related to that entity.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-4",
          "local_name": "type or class declaration",
          "local_types": [
            "concept",
            "class",
            "type"
          ],
          "iri": "Entity-type_or_class_declaration-Mention-1"
        }
      ],
      "relevance": 0.50439453125
    },
    "Entity-each_entity_e_i": {
      "node_id": "each_entity_e_i",
      "disambiguation_index": 0,
      "label": "each entity e_i",
      "aliases": [
        "each entity e_i"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "each entity e_i refers to an individual node or object within a knowledge graph that is represented as a vector in a high-dimensional space using the RESCAL embedding method.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "each entity e_i",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-each_entity_e_i-Mention-1"
        }
      ],
      "relevance": 0.50390625
    },
    "Entity-no_benchmark": {
      "node_id": "no_benchmark",
      "disambiguation_index": 0,
      "label": "no benchmark",
      "aliases": [
        "no benchmark"
      ],
      "types": [
        "benchmark"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'no benchmark' refers to the absence of a standard or reference point for comparison in the evaluation of the SHACLEARNER system, which is the first method designed to automatically learn shapes from large knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-3",
          "local_name": "no benchmark",
          "local_types": [
            "benchmark"
          ],
          "iri": "Entity-no_benchmark-Mention-1"
        }
      ],
      "relevance": 0.50390625
    },
    "Entity-the_average_number_of_branch_in_the_tree": {
      "node_id": "the_average_number_of_branch_in_the_tree",
      "disambiguation_index": 0,
      "label": "the average number of branches in the trees",
      "aliases": [
        "the average number of branches in the trees"
      ],
      "types": [
        "trees",
        "tree",
        "metric",
        "branches",
        "average"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The average number of branches in the trees refers to a metric that quantifies the mean count of branches present in tree structures derived from Inverse Open Path rules in knowledge graphs, indicating the complexity and connectivity of the relationships represented in those trees.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "the average number of branches in the trees",
          "local_types": [
            "trees",
            "tree",
            "metric",
            "branches",
            "average"
          ],
          "iri": "Entity-the_average_number_of_branch_in_the_tree-Mention-1"
        }
      ],
      "relevance": 0.50390625
    },
    "Entity-n": {
      "node_id": "n",
      "disambiguation_index": 0,
      "label": "n",
      "aliases": [
        "n"
      ],
      "types": [
        "dimension",
        "variable",
        "integer"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention 'n' refers to the integer representing the number of predicates in the body of an inverse open path (IOP) rule, which is defined as being greater than or equal to 2.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-2",
          "local_name": "n",
          "local_types": [
            "integer",
            "variable"
          ],
          "iri": "Entity-n-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-2",
          "local_name": "n",
          "local_types": [
            "dimension",
            "integer"
          ],
          "iri": "Entity-n-Mention-2"
        }
      ],
      "relevance": 0.50341796875
    },
    "Entity-shape_quality_measure": {
      "node_id": "shape_quality_measure",
      "disambiguation_index": 0,
      "label": "shape quality measures",
      "aliases": [
        "shape quality measures"
      ],
      "types": [
        "quality assessment",
        "evaluation metric",
        "measure",
        "quality measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Shape quality measures refer to the formal metrics used to assess the effectiveness and reliability of shapes derived from knowledge graphs, which are crucial for ensuring the quality of shape mining processes.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-2",
          "local_name": "shape quality measures",
          "local_types": [
            "quality assessment",
            "evaluation metric",
            "measure",
            "quality measure"
          ],
          "iri": "Entity-shape_quality_measure-Mention-1"
        }
      ],
      "relevance": 0.50341796875
    },
    "Entity-a_human_user": {
      "node_id": "a_human_user",
      "disambiguation_index": 0,
      "label": "a human user",
      "aliases": [
        "a human user"
      ],
      "types": [
        "user"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A human user refers to an individual who interacts with an interactive interface to create SHACL shapes based on outputs from a graph structure learner.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "a human user",
          "local_types": [
            "user"
          ],
          "iri": "Entity-a_human_user-Mention-1"
        }
      ],
      "relevance": 0.50341796875
    },
    "Entity-the_average_number_of_branch_in_the_mined_tree": {
      "node_id": "the_average_number_of_branch_in_the_mined_tree",
      "disambiguation_index": 0,
      "label": "the average number of branches in the mined trees",
      "aliases": [
        "the average number of branches in the mined trees"
      ],
      "types": [
        "tree",
        "tree structure",
        "statistic"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The average number of branches in the mined trees refers to a statistical measure indicating the mean count of branches present in tree structures derived from Inverse Open Path rules applied to knowledge graphs, expressed as a percentage of the total number of mined rules.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "the average number of branches in the mined trees",
          "local_types": [
            "tree",
            "tree structure",
            "statistic"
          ],
          "iri": "Entity-the_average_number_of_branch_in_the_mined_tree-Mention-1"
        }
      ],
      "relevance": 0.50341796875
    },
    "Entity-x": {
      "node_id": "x",
      "disambiguation_index": 0,
      "label": "x",
      "aliases": [
        "x"
      ],
      "types": [
        "mathematical entity",
        "variable",
        "symbol",
        "mathematical symbol",
        "entity variable",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of open path rules for knowledge graph completion, 'x' represents an entity variable that is used to denote an unspecified entity in the logical expression defining the relationship between other entities.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "x",
          "local_types": [
            "variable",
            "symbol"
          ],
          "iri": "Entity-x-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-3",
          "local_name": "x",
          "local_types": [
            "entity variable"
          ],
          "iri": "Entity-x-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-3",
          "local_name": "x",
          "local_types": [
            "variable",
            "symbol"
          ],
          "iri": "Entity-x-Mention-3"
        },
        {
          "reference": "Section-5-Paragraph-2-Sentence-2",
          "local_name": "x",
          "local_types": [
            "mathematical entity",
            "variable"
          ],
          "iri": "Entity-x-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "x",
          "local_types": [
            "variable",
            "mathematical notation"
          ],
          "iri": "Entity-x-Mention-5"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "x",
          "local_types": [
            "variable",
            "mathematical symbol"
          ],
          "iri": "Entity-x-Mention-6"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-2",
          "local_name": "x",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-x-Mention-7"
        }
      ],
      "relevance": 0.5029296875
    },
    "Entity-definition_6": {
      "node_id": "definition_6",
      "disambiguation_index": 0,
      "label": "Definition 6",
      "aliases": [
        "Definition 6"
      ],
      "types": [
        "reference",
        "concept",
        "definition"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Definition 6 defines a tree structure in the context of SHACL shapes, specifying the conditions under which pairs of entities satisfy the head and body of the tree, along with the metrics for tree support (Treesupp) and tree standard confidence (TreeSC).",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-1",
          "local_name": "Definition 6",
          "local_types": [
            "reference",
            "concept",
            "definition"
          ],
          "iri": "Entity-definition_6-Mention-1"
        }
      ],
      "relevance": 0.5029296875
    },
    "Entity-maximum_length_of_rule": {
      "node_id": "maximum_length_of_rule",
      "disambiguation_index": 0,
      "label": "maximum length of rules",
      "aliases": [
        "maximum length of rules"
      ],
      "types": [
        "parameter",
        "rule characteristic",
        "rules",
        "rule complexity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'maximum length of rules' refers to a parameter that determines the upper limit on the number of predicates that can be included in the rules generated by rule learners, which significantly affects the complexity and efficiency of discovering shapes in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-2",
          "local_name": "maximum length of rules",
          "local_types": [
            "parameter",
            "rule characteristic",
            "rules",
            "rule complexity"
          ],
          "iri": "Entity-maximum_length_of_rule-Mention-1"
        }
      ],
      "relevance": 0.5029296875
    },
    "Entity-google_search": {
      "node_id": "google_search",
      "disambiguation_index": 0,
      "label": "Google Search",
      "aliases": [
        "Google Search",
        "Google search"
      ],
      "types": [
        "service",
        "technology",
        "search engine",
        "web service",
        "product"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "Google Search is a web-based search engine developed by Google that allows users to search for information on the internet using keywords and phrases.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "Google Search",
          "local_types": [
            "technology",
            "search engine",
            "product"
          ],
          "iri": "Entity-google_search-Mention-1"
        },
        {
          "reference": "Section-1-Paragraph-1-Sentence-1",
          "local_name": "Google search",
          "local_types": [
            "web service",
            "search engine",
            "service"
          ],
          "iri": "Entity-google_search-Mention-2"
        }
      ],
      "relevance": 0.50244140625
    },
    "Entity-pt__e___e_": {
      "node_id": "pt__e___e_",
      "disambiguation_index": 0,
      "label": "Pt(e', e)",
      "aliases": [
        "Pt(e, e')",
        "Pt(e', e)"
      ],
      "types": [
        "function",
        "predicate",
        "relation",
        "mathematical expression",
        "fact"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Pt(e', e) refers to a predicate that indicates the existence of a fact in a knowledge graph where the entities e' and e are related according to the head of an open path rule.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-4-Sentence-4",
          "local_name": "Pt(e', e)",
          "local_types": [
            "function",
            "predicate",
            "fact"
          ],
          "iri": "Entity-pt__e___e_-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-4",
          "local_name": "Pt(e', e)",
          "local_types": [
            "function",
            "relation",
            "mathematical expression"
          ],
          "iri": "Entity-pt__e___e_-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "Pt(e', e)",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-pt__e___e_-Mention-3"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-5",
          "local_name": "Pt(e', e)",
          "local_types": [
            "function",
            "predicate",
            "relation"
          ],
          "iri": "Entity-pt__e___e_-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-7",
          "local_name": "Pt(e', e)",
          "local_types": [
            "function",
            "relation"
          ],
          "iri": "Entity-pt__e___e_-Mention-5"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-5",
          "local_name": "Pt(e, e')",
          "local_types": [
            "relation"
          ],
          "iri": "Entity-pt__e___e_-Mention-6"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-5",
          "local_name": "Pt(e', e)",
          "local_types": [
            "relation"
          ],
          "iri": "Entity-pt__e___e_-Mention-7"
        }
      ],
      "relevance": 0.50244140625
    },
    "Entity-matrix_a__pt_": {
      "node_id": "matrix_a__pt_",
      "disambiguation_index": 0,
      "label": "matrix A(Pt)",
      "aliases": [
        "matrix A(Pt)"
      ],
      "types": [
        "mathematical object",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "matrix A(Pt) is a binary adjacency matrix representing the relationships defined by the predicate Pt in a knowledge graph, where each element indicates the presence or absence of a connection between entities.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-1",
          "local_name": "matrix A(Pt)",
          "local_types": [
            "mathematical object",
            "data structure"
          ],
          "iri": "Entity-matrix_a__pt_-Mention-1"
        }
      ],
      "relevance": 0.50244140625
    },
    "Entity-successive_question": {
      "node_id": "successive_question",
      "disambiguation_index": 0,
      "label": "successive questions",
      "aliases": [
        "successive questions"
      ],
      "types": [
        "interrogative sequence",
        "question type",
        "question"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'successive questions' refers to a sequence of dependent inquiries in a knowledge graph completion process, where each question builds upon the answer to the previous one, thereby reducing cognitive load through contextual connections.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-7",
          "local_name": "successive questions",
          "local_types": [
            "interrogative sequence",
            "question type",
            "question"
          ],
          "iri": "Entity-successive_question-Mention-1"
        }
      ],
      "relevance": 0.50244140625
    },
    "Entity-any_predicate": {
      "node_id": "any_predicate",
      "disambiguation_index": 0,
      "label": "any predicate",
      "aliases": [
        "any predicate"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'any predicate' refers to a general category of predicates in knowledge graphs that can be associated with entities, indicating that there is a sparse relationship between entities and predicates within a specified distance in the graph.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "any predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-any_predicate-Mention-1"
        }
      ],
      "relevance": 0.50244140625
    },
    "Entity-deeper__more_complex_tree": {
      "node_id": "deeper__more_complex_tree",
      "disambiguation_index": 0,
      "label": "deeper, more complex tree",
      "aliases": [
        "deeper, more complex tree"
      ],
      "types": [
        "tree",
        "structure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'deeper, more complex tree' refers to a sophisticated hierarchical structure within knowledge graphs that encompasses multiple layers and branches, allowing for intricate relationships and dependencies among entities, which can be simplified into more intuitive sub-trees for better human interpretability.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-1",
          "local_name": "deeper, more complex tree",
          "local_types": [
            "tree",
            "structure"
          ],
          "iri": "Entity-deeper__more_complex_tree-Mention-1"
        }
      ],
      "relevance": 0.501953125
    },
    "Entity-the_object_argument_(1)": {
      "node_id": "the_object_argument_(1)",
      "disambiguation_index": 1,
      "label": "the object argument",
      "aliases": [
        "the object argument"
      ],
      "types": [
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The object argument refers to the variable in a binary predicate that connects to the head of the rule in its straight form, serving as a common link in the evaluation of knowledge graph rule-learning methods.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "the object argument",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-the_object_argument_(1)-Mention-1"
        }
      ],
      "relevance": 0.501953125
    },
    "Entity-open_variable": {
      "node_id": "open_variable",
      "disambiguation_index": 0,
      "label": "open variable",
      "aliases": [
        "open variables",
        "open variable"
      ],
      "types": [
        "mathematical entity",
        "variable type",
        "logical variable",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "An open variable refers to a variable in a logical rule that is not bound by any predicate terms, allowing it to represent any entity in the context of knowledge graph rules.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-3",
          "local_name": "open variable",
          "local_types": [
            "variable type",
            "logical variable",
            "variable"
          ],
          "iri": "Entity-open_variable-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-2",
          "local_name": "open variables",
          "local_types": [
            "mathematical entity",
            "variable"
          ],
          "iri": "Entity-open_variable-Mention-2"
        }
      ],
      "relevance": 0.50146484375
    },
    "Entity-low_quality": {
      "node_id": "low_quality",
      "disambiguation_index": 0,
      "label": "low quality",
      "aliases": [
        "low quality"
      ],
      "types": [
        "quality"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'low quality' refers to rules in the context of knowledge graph learning that do not meet the established minimum quality thresholds for confidence and head coverage, indicating they may be less reliable or informative.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-3",
          "local_name": "low quality",
          "local_types": [
            "quality"
          ],
          "iri": "Entity-low_quality-Mention-1"
        }
      ],
      "relevance": 0.50146484375
    },
    "Entity-treescnew___treescorig": {
      "node_id": "treescnew___treescorig",
      "disambiguation_index": 0,
      "label": "TreeSCnew >= TreeSCorig",
      "aliases": [
        "TreeSCnew >= TreeSCorig"
      ],
      "types": [
        "inequality",
        "metric comparison"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'TreeSCnew >= TreeSCorig' refers to the property that when a tree representing a shape in a knowledge graph is pruned, the resulting tree maintains or increases its confidence measure, indicating that the new tree (TreeSCnew) has a confidence level that is greater than or equal to the original tree's confidence level (TreeSCorig).",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "TreeSCnew >= TreeSCorig",
          "local_types": [
            "inequality",
            "metric comparison"
          ],
          "iri": "Entity-treescnew___treescorig-Mention-1"
        }
      ],
      "relevance": 0.50146484375
    },
    "Entity-body_of_r": {
      "node_id": "body_of_r",
      "disambiguation_index": 0,
      "label": "body of r",
      "aliases": [
        "body of r"
      ],
      "types": [
        "function",
        "body",
        "mathematical expression",
        "relation",
        "logical statement"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'body of r' refers to the set of conditions or predicates that must be satisfied by a pair of entities in a knowledge graph for a closed path rule r to hold true.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "body of r",
          "local_types": [
            "body"
          ],
          "iri": "Entity-body_of_r-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-4",
          "local_name": "body of r",
          "local_types": [
            "mathematical expression",
            "logical statement"
          ],
          "iri": "Entity-body_of_r-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-4",
          "local_name": "body of r",
          "local_types": [
            "function",
            "relation",
            "body",
            "mathematical expression"
          ],
          "iri": "Entity-body_of_r-Mention-3"
        }
      ],
      "relevance": 0.5009765625
    },
    "Entity-o__k_": {
      "node_id": "o__k_",
      "disambiguation_index": 0,
      "label": "O(|K|)",
      "aliases": [
        "O(|K|)"
      ],
      "types": [
        "notation",
        "mathematical expression",
        "complexity notation",
        "computational complexity"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "O(|K|) is a mathematical notation used to describe the upper bound of the complexity of an algorithm in terms of the size of a set K.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-3",
          "local_name": "O(|K|)",
          "local_types": [
            "notation",
            "mathematical expression",
            "complexity notation",
            "computational complexity"
          ],
          "iri": "Entity-o__k_-Mention-1"
        }
      ],
      "relevance": 0.5009765625
    },
    "Entity-3": {
      "node_id": "3",
      "disambiguation_index": 0,
      "label": "3",
      "aliases": [
        "3"
      ],
      "types": [
        "integer",
        "value"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '3' refers to the cardinality value used in the context of IOP rules, indicating one of the three distinct versions of the rule r, specifically the version associated with a minimum cardinality requirement of 3.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "3",
          "local_types": [
            "integer",
            "value"
          ],
          "iri": "Entity-3-Mention-1"
        }
      ],
      "relevance": 0.5009765625
    },
    "Entity-swapped": {
      "node_id": "swapped",
      "disambiguation_index": 0,
      "label": "swapped",
      "aliases": [
        "swapped"
      ],
      "types": [
        "action"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of inverse open path rules (IOP), 'swapped' refers to the interchange of the body and head predicates in a rule, which alters the direction of the logical relationship being expressed.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-6",
          "local_name": "swapped",
          "local_types": [
            "action"
          ],
          "iri": "Entity-swapped-Mention-1"
        }
      ],
      "relevance": 0.5009765625
    },
    "Entity-this_product": {
      "node_id": "this_product",
      "disambiguation_index": 0,
      "label": "this product",
      "aliases": [
        "this product"
      ],
      "types": [
        "product"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "This product refers to the vector V^1, which is obtained by summing each row of the matrix product A(P1)*A(P2)*...*A(Pm) to identify distinct entities satisfying a specific rule in the context of knowledge graph analysis.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-3",
          "local_name": "this product",
          "local_types": [
            "product"
          ],
          "iri": "Entity-this_product-Mention-1"
        }
      ],
      "relevance": 0.5009765625
    },
    "Entity-the_head_of_r": {
      "node_id": "the_head_of_r",
      "disambiguation_index": 0,
      "label": "the head of r",
      "aliases": [
        "the head of r"
      ],
      "types": [
        "relation head"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The head of r refers to the sequence of paths or branches in a tree structure that predicts instances of a target predicate in a knowledge graph, denoted as headr(e), which is satisfied by pairs of entities connected through specific predicates.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "the head of r",
          "local_types": [
            "relation head"
          ],
          "iri": "Entity-the_head_of_r-Mention-1"
        }
      ],
      "relevance": 0.5009765625
    },
    "Entity-the_common_variable": {
      "node_id": "the_common_variable",
      "disambiguation_index": 0,
      "label": "the common variable",
      "aliases": [
        "the common variable"
      ],
      "types": [
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The common variable refers to a shared element in a binary predicate that connects the head of the predicate in a straight form, facilitating the evaluation of rules in knowledge graph learning.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "the common variable",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-the_common_variable-Mention-1"
        }
      ],
      "relevance": 0.5009765625
    },
    "Entity-schema-based_constraint": {
      "node_id": "schema-based_constraint",
      "disambiguation_index": 0,
      "label": "schema-based constraints",
      "aliases": [
        "schema constraints",
        "schema-based constraints"
      ],
      "types": [
        "data integrity rule",
        "validation rule",
        "constraint",
        "database rule",
        "data structure",
        "database constraint"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Schema-based constraints are rules defined within a database schema that enforce specific conditions on the data, ensuring that certain attributes adhere to predefined requirements for data integrity.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-2",
          "local_name": "schema-based constraints",
          "local_types": [
            "constraint",
            "database rule"
          ],
          "iri": "Entity-schema-based_constraint-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-2-Sentence-4",
          "local_name": "schema constraints",
          "local_types": [
            "data integrity rule",
            "validation rule",
            "constraint",
            "data structure",
            "database constraint"
          ],
          "iri": "Entity-schema-based_constraint-Mention-2"
        }
      ],
      "relevance": 0.50048828125
    },
    "Entity-link": {
      "node_id": "link",
      "disambiguation_index": 0,
      "label": "link",
      "aliases": [
        "links",
        "link"
      ],
      "types": [
        "relationship",
        "connection"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, a 'link' refers to a fact represented as an RDF triple (e, P, e'), indicating a relationship between the subject entity e and the object entity e' through the binary predicate P.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "link",
          "local_types": [
            "relationship",
            "connection"
          ],
          "iri": "Entity-link-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-6",
          "local_name": "links",
          "local_types": [
            "connection",
            "relationship"
          ],
          "iri": "Entity-link-Mention-2"
        }
      ],
      "relevance": 0.50048828125
    },
    "Entity-vector_v2__pt_": {
      "node_id": "vector_v2__pt_",
      "disambiguation_index": 0,
      "label": "vector V^2(Pt)",
      "aliases": [
        "the vector V^2(Pt)",
        "vector V^2(Pt)",
        "V^2(Pt)"
      ],
      "types": [
        "vector",
        "mathematical object",
        "mathematical notation",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The vector V^2(Pt) is a mathematical representation obtained by summing the columns of the adjacency matrix A(Pt) and transposing the result, which indicates the count of distinct entities satisfying the predicate Pt in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-2",
          "local_name": "vector V^2(Pt)",
          "local_types": [
            "mathematical object",
            "vector"
          ],
          "iri": "Entity-vector_v2__pt_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-2",
          "local_name": "V^2(Pt)",
          "local_types": [
            "vector"
          ],
          "iri": "Entity-vector_v2__pt_-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "V^2(Pt)",
          "local_types": [
            "mathematical object",
            "mathematical notation",
            "vector"
          ],
          "iri": "Entity-vector_v2__pt_-Mention-3"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "V^2(Pt)",
          "local_types": [
            "vector",
            "mathematical object",
            "mathematical notation",
            "matrix"
          ],
          "iri": "Entity-vector_v2__pt_-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-2",
          "local_name": "the vector V^2(Pt)",
          "local_types": [
            "mathematical notation",
            "vector"
          ],
          "iri": "Entity-vector_v2__pt_-Mention-5"
        }
      ],
      "relevance": 0.50048828125
    },
    "Entity-quantified_uncertainty": {
      "node_id": "quantified_uncertainty",
      "disambiguation_index": 0,
      "label": "quantified uncertainty",
      "aliases": [
        "quantified uncertainty"
      ],
      "types": [
        "statistical concept",
        "measure",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Quantified uncertainty refers to a statistical measure that represents the degree of uncertainty associated with the selection of a candidate shape in the context of knowledge graph validation and interestingness assessment.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-1",
          "local_name": "quantified uncertainty",
          "local_types": [
            "statistical concept",
            "measure",
            "concept"
          ],
          "iri": "Entity-quantified_uncertainty-Mention-1"
        }
      ],
      "relevance": 0.50048828125
    },
    "Entity-a_tree_(1)": {
      "node_id": "a_tree_(1)",
      "disambiguation_index": 1,
      "label": "a tree",
      "aliases": [
        "a tree"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'a tree' refers to a complex shape structure that organizes entities and their relationships hierarchically, specifically illustrating the connections and associated facts related to a particular type of entity, such as a song.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-4",
          "local_name": "a tree",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-a_tree_(1)-Mention-1"
        }
      ],
      "relevance": 0.50048828125
    },
    "Entity-body_r__e__e__": {
      "node_id": "body_r__e__e__",
      "disambiguation_index": 0,
      "label": "body_r(e, e')",
      "aliases": [
        "body_r(e, e')"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical expression",
        "relation",
        "rule condition",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention 'body_r(e, e')' refers to the condition that a pair of entities (e, e') satisfies the body of a closed path rule in a knowledge graph, indicating that there exist intermediary entities that connect e and e' through a series of defined relationships.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-9-Sentence-3",
          "local_name": "body_r(e, e')",
          "local_types": [
            "function",
            "mathematical expression"
          ],
          "iri": "Entity-body_r__e__e__-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "body_r(e, e')",
          "local_types": [
            "function",
            "rule condition",
            "relation",
            "logical expression"
          ],
          "iri": "Entity-body_r__e__e__-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-2",
          "local_name": "body_r(e, e')",
          "local_types": [
            "function",
            "predicate",
            "relation",
            "rule condition",
            "logical expression"
          ],
          "iri": "Entity-body_r__e__e__-Mention-3"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-3",
          "local_name": "body_r(e, e')",
          "local_types": [
            "function",
            "relation",
            "mathematical expression"
          ],
          "iri": "Entity-body_r__e__e__-Mention-4"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "body_r(e, e')",
          "local_types": [
            "relation"
          ],
          "iri": "Entity-body_r__e__e__-Mention-5"
        }
      ],
      "relevance": 0.5
    },
    "Entity-the_set_of_sampled_entity_for_a_target_predicate": {
      "node_id": "the_set_of_sampled_entity_for_a_target_predicate",
      "disambiguation_index": 0,
      "label": "the set of sampled entities for a target predicate",
      "aliases": [
        "the set of sampled entities for a target predicate"
      ],
      "types": [
        "set",
        "entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The set of sampled entities for a target predicate refers to a collection of entities extracted from a knowledge graph that are specifically related to a given predicate, used to facilitate the learning of shape patterns in the graph.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "the set of sampled entities for a target predicate",
          "local_types": [
            "set",
            "entity"
          ],
          "iri": "Entity-the_set_of_sampled_entity_for_a_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.5
    },
    "Entity-branch_cardinality": {
      "node_id": "branch_cardinality",
      "disambiguation_index": 0,
      "label": "branch cardinality",
      "aliases": [
        "branch cardinality",
        "the branch cardinality"
      ],
      "types": [
        "mathematical concept",
        "cardinality",
        "tree property",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Branch cardinality refers to the number of connections or relationships that a specific node in a tree structure can have, indicating how many branches extend from that node in the context of tree shapes derived from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-2",
          "local_name": "branch cardinality",
          "local_types": [
            "mathematical concept",
            "cardinality",
            "tree property",
            "metric"
          ],
          "iri": "Entity-branch_cardinality-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-2",
          "local_name": "the branch cardinality",
          "local_types": [
            "cardinality"
          ],
          "iri": "Entity-branch_cardinality-Mention-2"
        }
      ],
      "relevance": 0.5
    },
    "Entity-the_head_of_the_rule": {
      "node_id": "the_head_of_the_rule",
      "disambiguation_index": 0,
      "label": "the head of the rule",
      "aliases": [
        "the head of the rule"
      ],
      "types": [
        "rule",
        "head"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The head of the rule refers to the sequence of predicates in an inverse open path (IOP) rule that predicts an instance based on the body of the rule, representing the conclusion or outcome of the logical expression.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-4",
          "local_name": "the head of the rule",
          "local_types": [
            "rule",
            "head"
          ],
          "iri": "Entity-the_head_of_the_rule-Mention-1"
        }
      ],
      "relevance": 0.499755859375
    },
    "Entity-valid_tree": {
      "node_id": "valid_tree",
      "disambiguation_index": 0,
      "label": "valid tree",
      "aliases": [
        "valid tree"
      ],
      "types": [
        "tree"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A valid tree is a structured representation in the context of SHACL shapes that maintains its integrity and quality measures, such as TreeSC, even after pruning operations, ensuring that it continues to satisfy the constraints and relationships defined within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "valid tree",
          "local_types": [
            "tree"
          ],
          "iri": "Entity-valid_tree-Mention-1"
        }
      ],
      "relevance": 0.499755859375
    },
    "Entity-association_rule_mining": {
      "node_id": "association_rule_mining",
      "disambiguation_index": 0,
      "label": "association rule mining",
      "aliases": [
        "association rule mining"
      ],
      "types": [
        "analytical method",
        "method",
        "methodology",
        "mining",
        "data mining technique",
        "data mining"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Association rule mining is a data mining technique used to discover interesting relationships and patterns among a set of items in large datasets.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-3",
          "local_name": "association rule mining",
          "local_types": [
            "analytical method",
            "method",
            "methodology",
            "mining",
            "data mining technique",
            "data mining"
          ],
          "iri": "Entity-association_rule_mining-Mention-1"
        }
      ],
      "relevance": 0.49951171875
    },
    "Entity-embeddings__": {
      "node_id": "embeddings__",
      "disambiguation_index": 0,
      "label": "Embeddings()",
      "aliases": [
        "Embeddings()"
      ],
      "types": [
        "function",
        "method"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Embeddings() refers to a function that computes predicate embeddings and subject/object argument embeddings for predicates in a sampled knowledge graph using the RESCAL model.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-1",
          "local_name": "Embeddings()",
          "local_types": [
            "function",
            "method"
          ],
          "iri": "Entity-embeddings__-Mention-1"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-1",
          "local_name": "Embeddings()",
          "local_types": [
            "function",
            "method"
          ],
          "iri": "Entity-embeddings__-Mention-2"
        }
      ],
      "relevance": 0.49951171875
    },
    "Entity-v2__pt____0_1_2__t": {
      "node_id": "v2__pt____0_1_2__t",
      "disambiguation_index": 0,
      "label": "V^2(Pt) = [0 1 2]^T",
      "aliases": [
        "V^2(Pt) = [0 1 2]^T"
      ],
      "types": [
        "vector"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "V^2(Pt) = [0 1 2]^T is a vector representing the count of distinct entities that satisfy the second argument of the body of a rule in a knowledge graph, derived from the column sums of the adjacency matrix A(Pt).",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "V^2(Pt) = [0 1 2]^T",
          "local_types": [
            "vector"
          ],
          "iri": "Entity-v2__pt____0_1_2__t-Mention-1"
        }
      ],
      "relevance": 0.49951171875
    },
    "Entity-element_with_a_value___car": {
      "node_id": "element_with_a_value___car",
      "disambiguation_index": 0,
      "label": "elements with a value >= Car",
      "aliases": [
        "elements with a value >= Car",
        "Each element with value >= Car"
      ],
      "types": [
        "value",
        "elements",
        "element"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'elements with a value >= Car' refers to the distinct entities in a knowledge graph that satisfy a specific rule by having a count of connections or relationships that meets or exceeds a defined threshold, denoted as 'Car', during the computation of matrix products representing those relationships.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-2",
          "local_name": "elements with a value >= Car",
          "local_types": [
            "value",
            "elements",
            "element"
          ],
          "iri": "Entity-element_with_a_value___car-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-4",
          "local_name": "Each element with value >= Car",
          "local_types": [
            "element",
            "value"
          ],
          "iri": "Entity-element_with_a_value___car-Mention-2"
        }
      ],
      "relevance": 0.49951171875
    },
    "Entity-quality_measure": {
      "node_id": "quality_measure",
      "disambiguation_index": 0,
      "label": "quality measures",
      "aliases": [
        "quality measures"
      ],
      "types": [
        "performance indicator",
        "assessment method",
        "assessment tool",
        "evaluation criteria",
        "evaluation criterion",
        "measure",
        "measurement",
        "quality measure",
        "evaluation metric",
        "performance measure",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Quality measures refer to formal metrics used to assess the confidence and generality of shapes learned from knowledge graphs, indicating their effectiveness and reliability.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-3",
          "local_name": "quality measures",
          "local_types": [
            "evaluation criterion",
            "measure",
            "metric"
          ],
          "iri": "Entity-quality_measure-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-5",
          "local_name": "quality measures",
          "local_types": [
            "evaluation criteria",
            "measure",
            "measurement",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-quality_measure-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-3-Sentence-1",
          "local_name": "quality measures",
          "local_types": [
            "evaluation metric",
            "quality measure",
            "assessment tool"
          ],
          "iri": "Entity-quality_measure-Mention-3"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-1",
          "local_name": "quality measures",
          "local_types": [
            "evaluation metric",
            "performance indicator",
            "performance measure"
          ],
          "iri": "Entity-quality_measure-Mention-4"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-7",
          "local_name": "quality measures",
          "local_types": [
            "evaluation criteria",
            "evaluation metric",
            "assessment method"
          ],
          "iri": "Entity-quality_measure-Mention-5"
        },
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "quality measures",
          "local_types": [
            "evaluation metric",
            "measure",
            "performance measure"
          ],
          "iri": "Entity-quality_measure-Mention-6"
        }
      ],
      "relevance": 0.4990234375
    },
    "Entity-learning_path": {
      "node_id": "learning_path",
      "disambiguation_index": 0,
      "label": "learning paths",
      "aliases": [
        "learning paths"
      ],
      "types": [
        "educational concept",
        "methodology",
        "concept",
        "shape"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Learning paths are structured sequences of educational experiences or activities designed to guide learners through a specific learning process or to achieve particular learning outcomes.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-1",
          "local_name": "learning paths",
          "local_types": [
            "educational concept",
            "methodology",
            "concept",
            "shape"
          ],
          "iri": "Entity-learning_path-Mention-1"
        }
      ],
      "relevance": 0.4990234375
    },
    "Entity-head_of_r": {
      "node_id": "head_of_r",
      "disambiguation_index": 0,
      "label": "head of r",
      "aliases": [
        "the head of r",
        "head of r"
      ],
      "types": [
        "rule component",
        "function",
        "concept",
        "relation",
        "rule conclusion",
        "logical expression",
        "head",
        "mathematical notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'head of r' refers to the predicate Pt(e, e') in a closed path rule, which is the conclusion or output of the rule that can be inferred from the satisfied conditions of the rule's body in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-4",
          "local_name": "head of r",
          "local_types": [
            "head"
          ],
          "iri": "Entity-head_of_r-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-4",
          "local_name": "head of r",
          "local_types": [
            "rule component",
            "rule conclusion",
            "logical expression",
            "concept"
          ],
          "iri": "Entity-head_of_r-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "head of r",
          "local_types": [
            "relation",
            "concept"
          ],
          "iri": "Entity-head_of_r-Mention-3"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "head of r",
          "local_types": [
            "function",
            "mathematical notation",
            "head"
          ],
          "iri": "Entity-head_of_r-Mention-4"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-4",
          "local_name": "the head of r",
          "local_types": [
            "head",
            "relation"
          ],
          "iri": "Entity-head_of_r-Mention-5"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-4",
          "local_name": "the head of r",
          "local_types": [
            "relation"
          ],
          "iri": "Entity-head_of_r-Mention-6"
        }
      ],
      "relevance": 0.4990234375
    },
    "Entity-p1__...__pm": {
      "node_id": "p1__...__pm",
      "disambiguation_index": 0,
      "label": "P1, ..., Pm",
      "aliases": [
        "{P1, ..., Pm}",
        "P1, ..., Pm"
      ],
      "types": [
        "set notation",
        "predicate",
        "element of set",
        "predicates"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P1, ..., Pm refers to the set of all predicates in the set F of a knowledge graph K, which is used to define relationships between entities in the graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "P1, ..., Pm",
          "local_types": [
            "predicate",
            "element of set"
          ],
          "iri": "Entity-p1__...__pm-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "{P1, ..., Pm}",
          "local_types": [
            "set notation",
            "predicates"
          ],
          "iri": "Entity-p1__...__pm-Mention-2"
        }
      ],
      "relevance": 0.4990234375
    },
    "Entity-five_hundred_poker_hand": {
      "node_id": "five_hundred_poker_hand",
      "disambiguation_index": 0,
      "label": "five hundred poker hands",
      "aliases": [
        "five hundred poker hands"
      ],
      "types": [
        "poker hand",
        "data set",
        "game"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Five hundred poker hands refers to a dataset of randomly generated poker hands, each consisting of five playing cards, used to create a small but complete knowledge graph for evaluating the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-8",
          "local_name": "five hundred poker hands",
          "local_types": [
            "poker hand",
            "data set",
            "game"
          ],
          "iri": "Entity-five_hundred_poker_hand-Mention-1"
        }
      ],
      "relevance": 0.4990234375
    },
    "Entity-new_unary_fact": {
      "node_id": "new_unary_fact",
      "disambiguation_index": 0,
      "label": "new unary facts",
      "aliases": [
        "new unary facts"
      ],
      "types": [
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "New unary facts refer to the additional facts generated from newly created unary predicates in a knowledge graph, which represent type or class membership of entities without instantiating them, thereby enhancing the graph's structure and facilitating the learning of abstract shapes.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-5",
          "local_name": "new unary facts",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-new_unary_fact-Mention-1"
        }
      ],
      "relevance": 0.4990234375
    },
    "Entity-google": {
      "node_id": "google",
      "disambiguation_index": 0,
      "label": "Google",
      "aliases": [
        "Google"
      ],
      "types": [
        "brand",
        "company",
        "search engine",
        "technology"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "Google is a multinational technology company known for its search engine, online advertising services, and various internet-related products and services.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-1",
          "local_name": "Google",
          "local_types": [
            "brand",
            "company",
            "search engine",
            "technology"
          ],
          "iri": "Entity-google-Mention-1"
        }
      ],
      "relevance": 0.498779296875
    },
    "Entity-citizenof__x__z1_": {
      "node_id": "citizenof__x__z1_",
      "disambiguation_index": 0,
      "label": "citizenOf(x, z1)",
      "aliases": [
        "citizenOf(x, z1)"
      ],
      "types": [
        "function",
        "predicate",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'citizenOf(x, z1)' refers to a logical expression indicating that the entity 'x' is a citizen of the entity 'z1', as part of a tree structure used in the context of SHACL shapes for knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "citizenOf(x, z1)",
          "local_types": [
            "function",
            "logical expression"
          ],
          "iri": "Entity-citizenof__x__z1_-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "citizenOf(x, z1)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-citizenof__x__z1_-Mention-2"
        }
      ],
      "relevance": 0.498779296875
    },
    "Entity-concept": {
      "node_id": "concept",
      "disambiguation_index": 0,
      "label": "concept",
      "aliases": [
        "concept"
      ],
      "types": [
        "entity",
        "abstract idea"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of real-world knowledge graphs, 'concept' refers to a class or type membership that can be represented as entity instances within binary facts.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-1",
          "local_name": "concept",
          "local_types": [
            "entity",
            "abstract idea"
          ],
          "iri": "Entity-concept-Mention-1"
        }
      ],
      "relevance": 0.498779296875
    },
    "Entity-rule_learner": {
      "node_id": "rule_learner",
      "disambiguation_index": 0,
      "label": "rule learners",
      "aliases": [
        "rule learners"
      ],
      "types": [
        "machine learning model",
        "algorithm",
        "machine learning"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Rule learners are algorithms used in machine learning that identify patterns and relationships in data by generating rules based on the input features.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-2",
          "local_name": "rule learners",
          "local_types": [
            "machine learning model",
            "algorithm",
            "machine learning"
          ],
          "iri": "Entity-rule_learner-Mention-1"
        }
      ],
      "relevance": 0.498779296875
    },
    "Entity-nativelanguage__x__z3__(1)": {
      "node_id": "nativelanguage__x__z3__(1)",
      "disambiguation_index": 1,
      "label": "nativeLanguage(x, z3)",
      "aliases": [
        "nativeLanguage(x, z3)"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'nativeLanguage(x, z3)' refers to a predicate in the context of a Shapes Constraint Language (SHACL) shape, indicating that for each entity x that is classified as a human, there exists a language z3 that is the native language of x.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "nativeLanguage(x, z3)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-nativelanguage__x__z3__(1)-Mention-1"
        }
      ],
      "relevance": 0.498779296875
    },
    "Entity-each_row_of_this_product": {
      "node_id": "each_row_of_this_product",
      "disambiguation_index": 0,
      "label": "each row of this product",
      "aliases": [
        "each row of this product"
      ],
      "types": [
        "row"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Each row of this product refers to the resulting vector obtained by summing the rows of the matrix product A(P1)*A(P2)*...*A(Pm), which indicates the count of distinct entities satisfying the head of a rule in the context of knowledge graph analysis.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-3",
          "local_name": "each row of this product",
          "local_types": [
            "row"
          ],
          "iri": "Entity-each_row_of_this_product-Mention-1"
        }
      ],
      "relevance": 0.49853515625
    },
    "Entity-ontology": {
      "node_id": "ontology",
      "disambiguation_index": 0,
      "label": "ontologies",
      "aliases": [
        "ontologies"
      ],
      "types": [
        "formal structure",
        "knowledge representation",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Ontologies are formal representations of a set of concepts within a domain and the relationships between those concepts, used for knowledge representation and data structuring.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-4-Sentence-1",
          "local_name": "ontologies",
          "local_types": [
            "formal structure",
            "knowledge representation",
            "data structure"
          ],
          "iri": "Entity-ontology-Mention-1"
        }
      ],
      "relevance": 0.49853515625
    },
    "Entity-the_next_step": {
      "node_id": "the_next_step",
      "disambiguation_index": 0,
      "label": "the next step",
      "aliases": [
        "the next step"
      ],
      "types": [
        "step"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The next step refers to the subsequent phase in the process where the final assessment of an Inverse Open Path (IOP) rule is conducted.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-5-Sentence-2",
          "local_name": "the next step",
          "local_types": [
            "step"
          ],
          "iri": "Entity-the_next_step-Mention-1"
        }
      ],
      "relevance": 0.498291015625
    },
    "Entity-self-loops": {
      "node_id": "self-loops",
      "disambiguation_index": 0,
      "label": "self-loops",
      "aliases": [
        "self-loops"
      ],
      "types": [
        "graph theory",
        "graph concept",
        "graph structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Self-loops are edges in a graph that connect a vertex to itself, representing a relationship or connection that originates and terminates at the same node.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-4",
          "local_name": "self-loops",
          "local_types": [
            "graph theory",
            "graph concept",
            "graph structure"
          ],
          "iri": "Entity-self-loops-Mention-1"
        }
      ],
      "relevance": 0.498046875
    },
    "Entity-_0_1_0__1_0_1__0_0_0_": {
      "node_id": "_0_1_0__1_0_1__0_0_0_",
      "disambiguation_index": 0,
      "label": "[0 1 0; 1 0 1; 0 0 0]",
      "aliases": [
        "[0 1 0; 1 0 1; 0 0 0]",
        "[0 0 0; 0 0 0; 0 1 1]",
        "[0 1 0; 0 0 0; 0 1 1]"
      ],
      "types": [
        "array",
        "matrix representation",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity '[0 1 0; 1 0 1; 0 0 0]' refers to an adjacency matrix representation of a predicate in a knowledge graph, indicating the presence of relationships between entities.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-4-Sentence-2",
          "local_name": "[0 1 0; 1 0 1; 0 0 0]",
          "local_types": [
            "matrix representation",
            "data structure"
          ],
          "iri": "Entity-_0_1_0__1_0_1__0_0_0_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-4-Sentence-3",
          "local_name": "[0 1 0; 0 0 0; 0 1 1]",
          "local_types": [
            "array",
            "matrix representation",
            "data structure"
          ],
          "iri": "Entity-_0_1_0__1_0_1__0_0_0_-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-4-Sentence-4",
          "local_name": "[0 0 0; 0 0 0; 0 1 1]",
          "local_types": [
            "array",
            "data structure"
          ],
          "iri": "Entity-_0_1_0__1_0_1__0_0_0_-Mention-3"
        }
      ],
      "relevance": 0.498046875
    },
    "Entity-w3c": {
      "node_id": "w3c",
      "disambiguation_index": 0,
      "label": "W3C",
      "aliases": [
        "W3C"
      ],
      "types": [
        "standards body",
        "organization",
        "organisation"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "W3C is the World Wide Web Consortium, an international community that develops open standards to ensure the long-term growth of the Web.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-3",
          "local_name": "W3C",
          "local_types": [
            "standards body",
            "organization"
          ],
          "iri": "Entity-w3c-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-1",
          "local_name": "W3C",
          "local_types": [
            "standards body",
            "organization",
            "organisation"
          ],
          "iri": "Entity-w3c-Mention-2"
        },
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "W3C",
          "local_types": [
            "standards body",
            "organization",
            "organisation"
          ],
          "iri": "Entity-w3c-Mention-3"
        }
      ],
      "relevance": 0.497802734375
    },
    "Entity-a__p1___a__p2_": {
      "node_id": "a__p1___a__p2_",
      "disambiguation_index": 0,
      "label": "A(P1)*A(P2)",
      "aliases": [
        "A(P1)*A(P2)"
      ],
      "types": [
        "mathematical expression",
        "matrix operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A(P1)*A(P2) refers to the matrix product of the adjacency matrices corresponding to predicates P1 and P2 in a knowledge graph, which is used to compute the relationships between entities based on the connections defined by these predicates.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-5",
          "local_name": "A(P1)*A(P2)",
          "local_types": [
            "mathematical expression",
            "matrix operation"
          ],
          "iri": "Entity-a__p1___a__p2_-Mention-1"
        }
      ],
      "relevance": 0.497802734375
    },
    "Entity-the_number_of_entity_that_satisfy_the_body_of_the_rule": {
      "node_id": "the_number_of_entity_that_satisfy_the_body_of_the_rule",
      "disambiguation_index": 0,
      "label": "The number of entities that satisfy the body of the rule",
      "aliases": [
        "The number of entities that satisfy the body of the rule",
        "the number of entities that satisfy the body of the rule"
      ],
      "types": [
        "count",
        "concept",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The number of entities that satisfy the body of the rule refers to the count of distinct entities e' in a knowledge graph that can be reached through a specified predicate Pt from another entity e''.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-5-Sentence-2",
          "local_name": "The number of entities that satisfy the body of the rule",
          "local_types": [
            "count",
            "concept",
            "rule"
          ],
          "iri": "Entity-the_number_of_entity_that_satisfy_the_body_of_the_rule-Mention-1"
        }
      ],
      "relevance": 0.497802734375
    },
    "Entity-a_sequence_of_predicate": {
      "node_id": "a_sequence_of_predicate",
      "disambiguation_index": 0,
      "label": "a sequence of predicates",
      "aliases": [
        "a sequence of predicates"
      ],
      "types": [
        "sequence",
        "predicates"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A sequence of predicates refers to a linear arrangement of logical statements that define relationships between entities in a knowledge graph, where each predicate is connected by intermediate variables and the sequence begins and ends with open variables.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-2",
          "local_name": "a sequence of predicates",
          "local_types": [
            "sequence",
            "predicates"
          ],
          "iri": "Entity-a_sequence_of_predicate-Mention-1"
        }
      ],
      "relevance": 0.49755859375
    },
    "Entity-count": {
      "node_id": "count",
      "disambiguation_index": 0,
      "label": "count",
      "aliases": [
        "count"
      ],
      "types": [
        "numerical value",
        "quantity",
        "numerical quantity",
        "concept",
        "measurement",
        "mathematical concept",
        "mathematical operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'count' refers to the numerical value representing the number of distinct entities that satisfy a specific condition in a rule within the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-5-Sentence-2",
          "local_name": "count",
          "local_types": [
            "numerical value",
            "concept",
            "mathematical operation"
          ],
          "iri": "Entity-count-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-3",
          "local_name": "count",
          "local_types": [
            "mathematical operation",
            "numerical value"
          ],
          "iri": "Entity-count-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "count",
          "local_types": [
            "numerical value",
            "mathematical concept"
          ],
          "iri": "Entity-count-Mention-3"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-3",
          "local_name": "count",
          "local_types": [
            "numerical value",
            "mathematical concept"
          ],
          "iri": "Entity-count-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "count",
          "local_types": [
            "numerical value",
            "mathematical concept"
          ],
          "iri": "Entity-count-Mention-5"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-4",
          "local_name": "count",
          "local_types": [
            "numerical quantity",
            "mathematical operation"
          ],
          "iri": "Entity-count-Mention-6"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-6",
          "local_name": "count",
          "local_types": [
            "numerical value",
            "measurement"
          ],
          "iri": "Entity-count-Mention-7"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-7",
          "local_name": "count",
          "local_types": [
            "numerical value",
            "quantity"
          ],
          "iri": "Entity-count-Mention-8"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-4",
          "local_name": "count",
          "local_types": [
            "numerical value",
            "quantity"
          ],
          "iri": "Entity-count-Mention-9"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-5",
          "local_name": "count",
          "local_types": [
            "numerical value",
            "quantity"
          ],
          "iri": "Entity-count-Mention-10"
        }
      ],
      "relevance": 0.497314453125
    },
    "Entity-the_confidence_of_the_second": {
      "node_id": "the_confidence_of_the_second",
      "disambiguation_index": 0,
      "label": "the confidence of the second",
      "aliases": [
        "the confidence of the second"
      ],
      "types": [
        "confidence"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The confidence of the second refers to a measure of reliability or certainty associated with a specific rule in knowledge graph learning, indicating that the second rule has a higher likelihood of being true based on the data compared to a more constraining third rule.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-5",
          "local_name": "the confidence of the second",
          "local_types": [
            "confidence"
          ],
          "iri": "Entity-the_confidence_of_the_second-Mention-1"
        }
      ],
      "relevance": 0.497314453125
    },
    "Entity-e4": {
      "node_id": "e4",
      "disambiguation_index": 0,
      "label": "e4",
      "aliases": [
        "e4"
      ],
      "types": [
        "entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'e4' refers to one of the three entities that can instantiate the variable 'z0' in the context of an inverse open path rule, satisfying the predicates P1 and the conjunction of P2 and P3.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "e4",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e4-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-4",
          "local_name": "e4",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-e4-Mention-2"
        }
      ],
      "relevance": 0.4970703125
    },
    "Entity-instance_of_the_rule_head": {
      "node_id": "instance_of_the_rule_head",
      "disambiguation_index": 0,
      "label": "instance of the rule head",
      "aliases": [
        "instance of the rule head"
      ],
      "types": [
        "instance",
        "head",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "An 'instance of the rule head' refers to a specific fact in a knowledge graph that satisfies the head of a closed path rule, indicating that the fact can be inferred from the rule's body.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "instance of the rule head",
          "local_types": [
            "instance",
            "head",
            "rule"
          ],
          "iri": "Entity-instance_of_the_rule_head-Mention-1"
        }
      ],
      "relevance": 0.496826171875
    },
    "Entity-__e__e__such_that_pt__e___e___": {
      "node_id": "__e__e__such_that_pt__e___e___",
      "disambiguation_index": 0,
      "label": "|{e : \u2203e' such that Pt(e', e)}|",
      "aliases": [
        "|{e : \u2203e' such that Pt(e', e)}|"
      ],
      "types": [
        "set notation",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention refers to the set of entities e for which there exists at least one entity e' such that the predicate Pt(e', e) holds true in the context of open path rules in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-5-Sentence-4",
          "local_name": "|{e : \u2203e' such that Pt(e', e)}|",
          "local_types": [
            "set notation",
            "mathematical expression"
          ],
          "iri": "Entity-__e__e__such_that_pt__e___e___-Mention-1"
        }
      ],
      "relevance": 0.496826171875
    },
    "Entity-subject_and_object_argument_embeddings": {
      "node_id": "subject_and_object_argument_embeddings",
      "disambiguation_index": 0,
      "label": "subject and object argument embeddings",
      "aliases": [
        "argument embeddings",
        "subject and object argument embeddings"
      ],
      "types": [
        "vector representation",
        "data representation",
        "embedding",
        "semantic representation",
        "representation",
        "argument"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Subject and object argument embeddings refer to the vector representations of the entities that serve as subjects and objects in the context of predicates within a knowledge graph, computed by aggregating the embeddings of those entities.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-1",
          "local_name": "subject and object argument embeddings",
          "local_types": [
            "embedding",
            "representation",
            "argument"
          ],
          "iri": "Entity-subject_and_object_argument_embeddings-Mention-1"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-1",
          "local_name": "argument embeddings",
          "local_types": [
            "data representation",
            "embedding",
            "representation",
            "argument"
          ],
          "iri": "Entity-subject_and_object_argument_embeddings-Mention-2"
        },
        {
          "reference": "Section-10-Paragraph-3-Sentence-1",
          "local_name": "argument embeddings",
          "local_types": [
            "vector representation",
            "semantic representation"
          ],
          "iri": "Entity-subject_and_object_argument_embeddings-Mention-3"
        }
      ],
      "relevance": 0.496826171875
    },
    "Entity-the_quality_of_a_tree": {
      "node_id": "the_quality_of_a_tree",
      "disambiguation_index": 0,
      "label": "the quality of a tree",
      "aliases": [
        "the quality of a tree"
      ],
      "types": [
        "tree",
        "quality measure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The quality of a tree refers to the evaluation metrics used to determine the effectiveness and reliability of tree structures derived from Inverse Open Path rules in knowledge graphs, specifically focusing on measures such as tree support and tree standard confidence.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-7",
          "local_name": "the quality of a tree",
          "local_types": [
            "tree",
            "quality measure"
          ],
          "iri": "Entity-the_quality_of_a_tree-Mention-1"
        }
      ],
      "relevance": 0.49658203125
    },
    "Entity-unary_fact": {
      "node_id": "unary_fact",
      "disambiguation_index": 0,
      "label": "unary facts",
      "aliases": [
        "unary facts"
      ],
      "types": [
        "data",
        "information"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Unary facts refer to the newly generated data entries in a knowledge graph that are derived from unary predicates, representing class or type information associated with entities.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-5",
          "local_name": "unary facts",
          "local_types": [
            "data",
            "information"
          ],
          "iri": "Entity-unary_fact-Mention-1"
        }
      ],
      "relevance": 0.49609375
    },
    "Entity-low_threshold": {
      "node_id": "low_threshold",
      "disambiguation_index": 0,
      "label": "low threshold",
      "aliases": [
        "low threshold",
        "a low threshold"
      ],
      "types": [
        "threshold"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'low threshold' refers to a minimal quality standard set during the learning process of rules from knowledge graphs, allowing for the inclusion of lower quality rules that can be refined later through stricter criteria.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-4",
          "local_name": "low threshold",
          "local_types": [
            "threshold"
          ],
          "iri": "Entity-low_threshold-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-2-Sentence-4",
          "local_name": "a low threshold",
          "local_types": [
            "threshold"
          ],
          "iri": "Entity-low_threshold-Mention-2"
        }
      ],
      "relevance": 0.49609375
    },
    "Entity-tree__treesupp__treesc": {
      "node_id": "tree__treesupp__treesc",
      "disambiguation_index": 0,
      "label": "Tree: Treesupp, TreeSC",
      "aliases": [
        "Tree: Treesupp, TreeSC"
      ],
      "types": [
        "tree",
        "concept",
        "data structure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Tree: Treesupp, TreeSC refers to a formal definition of tree structures in the context of knowledge graphs, specifically describing the tree's head and body in terms of entity pairs and their relationships, along with metrics for tree support and tree standard confidence used to evaluate the quality of these structures.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-1",
          "local_name": "Tree: Treesupp, TreeSC",
          "local_types": [
            "tree",
            "concept",
            "data structure"
          ],
          "iri": "Entity-tree__treesupp__treesc-Mention-1"
        }
      ],
      "relevance": 0.49609375
    },
    "Entity-iophc__r1_": {
      "node_id": "iophc__r1_",
      "disambiguation_index": 0,
      "label": "IOPHC(r1)",
      "aliases": [
        "IOPHC(r1)"
      ],
      "types": [
        "function",
        "mathematical expression",
        "definition",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "IOPHC(r1) refers to the quality measure of the IOP rule r1, defined as the ratio of the number of entities satisfying the head of the rule to the number of entities satisfying the body of the rule, specifically calculated as 2/2 in this context.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-3",
          "local_name": "IOPHC(r1)",
          "local_types": [
            "function",
            "mathematical expression",
            "definition",
            "metric"
          ],
          "iri": "Entity-iophc__r1_-Mention-1"
        }
      ],
      "relevance": 0.49560546875
    },
    "Entity-two_target_predicate": {
      "node_id": "two_target_predicate",
      "disambiguation_index": 0,
      "label": "two target predicates",
      "aliases": [
        "two target predicates"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'two target predicates' refers to the dual representation of each binary predicate in a knowledge graph, where it is considered in both its original form and its reverse form for the purpose of rule learning.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "two target predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-two_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.49560546875
    },
    "Entity-predicate_less_relevant_to_the_target_predicate": {
      "node_id": "predicate_less_relevant_to_the_target_predicate",
      "disambiguation_index": 0,
      "label": "Predicates less relevant to the target predicate",
      "aliases": [
        "Predicates less relevant to the target predicate",
        "predicates less relevant to the target predicate"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Predicates less relevant to the target predicate refer to those predicates in a knowledge graph that are excluded during the sampling process to focus on the most pertinent relationships for learning shape patterns, thereby reducing the complexity of the data being analyzed.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-5",
          "local_name": "Predicates less relevant to the target predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-predicate_less_relevant_to_the_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.495361328125
    },
    "Entity-similar_argument_embeddings": {
      "node_id": "similar_argument_embeddings",
      "disambiguation_index": 0,
      "label": "similar argument embeddings",
      "aliases": [
        "similar argument embeddings"
      ],
      "types": [
        "embedding"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Similar argument embeddings refer to the embedding representations of predicate arguments in a rule that share the same variable, indicating that these embeddings should exhibit a high degree of similarity to facilitate the formation of valid logical connections in the context of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-3-Sentence-1",
          "local_name": "similar argument embeddings",
          "local_types": [
            "embedding"
          ],
          "iri": "Entity-similar_argument_embeddings-Mention-1"
        }
      ],
      "relevance": 0.4951171875
    },
    "Entity-function_a": {
      "node_id": "function_a",
      "disambiguation_index": 0,
      "label": "function A",
      "aliases": [
        "function A",
        "the function A"
      ],
      "types": [
        "function",
        "mathematical function"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Function A is a mathematical function that defines a set of square n x n adjacency matrices representing a knowledge graph K, where each matrix A(Pk) indicates the presence or absence of facts related to predicates Pk between entities in the graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-2",
          "local_name": "function A",
          "local_types": [
            "function",
            "mathematical function"
          ],
          "iri": "Entity-function_a-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-2",
          "local_name": "the function A",
          "local_types": [
            "function"
          ],
          "iri": "Entity-function_a-Mention-2"
        }
      ],
      "relevance": 0.49462890625
    },
    "Entity-tree_support": {
      "node_id": "tree_support",
      "disambiguation_index": 0,
      "label": "tree support",
      "aliases": [
        "tree support"
      ],
      "types": [
        "graph theory",
        "statistical measure",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Tree support refers to a statistical measure used to quantify the number of entity pairs in a knowledge graph that satisfy the head of a tree-shaped rule, indicating the relevance and applicability of the rule within the graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-5",
          "local_name": "tree support",
          "local_types": [
            "graph theory",
            "statistical measure",
            "metric"
          ],
          "iri": "Entity-tree_support-Mention-1"
        }
      ],
      "relevance": 0.494384765625
    },
    "Entity-google_search_engine": {
      "node_id": "google_search_engine",
      "disambiguation_index": 0,
      "label": "Google Search engine",
      "aliases": [
        "Google Search engine"
      ],
      "types": [
        "software",
        "search engine"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Google Search engine is a web-based search engine developed by Google that allows users to search for information across the internet using keywords and phrases.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-1",
          "local_name": "Google Search engine",
          "local_types": [
            "software",
            "search engine"
          ],
          "iri": "Entity-google_search_engine-Mention-1"
        }
      ],
      "relevance": 0.494140625
    },
    "Entity-rdf_graph": {
      "node_id": "rdf_graph",
      "disambiguation_index": 0,
      "label": "RDF graph",
      "aliases": [
        "RDF graph"
      ],
      "types": [
        "graph structure",
        "data format",
        "data structure",
        "graph"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An RDF graph is a data structure that represents information in the form of triples, consisting of subject-predicate-object relationships, and is used to model knowledge in a way that is compatible with the Resource Description Framework (RDF).",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "RDF graph",
          "local_types": [
            "graph structure",
            "data format",
            "data structure",
            "graph"
          ],
          "iri": "Entity-rdf_graph-Mention-1"
        }
      ],
      "relevance": 0.494140625
    },
    "Entity-first_argument": {
      "node_id": "first_argument",
      "disambiguation_index": 0,
      "label": "first argument",
      "aliases": [
        "first argument"
      ],
      "types": [
        "logical argument",
        "mathematical term"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'first argument' refers to the initial entity in the head of a logical rule within the context of predicate logic, specifically indicating the entity that is being evaluated or satisfied by the rule in the learning process of SHACL shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "first argument",
          "local_types": [
            "logical argument",
            "mathematical term"
          ],
          "iri": "Entity-first_argument-Mention-1"
        }
      ],
      "relevance": 0.494140625
    },
    "Entity-a_matrix_of_binary_value": {
      "node_id": "a_matrix_of_binary_value",
      "disambiguation_index": 0,
      "label": "a matrix of binary values",
      "aliases": [
        "a matrix of binary values"
      ],
      "types": [
        "matrix",
        "data structure"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A matrix of binary values is a square n x n representation of a knowledge graph where each element indicates the presence (1) or absence (0) of a relationship between pairs of entities based on specific predicates.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-4",
          "local_name": "a matrix of binary values",
          "local_types": [
            "matrix",
            "data structure"
          ],
          "iri": "Entity-a_matrix_of_binary_value-Mention-1"
        }
      ],
      "relevance": 0.493896484375
    },
    "Entity-the_count_of_non-zero_element_in_that_vector": {
      "node_id": "the_count_of_non-zero_element_in_that_vector",
      "disambiguation_index": 0,
      "label": "the count of non-zero elements in that vector",
      "aliases": [
        "the count of non-zero elements in that vector"
      ],
      "types": [
        "count",
        "non-zero element",
        "vector"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The count of non-zero elements in that vector refers to the number of distinct entities that satisfy a given condition in the context of matrix computations for evaluating rules in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-4",
          "local_name": "the count of non-zero elements in that vector",
          "local_types": [
            "count",
            "non-zero element",
            "vector"
          ],
          "iri": "Entity-the_count_of_non-zero_element_in_that_vector-Mention-1"
        }
      ],
      "relevance": 0.493896484375
    },
    "Entity-non-zero_element_of_v2__pt_": {
      "node_id": "non-zero_element_of_v2__pt_",
      "disambiguation_index": 0,
      "label": "non-zero elements of V^2(Pt)",
      "aliases": [
        "non-zero elements of V^2(Pt)"
      ],
      "types": [
        "mathematical entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The non-zero elements of V^2(Pt) represent the distinct entities in a knowledge graph that satisfy the second argument of a specific rule's body, as determined by the summation of columns in the adjacency matrix corresponding to the predicate Pt.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "non-zero elements of V^2(Pt)",
          "local_types": [
            "mathematical entity"
          ],
          "iri": "Entity-non-zero_element_of_v2__pt_-Mention-1"
        }
      ],
      "relevance": 0.493896484375
    },
    "Entity-the_evolving_nature_of_human_knowledge": {
      "node_id": "the_evolving_nature_of_human_knowledge",
      "disambiguation_index": 0,
      "label": "the evolving nature of human knowledge",
      "aliases": [
        "the evolving nature of human knowledge"
      ],
      "types": [
        "concept",
        "human knowledge"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The evolving nature of human knowledge refers to the dynamic and often incomplete state of knowledge that is influenced by cultural biases, resource limitations, and the continuous development of information over time, which affects the construction and accuracy of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-3",
          "local_name": "the evolving nature of human knowledge",
          "local_types": [
            "concept",
            "human knowledge"
          ],
          "iri": "Entity-the_evolving_nature_of_human_knowledge-Mention-1"
        }
      ],
      "relevance": 0.49365234375
    },
    "Entity-frequent_pattern": {
      "node_id": "frequent_pattern",
      "disambiguation_index": 0,
      "label": "frequent patterns",
      "aliases": [
        "frequent patterns"
      ],
      "types": [
        "concept",
        "statistical concept",
        "data pattern",
        "analysis concept",
        "pattern"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Frequent patterns are recurring sequences or structures in data that are identified through statistical analysis, often used in data mining to uncover relationships and insights.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-6",
          "local_name": "frequent patterns",
          "local_types": [
            "statistical concept",
            "pattern",
            "data pattern",
            "concept"
          ],
          "iri": "Entity-frequent_pattern-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-2-Sentence-1",
          "local_name": "frequent patterns",
          "local_types": [
            "data pattern",
            "analysis concept"
          ],
          "iri": "Entity-frequent_pattern-Mention-2"
        }
      ],
      "relevance": 0.493408203125
    },
    "Entity-body_r": {
      "node_id": "body_r",
      "disambiguation_index": 0,
      "label": "body_r",
      "aliases": [
        "body_r"
      ],
      "types": [
        "function",
        "mathematical function",
        "relation",
        "variable",
        "expression",
        "mathematical construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "body_r refers to a condition or set of criteria that must be satisfied by a pair of entities in a knowledge graph, where the satisfaction is determined by the existence of a sequence of relationships (predicates) connecting the entities.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "body_r",
          "local_types": [
            "function",
            "relation"
          ],
          "iri": "Entity-body_r-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-6",
          "local_name": "body_r",
          "local_types": [
            "relation",
            "function"
          ],
          "iri": "Entity-body_r-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-2",
          "local_name": "body_r",
          "local_types": [
            "function",
            "relation",
            "variable",
            "expression",
            "mathematical construct"
          ],
          "iri": "Entity-body_r-Mention-3"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "body_r",
          "local_types": [
            "function",
            "mathematical function",
            "relation"
          ],
          "iri": "Entity-body_r-Mention-4"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-2",
          "local_name": "body_r",
          "local_types": [
            "function",
            "relation"
          ],
          "iri": "Entity-body_r-Mention-5"
        }
      ],
      "relevance": 0.493408203125
    },
    "Entity-fact_satisfying_the_head_of_the_rule": {
      "node_id": "fact_satisfying_the_head_of_the_rule",
      "disambiguation_index": 0,
      "label": "facts satisfying the head of the rule",
      "aliases": [
        "facts satisfying the head of the rule",
        "the facts satisfying the head of the rule"
      ],
      "types": [
        "fact",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The phrase 'facts satisfying the head of the rule' refers to the specific instances in a knowledge graph that fulfill the conditions defined by the head of a closed path rule, indicating that these instances can be inferred from the relationships established in the rule's body.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-4",
          "local_name": "facts satisfying the head of the rule",
          "local_types": [
            "fact",
            "rule"
          ],
          "iri": "Entity-fact_satisfying_the_head_of_the_rule-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-4",
          "local_name": "the facts satisfying the head of the rule",
          "local_types": [
            "fact",
            "rule"
          ],
          "iri": "Entity-fact_satisfying_the_head_of_the_rule-Mention-2"
        }
      ],
      "relevance": 0.493408203125
    },
    "Entity-ej": {
      "node_id": "ej",
      "disambiguation_index": 0,
      "label": "ej",
      "aliases": [
        "ej"
      ],
      "types": [
        "variable",
        "element"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'ej' refers to an entity in a knowledge graph, represented as part of the adjacency matrix that indicates the presence or absence of a relationship defined by a predicate Pk.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "ej",
          "local_types": [
            "variable",
            "element"
          ],
          "iri": "Entity-ej-Mention-1"
        }
      ],
      "relevance": 0.493408203125
    },
    "Entity-representation": {
      "node_id": "representation",
      "disambiguation_index": 0,
      "label": "representation",
      "aliases": [
        "representation"
      ],
      "types": [
        "concept",
        "framework"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'representation' refers to an abstract model used to distinctly categorize and differentiate entities and predicates within knowledge graphs, facilitating the learning of shapes and constraints.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-2",
          "local_name": "representation",
          "local_types": [
            "concept",
            "framework"
          ],
          "iri": "Entity-representation-Mention-1"
        }
      ],
      "relevance": 0.493408203125
    },
    "Entity-three_version_of_r": {
      "node_id": "three_version_of_r",
      "disambiguation_index": 0,
      "label": "three versions of r",
      "aliases": [
        "three versions of r"
      ],
      "types": [
        "version",
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'three versions of r' refers to three distinct instances of an IOP rule, denoted as r1, r2, and r3, each corresponding to different cardinality values (Car) of 1, 2, and 3, respectively.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "three versions of r",
          "local_types": [
            "version",
            "variable"
          ],
          "iri": "Entity-three_version_of_r-Mention-1"
        }
      ],
      "relevance": 0.493408203125
    },
    "Entity-the_proportion_of_rule_consequent_instance": {
      "node_id": "the_proportion_of_rule_consequent_instance",
      "disambiguation_index": 0,
      "label": "the proportion of rule consequent instances",
      "aliases": [
        "the proportion of rule consequent instances"
      ],
      "types": [
        "concept",
        "proportion"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The proportion of rule consequent instances refers to the measure of how many instances of the outcomes predicted by a rule are supported or justified by the instances of the target predicates in a knowledge graph, reflecting the relevance of the rule to the specific target.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "the proportion of rule consequent instances",
          "local_types": [
            "concept",
            "proportion"
          ],
          "iri": "Entity-the_proportion_of_rule_consequent_instance-Mention-1"
        }
      ],
      "relevance": 0.493408203125
    },
    "Entity-simplicity_and_easier_interpretation": {
      "node_id": "simplicity_and_easier_interpretation",
      "disambiguation_index": 0,
      "label": "simplicity and easier interpretation",
      "aliases": [
        "simplicity and easier interpretation"
      ],
      "types": [
        "simplicity",
        "interpretation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'simplicity and easier interpretation' refers to the potential enhancement of tree shapes in knowledge graphs by unifying variables in predicates across multiple branches to make the structures more comprehensible and less complex.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "simplicity and easier interpretation",
          "local_types": [
            "simplicity",
            "interpretation"
          ],
          "iri": "Entity-simplicity_and_easier_interpretation-Mention-1"
        }
      ],
      "relevance": 0.4931640625
    },
    "Entity-__e__e__such_that_body_r__e__e____": {
      "node_id": "__e__e__such_that_body_r__e__e____",
      "disambiguation_index": 0,
      "label": "|{e : \u2203e' such that body_r(e, e')}|",
      "aliases": [
        "|{e : \u2203e' such that body_r(e, e')}|"
      ],
      "types": [
        "mathematical notation",
        "mathematical expression",
        "set notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention '|{e : \u2203e' such that body_r(e, e')|' refers to the set of entities 'e' for which there exists at least one entity 'e'' that satisfies the condition defined by the body of an open path rule in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-5-Sentence-3",
          "local_name": "|{e : \u2203e' such that body_r(e, e')}|",
          "local_types": [
            "mathematical notation",
            "mathematical expression",
            "set notation"
          ],
          "iri": "Entity-__e__e__such_that_body_r__e__e____-Mention-1"
        }
      ],
      "relevance": 0.492919921875
    },
    "Entity-the_pair__e__e___satisfying_the_head": {
      "node_id": "the_pair__e__e___satisfying_the_head",
      "disambiguation_index": 0,
      "label": "the pairs (e, e') satisfying the head",
      "aliases": [
        "the pairs (e, e') satisfying the head"
      ],
      "types": [
        "pair"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The pairs (e, e') satisfying the head refer to the distinct entities e that are connected to other entities e' through a specified path of predicates in a knowledge graph, as determined by the matrix product of their adjacency matrices.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-1",
          "local_name": "the pairs (e, e') satisfying the head",
          "local_types": [
            "pair"
          ],
          "iri": "Entity-the_pair__e__e___satisfying_the_head-Mention-1"
        }
      ],
      "relevance": 0.49267578125
    },
    "Entity-quality_decrease": {
      "node_id": "quality_decrease",
      "disambiguation_index": 0,
      "label": "quality decreases",
      "aliases": [
        "quality decreases"
      ],
      "types": [
        "quality",
        "decrease"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'quality decreases' refers to the phenomenon where the effectiveness or performance of learned rules diminishes, particularly in the context of SHACLEARNER's pruning methods, which result in a higher number of undiscovered lower-quality rules as the quality of the rules declines.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-5-Sentence-2",
          "local_name": "quality decreases",
          "local_types": [
            "quality",
            "decrease"
          ],
          "iri": "Entity-quality_decrease-Mention-1"
        }
      ],
      "relevance": 0.49267578125
    },
    "Entity-treescnew": {
      "node_id": "treescnew",
      "disambiguation_index": 0,
      "label": "TreeSCnew",
      "aliases": [
        "TreeSCnew"
      ],
      "types": [
        "confidence",
        "tree score",
        "confidence score",
        "metric",
        "evaluation measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "TreeSCnew refers to the updated confidence score of a pruned tree shape in a knowledge graph, which remains valid and is guaranteed to be greater than or equal to the original confidence score TreeSCorig.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "TreeSCnew",
          "local_types": [
            "confidence",
            "tree score",
            "confidence score",
            "metric",
            "evaluation measure"
          ],
          "iri": "Entity-treescnew-Mention-1"
        }
      ],
      "relevance": 0.492431640625
    },
    "Entity-head_coverage": {
      "node_id": "head_coverage",
      "disambiguation_index": 0,
      "label": "head coverage",
      "aliases": [
        "head coverage"
      ],
      "types": [
        "statistical measure",
        "measure",
        "coverage metric",
        "evaluation metric",
        "metric",
        "rule learning",
        "evaluation measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Head coverage is a statistical measure used in rule learning that quantifies the proportion of facts satisfying the head of a rule that can be inferred by satisfying the rule's body.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-6-Sentence-2",
          "local_name": "head coverage",
          "local_types": [
            "measure",
            "evaluation metric",
            "metric",
            "rule learning",
            "evaluation measure"
          ],
          "iri": "Entity-head_coverage-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-1",
          "local_name": "head coverage",
          "local_types": [
            "rule learning",
            "measure",
            "evaluation measure",
            "metric"
          ],
          "iri": "Entity-head_coverage-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-1",
          "local_name": "head coverage",
          "local_types": [
            "statistical measure",
            "measure",
            "coverage metric",
            "metric",
            "rule learning",
            "evaluation measure"
          ],
          "iri": "Entity-head_coverage-Mention-3"
        }
      ],
      "relevance": 0.4921875
    },
    "Entity-many_fact": {
      "node_id": "many_fact",
      "disambiguation_index": 0,
      "label": "many facts",
      "aliases": [
        "many facts"
      ],
      "types": [
        "facts"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'many facts' refers to a significant number of instances or relationships within a knowledge graph that can be explained or inferred by a rule, indicating the rule's generalization capability and its effectiveness in capturing the underlying structure of the graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-6-Sentence-1",
          "local_name": "many facts",
          "local_types": [
            "facts"
          ],
          "iri": "Entity-many_fact-Mention-1"
        }
      ],
      "relevance": 0.4921875
    },
    "Entity-integer_parameter_of_rescal": {
      "node_id": "integer_parameter_of_rescal",
      "disambiguation_index": 0,
      "label": "integer parameter of RESCAL",
      "aliases": [
        "integer parameter of RESCAL"
      ],
      "types": [
        "parameter"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'integer parameter of RESCAL' refers to the variable 'd' that determines the dimensionality of the vector space used in the RESCAL model for embedding entities and predicates in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "integer parameter of RESCAL",
          "local_types": [
            "parameter"
          ],
          "iri": "Entity-integer_parameter_of_rescal-Mention-1"
        }
      ],
      "relevance": 0.491455078125
    },
    "Entity-this_work": {
      "node_id": "this_work",
      "disambiguation_index": 0,
      "label": "this work",
      "aliases": [
        "this work"
      ],
      "types": [
        "work"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'this work' refers to the common representation framework developed in the paper that distinguishes entities and predicates for the purpose of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-2",
          "local_name": "this work",
          "local_types": [
            "work"
          ],
          "iri": "Entity-this_work-Mention-1"
        }
      ],
      "relevance": 0.491455078125
    },
    "Entity-associated_fact": {
      "node_id": "associated_fact",
      "disambiguation_index": 0,
      "label": "associated facts",
      "aliases": [
        "associated facts",
        "the associated facts"
      ],
      "types": [
        "fact",
        "facts"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'associated facts' refers to the expected additional information or attributes related to an entity of type 'song' within a knowledge graph, which are implied by the structure of the graph and the relationships defined by the shapes learned from the data.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-5",
          "local_name": "associated facts",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-associated_fact-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-5",
          "local_name": "the associated facts",
          "local_types": [
            "facts"
          ],
          "iri": "Entity-associated_fact-Mention-2"
        }
      ],
      "relevance": 0.490966796875
    },
    "Entity-neighbour": {
      "node_id": "neighbour",
      "disambiguation_index": 0,
      "label": "neighbours",
      "aliases": [
        "neighbours"
      ],
      "types": [
        "concept",
        "object"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'neighbours' refers to entities that are closely associated or directly related to a given entity, often sharing connections or relationships within the graph structure.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-6-Sentence-4",
          "local_name": "neighbours",
          "local_types": [
            "concept",
            "object"
          ],
          "iri": "Entity-neighbour-Mention-1"
        }
      ],
      "relevance": 0.490966796875
    },
    "Entity-standardised_measure": {
      "node_id": "standardised_measure",
      "disambiguation_index": 0,
      "label": "standardised measures",
      "aliases": [
        "standardised measures"
      ],
      "types": [
        "measure"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Standardised measures refer to quantitative metrics, specifically standard confidence and head coverage, used to evaluate and compare the quality of rules in knowledge graph rule learning by assessing their generalization and explanatory power.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-1",
          "local_name": "standardised measures",
          "local_types": [
            "measure"
          ],
          "iri": "Entity-standardised_measure-Mention-1"
        }
      ],
      "relevance": 0.490966796875
    },
    "Entity-a__pt___1__3_": {
      "node_id": "a__pt___1__3_",
      "disambiguation_index": 0,
      "label": "A(Pt)[1, 3]",
      "aliases": [
        "A(Pt)[1, 3]"
      ],
      "types": [
        "mathematical notation",
        "matrix element"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A(Pt)[1, 3] refers to the specific element in the adjacency matrix representation of a knowledge graph, indicating the presence of a relationship defined by the predicate Pt between the entities indexed at 1 and 3, where the value is 1 if the relationship exists and 0 otherwise.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "A(Pt)[1, 3]",
          "local_types": [
            "mathematical notation",
            "matrix element"
          ],
          "iri": "Entity-a__pt___1__3_-Mention-1"
        }
      ],
      "relevance": 0.490966796875
    },
    "Entity-number_of_missing_rule": {
      "node_id": "number_of_missing_rule",
      "disambiguation_index": 0,
      "label": "number of missing rules",
      "aliases": [
        "number of missing rules"
      ],
      "types": [
        "quantity",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The 'number of missing rules' refers to the count of shape rules that are not discovered by the SHACLEARNER system due to its pruning methods, particularly those rules of lower quality that are excluded to enhance computational performance.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-5-Sentence-2",
          "local_name": "number of missing rules",
          "local_types": [
            "quantity",
            "rule"
          ],
          "iri": "Entity-number_of_missing_rule-Mention-1"
        }
      ],
      "relevance": 0.490966796875
    },
    "Entity-d": {
      "node_id": "d",
      "disambiguation_index": 0,
      "label": "d",
      "aliases": [
        "d"
      ],
      "types": [
        "parameter",
        "integer parameter",
        "integer"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'd' refers to an integer parameter that defines the dimensionality of the vector space used in the RESCAL embedding method for representing entities and predicates in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "d",
          "local_types": [
            "parameter",
            "integer parameter",
            "integer"
          ],
          "iri": "Entity-d-Mention-1"
        }
      ],
      "relevance": 0.49072265625
    },
    "Entity-the_performance_of_the_shaclearner__-sh_": {
      "node_id": "the_performance_of_the_shaclearner__-sh_",
      "disambiguation_index": 0,
      "label": "the performance of the SHACLEARNER (-S+H)",
      "aliases": [
        "the performance of the SHACLEARNER (-S+H)"
      ],
      "types": [
        "performance",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The performance of the SHACLEARNER (-S+H) refers to the evaluation of a variant of the SHACLEARNER algorithm that operates without sampling but incorporates heuristic pruning, resulting in a 10% reduction in the number of learned rules compared to the ideal rule learner.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "the performance of the SHACLEARNER (-S+H)",
          "local_types": [
            "performance",
            "algorithm"
          ],
          "iri": "Entity-the_performance_of_the_shaclearner__-sh_-Mention-1"
        }
      ],
      "relevance": 0.49072265625
    },
    "Entity-property": {
      "node_id": "property",
      "disambiguation_index": 0,
      "label": "property",
      "aliases": [
        "property",
        "properties"
      ],
      "types": [
        "characteristic",
        "property",
        "relation",
        "data structure",
        "concept",
        "attributes",
        "attribute",
        "characteristics"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, the term 'property' refers to a binary predicate that establishes a relationship between two entities in an RDF triple, indicating how the subject entity is related to the object entity.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "property",
          "local_types": [
            "attribute",
            "relation"
          ],
          "iri": "Entity-property-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-2-Sentence-2",
          "local_name": "properties",
          "local_types": [
            "characteristics",
            "attributes"
          ],
          "iri": "Entity-property-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-6-Sentence-1",
          "local_name": "properties",
          "local_types": [
            "property",
            "attribute",
            "concept"
          ],
          "iri": "Entity-property-Mention-3"
        },
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "properties",
          "local_types": [
            "concept",
            "data structure"
          ],
          "iri": "Entity-property-Mention-4"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-3",
          "local_name": "properties",
          "local_types": [
            "property",
            "attribute",
            "characteristic"
          ],
          "iri": "Entity-property-Mention-5"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-2",
          "local_name": "properties",
          "local_types": [
            "property",
            "attribute",
            "characteristic"
          ],
          "iri": "Entity-property-Mention-6"
        }
      ],
      "relevance": 0.489990234375
    },
    "Entity-a__p1_": {
      "node_id": "a__p1_",
      "disambiguation_index": 0,
      "label": "A(P1)",
      "aliases": [
        "A(P2)",
        "A(P1)"
      ],
      "types": [
        "adjacency matrix",
        "mathematical object",
        "representation",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A(P1) is a square adjacency matrix representing the binary relationships between entities in a knowledge graph, where the [i, j]-th element indicates the presence (1) or absence (0) of a predicate P1 connecting entities ei and ej.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-4-Sentence-2",
          "local_name": "A(P1)",
          "local_types": [
            "adjacency matrix",
            "mathematical object",
            "representation",
            "matrix"
          ],
          "iri": "Entity-a__p1_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-4-Sentence-3",
          "local_name": "A(P2)",
          "local_types": [
            "adjacency matrix",
            "mathematical object",
            "representation",
            "matrix"
          ],
          "iri": "Entity-a__p1_-Mention-2"
        }
      ],
      "relevance": 0.489501953125
    },
    "Entity-the_confidence_of_the_third_rule": {
      "node_id": "the_confidence_of_the_third_rule",
      "disambiguation_index": 0,
      "label": "the confidence of the third rule",
      "aliases": [
        "the confidence of the third rule"
      ],
      "types": [
        "confidence"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The confidence of the third rule refers to a measure of reliability for a specific rule in the context of knowledge graph data, indicating the proportion of instances in which the rule holds true, and is characterized as lower than that of a less constraining rule.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-5",
          "local_name": "the confidence of the third rule",
          "local_types": [
            "confidence"
          ],
          "iri": "Entity-the_confidence_of_the_third_rule-Mention-1"
        }
      ],
      "relevance": 0.489501953125
    },
    "Entity-embedding": {
      "node_id": "embedding",
      "disambiguation_index": 0,
      "label": "embedding",
      "aliases": [
        "embedding"
      ],
      "types": [
        "representation",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'embedding' refers to a mathematical representation derived from the RESCAL model, which transforms entities and predicates in a knowledge graph into vector and matrix forms to facilitate the computation of relationships and scoring functions between them.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-2",
          "local_name": "embedding",
          "local_types": [
            "representation",
            "data structure"
          ],
          "iri": "Entity-embedding-Mention-1"
        }
      ],
      "relevance": 0.488525390625
    },
    "Entity-horn": {
      "node_id": "horn",
      "disambiguation_index": 0,
      "label": "Horn",
      "aliases": [
        "Horn"
      ],
      "types": [
        "theory",
        "logical property",
        "concept",
        "logical concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Horn refers to a type of logical rule in predicate logic characterized by having a conjunction of positive literals in the body and a single positive literal in the head, which is distinct from the inverse open path rules discussed in the paper.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-6",
          "local_name": "Horn",
          "local_types": [
            "theory",
            "logical property",
            "concept",
            "logical concept"
          ],
          "iri": "Entity-horn-Mention-1"
        }
      ],
      "relevance": 0.48828125
    },
    "Entity-object_entity": {
      "node_id": "object_entity",
      "disambiguation_index": 0,
      "label": "object entity",
      "aliases": [
        "object entity",
        "object entity e'"
      ],
      "types": [
        "entity",
        "data component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'object entity' refers to the entity e' in an RDF triple (e, P, e'), which is the target of a relationship defined by the binary predicate P in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "object entity",
          "local_types": [
            "entity",
            "data component"
          ],
          "iri": "Entity-object_entity-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "object entity e'",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-object_entity-Mention-2"
        }
      ],
      "relevance": 0.488037109375
    },
    "Entity-width": {
      "node_id": "width",
      "disambiguation_index": 0,
      "label": "width",
      "aliases": [
        "width"
      ],
      "types": [
        "dimension",
        "structural feature",
        "measurement",
        "quality measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'width' refers to a structural feature of shapes in knowledge graphs, indicating the extent or breadth of the shapes being analyzed or generated.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-3",
          "local_name": "width",
          "local_types": [
            "dimension",
            "structural feature",
            "measurement",
            "quality measure"
          ],
          "iri": "Entity-width-Mention-1"
        }
      ],
      "relevance": 0.487548828125
    },
    "Entity-confidence": {
      "node_id": "confidence",
      "disambiguation_index": 0,
      "label": "confidence",
      "aliases": [
        "confidence"
      ],
      "types": [
        "statistical measure",
        "confidence",
        "association rule mining concept",
        "concept",
        "measure",
        "quality measure",
        "statistical concept",
        "evaluation metric",
        "quality",
        "metric",
        "attribute"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'confidence' refers to a quality measure that indicates the reliability or certainty of the shapes learned from knowledge graphs, reflecting the degree of assurance in the accuracy and validity of the derived structural features.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-3-Sentence-3",
          "local_name": "confidence",
          "local_types": [
            "quality",
            "evaluation metric",
            "statistical measure",
            "quality measure"
          ],
          "iri": "Entity-confidence-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-1",
          "local_name": "confidence",
          "local_types": [
            "metric",
            "confidence"
          ],
          "iri": "Entity-confidence-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-3",
          "local_name": "confidence",
          "local_types": [
            "association rule mining concept",
            "concept",
            "statistical measure",
            "metric"
          ],
          "iri": "Entity-confidence-Mention-3"
        },
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "confidence",
          "local_types": [
            "statistical measure",
            "evaluation metric"
          ],
          "iri": "Entity-confidence-Mention-4"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "confidence",
          "local_types": [
            "attribute",
            "statistical measure"
          ],
          "iri": "Entity-confidence-Mention-5"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-2",
          "local_name": "confidence",
          "local_types": [
            "statistical measure"
          ],
          "iri": "Entity-confidence-Mention-6"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-5",
          "local_name": "confidence",
          "local_types": [
            "statistical measure",
            "measure",
            "concept",
            "statistical concept",
            "evaluation metric"
          ],
          "iri": "Entity-confidence-Mention-7"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "confidence",
          "local_types": [
            "statistical measure"
          ],
          "iri": "Entity-confidence-Mention-8"
        }
      ],
      "relevance": 0.487548828125
    },
    "Entity-standard_confidence__sc_": {
      "node_id": "standard_confidence__sc_",
      "disambiguation_index": 0,
      "label": "Standard confidence (SC)",
      "aliases": [
        "Standard confidence (SC)",
        "SC"
      ],
      "types": [
        "confidence measure",
        "statistical measure",
        "confidence",
        "measure",
        "entity",
        "concept",
        "theoretical framework",
        "statistical concept",
        "metric",
        "tree structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Standard confidence (SC) is a statistical measure that quantifies the frequency with which a rule is true by calculating the proportion of inferred head instances that are satisfied relative to the number of entity pairs satisfying the rule's body in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-1",
          "local_name": "Standard confidence (SC)",
          "local_types": [
            "confidence measure",
            "statistical measure",
            "confidence",
            "measure",
            "metric"
          ],
          "iri": "Entity-standard_confidence__sc_-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-2",
          "local_name": "SC",
          "local_types": [
            "entity",
            "concept",
            "theoretical framework"
          ],
          "iri": "Entity-standard_confidence__sc_-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "SC",
          "local_types": [
            "statistical concept"
          ],
          "iri": "Entity-standard_confidence__sc_-Mention-3"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-2",
          "local_name": "SC",
          "local_types": [
            "statistical measure",
            "tree structure"
          ],
          "iri": "Entity-standard_confidence__sc_-Mention-4"
        }
      ],
      "relevance": 0.487548828125
    },
    "Entity-adjacency_matrix": {
      "node_id": "adjacency_matrix",
      "disambiguation_index": 0,
      "label": "adjacency matrix",
      "aliases": [
        "adjacency matrix",
        "adjacency matrices"
      ],
      "types": [
        "data structure",
        "data representation",
        "mathematical concept",
        "mathematical representation",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An adjacency matrix is a square matrix used to represent a finite graph, where the elements indicate whether pairs of vertices are adjacent or not in the graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-4",
          "local_name": "adjacency matrix",
          "local_types": [
            "mathematical representation",
            "data structure",
            "data representation",
            "matrix"
          ],
          "iri": "Entity-adjacency_matrix-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-2",
          "local_name": "adjacency matrix",
          "local_types": [
            "data representation",
            "mathematical concept",
            "mathematical representation",
            "matrix"
          ],
          "iri": "Entity-adjacency_matrix-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-4-Sentence-1",
          "local_name": "adjacency matrices",
          "local_types": [
            "data representation",
            "mathematical concept",
            "data structure",
            "matrix"
          ],
          "iri": "Entity-adjacency_matrix-Mention-3"
        }
      ],
      "relevance": 0.487060546875
    },
    "Entity-composite_predicate": {
      "node_id": "composite_predicate",
      "disambiguation_index": 0,
      "label": "composite predicate",
      "aliases": [
        "the composite predicate",
        "composite predicate"
      ],
      "types": [
        "mathematical object",
        "logical structure",
        "logical construct",
        "predicate",
        "mathematical concept",
        "mathematical structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A composite predicate is a logical construct that combines multiple predicates into a single expression, representing a path of relationships between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-1",
          "local_name": "composite predicate",
          "local_types": [
            "mathematical object",
            "logical structure",
            "logical construct",
            "predicate",
            "mathematical concept"
          ],
          "iri": "Entity-composite_predicate-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "composite predicate",
          "local_types": [
            "predicate",
            "mathematical structure"
          ],
          "iri": "Entity-composite_predicate-Mention-2"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "the composite predicate",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-composite_predicate-Mention-3"
        }
      ],
      "relevance": 0.48681640625
    },
    "Entity-ev__": {
      "node_id": "ev__",
      "disambiguation_index": 0,
      "label": "Ev()",
      "aliases": [
        "Ev() in Algorithm 1",
        "Ev()"
      ],
      "types": [
        "function",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Ev() is a function in Algorithm 1 that evaluates candidate rules on a sampled knowledge graph and selects those with a support value of at least one.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-2",
          "local_name": "Ev()",
          "local_types": [
            "function",
            "algorithm"
          ],
          "iri": "Entity-ev__-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-1-Sentence-2",
          "local_name": "Ev() in Algorithm 1",
          "local_types": [
            "algorithm"
          ],
          "iri": "Entity-ev__-Mention-2"
        }
      ],
      "relevance": 0.48681640625
    },
    "Entity-plausibility": {
      "node_id": "plausibility",
      "disambiguation_index": 0,
      "label": "plausibility",
      "aliases": [
        "plausibility"
      ],
      "types": [
        "concept",
        "probability measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'plausibility' refers to a measure of the likelihood or confidence that a specific relationship holds true between two entities in a knowledge graph, as indicated by the scoring function derived from their embeddings.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-5",
          "local_name": "plausibility",
          "local_types": [
            "concept",
            "probability measure"
          ],
          "iri": "Entity-plausibility-Mention-1"
        }
      ],
      "relevance": 0.486328125
    },
    "Entity-human__x__x_": {
      "node_id": "human__x__x_",
      "disambiguation_index": 0,
      "label": "human(x, x)",
      "aliases": [
        "human(x, x)"
      ],
      "types": [
        "function",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'human(x, x)' refers to a logical expression representing a relationship where an entity x is identified as a human, used in the context of deriving SHACL tree shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "human(x, x)",
          "local_types": [
            "function",
            "logical expression"
          ],
          "iri": "Entity-human__x__x_-Mention-1"
        }
      ],
      "relevance": 0.486328125
    },
    "Entity-at_least_two_parent": {
      "node_id": "at_least_two_parent",
      "disambiguation_index": 0,
      "label": "at least two parents",
      "aliases": [
        "at least two parents"
      ],
      "types": [
        "parent"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'at least two parents' refers to a cardinality constraint in knowledge graph rules indicating that each entity, such as a human, must have a minimum of two distinct parent entities associated with it.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-2",
          "local_name": "at least two parents",
          "local_types": [
            "parent"
          ],
          "iri": "Entity-at_least_two_parent-Mention-1"
        }
      ],
      "relevance": 0.486328125
    },
    "Entity-x_pt__x__z0_": {
      "node_id": "x_pt__x__z0_",
      "disambiguation_index": 0,
      "label": "\u2203x Pt(x, z0)",
      "aliases": [
        "\u2203x Pt(x, z0)"
      ],
      "types": [
        "existential quantifier",
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term '\u2203x Pt(x, z0)' represents an existential quantification indicating the existence of an entity 'x' that satisfies the predicate 'Pt' in relation to the variable 'z0' within the context of open path rules for knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-2",
          "local_name": "\u2203x Pt(x, z0)",
          "local_types": [
            "existential quantifier",
            "predicate"
          ],
          "iri": "Entity-x_pt__x__z0_-Mention-1"
        }
      ],
      "relevance": 0.48583984375
    },
    "Entity-entity_that_satisfy_the_second_argument_of_the_body": {
      "node_id": "entity_that_satisfy_the_second_argument_of_the_body",
      "disambiguation_index": 0,
      "label": "entities that satisfy the second argument of the body",
      "aliases": [
        "entities that satisfy the second argument of the body"
      ],
      "types": [
        "entity",
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Entities that satisfy the second argument of the body refer to the distinct entities in a knowledge graph that fulfill the conditions specified by the second part of a logical rule, as determined by the evaluation of an adjacency matrix representation of the graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "entities that satisfy the second argument of the body",
          "local_types": [
            "entity",
            "argument"
          ],
          "iri": "Entity-entity_that_satisfy_the_second_argument_of_the_body-Mention-1"
        }
      ],
      "relevance": 0.485595703125
    },
    "Entity-the_last_row": {
      "node_id": "the_last_row",
      "disambiguation_index": 0,
      "label": "the last row",
      "aliases": [
        "the last row"
      ],
      "types": [
        "data reference"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The last row refers to the final entry in a table that presents the performance metrics of the unmodified SHACLEARNER algorithm as described in Algorithm 1 of the paper.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-5",
          "local_name": "the last row",
          "local_types": [
            "data reference"
          ],
          "iri": "Entity-the_last_row-Mention-1"
        }
      ],
      "relevance": 0.485595703125
    },
    "Entity-rdf": {
      "node_id": "rdf",
      "disambiguation_index": 0,
      "label": "RDF",
      "aliases": [
        "RDF"
      ],
      "types": [
        "data format",
        "format",
        "graph model",
        "technology",
        "data model",
        "semantic web"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "RDF, or Resource Description Framework, is a standard model for data interchange on the web that uses a graph-based structure to represent information about resources in a machine-readable format.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "RDF",
          "local_types": [
            "data model",
            "graph model",
            "data format",
            "format"
          ],
          "iri": "Entity-rdf-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "RDF",
          "local_types": [
            "technology",
            "data format",
            "semantic web"
          ],
          "iri": "Entity-rdf-Mention-2"
        }
      ],
      "relevance": 0.4853515625
    },
    "Entity-learning_algorithm": {
      "node_id": "learning_algorithm",
      "disambiguation_index": 0,
      "label": "learning algorithm",
      "aliases": [
        "learning algorithm"
      ],
      "types": [
        "method",
        "algorithm",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A learning algorithm is a computational method or procedure that enables a system to improve its performance on a specific task through experience or data, often by identifying patterns or making predictions.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-4",
          "local_name": "learning algorithm",
          "local_types": [
            "method",
            "algorithm",
            "methodology"
          ],
          "iri": "Entity-learning_algorithm-Mention-1"
        }
      ],
      "relevance": 0.4853515625
    },
    "Entity-element_a__pk___i__j_": {
      "node_id": "element_a__pk___i__j_",
      "disambiguation_index": 0,
      "label": "element A(Pk)[i, j]",
      "aliases": [
        "element A(Pk)[i, j]"
      ],
      "types": [
        "matrix element",
        "binary value"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'element A(Pk)[i, j]' refers to the specific entry in the adjacency matrix A(Pk) that indicates the presence (1) or absence (0) of the fact Pk(ei, ej) in the set of predicates F of the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "element A(Pk)[i, j]",
          "local_types": [
            "matrix element",
            "binary value"
          ],
          "iri": "Entity-element_a__pk___i__j_-Mention-1"
        }
      ],
      "relevance": 0.485107421875
    },
    "Entity-greedysearch": {
      "node_id": "greedysearch",
      "disambiguation_index": 0,
      "label": "GreedySearch",
      "aliases": [
        "GreedySearch"
      ],
      "types": [
        "function",
        "search method",
        "method",
        "algorithm",
        "process"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "GreedySearch is an algorithmic approach that iteratively makes the locally optimal choice at each stage with the hope of finding a global optimum.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-1",
          "local_name": "GreedySearch",
          "local_types": [
            "method",
            "algorithm",
            "search method"
          ],
          "iri": "Entity-greedysearch-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-12",
          "local_name": "GreedySearch",
          "local_types": [
            "function",
            "method",
            "algorithm",
            "search method"
          ],
          "iri": "Entity-greedysearch-Mention-2"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-7",
          "local_name": "GreedySearch",
          "local_types": [
            "method",
            "algorithm",
            "process",
            "search method"
          ],
          "iri": "Entity-greedysearch-Mention-3"
        }
      ],
      "relevance": 0.48486328125
    },
    "Entity-the_scoring_function": {
      "node_id": "the_scoring_function",
      "disambiguation_index": 0,
      "label": "The scoring function",
      "aliases": [
        "The scoring function"
      ],
      "types": [
        "function"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The scoring function is a mathematical representation used to evaluate the likelihood that a specific relationship exists between two entities in a knowledge graph, calculated using their embeddings and the predicate connecting them.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-5",
          "local_name": "The scoring function",
          "local_types": [
            "function"
          ],
          "iri": "Entity-the_scoring_function-Mention-1"
        }
      ],
      "relevance": 0.484619140625
    },
    "Entity-the_presentation_in_the_triple_format": {
      "node_id": "the_presentation_in_the_triple_format",
      "disambiguation_index": 0,
      "label": "the presentation in the triple format",
      "aliases": [
        "the presentation in the triple format"
      ],
      "types": [
        "presentation",
        "format"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The presentation in the triple format refers to a method of representing knowledge graph data using triples, where entities and their relationships are expressed in a structured format that maintains compatibility with the original input knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-3",
          "local_name": "the presentation in the triple format",
          "local_types": [
            "presentation",
            "format"
          ],
          "iri": "Entity-the_presentation_in_the_triple_format-Mention-1"
        }
      ],
      "relevance": 0.484619140625
    },
    "Entity-the_first_annotation_value__0.13_": {
      "node_id": "the_first_annotation_value__0.13_",
      "disambiguation_index": 0,
      "label": "the first annotation value (0.13)",
      "aliases": [
        "the first annotation value (0.13)"
      ],
      "types": [
        "annotation value"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The first annotation value (0.13) refers to the structural complexity (SC) measure of a tree shape mined from knowledge graphs, indicating the overall complexity of the tree structure.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-2",
          "local_name": "the first annotation value (0.13)",
          "local_types": [
            "annotation value"
          ],
          "iri": "Entity-the_first_annotation_value__0.13_-Mention-1"
        }
      ],
      "relevance": 0.484375
    },
    "Entity-v1__a__p1___a__p2___...__a__pm__": {
      "node_id": "v1__a__p1___a__p2___...__a__pm__",
      "disambiguation_index": 0,
      "label": "V^1(A(P1)*A(P2)*...*A(Pm))",
      "aliases": [
        "V^1(A(P1)*A(P2)*...*A(Pm))",
        "the vector V^1(A(P1)*A(P2)*...*A(Pm))"
      ],
      "types": [
        "mathematical object",
        "vector",
        "mathematical expression",
        "mathematical notation",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "V^1(A(P1)*A(P2)*...*A(Pm)) refers to a vector that represents the count of distinct entities in a knowledge graph that satisfy a specific path defined by the predicates P1 through Pm, computed as the sum of the rows of the matrix product of their corresponding adjacency matrices.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-3",
          "local_name": "V^1(A(P1)*A(P2)*...*A(Pm))",
          "local_types": [
            "vector"
          ],
          "iri": "Entity-v1__a__p1___a__p2___...__a__pm__-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "V^1(A(P1)*A(P2)*...*A(Pm))",
          "local_types": [
            "vector",
            "mathematical object",
            "mathematical notation",
            "matrix"
          ],
          "iri": "Entity-v1__a__p1___a__p2___...__a__pm__-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-3",
          "local_name": "the vector V^1(A(P1)*A(P2)*...*A(Pm))",
          "local_types": [
            "mathematical expression",
            "vector"
          ],
          "iri": "Entity-v1__a__p1___a__p2___...__a__pm__-Mention-3"
        }
      ],
      "relevance": 0.483642578125
    },
    "Entity-motivating_use_case": {
      "node_id": "motivating_use_case",
      "disambiguation_index": 0,
      "label": "motivating use cases",
      "aliases": [
        "motivating use cases"
      ],
      "types": [
        "use case",
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Motivating use cases refer to practical scenarios or applications that illustrate the relevance and utility of logical formalisms in deriving SHACL shapes, thereby providing a foundation for understanding their semantics and implementation.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-3",
          "local_name": "motivating use cases",
          "local_types": [
            "use case",
            "concept"
          ],
          "iri": "Entity-motivating_use_case-Mention-1"
        }
      ],
      "relevance": 0.483642578125
    },
    "Entity-pathfinding": {
      "node_id": "pathfinding",
      "disambiguation_index": 0,
      "label": "PathFinding",
      "aliases": [
        "PathFinding"
      ],
      "types": [
        "function",
        "method",
        "algorithm",
        "field of study",
        "process",
        "field"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "PathFinding refers to a computational process or algorithm used to determine the optimal route or solution in a given space or problem, often applied in fields such as artificial intelligence, robotics, and computer science.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-5",
          "local_name": "PathFinding",
          "local_types": [
            "method",
            "algorithm",
            "field of study",
            "process",
            "field"
          ],
          "iri": "Entity-pathfinding-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-9",
          "local_name": "PathFinding",
          "local_types": [
            "function",
            "method",
            "algorithm"
          ],
          "iri": "Entity-pathfinding-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-1",
          "local_name": "PathFinding",
          "local_types": [
            "method",
            "algorithm"
          ],
          "iri": "Entity-pathfinding-Mention-3"
        }
      ],
      "relevance": 0.4833984375
    },
    "Entity-conjunctive_atom": {
      "node_id": "conjunctive_atom",
      "disambiguation_index": 0,
      "label": "conjunctive atoms",
      "aliases": [
        "conjunctive atoms"
      ],
      "types": [
        "logical component",
        "atom"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Conjunctive atoms refer to the components of a logical rule in predicate calculus that are combined using logical conjunction, forming a chain in the head of the rule, which is used to express relationships and constraints in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-2",
          "local_name": "conjunctive atoms",
          "local_types": [
            "logical component",
            "atom"
          ],
          "iri": "Entity-conjunctive_atom-Mention-1"
        }
      ],
      "relevance": 0.4833984375
    },
    "Entity-the__i__j__-th_element_a__pk___i__j_": {
      "node_id": "the__i__j__-th_element_a__pk___i__j_",
      "disambiguation_index": 0,
      "label": "the [i, j]-th element A(Pk)[i, j]",
      "aliases": [
        "the [i, j]-th element A(Pk)[i, j]"
      ],
      "types": [
        "element",
        "matrix"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The [i, j]-th element A(Pk)[i, j] of the adjacency matrix A(Pk) represents the presence (1) or absence (0) of the fact Pk(ei, ej) in the set of predicates F of the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "the [i, j]-th element A(Pk)[i, j]",
          "local_types": [
            "element",
            "matrix"
          ],
          "iri": "Entity-the__i__j__-th_element_a__pk___i__j_-Mention-1"
        }
      ],
      "relevance": 0.4833984375
    },
    "Entity-object": {
      "node_id": "object",
      "disambiguation_index": 0,
      "label": "object",
      "aliases": [
        "object"
      ],
      "types": [
        "thing",
        "entity",
        "concept",
        "variable",
        "binding"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'object' refers to an entity identifier in a knowledge graph, which can represent various real-world items such as places or people.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-1",
          "local_name": "object",
          "local_types": [
            "thing",
            "concept"
          ],
          "iri": "Entity-object-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-2",
          "local_name": "object",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-object-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-2",
          "local_name": "object",
          "local_types": [
            "entity",
            "binding"
          ],
          "iri": "Entity-object-Mention-3"
        }
      ],
      "relevance": 0.482666015625
    },
    "Entity-the_class_with_few_instance": {
      "node_id": "the_class_with_few_instance",
      "disambiguation_index": 0,
      "label": "the classes with few instances",
      "aliases": [
        "the classes with few instances"
      ],
      "types": [
        "class"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The classes with few instances refer to categories or types in a knowledge graph that have a limited number of associated data entries, specifically those with fewer than one hundred facts, which are deemed less useful for learning meaningful patterns or shapes.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-3",
          "local_name": "the classes with few instances",
          "local_types": [
            "class"
          ],
          "iri": "Entity-the_class_with_few_instance-Mention-1"
        }
      ],
      "relevance": 0.482666015625
    },
    "Entity-this_is_a_reassuring_property": {
      "node_id": "this_is_a_reassuring_property",
      "disambiguation_index": 0,
      "label": "This is a reassuring property",
      "aliases": [
        "This is a reassuring property"
      ],
      "types": [
        "property"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'This is a reassuring property' refers to the characteristic of the SHACLEARNER algorithm that ensures it retains high-quality rules during the pruning process, thereby enhancing computational efficiency without compromising the discovery of valuable rules.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-5-Sentence-3",
          "local_name": "This is a reassuring property",
          "local_types": [
            "property"
          ],
          "iri": "Entity-this_is_a_reassuring_property-Mention-1"
        }
      ],
      "relevance": 0.482177734375
    },
    "Entity-entity": {
      "node_id": "entity",
      "disambiguation_index": 0,
      "label": "entity",
      "aliases": [
        "entity",
        "entities"
      ],
      "types": [
        "set",
        "abstract object",
        "objects",
        "object",
        "data construct",
        "data item",
        "identifier",
        "data point",
        "mathematical entity",
        "concept",
        "mathematical term",
        "data element",
        "mathematical object",
        "knowledge representation",
        "elements",
        "entity",
        "data structure",
        "abstract concept",
        "data",
        "general term",
        "component",
        "information",
        "data type"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity refers to an identifier used to represent an object, which can be a place or a person, within the context of a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-1",
          "local_name": "entity",
          "local_types": [
            "identifier",
            "concept",
            "object"
          ],
          "iri": "Entity-entity-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-6",
          "local_name": "entities",
          "local_types": [
            "entity",
            "data element",
            "component"
          ],
          "iri": "Entity-entity-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "concept",
            "object"
          ],
          "iri": "Entity-entity-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-2",
          "local_name": "entity",
          "local_types": [
            "object"
          ],
          "iri": "Entity-entity-Mention-4"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "mathematical entity",
            "concept",
            "object"
          ],
          "iri": "Entity-entity-Mention-5"
        },
        {
          "reference": "Section-5-Paragraph-2-Sentence-2",
          "local_name": "entities",
          "local_types": [
            "entity",
            "concept",
            "data element",
            "object"
          ],
          "iri": "Entity-entity-Mention-6"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "entity",
          "local_types": [
            "concept",
            "abstract object"
          ],
          "iri": "Entity-entity-Mention-7"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "entity",
            "concept",
            "data element",
            "object"
          ],
          "iri": "Entity-entity-Mention-8"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "entity",
            "concept",
            "data element",
            "object"
          ],
          "iri": "Entity-entity-Mention-9"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-4",
          "local_name": "entities",
          "local_types": [
            "concept",
            "object"
          ],
          "iri": "Entity-entity-Mention-10"
        },
        {
          "reference": "Section-6-Paragraph-6-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "data point",
            "object"
          ],
          "iri": "Entity-entity-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "entity",
          "local_types": [
            "concept",
            "abstract concept",
            "object"
          ],
          "iri": "Entity-entity-Mention-12"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "data",
            "component"
          ],
          "iri": "Entity-entity-Mention-13"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-5",
          "local_name": "entities",
          "local_types": [
            "data construct",
            "mathematical term",
            "entity"
          ],
          "iri": "Entity-entity-Mention-14"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "entities",
          "local_types": [
            "data element"
          ],
          "iri": "Entity-entity-Mention-15"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "entities",
          "local_types": [
            "entity",
            "knowledge representation",
            "data point"
          ],
          "iri": "Entity-entity-Mention-16"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-2",
          "local_name": "entities",
          "local_types": [
            "entity",
            "data element",
            "object"
          ],
          "iri": "Entity-entity-Mention-17"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-2",
          "local_name": "entities",
          "local_types": [
            "entity",
            "component"
          ],
          "iri": "Entity-entity-Mention-18"
        },
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "entities",
          "local_types": [
            "elements",
            "concept",
            "objects",
            "object"
          ],
          "iri": "Entity-entity-Mention-19"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "entity",
            "data item",
            "object"
          ],
          "iri": "Entity-entity-Mention-20"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "entities",
          "local_types": [
            "entity",
            "data element",
            "component"
          ],
          "iri": "Entity-entity-Mention-21"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-2",
          "local_name": "entities",
          "local_types": [
            "mathematical object",
            "entity",
            "concept",
            "general term",
            "component",
            "data element"
          ],
          "iri": "Entity-entity-Mention-22"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "concept",
            "mathematical object"
          ],
          "iri": "Entity-entity-Mention-23"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "entities",
          "local_types": [
            "concept",
            "mathematical object"
          ],
          "iri": "Entity-entity-Mention-24"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-6",
          "local_name": "entities",
          "local_types": [
            "data point",
            "entity",
            "concept",
            "component",
            "data element"
          ],
          "iri": "Entity-entity-Mention-25"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "entities",
          "local_types": [
            "mathematical object",
            "set",
            "data point",
            "entity",
            "component",
            "data element"
          ],
          "iri": "Entity-entity-Mention-26"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "concept",
            "object"
          ],
          "iri": "Entity-entity-Mention-27"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "data element",
            "object"
          ],
          "iri": "Entity-entity-Mention-28"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-1",
          "local_name": "entities",
          "local_types": [
            "data element",
            "object"
          ],
          "iri": "Entity-entity-Mention-29"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-2",
          "local_name": "entities",
          "local_types": [
            "data type",
            "information"
          ],
          "iri": "Entity-entity-Mention-30"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-4",
          "local_name": "entities",
          "local_types": [
            "entity",
            "concept",
            "object"
          ],
          "iri": "Entity-entity-Mention-31"
        },
        {
          "reference": "Section-18-Paragraph-2-Sentence-4",
          "local_name": "entities",
          "local_types": [
            "data element",
            "data structure",
            "concept",
            "object"
          ],
          "iri": "Entity-entity-Mention-32"
        }
      ],
      "relevance": 0.48193359375
    },
    "Entity-p1__x__z1_": {
      "node_id": "p1__x__z1_",
      "disambiguation_index": 0,
      "label": "P1(x, z1)",
      "aliases": [
        "P1(x, z1)"
      ],
      "types": [
        "predicate",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "P1(x, z1) is a binary predicate in a closed path rule that relates the entity x to another entity z1, serving as part of the rule's body to infer a fact represented by the head Pt(x, y).",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-4-Sentence-1",
          "local_name": "P1(x, z1)",
          "local_types": [
            "predicate",
            "mathematical expression"
          ],
          "iri": "Entity-p1__x__z1_-Mention-1"
        }
      ],
      "relevance": 0.481689453125
    },
    "Entity-comparison_purpose": {
      "node_id": "comparison_purpose",
      "disambiguation_index": 0,
      "label": "comparison purposes",
      "aliases": [
        "comparison purposes"
      ],
      "types": [
        "comparison",
        "purpose",
        "evaluation",
        "analysis"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The phrase 'comparison purposes' refers to the need to evaluate and contrast the effectiveness of different methods for discovering patterns in massive knowledge graphs, specifically in relation to the methods discussed in the paper.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "comparison purposes",
          "local_types": [
            "comparison",
            "purpose",
            "evaluation",
            "analysis"
          ],
          "iri": "Entity-comparison_purpose-Mention-1"
        }
      ],
      "relevance": 0.481689453125
    },
    "Entity-the_binary_fact_p__e__e_": {
      "node_id": "the_binary_fact_p__e__e_",
      "disambiguation_index": 0,
      "label": "the binary fact P(e, e)",
      "aliases": [
        "the binary fact P(e, e)"
      ],
      "types": [
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The binary fact P(e, e) represents a unary predicate in the context of knowledge graphs, indicating a self-referential relationship where the entity e is related to itself via the property P.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-3",
          "local_name": "the binary fact P(e, e)",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-the_binary_fact_p__e__e_-Mention-1"
        }
      ],
      "relevance": 0.481689453125
    },
    "Entity-the_count_of_e_": {
      "node_id": "the_count_of_e_",
      "disambiguation_index": 0,
      "label": "the count of e'",
      "aliases": [
        "the count of e'"
      ],
      "types": [
        "count",
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The count of e' refers to the number of distinct entities in a knowledge graph that satisfy the conditions of a specific rule's body, indicating how many entities are related to a given entity through a defined predicate.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-5-Sentence-2",
          "local_name": "the count of e'",
          "local_types": [
            "count",
            "entity"
          ],
          "iri": "Entity-the_count_of_e_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-3",
          "local_name": "the count of e'",
          "local_types": [
            "count",
            "entity"
          ],
          "iri": "Entity-the_count_of_e_-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "the count of e'",
          "local_types": [
            "count",
            "entity"
          ],
          "iri": "Entity-the_count_of_e_-Mention-3"
        }
      ],
      "relevance": 0.4814453125
    },
    "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_": {
      "node_id": "a_set_of_pair_of_entity__e__e1___...___e__eq_",
      "disambiguation_index": 0,
      "label": "a set of pairs of entities (e, e1), ..., (e, eq)",
      "aliases": [
        "a set of pairs of entities (e, e1), ..., (e, eq)"
      ],
      "types": [
        "entity",
        "entity pair",
        "set"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A set of pairs of entities (e, e1), ..., (e, eq) refers to the collection of entity pairs that satisfy the head of a tree-shaped rule in a knowledge graph, where each pair represents a relationship defined by predicates in the graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-3",
          "local_name": "a set of pairs of entities (e, e1), ..., (e, eq)",
          "local_types": [
            "entity",
            "entity pair",
            "set"
          ],
          "iri": "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_-Mention-1"
        }
      ],
      "relevance": 0.4814453125
    },
    "Entity-vector_e_i": {
      "node_id": "vector_e_i",
      "disambiguation_index": 0,
      "label": "vector E_i",
      "aliases": [
        "vector E_i"
      ],
      "types": [
        "mathematical object",
        "vector"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "vector E_i refers to the d-dimensional vector representation of the entity e_i obtained through the RESCAL embedding method, which is used to capture the semantic properties of entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "vector E_i",
          "local_types": [
            "mathematical object",
            "vector"
          ],
          "iri": "Entity-vector_e_i-Mention-1"
        }
      ],
      "relevance": 0.48095703125
    },
    "Entity-a__pt_": {
      "node_id": "a__pt_",
      "disambiguation_index": 0,
      "label": "A(Pt)",
      "aliases": [
        "the matrix A(Pt)",
        "A(Pt)"
      ],
      "types": [
        "mathematical object",
        "adjacency matrix",
        "representation",
        "mathematical notation",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A(Pt) is a square adjacency matrix representation of the predicate Pt in a knowledge graph, where the [i, j]-th element indicates the presence (1) or absence (0) of a relationship between entities ei and ej based on the predicate Pt.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-4-Sentence-4",
          "local_name": "A(Pt)",
          "local_types": [
            "adjacency matrix",
            "mathematical object",
            "representation",
            "matrix"
          ],
          "iri": "Entity-a__pt_-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "A(Pt)",
          "local_types": [
            "mathematical object",
            "mathematical notation",
            "matrix"
          ],
          "iri": "Entity-a__pt_-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-1",
          "local_name": "the matrix A(Pt)",
          "local_types": [
            "matrix"
          ],
          "iri": "Entity-a__pt_-Mention-3"
        }
      ],
      "relevance": 0.480712890625
    },
    "Entity-fact_related_to_them": {
      "node_id": "fact_related_to_them",
      "disambiguation_index": 0,
      "label": "facts related to them",
      "aliases": [
        "facts related to them"
      ],
      "types": [
        "fact",
        "data"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'facts related to them' refers to the specific data points or assertions generated in the context of poker hands, which are used to construct a complete and correct knowledge graph for evaluation experiments.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-8",
          "local_name": "facts related to them",
          "local_types": [
            "fact",
            "data"
          ],
          "iri": "Entity-fact_related_to_them-Mention-1"
        }
      ],
      "relevance": 0.480712890625
    },
    "Entity-inference_rule": {
      "node_id": "inference_rule",
      "disambiguation_index": 0,
      "label": "inference rules",
      "aliases": [
        "inference rules"
      ],
      "types": [
        "rule system",
        "rule set",
        "rules",
        "logic",
        "rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Inference rules are logical statements or guidelines that dictate how new information can be derived from existing knowledge within a formal system.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-2",
          "local_name": "inference rules",
          "local_types": [
            "logic",
            "rule system"
          ],
          "iri": "Entity-inference_rule-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-6-Sentence-1",
          "local_name": "inference rules",
          "local_types": [
            "rules",
            "rule set",
            "rule",
            "logic"
          ],
          "iri": "Entity-inference_rule-Mention-2"
        }
      ],
      "relevance": 0.480224609375
    },
    "Entity-computing": {
      "node_id": "computing",
      "disambiguation_index": 0,
      "label": "Computing",
      "aliases": [
        "Computing"
      ],
      "types": [
        "discipline",
        "concept",
        "field",
        "field of study"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Computing is a broad discipline that encompasses the study and application of algorithms, data structures, programming, and the theoretical foundations of information processing and computer systems.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-1",
          "local_name": "Computing",
          "local_types": [
            "discipline",
            "concept",
            "field",
            "field of study"
          ],
          "iri": "Entity-computing-Mention-1"
        }
      ],
      "relevance": 0.480224609375
    },
    "Entity-a_simpler_tree": {
      "node_id": "a_simpler_tree",
      "disambiguation_index": 0,
      "label": "a simpler tree",
      "aliases": [
        "a simpler tree"
      ],
      "types": [
        "tree"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A simpler tree refers to a pruned version of a more complex tree structure in knowledge graphs, which retains validity and exhibits higher confidence in the context of shape learning and validation.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-3",
          "local_name": "a simpler tree",
          "local_types": [
            "tree"
          ],
          "iri": "Entity-a_simpler_tree-Mention-1"
        }
      ],
      "relevance": 0.47998046875
    },
    "Entity-heuristic_rule_learner": {
      "node_id": "heuristic_rule_learner",
      "disambiguation_index": 0,
      "label": "heuristic rule learners",
      "aliases": [
        "heuristic rule learners"
      ],
      "types": [
        "machine learning model",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Heuristic rule learners are algorithms or machine learning models that generate rules based on heuristics to make predictions or decisions from data.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-2",
          "local_name": "heuristic rule learners",
          "local_types": [
            "machine learning model",
            "algorithm"
          ],
          "iri": "Entity-heuristic_rule_learner-Mention-1"
        }
      ],
      "relevance": 0.479736328125
    },
    "Entity-2lfe": {
      "node_id": "2lfe",
      "disambiguation_index": 0,
      "label": "2l|F||E|",
      "aliases": [
        "2l|F||E|"
      ],
      "types": [
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention '2l|F||E|' refers to the size of the set of sampled entities for a target predicate in a knowledge graph, which is calculated as 2 raised to the power of l, multiplied by the number of facts F and the number of entities E, representing the worst-case scenario in the sampling process.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "2l|F||E|",
          "local_types": [
            "mathematical expression"
          ],
          "iri": "Entity-2lfe-Mention-1"
        }
      ],
      "relevance": 0.4794921875
    },
    "Entity-entity_x": {
      "node_id": "entity_x",
      "disambiguation_index": 0,
      "label": "entity x",
      "aliases": [
        "entity x"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'entity x' refers to a specific instance or object within the graph, exemplified here as a song, which is connected to other entities such as albums and record labels through defined relationships.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-3",
          "local_name": "entity x",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-entity_x-Mention-1"
        }
      ],
      "relevance": 0.4794921875
    },
    "Entity-entity_x_(1)": {
      "node_id": "entity_x_(1)",
      "disambiguation_index": 1,
      "label": "entity x",
      "aliases": [
        "entity x"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Entity x refers to an instance in a knowledge graph that satisfies the predicate 'human', and is subject to specific path constraints related to citizenship, parentage, and language.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "entity x",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-entity_x_(1)-Mention-1"
        }
      ],
      "relevance": 0.4794921875
    },
    "Entity-entity_instance": {
      "node_id": "entity_instance",
      "disambiguation_index": 0,
      "label": "entity instances",
      "aliases": [
        "entity instances"
      ],
      "types": [
        "entity",
        "data instance"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Entity instances refer to specific occurrences or representations of entities within a dataset or knowledge graph, typically characterized by their attributes and relationships.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-1",
          "local_name": "entity instances",
          "local_types": [
            "entity",
            "data instance"
          ],
          "iri": "Entity-entity_instance-Mention-1"
        }
      ],
      "relevance": 0.479248046875
    },
    "Entity-a_satisfying_e": {
      "node_id": "a_satisfying_e",
      "disambiguation_index": 0,
      "label": "a satisfying e",
      "aliases": [
        "a satisfying e"
      ],
      "types": [
        "satisfaction"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A satisfying e refers to an entity in a knowledge graph that meets the criteria defined by a specific rule, indicated by having a corresponding non-zero value in the computed vector representing the rule's conditions.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-4",
          "local_name": "a satisfying e",
          "local_types": [
            "satisfaction"
          ],
          "iri": "Entity-a_satisfying_e-Mention-1"
        }
      ],
      "relevance": 0.479248046875
    },
    "Entity-directly_related_entity": {
      "node_id": "directly_related_entity",
      "disambiguation_index": 0,
      "label": "directly related entities",
      "aliases": [
        "directly related entities"
      ],
      "types": [
        "entity",
        "relationship"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Directly related entities refer to those entities in a knowledge graph that have a direct relationship with a specified target predicate, indicating a close connection or relevance to that predicate.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-6-Sentence-4",
          "local_name": "directly related entities",
          "local_types": [
            "entity",
            "relationship"
          ],
          "iri": "Entity-directly_related_entity-Mention-1"
        }
      ],
      "relevance": 0.479248046875
    },
    "Entity-standard_confidence": {
      "node_id": "standard_confidence",
      "disambiguation_index": 0,
      "label": "standard confidence",
      "aliases": [
        "standard confidence",
        "Standard confidence"
      ],
      "types": [
        "statistical measure",
        "confidence metric",
        "measure",
        "evaluation metric",
        "mathematical concept",
        "metric",
        "rule learning",
        "evaluation measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Standard confidence is a statistical measure used in rule learning that quantifies the frequency with which a rule is true by calculating the proportion of inferred head instances that are satisfied relative to the number of entity pairs satisfying the rule's body in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-6-Sentence-2",
          "local_name": "standard confidence",
          "local_types": [
            "measure",
            "evaluation metric",
            "metric",
            "rule learning",
            "evaluation measure"
          ],
          "iri": "Entity-standard_confidence-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-1",
          "local_name": "standard confidence",
          "local_types": [
            "rule learning",
            "measure",
            "evaluation measure",
            "metric"
          ],
          "iri": "Entity-standard_confidence-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-1",
          "local_name": "standard confidence",
          "local_types": [
            "statistical measure",
            "confidence metric",
            "measure",
            "metric",
            "rule learning"
          ],
          "iri": "Entity-standard_confidence-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-3",
          "local_name": "standard confidence",
          "local_types": [
            "mathematical concept",
            "statistical measure",
            "metric"
          ],
          "iri": "Entity-standard_confidence-Mention-4"
        }
      ],
      "relevance": 0.47900390625
    },
    "Entity-10_hour_limit": {
      "node_id": "10_hour_limit",
      "disambiguation_index": 0,
      "label": "10 hour limit",
      "aliases": [
        "10 hour limit",
        "A 10 hour limit"
      ],
      "types": [
        "time constraint",
        "limit",
        "duration",
        "time limit"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The '10 hour limit' refers to the maximum duration allocated for the learning process of each target predicate in the evaluation of knowledge graph rule-learning methods.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-8",
          "local_name": "10 hour limit",
          "local_types": [
            "time constraint",
            "limit",
            "duration"
          ],
          "iri": "Entity-10_hour_limit-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-8",
          "local_name": "A 10 hour limit",
          "local_types": [
            "time limit"
          ],
          "iri": "Entity-10_hour_limit-Mention-2"
        }
      ],
      "relevance": 0.47900390625
    },
    "Entity-pt__e__e___or_pt__e___e_": {
      "node_id": "pt__e__e___or_pt__e___e_",
      "disambiguation_index": 0,
      "label": "Pt(e, e') or Pt(e', e)",
      "aliases": [
        "Pt(e, e') or Pt(e', e)"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention 'Pt(e, e') or Pt(e', e)' refers to a predicate that defines a relationship between two entities e and e' in the context of knowledge graphs, indicating that either e is related to e' or e' is related to e.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-5",
          "local_name": "Pt(e, e') or Pt(e', e)",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-pt__e__e___or_pt__e___e_-Mention-1"
        }
      ],
      "relevance": 0.478759765625
    },
    "Entity-entity_(1)": {
      "node_id": "entity_(1)",
      "disambiguation_index": 1,
      "label": "entities",
      "aliases": [
        "entities"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In this context, 'entities' refers to the individual items or instances within the knowledge graph that are associated with unary predicates, specifically those that denote occupations, such as 'singer' or 'entrepreneur'.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-3",
          "local_name": "entities",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-entity_(1)-Mention-1"
        }
      ],
      "relevance": 0.478759765625
    },
    "Entity-treesupp": {
      "node_id": "treesupp",
      "disambiguation_index": 0,
      "label": "Treesupp",
      "aliases": [
        "Treesupp",
        "Treesupp(r)"
      ],
      "types": [
        "function",
        "concept",
        "mathematical expression",
        "term",
        "mathematical concept",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Treesupp refers to the tree support metric, which quantifies the number of entity pairs that satisfy the head of a tree structure defined in the context of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-1",
          "local_name": "Treesupp",
          "local_types": [
            "term",
            "mathematical concept",
            "concept",
            "function"
          ],
          "iri": "Entity-treesupp-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-5",
          "local_name": "Treesupp(r)",
          "local_types": [
            "function",
            "mathematical expression",
            "metric"
          ],
          "iri": "Entity-treesupp-Mention-2"
        }
      ],
      "relevance": 0.478515625
    },
    "Entity-37": {
      "node_id": "37",
      "disambiguation_index": 0,
      "label": "37",
      "aliases": [
        "37"
      ],
      "types": [
        "number",
        "quantity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '37' refers to the total number of binary predicates used as target predicates in the YAGO2 knowledge graph.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-4",
          "local_name": "37",
          "local_types": [
            "number",
            "quantity"
          ],
          "iri": "Entity-37-Mention-1"
        }
      ],
      "relevance": 0.478515625
    },
    "Entity-chain_of_conjunctive_atom": {
      "node_id": "chain_of_conjunctive_atom",
      "disambiguation_index": 0,
      "label": "chain of conjunctive atoms",
      "aliases": [
        "chain of conjunctive atoms"
      ],
      "types": [
        "chain",
        "atom"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A chain of conjunctive atoms refers to a formal structure in predicate calculus where a rule consists of a single body atom and multiple conjunctively linked atoms in the head, which are used to express relationships and constraints in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-2",
          "local_name": "chain of conjunctive atoms",
          "local_types": [
            "chain",
            "atom"
          ],
          "iri": "Entity-chain_of_conjunctive_atom-Mention-1"
        }
      ],
      "relevance": 0.478515625
    },
    "Entity-the_general_form_of_a_tree": {
      "node_id": "the_general_form_of_a_tree",
      "disambiguation_index": 0,
      "label": "The general form of a tree",
      "aliases": [
        "the general form of a tree",
        "The general form of a tree"
      ],
      "types": [
        "tree structure",
        "concept",
        "mathematical structure"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The general form of a tree refers to a structured representation in the context of knowledge graphs, defined by a formal expression that outlines the relationships between entities through predicates, where the head represents the paths or branches and the body encapsulates the conditions that must be satisfied for the tree to hold true.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-1",
          "local_name": "The general form of a tree",
          "local_types": [
            "tree structure",
            "concept",
            "mathematical structure"
          ],
          "iri": "Entity-the_general_form_of_a_tree-Mention-1"
        }
      ],
      "relevance": 0.478271484375
    },
    "Entity-literature": {
      "node_id": "literature",
      "disambiguation_index": 0,
      "label": "literature",
      "aliases": [
        "literature"
      ],
      "types": [
        "research",
        "academic field",
        "research domain",
        "academic work"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'literature' refers to the body of academic work and research that explores the theoretical framework and applications of existential rules in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-7",
          "local_name": "literature",
          "local_types": [
            "research",
            "academic field",
            "research domain",
            "academic work"
          ],
          "iri": "Entity-literature-Mention-1"
        }
      ],
      "relevance": 0.47802734375
    },
    "Entity-similarity": {
      "node_id": "similarity",
      "disambiguation_index": 0,
      "label": "similarity",
      "aliases": [
        "similarity",
        "similarities"
      ],
      "types": [
        "comparison",
        "relation",
        "concept",
        "mathematical concept",
        "similarity",
        "relationship"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'similarity' refers to the relationship between the embeddings of predicate arguments in the IOP rules, indicating that predicates with shared variables should exhibit comparable embedding representations.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-3-Sentence-2",
          "local_name": "similarity",
          "local_types": [
            "mathematical concept",
            "relationship",
            "comparison",
            "similarity"
          ],
          "iri": "Entity-similarity-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-4",
          "local_name": "similarity",
          "local_types": [
            "mathematical concept",
            "relationship",
            "relation",
            "concept"
          ],
          "iri": "Entity-similarity-Mention-2"
        }
      ],
      "relevance": 0.47802734375
    },
    "Entity-algorithm": {
      "node_id": "algorithm",
      "disambiguation_index": 0,
      "label": "algorithm",
      "aliases": [
        "algorithm"
      ],
      "types": [
        "computational method",
        "procedure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An algorithm is a systematic procedure or set of rules designed to perform a task or solve a problem, often used in computational methods.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-3",
          "local_name": "algorithm",
          "local_types": [
            "computational method",
            "procedure"
          ],
          "iri": "Entity-algorithm-Mention-1"
        }
      ],
      "relevance": 0.477783203125
    },
    "Entity-non-structured_source": {
      "node_id": "non-structured_source",
      "disambiguation_index": 0,
      "label": "non-structured sources",
      "aliases": [
        "non-structured sources"
      ],
      "types": [
        "source"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Non-structured sources refer to data inputs that lack a predefined format or organization, such as Wikipedia, which are utilized in the automatic and semi-automatic population of knowledge graphs but may introduce errors due to their informal nature.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-3",
          "local_name": "non-structured sources",
          "local_types": [
            "source"
          ],
          "iri": "Entity-non-structured_source-Mention-1"
        }
      ],
      "relevance": 0.477783203125
    },
    "Entity-it_head": {
      "node_id": "it_head",
      "disambiguation_index": 0,
      "label": "its head",
      "aliases": [
        "its head"
      ],
      "types": [
        "head"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of SHACL trees, 'its head' refers to the sequence of paths or branches that represent the output or conclusion of the tree structure, which is derived from the body of the shape.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-4",
          "local_name": "its head",
          "local_types": [
            "head"
          ],
          "iri": "Entity-it_head-Mention-1"
        }
      ],
      "relevance": 0.477783203125
    },
    "Entity-fact_p0__e1__e2_": {
      "node_id": "fact_p0__e1__e2_",
      "disambiguation_index": 0,
      "label": "fact P0(e1, e2)",
      "aliases": [
        "fact P0(e1, e2)"
      ],
      "types": [
        "fact",
        "relation",
        "statement"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention 'fact P0(e1, e2)' refers to a specific relationship represented by the predicate P0 between two entities e1 and e2, which is evaluated using a scoring function to determine the plausibility of this relationship within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-4",
          "local_name": "fact P0(e1, e2)",
          "local_types": [
            "fact",
            "relation",
            "statement"
          ],
          "iri": "Entity-fact_p0__e1__e2_-Mention-1"
        }
      ],
      "relevance": 0.477294921875
    },
    "Entity-closed_intermediate_variable": {
      "node_id": "closed_intermediate_variable",
      "disambiguation_index": 0,
      "label": "closed intermediate variables",
      "aliases": [
        "closed intermediate variables"
      ],
      "types": [
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Closed intermediate variables are variables in a path shape that connect a sequence of predicates, serving as internal placeholders while the path itself begins and ends with open variables.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-2",
          "local_name": "closed intermediate variables",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-closed_intermediate_variable-Mention-1"
        }
      ],
      "relevance": 0.47705078125
    },
    "Entity-only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l": {
      "node_id": "only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l",
      "disambiguation_index": 0,
      "label": "only a very small proportion of entities associated with any predicate within distance l",
      "aliases": [
        "only a very small proportion of entities associated with any predicate within distance l"
      ],
      "types": [
        "proportion",
        "entity",
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention refers to the limited number of entities in a knowledge graph that are linked to any given predicate when considering connections within a specified distance l, highlighting the sparsity of real-world knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "only a very small proportion of entities associated with any predicate within distance l",
          "local_types": [
            "proportion",
            "entity",
            "predicate"
          ],
          "iri": "Entity-only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l-Mention-1"
        }
      ],
      "relevance": 0.476806640625
    },
    "Entity-entity__e__e__": {
      "node_id": "entity__e__e__",
      "disambiguation_index": 0,
      "label": "entities (e, e')",
      "aliases": [
        "entities (e, e')"
      ],
      "types": [
        "entity pair"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'entities (e, e')' refers to a pair of entities in a knowledge graph that are involved in a relationship defined by a set of predicates, where 'e' is the subject entity and 'e'' is the object entity connected through these predicates.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-3",
          "local_name": "entities (e, e')",
          "local_types": [
            "entity pair"
          ],
          "iri": "Entity-entity__e__e__-Mention-1"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-3",
          "local_name": "entities (e, e')",
          "local_types": [
            "entity pair"
          ],
          "iri": "Entity-entity__e__e__-Mention-2"
        }
      ],
      "relevance": 0.4765625
    },
    "Entity-rescal": {
      "node_id": "rescal",
      "disambiguation_index": 0,
      "label": "RESCAL",
      "aliases": [
        "RESCAL"
      ],
      "types": [
        "embedding learner",
        "embedding method",
        "model",
        "embedding technique",
        "algorithm",
        "embedding model"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "RESCAL is a tensor factorization model used for learning embeddings in relational data.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-4",
          "local_name": "RESCAL",
          "local_types": [
            "embedding learner",
            "model",
            "embedding technique",
            "algorithm",
            "embedding model"
          ],
          "iri": "Entity-rescal-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-2",
          "local_name": "RESCAL",
          "local_types": [
            "embedding learner",
            "model",
            "algorithm",
            "embedding model"
          ],
          "iri": "Entity-rescal-Mention-2"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-2",
          "local_name": "RESCAL",
          "local_types": [
            "embedding method",
            "algorithm",
            "model"
          ],
          "iri": "Entity-rescal-Mention-3"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "RESCAL",
          "local_types": [
            "embedding method",
            "algorithm",
            "model"
          ],
          "iri": "Entity-rescal-Mention-4"
        }
      ],
      "relevance": 0.475830078125
    },
    "Entity-e1__...__en": {
      "node_id": "e1__...__en",
      "disambiguation_index": 0,
      "label": "e1, ..., en",
      "aliases": [
        "e1, ..., en",
        "{e1, ..., en}"
      ],
      "types": [
        "set notation",
        "entity",
        "entities",
        "element of set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'e1, ..., en' refers to the set of all entities in the knowledge graph K, which is defined as K = (E, F) where E represents the collection of entities and F denotes the set of predicates.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "e1, ..., en",
          "local_types": [
            "entity",
            "element of set"
          ],
          "iri": "Entity-e1__...__en-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "{e1, ..., en}",
          "local_types": [
            "set notation",
            "entities"
          ],
          "iri": "Entity-e1__...__en-Mention-2"
        }
      ],
      "relevance": 0.4755859375
    },
    "Entity-nativelanguage__x__z3_": {
      "node_id": "nativelanguage__x__z3_",
      "disambiguation_index": 0,
      "label": "nativeLanguage(x, z3)",
      "aliases": [
        "nativeLanguage(x, z3)"
      ],
      "types": [
        "function",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'nativeLanguage(x, z3)' represents a predicate in a knowledge graph indicating that the entity 'x' has a native language represented by the entity 'z3'.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "nativeLanguage(x, z3)",
          "local_types": [
            "function",
            "logical expression"
          ],
          "iri": "Entity-nativelanguage__x__z3_-Mention-1"
        }
      ],
      "relevance": 0.4755859375
    },
    "Entity-not-null_and_other_schema-based_constraint": {
      "node_id": "not-null_and_other_schema-based_constraint",
      "disambiguation_index": 0,
      "label": "not-null and other schema-based constraints",
      "aliases": [
        "not-null and other schema-based constraints"
      ],
      "types": [
        "constraint"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Not-null and other schema-based constraints refer to rules in relational databases that mandate certain attributes to be present and correctly defined for each record, ensuring data integrity and consistency.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-2",
          "local_name": "not-null and other schema-based constraints",
          "local_types": [
            "constraint"
          ],
          "iri": "Entity-not-null_and_other_schema-based_constraint-Mention-1"
        }
      ],
      "relevance": 0.4755859375
    },
    "Entity-further__e__e__": {
      "node_id": "further__e__e__",
      "disambiguation_index": 0,
      "label": "Further (e, e')",
      "aliases": [
        "Further (e, e')"
      ],
      "types": [
        "relation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Further (e, e') refers to the condition where a pair of entities (e, e') satisfies the head of a closed path rule r in a knowledge graph, indicating that the fact Pt(e, e') is present in the graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-4",
          "local_name": "Further (e, e')",
          "local_types": [
            "relation"
          ],
          "iri": "Entity-further__e__e__-Mention-1"
        }
      ],
      "relevance": 0.4755859375
    },
    "Entity--10_": {
      "node_id": "-10_",
      "disambiguation_index": 0,
      "label": "-10%",
      "aliases": [
        "-10%"
      ],
      "types": [
        "performance",
        "performance metric",
        "percentage",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '-10%' refers to the percentage decrease in the number of rules learned by the SHACLEARNER system without sampling but with heuristic pruning, compared to the ideal rule learner that uses no pruning.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-4-Sentence-3",
          "local_name": "-10%",
          "local_types": [
            "performance",
            "performance metric",
            "percentage",
            "metric"
          ],
          "iri": "Entity--10_-Mention-1"
        }
      ],
      "relevance": 0.47509765625
    },
    "Entity-related_fact": {
      "node_id": "related_fact",
      "disambiguation_index": 0,
      "label": "related facts",
      "aliases": [
        "related facts"
      ],
      "types": [
        "fact",
        "data",
        "information"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'related facts' refers to additional information or data that is associated with a new predicate in the context of knowledge graphs, which is used to generate new unary facts.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-5",
          "local_name": "related facts",
          "local_types": [
            "fact",
            "data",
            "information"
          ],
          "iri": "Entity-related_fact-Mention-1"
        }
      ],
      "relevance": 0.474853515625
    },
    "Entity-their_second_argument": {
      "node_id": "their_second_argument",
      "disambiguation_index": 0,
      "label": "their second argument",
      "aliases": [
        "their second argument"
      ],
      "types": [
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'their second argument' refers to the class or type that is associated with certain predicates in the knowledge graphs, specifically indicating the type of entities that the predicates relate to.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-2",
          "local_name": "their second argument",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-their_second_argument-Mention-1"
        }
      ],
      "relevance": 0.474853515625
    },
    "Entity-binary_fact": {
      "node_id": "binary_fact",
      "disambiguation_index": 0,
      "label": "binary fact",
      "aliases": [
        "binary fact"
      ],
      "types": [
        "data representation",
        "fact",
        "logical expression",
        "logical statement"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "A binary fact refers to a specific type of data representation in a knowledge graph, represented as an RDF triple (e, P, e'), where 'e' is a subject entity, 'P' is a binary predicate, and 'e'' is an object entity, indicating a relationship between the two entities.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-3",
          "local_name": "binary fact",
          "local_types": [
            "logical expression",
            "fact"
          ],
          "iri": "Entity-binary_fact-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-1",
          "local_name": "binary fact",
          "local_types": [
            "data representation",
            "fact",
            "logical statement"
          ],
          "iri": "Entity-binary_fact-Mention-2"
        }
      ],
      "relevance": 0.474365234375
    },
    "Entity-treescorig": {
      "node_id": "treescorig",
      "disambiguation_index": 0,
      "label": "TreeSCorig",
      "aliases": [
        "TreeSCorig"
      ],
      "types": [
        "confidence",
        "tree score",
        "confidence score",
        "metric",
        "evaluation measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "TreeSCorig refers to the original confidence score of a tree structure in the context of evaluating the quality of shapes derived from knowledge graphs, indicating the reliability of the tree before any pruning is applied.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "TreeSCorig",
          "local_types": [
            "confidence",
            "tree score",
            "confidence score",
            "metric",
            "evaluation measure"
          ],
          "iri": "Entity-treescorig-Mention-1"
        }
      ],
      "relevance": 0.474365234375
    },
    "Entity-distance_l": {
      "node_id": "distance_l",
      "disambiguation_index": 0,
      "label": "distance l",
      "aliases": [
        "distance l"
      ],
      "types": [
        "parameter",
        "distance",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'distance l' refers to the maximum number of atoms or steps in the path that can be traversed in the knowledge graph when searching for related entities associated with a target predicate.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "distance l",
          "local_types": [
            "parameter",
            "distance",
            "metric"
          ],
          "iri": "Entity-distance_l-Mention-1"
        }
      ],
      "relevance": 0.473876953125
    },
    "Entity-a__p1___a__p2_____000____021____100__": {
      "node_id": "a__p1___a__p2_____000____021____100__",
      "disambiguation_index": 0,
      "label": "A(P1)*A(P2) = [[0,0,0],[0,2,1],[1,0,0]]",
      "aliases": [
        "A(P1)*A(P2) = [[0,0,0],[0,2,1],[1,0,0]]"
      ],
      "types": [
        "matrix equation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The expression A(P1)*A(P2) = [[0,0,0],[0,2,1],[1,0,0]] represents the result of multiplying the adjacency matrices corresponding to predicates P1 and P2 in a knowledge graph, yielding a matrix that indicates the connections between entities based on these predicates.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-5",
          "local_name": "A(P1)*A(P2) = [[0,0,0],[0,2,1],[1,0,0]]",
          "local_types": [
            "matrix equation"
          ],
          "iri": "Entity-a__p1___a__p2_____000____021____100__-Mention-1"
        }
      ],
      "relevance": 0.47314453125
    },
    "Entity-set": {
      "node_id": "set",
      "disambiguation_index": 0,
      "label": "set",
      "aliases": [
        "set"
      ],
      "types": [
        "mathematical concept",
        "collection"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'set' refers to a mathematical collection of entities, specifically the group of entities that satisfy a given condition in the context of the IOP rule, represented as {e2}.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-5",
          "local_name": "set",
          "local_types": [
            "mathematical concept",
            "collection"
          ],
          "iri": "Entity-set-Mention-1"
        }
      ],
      "relevance": 0.47314453125
    },
    "Entity-tree_standard_confidence": {
      "node_id": "tree_standard_confidence",
      "disambiguation_index": 0,
      "label": "tree standard confidence",
      "aliases": [
        "tree standard confidence"
      ],
      "types": [
        "graph theory",
        "statistical measure",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Tree standard confidence is a metric used to evaluate the quality of a tree structure in knowledge graphs, defined as the ratio of the number of entity pairs satisfying the tree's head to the total number of entities satisfying its body.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-5",
          "local_name": "tree standard confidence",
          "local_types": [
            "graph theory",
            "statistical measure",
            "metric"
          ],
          "iri": "Entity-tree_standard_confidence-Mention-1"
        }
      ],
      "relevance": 0.47314453125
    },
    "Entity-plausibility_of_the_fact": {
      "node_id": "plausibility_of_the_fact",
      "disambiguation_index": 0,
      "label": "plausibility of the fact",
      "aliases": [
        "the plausibility of the fact",
        "plausibility of the fact"
      ],
      "types": [
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'plausibility of the fact' refers to the likelihood or confidence that a specific relationship holds true between two entities in a knowledge graph, as determined by a scoring function in the context of embedding-based learning.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-5",
          "local_name": "plausibility of the fact",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-plausibility_of_the_fact-Mention-1"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-5",
          "local_name": "the plausibility of the fact",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-plausibility_of_the_fact-Mention-2"
        }
      ],
      "relevance": 0.472412109375
    },
    "Entity-greedy_search": {
      "node_id": "greedy_search",
      "disambiguation_index": 0,
      "label": "greedy search",
      "aliases": [
        "greedy search"
      ],
      "types": [
        "search",
        "search algorithm",
        "algorithm",
        "search method"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Greedy search is a search algorithm that makes locally optimal choices at each step with the hope of finding a global optimum.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-3",
          "local_name": "greedy search",
          "local_types": [
            "search",
            "search algorithm",
            "algorithm",
            "search method"
          ],
          "iri": "Entity-greedy_search-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-1",
          "local_name": "greedy search",
          "local_types": [
            "search algorithm",
            "algorithm",
            "search method"
          ],
          "iri": "Entity-greedy_search-Mention-2"
        }
      ],
      "relevance": 0.472412109375
    },
    "Entity-fact_about_entity": {
      "node_id": "fact_about_entity",
      "disambiguation_index": 0,
      "label": "facts about entities",
      "aliases": [
        "facts about entities"
      ],
      "types": [
        "fact",
        "entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The phrase 'facts about entities' refers to the specific pieces of information or data points that describe or characterize entities within a knowledge graph, particularly those that are not currently represented in the graph.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-1",
          "local_name": "facts about entities",
          "local_types": [
            "fact",
            "entity"
          ],
          "iri": "Entity-fact_about_entity-Mention-1"
        }
      ],
      "relevance": 0.4716796875
    },
    "Entity-numerical_confidence_measure": {
      "node_id": "numerical_confidence_measure",
      "disambiguation_index": 0,
      "label": "numerical confidence measure",
      "aliases": [
        "novel numerical confidence measure",
        "numerical confidence measure"
      ],
      "types": [
        "confidence measure",
        "statistical measure",
        "measure",
        "evaluation metric",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The numerical confidence measure is a quantitative metric used to indicate the strength of evidence supporting each mined shape in a knowledge graph, enhancing the evaluation of the validity of these shapes.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-8",
          "local_name": "numerical confidence measure",
          "local_types": [
            "confidence measure",
            "statistical measure",
            "measure",
            "evaluation metric",
            "metric"
          ],
          "iri": "Entity-numerical_confidence_measure-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-6-Sentence-8",
          "local_name": "novel numerical confidence measure",
          "local_types": [
            "measure",
            "confidence measure"
          ],
          "iri": "Entity-numerical_confidence_measure-Mention-2"
        }
      ],
      "relevance": 0.470703125
    },
    "Entity-_e__f_": {
      "node_id": "_e__f_",
      "disambiguation_index": 0,
      "label": "(E, F)",
      "aliases": [
        "(E, F)"
      ],
      "types": [
        "tuple"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term (E, F) refers to a tuple where E is the set of all entities in a knowledge graph, represented as {e1, ..., en}, and F is the set of all predicates associated with these entities.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "(E, F)",
          "local_types": [
            "tuple"
          ],
          "iri": "Entity-_e__f_-Mention-1"
        }
      ],
      "relevance": 0.470703125
    },
    "Entity-type_song": {
      "node_id": "type_song",
      "disambiguation_index": 0,
      "label": "type song",
      "aliases": [
        "type song"
      ],
      "types": [
        "type",
        "song"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'type song' refers to an entity classification within a knowledge graph (KG) that indicates an entity categorized as a song, which is expected to have associated facts and attributes relevant to its classification.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-5",
          "local_name": "type song",
          "local_types": [
            "type",
            "song"
          ],
          "iri": "Entity-type_song-Mention-1"
        }
      ],
      "relevance": 0.470458984375
    },
    "Entity-inductive_logic_programming": {
      "node_id": "inductive_logic_programming",
      "disambiguation_index": 0,
      "label": "inductive logic programming",
      "aliases": [
        "inductive logic programming"
      ],
      "types": [
        "machine learning",
        "programming",
        "method",
        "programming paradigm",
        "machine learning technique",
        "methodology",
        "field"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Inductive logic programming is a subfield of machine learning that focuses on the development of algorithms that learn logical rules from examples, combining elements of logic programming and inductive reasoning.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-5",
          "local_name": "inductive logic programming",
          "local_types": [
            "machine learning",
            "programming",
            "method",
            "programming paradigm",
            "machine learning technique",
            "methodology",
            "field"
          ],
          "iri": "Entity-inductive_logic_programming-Mention-1"
        }
      ],
      "relevance": 0.47021484375
    },
    "Entity-embeddings": {
      "node_id": "embeddings",
      "disambiguation_index": 0,
      "label": "Embeddings",
      "aliases": [
        "embedding representations",
        "embeddings",
        "embedding representation",
        "Embeddings"
      ],
      "types": [
        "machine learning concept",
        "vector representation",
        "machine learning",
        "vector",
        "method",
        "data structure",
        "data representation",
        "mathematical concept",
        "embedding",
        "representation",
        "mathematical representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Embeddings are mathematical representations of objects, typically in the form of vectors, that capture semantic relationships and properties in a lower-dimensional space, commonly used in machine learning and data analysis.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-12-Sentence-6",
          "local_name": "Embeddings",
          "local_types": [
            "data representation",
            "mathematical concept",
            "representation",
            "machine learning"
          ],
          "iri": "Entity-embeddings-Mention-1"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-4",
          "local_name": "Embeddings",
          "local_types": [
            "method",
            "data structure",
            "representation"
          ],
          "iri": "Entity-embeddings-Mention-2"
        },
        {
          "reference": "Section-10-Paragraph-3-Sentence-1",
          "local_name": "embeddings",
          "local_types": [
            "vector representation",
            "machine learning concept"
          ],
          "iri": "Entity-embeddings-Mention-3"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-2",
          "local_name": "embeddings",
          "local_types": [
            "vector",
            "vector representation",
            "representation",
            "machine learning"
          ],
          "iri": "Entity-embeddings-Mention-4"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-3",
          "local_name": "embeddings",
          "local_types": [
            "data representation",
            "embedding",
            "vector"
          ],
          "iri": "Entity-embeddings-Mention-5"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-5",
          "local_name": "embedding representations",
          "local_types": [
            "data representation",
            "machine learning concept",
            "representation"
          ],
          "iri": "Entity-embeddings-Mention-6"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-1",
          "local_name": "embedding representation",
          "local_types": [
            "data representation",
            "mathematical concept",
            "representation"
          ],
          "iri": "Entity-embeddings-Mention-7"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "embedding representation",
          "local_types": [
            "data representation",
            "mathematical concept",
            "mathematical representation",
            "representation"
          ],
          "iri": "Entity-embeddings-Mention-8"
        }
      ],
      "relevance": 0.469970703125
    },
    "Entity-the_head_of_the_rule_(1)": {
      "node_id": "the_head_of_the_rule_(1)",
      "disambiguation_index": 1,
      "label": "the head of the rule",
      "aliases": [
        "the head of the rule"
      ],
      "types": [
        "head",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The head of the rule refers to the part of a logical rule in the context of knowledge graphs that specifies the conclusion or outcome, represented as a count of entities that satisfy the condition defined by the rule.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-5-Sentence-3",
          "local_name": "the head of the rule",
          "local_types": [
            "rule",
            "head"
          ],
          "iri": "Entity-the_head_of_the_rule_(1)-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "the head of the rule",
          "local_types": [
            "rule",
            "head"
          ],
          "iri": "Entity-the_head_of_the_rule_(1)-Mention-2"
        }
      ],
      "relevance": 0.469970703125
    },
    "Entity-description_logic_ontology": {
      "node_id": "description_logic_ontology",
      "disambiguation_index": 0,
      "label": "Description Logic ontologies",
      "aliases": [
        "Description Logic ontologies"
      ],
      "types": [
        "ontology",
        "knowledge representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Description Logic ontologies are formal representations of knowledge that utilize Description Logic, a family of knowledge representation languages designed to represent the knowledge of an application domain in a structured and interpretable way.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-3",
          "local_name": "Description Logic ontologies",
          "local_types": [
            "ontology",
            "knowledge representation"
          ],
          "iri": "Entity-description_logic_ontology-Mention-1"
        }
      ],
      "relevance": 0.4697265625
    },
    "Entity-the_subject_argument_(1)": {
      "node_id": "the_subject_argument_(1)",
      "disambiguation_index": 1,
      "label": "the subject argument",
      "aliases": [
        "the subject argument"
      ],
      "types": [
        "argument"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The subject argument refers to the variable in a binary predicate that connects the head of the rule in its reverse form, playing a crucial role in the evaluation of knowledge graph rule-learning methods.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "the subject argument",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-the_subject_argument_(1)-Mention-1"
        }
      ],
      "relevance": 0.4697265625
    },
    "Entity-breadth-first_manner": {
      "node_id": "breadth-first_manner",
      "disambiguation_index": 0,
      "label": "breadth-first manner",
      "aliases": [
        "breadth-first manner"
      ],
      "types": [
        "strategy",
        "algorithm",
        "traversal method"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A breadth-first manner refers to a strategy or algorithm for traversing structures, such as graphs or trees, by exploring all the neighbor nodes at the present depth prior to moving on to nodes at the next depth level.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-3",
          "local_name": "breadth-first manner",
          "local_types": [
            "strategy",
            "algorithm",
            "traversal method"
          ],
          "iri": "Entity-breadth-first_manner-Mention-1"
        }
      ],
      "relevance": 0.469482421875
    },
    "Entity-the_embedding_representation": {
      "node_id": "the_embedding_representation",
      "disambiguation_index": 0,
      "label": "the embedding representation",
      "aliases": [
        "the embedding representation"
      ],
      "types": [
        "representation"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The embedding representation refers to a mathematical construct that captures the relationships and properties of predicates in a knowledge graph by representing them as vectors in an embedding space, allowing for the computation of similarities and the evaluation of composite predicates.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "the embedding representation",
          "local_types": [
            "representation"
          ],
          "iri": "Entity-the_embedding_representation-Mention-1"
        }
      ],
      "relevance": 0.46923828125
    },
    "Entity-type_information": {
      "node_id": "type_information",
      "disambiguation_index": 0,
      "label": "type information",
      "aliases": [
        "type information"
      ],
      "types": [
        "data attribute",
        "information",
        "type",
        "metadata"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Type information refers to metadata that describes the characteristics and classification of data within a knowledge graph, facilitating data validation and inference.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-2",
          "local_name": "type information",
          "local_types": [
            "data attribute",
            "information",
            "type",
            "metadata"
          ],
          "iri": "Entity-type_information-Mention-1"
        }
      ],
      "relevance": 0.468994140625
    },
    "Entity-lower_quality_rule": {
      "node_id": "lower_quality_rule",
      "disambiguation_index": 0,
      "label": "lower quality rules",
      "aliases": [
        "lower quality rules"
      ],
      "types": [
        "quality",
        "rule",
        "principle",
        "guideline"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Lower quality rules refer to the rules generated during the learning process that do not meet the established minimum quality thresholds for confidence and coverage, and are thus considered less reliable or informative.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-6",
          "local_name": "lower quality rules",
          "local_types": [
            "quality",
            "rule",
            "principle",
            "guideline"
          ],
          "iri": "Entity-lower_quality_rule-Mention-1"
        }
      ],
      "relevance": 0.468994140625
    },
    "Entity-explanatory_power_of_the_rule": {
      "node_id": "explanatory_power_of_the_rule",
      "disambiguation_index": 0,
      "label": "explanatory power of the rule",
      "aliases": [
        "the explanatory power of the rule",
        "explanatory power of the rule"
      ],
      "types": [
        "power",
        "concept",
        "rule",
        "explanatory power"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'explanatory power of the rule' refers to the head coverage (HC) measure in rule learning, which quantifies the proportion of facts that can be inferred from the body of a rule relative to the facts that satisfy the rule's head.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-4",
          "local_name": "explanatory power of the rule",
          "local_types": [
            "power",
            "rule"
          ],
          "iri": "Entity-explanatory_power_of_the_rule-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-4",
          "local_name": "the explanatory power of the rule",
          "local_types": [
            "concept",
            "explanatory power"
          ],
          "iri": "Entity-explanatory_power_of_the_rule-Mention-2"
        }
      ],
      "relevance": 0.46875
    },
    "Entity-e1t": {
      "node_id": "e1t",
      "disambiguation_index": 0,
      "label": "E1^T",
      "aliases": [
        "E1^T"
      ],
      "types": [
        "mathematical object",
        "transpose vector",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "E1^T refers to the transpose of the embedding vector associated with the entity e1 in the context of a scoring function used to evaluate the plausibility of a relationship between entities in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-4",
          "local_name": "E1^T",
          "local_types": [
            "mathematical object",
            "transpose vector",
            "matrix"
          ],
          "iri": "Entity-e1t-Mention-1"
        }
      ],
      "relevance": 0.46875
    },
    "Entity-confidence_treescorig": {
      "node_id": "confidence_treescorig",
      "disambiguation_index": 0,
      "label": "confidence TreeSCorig",
      "aliases": [
        "confidence TreeSCorig"
      ],
      "types": [
        "confidence",
        "metric"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'confidence TreeSCorig' refers to a metric that quantifies the confidence level of a tree structure derived from knowledge graphs, indicating the reliability of the tree's predictions based on the underlying data and rules used to construct it.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-2",
          "local_name": "confidence TreeSCorig",
          "local_types": [
            "confidence",
            "metric"
          ],
          "iri": "Entity-confidence_treescorig-Mention-1"
        }
      ],
      "relevance": 0.468505859375
    },
    "Entity-missing_fact": {
      "node_id": "missing_fact",
      "disambiguation_index": 0,
      "label": "missing facts",
      "aliases": [
        "missing facts"
      ],
      "types": [
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Missing facts refer to the unrecorded or incomplete information within knowledge graphs that various methods aim to predict or infer to enhance the graph's completeness and utility.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-3",
          "local_name": "missing facts",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-missing_fact-Mention-1"
        }
      ],
      "relevance": 0.46826171875
    },
    "Entity-w3c_recommendation": {
      "node_id": "w3c_recommendation",
      "disambiguation_index": 0,
      "label": "W3C recommendation",
      "aliases": [
        "W3C recommendation"
      ],
      "types": [
        "recommendation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A W3C recommendation is a formal specification or guideline published by the World Wide Web Consortium (W3C) that defines standards and best practices for web technologies.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-3",
          "local_name": "W3C recommendation",
          "local_types": [
            "recommendation"
          ],
          "iri": "Entity-w3c_recommendation-Mention-1"
        }
      ],
      "relevance": 0.468017578125
    },
    "Entity-depth-first": {
      "node_id": "depth-first",
      "disambiguation_index": 0,
      "label": "depth-first",
      "aliases": [
        "depth-first"
      ],
      "types": [
        "strategy",
        "method",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Depth-first refers to a strategy or algorithm that explores as far as possible along each branch before backtracking, commonly used in tree and graph traversal.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-6",
          "local_name": "depth-first",
          "local_types": [
            "strategy",
            "method",
            "algorithm"
          ],
          "iri": "Entity-depth-first-Mention-1"
        }
      ],
      "relevance": 0.468017578125
    },
    "Entity-rdf_database": {
      "node_id": "rdf_database",
      "disambiguation_index": 0,
      "label": "RDF databases",
      "aliases": [
        "RDF databases"
      ],
      "types": [
        "data structure",
        "RDF",
        "database"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "RDF databases are specialized databases designed to store, retrieve, and manage data structured in the Resource Description Framework (RDF) format, which facilitates the representation of information about resources in a graph-based model.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "RDF databases",
          "local_types": [
            "data structure",
            "RDF",
            "database"
          ],
          "iri": "Entity-rdf_database-Mention-1"
        }
      ],
      "relevance": 0.4677734375
    },
    "Entity-class_membership": {
      "node_id": "class_membership",
      "disambiguation_index": 0,
      "label": "class membership",
      "aliases": [
        "class membership"
      ],
      "types": [
        "categorization",
        "classification"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Class membership refers to the representation of an entity's association with a specific category or type within a knowledge graph, often modeled as instances of binary facts that indicate the entity's classification.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-1",
          "local_name": "class membership",
          "local_types": [
            "categorization",
            "classification"
          ],
          "iri": "Entity-class_membership-Mention-1"
        }
      ],
      "relevance": 0.4677734375
    },
    "Entity-location": {
      "node_id": "location",
      "disambiguation_index": 0,
      "label": "location",
      "aliases": [
        "location"
      ],
      "types": [
        "data type"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of SHACL shapes, 'location' refers to a specific type of attribute that represents a geographical place associated with an entity, such as a person's place of birth.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-2",
          "local_name": "location",
          "local_types": [
            "data type"
          ],
          "iri": "Entity-location-Mention-1"
        }
      ],
      "relevance": 0.467529296875
    },
    "Entity-a_place": {
      "node_id": "a_place",
      "disambiguation_index": 0,
      "label": "a place",
      "aliases": [
        "a place"
      ],
      "types": [
        "place"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'a place' refers to a specific type of entity that represents a geographical location or area, which can be identified and related to other entities within the graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-1",
          "local_name": "a place",
          "local_types": [
            "place"
          ],
          "iri": "Entity-a_place-Mention-1"
        }
      ],
      "relevance": 0.46728515625
    },
    "Entity-___e__e____pt__e__e____": {
      "node_id": "___e__e____pt__e__e____",
      "disambiguation_index": 0,
      "label": "|{ (e, e') : Pt(e, e') }|",
      "aliases": [
        "|{ (e, e') : Pt(e, e') }|",
        "|{ e' : Pt(e', e) }|"
      ],
      "types": [
        "mathematical expression",
        "set notation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The expression |{ (e, e') : Pt(e, e') }| represents the set of entity pairs (e, e') that satisfy the predicate Pt in a knowledge graph, indicating the instances where the relationship defined by Pt holds true.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-9-Sentence-4",
          "local_name": "|{ (e, e') : Pt(e, e') }|",
          "local_types": [
            "set notation",
            "mathematical expression"
          ],
          "iri": "Entity-___e__e____pt__e__e____-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-7",
          "local_name": "|{ e' : Pt(e', e) }|",
          "local_types": [
            "set notation",
            "mathematical expression"
          ],
          "iri": "Entity-___e__e____pt__e__e____-Mention-2"
        }
      ],
      "relevance": 0.46630859375
    },
    "Entity-the_logical_statement_of_the_rule": {
      "node_id": "the_logical_statement_of_the_rule",
      "disambiguation_index": 0,
      "label": "the logical statement of the rule",
      "aliases": [
        "the logical statement of the rule"
      ],
      "types": [
        "logical statement",
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The logical statement of the rule refers to a formal representation of the relationships and constraints defined by a rule in the context of knowledge graphs, which is linked to the properties of the embedding space used for evaluating the rule's effectiveness.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-2",
          "local_name": "the logical statement of the rule",
          "local_types": [
            "logical statement",
            "rule"
          ],
          "iri": "Entity-the_logical_statement_of_the_rule-Mention-1"
        }
      ],
      "relevance": 0.466064453125
    },
    "Entity-1": {
      "node_id": "1",
      "disambiguation_index": 0,
      "label": "1",
      "aliases": [
        "1"
      ],
      "types": [
        "value",
        "integer",
        "binary value"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '1' refers to a binary value in the context of an adjacency matrix representation of a knowledge graph, indicating the presence or absence of a fact between two entities.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "1",
          "local_types": [
            "binary value"
          ],
          "iri": "Entity-1-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "1",
          "local_types": [
            "integer",
            "value"
          ],
          "iri": "Entity-1-Mention-2"
        }
      ],
      "relevance": 0.4658203125
    },
    "Entity-human__x__x__-__citizenof__x__z1___country__z1__z1_": {
      "node_id": "human__x__x__-__citizenof__x__z1___country__z1__z1_",
      "disambiguation_index": 0,
      "label": "human(x, x) -> citizenOf(x, z1) ^ country(z1, z1)",
      "aliases": [
        "human(x, x) -> citizenOf(x, z1) ^ country(z1, z1)"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'human(x, x) -> citizenOf(x, z1) ^ country(z1, z1)' represents an inverse open path rule that specifies that for every human entity x, there exists a country z1 such that x is a citizen of z1, thereby establishing a relationship between humans and their citizenship in a specific country.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "human(x, x) -> citizenOf(x, z1) ^ country(z1, z1)",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-human__x__x__-__citizenof__x__z1___country__z1__z1_-Mention-1"
        }
      ],
      "relevance": 0.4658203125
    },
    "Entity-the_rule_body": {
      "node_id": "the_rule_body",
      "disambiguation_index": 0,
      "label": "the rule body",
      "aliases": [
        "the rule body"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The rule body refers to the set of conditions or predicates in a rule that must be satisfied in a knowledge graph in order to infer a conclusion or fact represented by the rule's head.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-4",
          "local_name": "the rule body",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_rule_body-Mention-1"
        }
      ],
      "relevance": 0.465576171875
    },
    "Entity-a_variable": {
      "node_id": "a_variable",
      "disambiguation_index": 0,
      "label": "a variable",
      "aliases": [
        "a variable"
      ],
      "types": [
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A variable is a symbolic representation used in predicate logic to denote entities in a knowledge graph, which can be classified as either closed, occurring in multiple predicate terms, or open, occurring in fewer predicate terms.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-1",
          "local_name": "a variable",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-a_variable-Mention-1"
        }
      ],
      "relevance": 0.465576171875
    },
    "Entity-an_explosion_in_the_space_of_possible_shape": {
      "node_id": "an_explosion_in_the_space_of_possible_shape",
      "disambiguation_index": 0,
      "label": "an explosion in the space of possible shapes",
      "aliases": [
        "an explosion in the space of possible shapes"
      ],
      "types": [
        "event",
        "shapes"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'an explosion in the space of possible shapes' refers to the significant increase in the variety and complexity of shapes that can be generated when learning from partially instantiated shapes in knowledge graphs, which complicates the shape learning process.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-2",
          "local_name": "an explosion in the space of possible shapes",
          "local_types": [
            "event",
            "shapes"
          ],
          "iri": "Entity-an_explosion_in_the_space_of_possible_shape-Mention-1"
        }
      ],
      "relevance": 0.465576171875
    },
    "Entity-31_": {
      "node_id": "31_",
      "disambiguation_index": 0,
      "label": "31%",
      "aliases": [
        "31%"
      ],
      "types": [
        "percentage"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "31% refers to the average proportion of branches in the mined trees relative to the corresponding number of mined rules in the context of learning shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "31%",
          "local_types": [
            "percentage"
          ],
          "iri": "Entity-31_-Mention-1"
        }
      ],
      "relevance": 0.465576171875
    },
    "Entity-thirty-five_predicate": {
      "node_id": "thirty-five_predicate",
      "disambiguation_index": 0,
      "label": "thirty-five predicates",
      "aliases": [
        "thirty-five predicates"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'thirty-five predicates' refers to a total of thirty-five distinct predicates identified in the context of the Poker knowledge graph, of which twenty-eight are unary predicates representing specific attributes of poker hands.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-9",
          "local_name": "thirty-five predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-thirty-five_predicate-Mention-1"
        }
      ],
      "relevance": 0.46533203125
    },
    "Entity-web": {
      "node_id": "web",
      "disambiguation_index": 0,
      "label": "Web",
      "aliases": [
        "Web"
      ],
      "types": [
        "internet",
        "platform"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The Web refers to the global system of interconnected computer networks that enables the sharing and access of information, particularly in the context of knowledge graphs and online data resources.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-1-Sentence-1",
          "local_name": "Web",
          "local_types": [
            "internet",
            "platform"
          ],
          "iri": "Entity-web-Mention-1"
        }
      ],
      "relevance": 0.465087890625
    },
    "Entity-matrix-computation": {
      "node_id": "matrix-computation",
      "disambiguation_index": 0,
      "label": "matrix-computation",
      "aliases": [
        "matrix-computation"
      ],
      "types": [
        "computational method",
        "mathematical operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Matrix-computation refers to the process of performing mathematical operations on matrices, which are rectangular arrays of numbers, symbols, or expressions, to derive results or solve problems in various fields such as mathematics, computer science, and engineering.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-1-Sentence-1",
          "local_name": "matrix-computation",
          "local_types": [
            "computational method",
            "mathematical operation"
          ],
          "iri": "Entity-matrix-computation-Mention-1"
        }
      ],
      "relevance": 0.465087890625
    },
    "Entity-embedding_learning": {
      "node_id": "embedding_learning",
      "disambiguation_index": 0,
      "label": "embedding learning",
      "aliases": [
        "embedding learning"
      ],
      "types": [
        "learning technique",
        "process",
        "embedding",
        "machine learning technique"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Embedding learning is a machine learning technique that involves the process of transforming data into a continuous vector space representation, allowing for the capture of semantic relationships and similarities between data points.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-1",
          "local_name": "embedding learning",
          "local_types": [
            "learning technique",
            "process",
            "embedding",
            "machine learning technique"
          ],
          "iri": "Entity-embedding_learning-Mention-1"
        }
      ],
      "relevance": 0.465087890625
    },
    "Entity-e_": {
      "node_id": "e_",
      "disambiguation_index": 0,
      "label": "e'",
      "aliases": [
        "e'"
      ],
      "types": [
        "element",
        "mathematical object",
        "entity",
        "mathematical entity",
        "variable",
        "parameter",
        "mathematical symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity e' refers to an object entity in a knowledge graph that is related to another entity e through a binary predicate in the context of RDF triples.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-7-Sentence-4",
          "local_name": "e'",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-e_-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-2",
          "local_name": "e'",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-e_-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-4",
          "local_name": "e'",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e_-Mention-3"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-4",
          "local_name": "e'",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-e_-Mention-4"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-2",
          "local_name": "e'",
          "local_types": [
            "variable",
            "element"
          ],
          "iri": "Entity-e_-Mention-5"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-6",
          "local_name": "e'",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-e_-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-7",
          "local_name": "e'",
          "local_types": [
            "variable",
            "mathematical entity"
          ],
          "iri": "Entity-e_-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-8",
          "local_name": "e'",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-e_-Mention-8"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "e'",
          "local_types": [
            "variable",
            "entity"
          ],
          "iri": "Entity-e_-Mention-9"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-5",
          "local_name": "e'",
          "local_types": [
            "entity",
            "variable",
            "element"
          ],
          "iri": "Entity-e_-Mention-10"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-7",
          "local_name": "e'",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e_-Mention-11"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-10",
          "local_name": "e'",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e_-Mention-12"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-2",
          "local_name": "e'",
          "local_types": [
            "variable",
            "mathematical symbol"
          ],
          "iri": "Entity-e_-Mention-13"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-3",
          "local_name": "e'",
          "local_types": [
            "variable",
            "entity"
          ],
          "iri": "Entity-e_-Mention-14"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "e'",
          "local_types": [
            "variable",
            "mathematical object"
          ],
          "iri": "Entity-e_-Mention-15"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-5",
          "local_name": "e'",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e_-Mention-16"
        }
      ],
      "relevance": 0.46435546875
    },
    "Entity-heuristic_pruning": {
      "node_id": "heuristic_pruning",
      "disambiguation_index": 0,
      "label": "heuristic pruning",
      "aliases": [
        "heuristic pruning"
      ],
      "types": [
        "technique",
        "optimization technique",
        "method",
        "algorithm",
        "optimization method",
        "algorithmic strategy",
        "pruning method",
        "process",
        "pruning"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Heuristic pruning is an optimization technique that systematically eliminates less promising candidates in a search space to enhance the efficiency of algorithms.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-1-Sentence-1",
          "local_name": "heuristic pruning",
          "local_types": [
            "technique",
            "optimization technique",
            "method",
            "optimization method",
            "algorithmic strategy",
            "pruning method"
          ],
          "iri": "Entity-heuristic_pruning-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-1",
          "local_name": "heuristic pruning",
          "local_types": [
            "technique",
            "optimization technique",
            "method",
            "pruning method",
            "process",
            "pruning"
          ],
          "iri": "Entity-heuristic_pruning-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-2-Sentence-3",
          "local_name": "heuristic pruning",
          "local_types": [
            "optimization technique",
            "method"
          ],
          "iri": "Entity-heuristic_pruning-Mention-3"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-1",
          "local_name": "heuristic pruning",
          "local_types": [
            "technique",
            "method",
            "algorithm",
            "pruning method",
            "pruning"
          ],
          "iri": "Entity-heuristic_pruning-Mention-4"
        }
      ],
      "relevance": 0.46435546875
    },
    "Entity-learnt_embeddings": {
      "node_id": "learnt_embeddings",
      "disambiguation_index": 0,
      "label": "learnt embeddings",
      "aliases": [
        "learnt embeddings"
      ],
      "types": [
        "embedding"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Learnt embeddings are vector representations of data points that are generated through a learning process, typically used in machine learning to capture semantic relationships and features of the data.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-6-Sentence-2",
          "local_name": "learnt embeddings",
          "local_types": [
            "embedding"
          ],
          "iri": "Entity-learnt_embeddings-Mention-1"
        }
      ],
      "relevance": 0.46435546875
    },
    "Entity-search_space": {
      "node_id": "search_space",
      "disambiguation_index": 0,
      "label": "search space",
      "aliases": [
        "search space"
      ],
      "types": [
        "mathematical concept",
        "computational theory",
        "concept",
        "problem space"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A search space is a mathematical and computational concept that represents the set of all possible solutions or configurations that can be explored in the process of solving a problem.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-2-Sentence-3",
          "local_name": "search space",
          "local_types": [
            "mathematical concept",
            "computational theory",
            "concept",
            "problem space"
          ],
          "iri": "Entity-search_space-Mention-1"
        }
      ],
      "relevance": 0.4638671875
    },
    "Entity-strength_of_evidence": {
      "node_id": "strength_of_evidence",
      "disambiguation_index": 0,
      "label": "strength of evidence",
      "aliases": [
        "strength of evidence"
      ],
      "types": [
        "evidence"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term 'strength of evidence' refers to a numerical confidence measure that quantifies the validity of mined shapes in a knowledge graph, indicating the reliability of the evidence supporting each shape.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-8",
          "local_name": "strength of evidence",
          "local_types": [
            "evidence"
          ],
          "iri": "Entity-strength_of_evidence-Mention-1"
        }
      ],
      "relevance": 0.4638671875
    },
    "Entity-treescmin": {
      "node_id": "treescmin",
      "disambiguation_index": 0,
      "label": "TreeSCMIN",
      "aliases": [
        "TreeSCMIN"
      ],
      "types": [
        "threshold",
        "evaluation measure",
        "parameter",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "TreeSCMIN is a defined threshold used to determine whether the Tree Standard Confidence (TreeSC) of a tree structure in the SHACLearner algorithm is sufficient to include a rule in the tree, where rules are dismissed if their TreeSC falls below this minimum value.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-4",
          "local_name": "TreeSCMIN",
          "local_types": [
            "threshold",
            "evaluation measure",
            "parameter",
            "metric"
          ],
          "iri": "Entity-treescmin-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-2",
          "local_name": "TreeSCMIN",
          "local_types": [
            "parameter",
            "metric"
          ],
          "iri": "Entity-treescmin-Mention-2"
        }
      ],
      "relevance": 0.463623046875
    },
    "Entity-averaged_over_the_target": {
      "node_id": "averaged_over_the_target",
      "disambiguation_index": 0,
      "label": "averaged over the targets",
      "aliases": [
        "averaged over the targets"
      ],
      "types": [
        "methodology"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'averaged over the targets' refers to the statistical calculation of mean values for various metrics related to the quality and quantity of rules learned from knowledge graphs, specifically computed across multiple selected target predicates.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "averaged over the targets",
          "local_types": [
            "methodology"
          ],
          "iri": "Entity-averaged_over_the_target-Mention-1"
        }
      ],
      "relevance": 0.46337890625
    },
    "Entity-cardinality": {
      "node_id": "cardinality",
      "disambiguation_index": 0,
      "label": "Cardinality",
      "aliases": [
        "the cardinality",
        "cardinality",
        "Cardinality",
        "cardinalities"
      ],
      "types": [
        "property",
        "prefix",
        "rule",
        "attribute",
        "data characteristic",
        "feature",
        "constraint",
        "concept",
        "cardinality",
        "set theory",
        "rule quality measure",
        "mathematical concept",
        "annotation",
        "quantity",
        "measure",
        "mathematical property",
        "quality measure",
        "theory",
        "quantitative measure",
        "metric"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "Cardinality refers to a mathematical concept that denotes the number of elements in a set or the size of a collection, often used to describe the quantitative aspects of data relationships and constraints in various fields.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-2",
          "local_name": "Cardinality",
          "local_types": [
            "annotation",
            "property",
            "concept",
            "mathematical property",
            "mathematical concept",
            "prefix",
            "rule"
          ],
          "iri": "Entity-cardinality-Mention-1"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-4",
          "local_name": "Cardinality",
          "local_types": [
            "measure",
            "rule quality measure",
            "metric"
          ],
          "iri": "Entity-cardinality-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-3",
          "local_name": "cardinality",
          "local_types": [
            "mathematical concept",
            "property"
          ],
          "iri": "Entity-cardinality-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-1",
          "local_name": "cardinality",
          "local_types": [
            "mathematical concept",
            "property"
          ],
          "iri": "Entity-cardinality-Mention-4"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-4",
          "local_name": "cardinality",
          "local_types": [
            "mathematical concept",
            "theory"
          ],
          "iri": "Entity-cardinality-Mention-5"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-1",
          "local_name": "cardinalities",
          "local_types": [
            "property",
            "mathematical concept",
            "concept",
            "mathematical property"
          ],
          "iri": "Entity-cardinality-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-9-Sentence-2",
          "local_name": "cardinality",
          "local_types": [
            "mathematical property",
            "set theory"
          ],
          "iri": "Entity-cardinality-Mention-7"
        },
        {
          "reference": "Section-6-Paragraph-12-Sentence-3",
          "local_name": "cardinality",
          "local_types": [
            "mathematical concept",
            "property"
          ],
          "iri": "Entity-cardinality-Mention-8"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-2",
          "local_name": "cardinality",
          "local_types": [
            "mathematical property",
            "set theory"
          ],
          "iri": "Entity-cardinality-Mention-9"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-2",
          "local_name": "cardinality",
          "local_types": [
            "property",
            "mathematical concept",
            "set theory",
            "cardinality"
          ],
          "iri": "Entity-cardinality-Mention-10"
        },
        {
          "reference": "Section-12-Paragraph-5-Sentence-4",
          "local_name": "Cardinality",
          "local_types": [
            "mathematical concept",
            "set theory"
          ],
          "iri": "Entity-cardinality-Mention-11"
        },
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "cardinality",
          "local_types": [
            "property"
          ],
          "iri": "Entity-cardinality-Mention-12"
        },
        {
          "reference": "Section-14-Paragraph-1-Sentence-2",
          "local_name": "cardinality",
          "local_types": [
            "mathematical concept",
            "attribute",
            "cardinality"
          ],
          "iri": "Entity-cardinality-Mention-13"
        },
        {
          "reference": "Section-14-Paragraph-2-Sentence-4",
          "local_name": "cardinality",
          "local_types": [
            "mathematical property",
            "set theory"
          ],
          "iri": "Entity-cardinality-Mention-14"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-2",
          "local_name": "cardinalities",
          "local_types": [
            "quantity",
            "property",
            "concept",
            "mathematical property",
            "mathematical concept",
            "attribute"
          ],
          "iri": "Entity-cardinality-Mention-15"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-3",
          "local_name": "cardinality",
          "local_types": [
            "property",
            "mathematical concept",
            "feature"
          ],
          "iri": "Entity-cardinality-Mention-16"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-1",
          "local_name": "cardinalities",
          "local_types": [
            "property",
            "concept",
            "mathematical property",
            "cardinality",
            "mathematical concept",
            "set theory",
            "quantitative measure"
          ],
          "iri": "Entity-cardinality-Mention-17"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-2",
          "local_name": "cardinalities",
          "local_types": [
            "mathematical concept",
            "set theory"
          ],
          "iri": "Entity-cardinality-Mention-18"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-3",
          "local_name": "cardinalities",
          "local_types": [
            "mathematical concept",
            "data characteristic"
          ],
          "iri": "Entity-cardinality-Mention-19"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-2",
          "local_name": "Cardinality",
          "local_types": [
            "constraint",
            "measure",
            "quality measure",
            "metric",
            "rule quality measure"
          ],
          "iri": "Entity-cardinality-Mention-20"
        },
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "Cardinality",
          "local_types": [
            "constraint",
            "measure",
            "quality measure"
          ],
          "iri": "Entity-cardinality-Mention-21"
        },
        {
          "reference": "Section-18-Paragraph-4-Sentence-1",
          "local_name": "Cardinality",
          "local_types": [
            "constraint",
            "measure",
            "quality measure"
          ],
          "iri": "Entity-cardinality-Mention-22"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-2",
          "local_name": "the cardinality",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-cardinality-Mention-23"
        }
      ],
      "relevance": 0.463134765625
    },
    "Entity-capitalof_____": {
      "node_id": "capitalof_____",
      "disambiguation_index": 0,
      "label": "capitalOf(?, ?)",
      "aliases": [
        "capitalOf(?, ?)"
      ],
      "types": [
        "query",
        "question"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'capitalOf(?, ?)' refers to a query that seeks to identify the capital city associated with a given country or entity, typically used in the context of knowledge graphs to facilitate the retrieval of geographical relationships.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-4",
          "local_name": "capitalOf(?, ?)",
          "local_types": [
            "query",
            "question"
          ],
          "iri": "Entity-capitalof_____-Mention-1"
        }
      ],
      "relevance": 0.463134765625
    },
    "Entity-an_abstract_model": {
      "node_id": "an_abstract_model",
      "disambiguation_index": 0,
      "label": "an abstract model",
      "aliases": [
        "an abstract model"
      ],
      "types": [
        "model"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An abstract model in this context refers to a conceptual framework used in Description Logic ontologies, where entities are represented as unary predicates (classes and types) and relationships as binary predicates (roles), facilitating the learning of fully abstracted shapes from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-3",
          "local_name": "an abstract model",
          "local_types": [
            "model"
          ],
          "iri": "Entity-an_abstract_model-Mention-1"
        }
      ],
      "relevance": 0.462890625
    },
    "Entity-f__e1__p0__e2_": {
      "node_id": "f__e1__p0__e2_",
      "disambiguation_index": 0,
      "label": "f(e1, P0, e2)",
      "aliases": [
        "f(e1, P0, e2)"
      ],
      "types": [
        "function",
        "mathematical function",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'f(e1, P0, e2)' refers to a scoring function that computes the plausibility of the relationship between entities e1 and e2 given the predicate P0, using their respective embeddings in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-4",
          "local_name": "f(e1, P0, e2)",
          "local_types": [
            "function",
            "mathematical function",
            "mathematical expression"
          ],
          "iri": "Entity-f__e1__p0__e2_-Mention-1"
        }
      ],
      "relevance": 0.462646484375
    },
    "Entity-brute-force_search": {
      "node_id": "brute-force_search",
      "disambiguation_index": 0,
      "label": "brute-force search",
      "aliases": [
        "brute-force search"
      ],
      "types": [
        "algorithm",
        "search method"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A brute-force search is an algorithmic approach that systematically explores all possible solutions to find the optimal one, often used in problem-solving and optimization tasks.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-5",
          "local_name": "brute-force search",
          "local_types": [
            "algorithm",
            "search method"
          ],
          "iri": "Entity-brute-force_search-Mention-1"
        }
      ],
      "relevance": 0.462646484375
    },
    "Entity-sampling_algorithm": {
      "node_id": "sampling_algorithm",
      "disambiguation_index": 0,
      "label": "sampling algorithm",
      "aliases": [
        "sampling algorithm"
      ],
      "types": [
        "computational method",
        "algorithm"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A sampling algorithm is a computational method used to select a subset of data points from a larger dataset, often employed in statistical analysis and machine learning to approximate properties of the whole dataset.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-3",
          "local_name": "sampling algorithm",
          "local_types": [
            "computational method",
            "algorithm"
          ],
          "iri": "Entity-sampling_algorithm-Mention-1"
        }
      ],
      "relevance": 0.46240234375
    },
    "Entity-mapreduce": {
      "node_id": "mapreduce",
      "disambiguation_index": 0,
      "label": "MapReduce",
      "aliases": [
        "MapReduce"
      ],
      "types": [
        "computing",
        "computing model",
        "framework",
        "data processing framework",
        "programming model"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "MapReduce is a programming model and data processing framework that enables the processing of large data sets across distributed computing environments by dividing the task into smaller sub-tasks that can be processed in parallel.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-5-Sentence-2",
          "local_name": "MapReduce",
          "local_types": [
            "computing",
            "computing model",
            "framework",
            "data processing framework",
            "programming model"
          ],
          "iri": "Entity-mapreduce-Mention-1"
        }
      ],
      "relevance": 0.462158203125
    },
    "Entity-scalability": {
      "node_id": "scalability",
      "disambiguation_index": 0,
      "label": "scalability",
      "aliases": [
        "scalability"
      ],
      "types": [
        "property",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Scalability is a property or concept that refers to the capability of a system, network, or process to handle a growing amount of work or its potential to accommodate growth.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-6",
          "local_name": "scalability",
          "local_types": [
            "property",
            "concept"
          ],
          "iri": "Entity-scalability-Mention-1"
        }
      ],
      "relevance": 0.461181640625
    },
    "Entity-the_defined_threshold__treescmin_": {
      "node_id": "the_defined_threshold__treescmin_",
      "disambiguation_index": 0,
      "label": "the defined threshold (TreeSCMIN)",
      "aliases": [
        "the defined threshold (TreeSCMIN)"
      ],
      "types": [
        "threshold",
        "parameter"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The defined threshold (TreeSCMIN) refers to a specific minimum value of Tree Standard Confidence that must be met for a rule to be included in the construction of a tree shape in the SHACLEARNER algorithm.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-4",
          "local_name": "the defined threshold (TreeSCMIN)",
          "local_types": [
            "threshold",
            "parameter"
          ],
          "iri": "Entity-the_defined_threshold__treescmin_-Mention-1"
        }
      ],
      "relevance": 0.461181640625
    },
    "Entity-39-branched_tree": {
      "node_id": "39-branched_tree",
      "disambiguation_index": 0,
      "label": "39-branched tree",
      "aliases": [
        "39-branched tree"
      ],
      "types": [
        "tree",
        "structure",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The '39-branched tree' refers to a specific tree structure mined from the DBpedia knowledge graph, which consists of 39 branches representing relationships between entities, illustrating the connections of a song to its album, record label, producers, genre, and artist.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-1",
          "local_name": "39-branched tree",
          "local_types": [
            "tree",
            "structure",
            "data structure"
          ],
          "iri": "Entity-39-branched_tree-Mention-1"
        }
      ],
      "relevance": 0.46044921875
    },
    "Entity-2_producer": {
      "node_id": "2_producer",
      "disambiguation_index": 0,
      "label": "2 producers",
      "aliases": [
        "two producers",
        "2 producers"
      ],
      "types": [
        "producer",
        "quantity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '2 producers' refers to a cardinality constraint indicating that a song entity in a knowledge graph must have at least two associated producers.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-2",
          "local_name": "2 producers",
          "local_types": [
            "producer",
            "quantity"
          ],
          "iri": "Entity-2_producer-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "two producers",
          "local_types": [
            "producer"
          ],
          "iri": "Entity-2_producer-Mention-2"
        }
      ],
      "relevance": 0.46044921875
    },
    "Entity-an_expected_decrease": {
      "node_id": "an_expected_decrease",
      "disambiguation_index": 0,
      "label": "an expected decrease",
      "aliases": [
        "an expected decrease"
      ],
      "types": [
        "observation",
        "decrease"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An expected decrease refers to the anticipated reduction in the proportion of quality rules as the cardinality of the rules increases, indicating that higher cardinality rules impose stricter requirements that are less frequently satisfied.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-6-Sentence-2",
          "local_name": "an expected decrease",
          "local_types": [
            "observation",
            "decrease"
          ],
          "iri": "Entity-an_expected_decrease-Mention-1"
        }
      ],
      "relevance": 0.46044921875
    },
    "Entity-the_number_of_entity": {
      "node_id": "the_number_of_entity",
      "disambiguation_index": 0,
      "label": "the number of entities",
      "aliases": [
        "the number of entities"
      ],
      "types": [
        "quantity",
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The number of entities refers to the count of distinct entities that satisfy specific conditions in a rule, particularly those that connect the head of the rule to its body within the context of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-5-Sentence-4",
          "local_name": "the number of entities",
          "local_types": [
            "quantity",
            "entity"
          ],
          "iri": "Entity-the_number_of_entity-Mention-1"
        }
      ],
      "relevance": 0.460205078125
    },
    "Entity-an_instance_of_the_head_(1)": {
      "node_id": "an_instance_of_the_head_(1)",
      "disambiguation_index": 1,
      "label": "an instance of the head",
      "aliases": [
        "an instance of the head"
      ],
      "types": [
        "instance",
        "head"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An instance of the head refers to a specific realization or occurrence of the head component in a tree structure, which is derived from the body of a shape in the context of knowledge graphs, indicating the paths or branches that satisfy certain predicates.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-5",
          "local_name": "an instance of the head",
          "local_types": [
            "instance",
            "head"
          ],
          "iri": "Entity-an_instance_of_the_head_(1)-Mention-1"
        }
      ],
      "relevance": 0.460205078125
    },
    "Entity-learning_method": {
      "node_id": "learning_method",
      "disambiguation_index": 0,
      "label": "learning method",
      "aliases": [
        "learning method"
      ],
      "types": [
        "methodology",
        "method",
        "algorithm",
        "educational approach"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A learning method is a systematic approach or technique used to facilitate the acquisition of knowledge or skills, often involving specific algorithms or educational strategies.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-3",
          "local_name": "learning method",
          "local_types": [
            "methodology",
            "method",
            "algorithm",
            "educational approach"
          ],
          "iri": "Entity-learning_method-Mention-1"
        }
      ],
      "relevance": 0.4599609375
    },
    "Entity-evidence": {
      "node_id": "evidence",
      "disambiguation_index": 0,
      "label": "evidence",
      "aliases": [
        "evidence"
      ],
      "types": [
        "data",
        "supporting information"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'evidence' refers to the numerical confidence measure that indicates the strength of support for each mined shape derived from the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-8",
          "local_name": "evidence",
          "local_types": [
            "data",
            "supporting information"
          ],
          "iri": "Entity-evidence-Mention-1"
        }
      ],
      "relevance": 0.459716796875
    },
    "Entity-e": {
      "node_id": "e",
      "disambiguation_index": 0,
      "label": "E",
      "aliases": [
        "E",
        "e"
      ],
      "types": [
        "collection",
        "subject",
        "element",
        "mathematical object",
        "entity collection",
        "set",
        "entity",
        "mathematical entity",
        "mathematical notation",
        "variable",
        "parameter",
        "entities",
        "mathematical symbol",
        "entity set"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity 'e' refers to an identifier used to represent an object, which can be a place or a person, within the context of a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-1",
          "local_name": "E",
          "local_types": [
            "collection",
            "entities",
            "set"
          ],
          "iri": "Entity-e-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-5",
          "local_name": "e",
          "local_types": [
            "entity",
            "subject"
          ],
          "iri": "Entity-e-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-6",
          "local_name": "E",
          "local_types": [
            "entity",
            "mathematical object",
            "set"
          ],
          "iri": "Entity-e-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-7-Sentence-4",
          "local_name": "e",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-e-Mention-4"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-2",
          "local_name": "e",
          "local_types": [
            "parameter",
            "variable"
          ],
          "iri": "Entity-e-Mention-5"
        },
        {
          "reference": "Section-3-Paragraph-9-Sentence-4",
          "local_name": "e",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e-Mention-6"
        },
        {
          "reference": "Section-4-Paragraph-4-Sentence-4",
          "local_name": "e",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-e-Mention-7"
        },
        {
          "reference": "Section-4-Paragraph-5-Sentence-2",
          "local_name": "e",
          "local_types": [
            "variable",
            "element"
          ],
          "iri": "Entity-e-Mention-8"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-6",
          "local_name": "e",
          "local_types": [
            "entity",
            "variable"
          ],
          "iri": "Entity-e-Mention-9"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-7",
          "local_name": "e",
          "local_types": [
            "variable",
            "mathematical entity"
          ],
          "iri": "Entity-e-Mention-10"
        },
        {
          "reference": "Section-6-Paragraph-4-Sentence-8",
          "local_name": "e",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-e-Mention-11"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-3",
          "local_name": "e",
          "local_types": [
            "variable",
            "entity"
          ],
          "iri": "Entity-e-Mention-12"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "E",
          "local_types": [
            "entity set"
          ],
          "iri": "Entity-e-Mention-13"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-5",
          "local_name": "e",
          "local_types": [
            "entity",
            "variable",
            "entity set",
            "element"
          ],
          "iri": "Entity-e-Mention-14"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-7",
          "local_name": "e",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e-Mention-15"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-10",
          "local_name": "e",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e-Mention-16"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "E",
          "local_types": [
            "entity set",
            "entity collection",
            "set",
            "entity",
            "mathematical notation"
          ],
          "iri": "Entity-e-Mention-17"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-3",
          "local_name": "E",
          "local_types": [
            "collection",
            "mathematical notation",
            "set"
          ],
          "iri": "Entity-e-Mention-18"
        },
        {
          "reference": "Section-11-Paragraph-5-Sentence-2",
          "local_name": "E",
          "local_types": [
            "mathematical notation",
            "set"
          ],
          "iri": "Entity-e-Mention-19"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-1",
          "local_name": "E",
          "local_types": [
            "entity",
            "variable",
            "mathematical notation",
            "set"
          ],
          "iri": "Entity-e-Mention-20"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-1",
          "local_name": "E",
          "local_types": [
            "mathematical notation",
            "set"
          ],
          "iri": "Entity-e-Mention-21"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-4",
          "local_name": "e",
          "local_types": [
            "variable",
            "mathematical symbol"
          ],
          "iri": "Entity-e-Mention-22"
        },
        {
          "reference": "Section-12-Paragraph-3-Sentence-5",
          "local_name": "e",
          "local_types": [
            "element",
            "variable"
          ],
          "iri": "Entity-e-Mention-23"
        }
      ],
      "relevance": 0.459716796875
    },
    "Entity-treesc__r_": {
      "node_id": "treesc__r_",
      "disambiguation_index": 0,
      "label": "TreeSC(r)",
      "aliases": [
        "TreeSC(r)"
      ],
      "types": [
        "function",
        "mathematical expression",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "TreeSC(r) refers to the tree standard confidence metric, which quantifies the reliability of a tree structure derived from knowledge graphs by calculating the ratio of the number of entity pairs satisfying the tree's head to the total number of entities satisfying its body.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-5",
          "local_name": "TreeSC(r)",
          "local_types": [
            "function",
            "mathematical expression",
            "metric"
          ],
          "iri": "Entity-treesc__r_-Mention-1"
        }
      ],
      "relevance": 0.459716796875
    },
    "Entity-second_argument": {
      "node_id": "second_argument",
      "disambiguation_index": 0,
      "label": "second argument",
      "aliases": [
        "second argument"
      ],
      "types": [
        "logical argument",
        "mathematical term"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The 'second argument' refers to the entity that satisfies the second part of a logical rule's body in the context of evaluating predicate logic rules within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "second argument",
          "local_types": [
            "logical argument",
            "mathematical term"
          ],
          "iri": "Entity-second_argument-Mention-1"
        }
      ],
      "relevance": 0.459228515625
    },
    "Entity-the_two_type-like_predicate_from_dbpedia_3.8": {
      "node_id": "the_two_type-like_predicate_from_dbpedia_3.8",
      "disambiguation_index": 0,
      "label": "the two type-like predicates from DBpedia 3.8",
      "aliases": [
        "the two type-like predicates from DBpedia 3.8"
      ],
      "types": [
        "predicate",
        "DBpedia"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The two type-like predicates from DBpedia 3.8 refer to specific predicates in the DBpedia knowledge graph that are used to generate unary predicates and facts, where each predicate has a class as its second argument.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-1",
          "local_name": "the two type-like predicates from DBpedia 3.8",
          "local_types": [
            "predicate",
            "DBpedia"
          ],
          "iri": "Entity-the_two_type-like_predicate_from_dbpedia_3.8-Mention-1"
        }
      ],
      "relevance": 0.45751953125
    },
    "Entity-embedding-based_scoring_function": {
      "node_id": "embedding-based_scoring_function",
      "disambiguation_index": 0,
      "label": "embedding-based scoring function",
      "aliases": [
        "embedding-based scoring function"
      ],
      "types": [
        "function",
        "scoring method",
        "scoring function",
        "evaluation metric",
        "evaluation method"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An embedding-based scoring function is a computational method that utilizes vector representations of data to evaluate and rank items based on their similarity or relevance to a given query or context.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-2-Sentence-1",
          "local_name": "embedding-based scoring function",
          "local_types": [
            "function",
            "scoring method"
          ],
          "iri": "Entity-embedding-based_scoring_function-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-1",
          "local_name": "embedding-based scoring function",
          "local_types": [
            "function",
            "scoring method",
            "scoring function",
            "evaluation metric",
            "evaluation method"
          ],
          "iri": "Entity-embedding-based_scoring_function-Mention-2"
        }
      ],
      "relevance": 0.457275390625
    },
    "Entity-name": {
      "node_id": "name",
      "disambiguation_index": 0,
      "label": "name",
      "aliases": [
        "name"
      ],
      "types": [
        "property",
        "string",
        "attribute"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'name' refers to a required attribute in the context of SHACL shapes, specifically indicating that a person entity must possess a string-type value representing their name.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-2",
          "local_name": "name",
          "local_types": [
            "property",
            "string",
            "attribute"
          ],
          "iri": "Entity-name-Mention-1"
        }
      ],
      "relevance": 0.45703125
    },
    "Entity-formalism": {
      "node_id": "formalism",
      "disambiguation_index": 0,
      "label": "formalisms",
      "aliases": [
        "formalisms"
      ],
      "types": [
        "concept",
        "formalism",
        "mathematical model",
        "theoretical framework",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Formalisms are structured frameworks or methodologies used to represent and analyze complex systems or concepts, often through mathematical models and theoretical constructs.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-1",
          "local_name": "formalisms",
          "local_types": [
            "methodology",
            "concept",
            "formalism",
            "theoretical framework"
          ],
          "iri": "Entity-formalism-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-5",
          "local_name": "formalisms",
          "local_types": [
            "theoretical framework",
            "mathematical model"
          ],
          "iri": "Entity-formalism-Mention-2"
        }
      ],
      "relevance": 0.456787109375
    },
    "Entity-matrix_and_vector_operation": {
      "node_id": "matrix_and_vector_operation",
      "disambiguation_index": 0,
      "label": "matrix and vector operations",
      "aliases": [
        "matrix and vector operations"
      ],
      "types": [
        "linear algebra",
        "mathematical operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Matrix and vector operations refer to mathematical procedures that involve the manipulation and calculation of matrices and vectors, fundamental concepts in linear algebra used for various applications in mathematics, physics, and engineering.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "matrix and vector operations",
          "local_types": [
            "linear algebra",
            "mathematical operation"
          ],
          "iri": "Entity-matrix_and_vector_operation-Mention-1"
        }
      ],
      "relevance": 0.456787109375
    },
    "Entity-the_next_question": {
      "node_id": "the_next_question",
      "disambiguation_index": 0,
      "label": "the next question",
      "aliases": [
        "the next question"
      ],
      "types": [
        "question"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The next question refers to a subsequent inquiry in a sequence of dependent questions that arise during the process of knowledge graph completion, where the answer to the previous question is necessary to formulate the next one.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-5",
          "local_name": "the next question",
          "local_types": [
            "question"
          ],
          "iri": "Entity-the_next_question-Mention-1"
        }
      ],
      "relevance": 0.456787109375
    },
    "Entity-pruning_a_tree": {
      "node_id": "pruning_a_tree",
      "disambiguation_index": 0,
      "label": "pruning a tree",
      "aliases": [
        "pruning a tree"
      ],
      "types": [
        "action",
        "tree manipulation",
        "process"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Pruning a tree refers to the process of simplifying a tree structure in a knowledge graph by removing branches or entire paths of shape predicates, which results in a more concise representation with potentially higher confidence in the validity of the remaining structure.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-3",
          "local_name": "pruning a tree",
          "local_types": [
            "action",
            "tree manipulation",
            "process"
          ],
          "iri": "Entity-pruning_a_tree-Mention-1"
        }
      ],
      "relevance": 0.45654296875
    },
    "Entity-square_n_x_n_adjacency_matrix": {
      "node_id": "square_n_x_n_adjacency_matrix",
      "disambiguation_index": 0,
      "label": "square n x n adjacency matrices",
      "aliases": [
        "square n x n adjacency matrices"
      ],
      "types": [
        "mathematical object",
        "mathematical structure",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Square n x n adjacency matrices are mathematical structures that represent the connections between a set of n vertices in a graph, where each element indicates the presence or absence of edges between pairs of vertices.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-2",
          "local_name": "square n x n adjacency matrices",
          "local_types": [
            "mathematical object",
            "mathematical structure",
            "matrix"
          ],
          "iri": "Entity-square_n_x_n_adjacency_matrix-Mention-1"
        }
      ],
      "relevance": 0.456298828125
    },
    "Entity-unifying_some_variable": {
      "node_id": "unifying_some_variable",
      "disambiguation_index": 0,
      "label": "unifying some variables",
      "aliases": [
        "unifying some variables"
      ],
      "types": [
        "unification",
        "variables"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'unifying some variables' refers to the process of consolidating or merging variables that appear in multiple predicates across different branches of a tree structure, with the aim of simplifying the tree shapes and enhancing their interpretability.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "unifying some variables",
          "local_types": [
            "unification",
            "variables"
          ],
          "iri": "Entity-unifying_some_variable-Mention-1"
        }
      ],
      "relevance": 0.456298828125
    },
    "Entity-fig_._1": {
      "node_id": "fig_._1",
      "disambiguation_index": 0,
      "label": "Fig. 1",
      "aliases": [
        "Fig. 1"
      ],
      "types": [
        "figure",
        "illustration"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Fig. 1 is a visual representation or illustration that depicts a concept or model related to unary predicates in a graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-4",
          "local_name": "Fig. 1",
          "local_types": [
            "figure",
            "illustration"
          ],
          "iri": "Entity-fig_._1-Mention-1"
        }
      ],
      "relevance": 0.4560546875
    },
    "Entity-7_(1)": {
      "node_id": "7_(1)",
      "disambiguation_index": 1,
      "label": "7",
      "aliases": [
        "7"
      ],
      "types": [
        "number"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term '7' refers to the line number in Algorithm 2 of the paper, specifically indicating the return statement that outputs the sampled subgraph K' from the input knowledge graph K.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-11",
          "local_name": "7",
          "local_types": [
            "number"
          ],
          "iri": "Entity-7_(1)-Mention-1"
        }
      ],
      "relevance": 0.455810546875
    },
    "Entity-the_most_recent_version_of_wikidata": {
      "node_id": "the_most_recent_version_of_wikidata",
      "disambiguation_index": 0,
      "label": "the most recent version of Wikidata",
      "aliases": [
        "the most recent version of Wikidata"
      ],
      "types": [
        "Wikidata",
        "dataset"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The most recent version of Wikidata refers to the latest iteration of the collaborative knowledge base that contains structured data, which is continuously updated and expanded, currently encompassing tens of billions of facts.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-5-Sentence-2",
          "local_name": "the most recent version of Wikidata",
          "local_types": [
            "Wikidata",
            "dataset"
          ],
          "iri": "Entity-the_most_recent_version_of_wikidata-Mention-1"
        }
      ],
      "relevance": 0.455810546875
    },
    "Entity-depth-first_manner": {
      "node_id": "depth-first_manner",
      "disambiguation_index": 0,
      "label": "depth-first manner",
      "aliases": [
        "depth-first manner"
      ],
      "types": [
        "approach",
        "methodology",
        "method"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A depth-first manner refers to a systematic approach or methodology in which processes or tasks are executed by exploring as far as possible along each branch before backtracking, commonly used in algorithms and problem-solving techniques.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-3",
          "local_name": "depth-first manner",
          "local_types": [
            "approach",
            "methodology",
            "method"
          ],
          "iri": "Entity-depth-first_manner-Mention-1"
        }
      ],
      "relevance": 0.45556640625
    },
    "Entity-twenty-eight_out_of_thirty-five_predicate": {
      "node_id": "twenty-eight_out_of_thirty-five_predicate",
      "disambiguation_index": 0,
      "label": "Twenty-eight out of thirty-five predicates",
      "aliases": [
        "Twenty-eight out of thirty-five predicates"
      ],
      "types": [
        "predicate"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'Twenty-eight out of thirty-five predicates' refers to the count of unary predicates identified in a synthetic knowledge graph, specifically in the context of poker hands, where each predicate represents a specific property or classification of the hands.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-9",
          "local_name": "Twenty-eight out of thirty-five predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-twenty-eight_out_of_thirty-five_predicate-Mention-1"
        }
      ],
      "relevance": 0.45556640625
    },
    "Entity-ideal_learner": {
      "node_id": "ideal_learner",
      "disambiguation_index": 0,
      "label": "ideal learner",
      "aliases": [
        "ideal learner"
      ],
      "types": [
        "learner",
        "benchmark",
        "theoretical model",
        "learning model"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An ideal learner is a theoretical model or benchmark that represents the optimal performance in learning tasks, serving as a standard against which actual learners can be evaluated.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-2-Sentence-5",
          "local_name": "ideal learner",
          "local_types": [
            "learner",
            "learning model",
            "benchmark",
            "theoretical model"
          ],
          "iri": "Entity-ideal_learner-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-4-Sentence-4",
          "local_name": "ideal learner",
          "local_types": [
            "theoretical model",
            "benchmark"
          ],
          "iri": "Entity-ideal_learner-Mention-2"
        }
      ],
      "relevance": 0.45458984375
    },
    "Entity-pruning_technique": {
      "node_id": "pruning_technique",
      "disambiguation_index": 0,
      "label": "pruning techniques",
      "aliases": [
        "pruning techniques",
        "pruning methods"
      ],
      "types": [
        "technique",
        "data processing technique",
        "optimization technique",
        "method",
        "algorithmic strategy",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Pruning techniques are methodologies used in data processing to eliminate less relevant or lower quality elements from a dataset or model, thereby enhancing efficiency and performance.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-6",
          "local_name": "pruning techniques",
          "local_types": [
            "technique",
            "methodology",
            "data processing technique"
          ],
          "iri": "Entity-pruning_technique-Mention-1"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-2",
          "local_name": "pruning methods",
          "local_types": [
            "technique",
            "optimization technique",
            "method",
            "algorithmic strategy",
            "methodology"
          ],
          "iri": "Entity-pruning_technique-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-5-Sentence-2",
          "local_name": "pruning methods",
          "local_types": [
            "technique",
            "methodology",
            "method"
          ],
          "iri": "Entity-pruning_technique-Mention-3"
        }
      ],
      "relevance": 0.4541015625
    },
    "Entity-place": {
      "node_id": "place",
      "disambiguation_index": 0,
      "label": "place",
      "aliases": [
        "place"
      ],
      "types": [
        "location",
        "geographical entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'place' refers to a geographical entity that serves as an identifier for a specific location within the context of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-1",
          "local_name": "place",
          "local_types": [
            "location",
            "geographical entity"
          ],
          "iri": "Entity-place-Mention-1"
        }
      ],
      "relevance": 0.453857421875
    },
    "Entity-data_cleaning": {
      "node_id": "data_cleaning",
      "disambiguation_index": 0,
      "label": "data cleaning",
      "aliases": [
        "data cleaning"
      ],
      "types": [
        "data processing",
        "process",
        "data management"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Data cleaning is the process of identifying and correcting inaccuracies or inconsistencies in data to improve its quality and usability.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-6",
          "local_name": "data cleaning",
          "local_types": [
            "data processing",
            "process",
            "data management"
          ],
          "iri": "Entity-data_cleaning-Mention-1"
        }
      ],
      "relevance": 0.453369140625
    },
    "Entity-comparative_work": {
      "node_id": "comparative_work",
      "disambiguation_index": 0,
      "label": "comparative work",
      "aliases": [
        "comparative work"
      ],
      "types": [
        "research",
        "study",
        "work"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "comparative work refers to a research or study that involves the systematic comparison of different entities, methods, or results to evaluate their relative performance or characteristics.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-2",
          "local_name": "comparative work",
          "local_types": [
            "research",
            "study",
            "work"
          ],
          "iri": "Entity-comparative_work-Mention-1"
        }
      ],
      "relevance": 0.452392578125
    },
    "Entity-the_latter_question": {
      "node_id": "the_latter_question",
      "disambiguation_index": 0,
      "label": "The latter question",
      "aliases": [
        "The latter question"
      ],
      "types": [
        "question"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The latter question refers to a subsequent query in a sequence of dependent questions that can only be posed after obtaining an answer to a preceding question, illustrating a depth-first approach to knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-5",
          "local_name": "The latter question",
          "local_types": [
            "question"
          ],
          "iri": "Entity-the_latter_question-Mention-1"
        }
      ],
      "relevance": 0.450439453125
    },
    "Entity-complexity_of_the_sampling_algorithm": {
      "node_id": "complexity_of_the_sampling_algorithm",
      "disambiguation_index": 0,
      "label": "complexity of the sampling algorithm",
      "aliases": [
        "complexity of the sampling algorithm"
      ],
      "types": [
        "complexity",
        "computational complexity"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The complexity of the sampling algorithm refers to the measure of the computational resources required, such as time or space, to execute a sampling algorithm, often expressed in terms of input size or other relevant parameters.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-3",
          "local_name": "complexity of the sampling algorithm",
          "local_types": [
            "complexity",
            "computational complexity"
          ],
          "iri": "Entity-complexity_of_the_sampling_algorithm-Mention-1"
        }
      ],
      "relevance": 0.4501953125
    },
    "Entity-an_identifier_for_an_object": {
      "node_id": "an_identifier_for_an_object",
      "disambiguation_index": 0,
      "label": "an identifier for an object",
      "aliases": [
        "an identifier for an object"
      ],
      "types": [
        "identifier",
        "object"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "An identifier for an object refers to an entity that uniquely represents a specific item, such as a place or a person, within a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-1",
          "local_name": "an identifier for an object",
          "local_types": [
            "identifier",
            "object"
          ],
          "iri": "Entity-an_identifier_for_an_object-Mention-1"
        }
      ],
      "relevance": 0.4501953125
    },
    "Entity-two_parent": {
      "node_id": "two_parent",
      "disambiguation_index": 0,
      "label": "two parents",
      "aliases": [
        "two parents"
      ],
      "types": [
        "relationship",
        "parent"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'two parents' refers to the requirement in a rule that each human entity in a knowledge graph must have at least two distinct parental entities associated with it.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-2",
          "local_name": "two parents",
          "local_types": [
            "relationship",
            "parent"
          ],
          "iri": "Entity-two_parent-Mention-1"
        }
      ],
      "relevance": 0.449951171875
    },
    "Entity-subgraph_of_the_input_graph": {
      "node_id": "subgraph_of_the_input_graph",
      "disambiguation_index": 0,
      "label": "subgraph of the input graph",
      "aliases": [
        "subgraph of the input graph"
      ],
      "types": [
        "subgraph",
        "data structure",
        "graph"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A subgraph of the input graph is a subset of the vertices and edges of the original graph that forms a graph itself.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-4",
          "local_name": "subgraph of the input graph",
          "local_types": [
            "subgraph",
            "data structure",
            "graph"
          ],
          "iri": "Entity-subgraph_of_the_input_graph-Mention-1"
        }
      ],
      "relevance": 0.449951171875
    },
    "Entity-sampling_method": {
      "node_id": "sampling_method",
      "disambiguation_index": 0,
      "label": "sampling method",
      "aliases": [
        "sampling method"
      ],
      "types": [
        "technique",
        "research technique",
        "method",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A sampling method is a systematic technique used to select a subset of individuals or items from a larger population or dataset for the purpose of analysis or research.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "sampling method",
          "local_types": [
            "methodology",
            "technique"
          ],
          "iri": "Entity-sampling_method-Mention-1"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-3",
          "local_name": "sampling method",
          "local_types": [
            "methodology",
            "research technique"
          ],
          "iri": "Entity-sampling_method-Mention-2"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-3",
          "local_name": "sampling method",
          "local_types": [
            "technique",
            "methodology",
            "method"
          ],
          "iri": "Entity-sampling_method-Mention-3"
        }
      ],
      "relevance": 0.4482421875
    },
    "Entity-our_pruning_technique": {
      "node_id": "our_pruning_technique",
      "disambiguation_index": 0,
      "label": "our pruning techniques",
      "aliases": [
        "our pruning techniques"
      ],
      "types": [
        "technique"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Our pruning techniques refer to the methods employed to eliminate predominantly lower quality rules from the learned set of rules in order to enhance scalability and maintain the quality of the rule-learning process.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-6",
          "local_name": "our pruning techniques",
          "local_types": [
            "technique"
          ],
          "iri": "Entity-our_pruning_technique-Mention-1"
        }
      ],
      "relevance": 0.4482421875
    },
    "Entity-computational_performance": {
      "node_id": "computational_performance",
      "disambiguation_index": 0,
      "label": "computational performance",
      "aliases": [
        "computational performance"
      ],
      "types": [
        "efficiency measure",
        "performance",
        "performance metric",
        "evaluation criterion"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Computational performance refers to the effectiveness and efficiency of a computational system or algorithm in executing tasks, often measured in terms of speed, resource usage, and overall output quality.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-5-Sentence-3",
          "local_name": "computational performance",
          "local_types": [
            "efficiency measure",
            "performance",
            "performance metric",
            "evaluation criterion"
          ],
          "iri": "Entity-computational_performance-Mention-1"
        }
      ],
      "relevance": 0.447998046875
    },
    "Entity-a_person_(1)": {
      "node_id": "a_person_(1)",
      "disambiguation_index": 1,
      "label": "a person",
      "aliases": [
        "a person"
      ],
      "types": [
        "person"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'a person' refers to an individual human being that can be identified as an entity within a knowledge graph, which may be linked to various attributes and relationships in the context of data representation and inference.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-1",
          "local_name": "a person",
          "local_types": [
            "person"
          ],
          "iri": "Entity-a_person_(1)-Mention-1"
        }
      ],
      "relevance": 0.447998046875
    },
    "Entity-subject_entity": {
      "node_id": "subject_entity",
      "disambiguation_index": 0,
      "label": "subject entity",
      "aliases": [
        "subject entity e",
        "subject entity"
      ],
      "types": [
        "entity",
        "data component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The subject entity refers to an identifier for an object, such as a place or a person, within the context of a knowledge graph, represented as 'e' in the RDF triple format.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "subject entity",
          "local_types": [
            "entity",
            "data component"
          ],
          "iri": "Entity-subject_entity-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "subject entity e",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-subject_entity-Mention-2"
        }
      ],
      "relevance": 0.4462890625
    },
    "Entity-predicate_calculus_formalism": {
      "node_id": "predicate_calculus_formalism",
      "disambiguation_index": 0,
      "label": "predicate calculus formalism",
      "aliases": [
        "predicate calculus formalism"
      ],
      "types": [
        "logical framework",
        "formalism",
        "mathematical framework"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Predicate calculus formalism is a logical framework that uses formal symbols and rules to represent and manipulate logical statements involving predicates and quantifiers.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-2",
          "local_name": "predicate calculus formalism",
          "local_types": [
            "logical framework",
            "formalism",
            "mathematical framework"
          ],
          "iri": "Entity-predicate_calculus_formalism-Mention-1"
        }
      ],
      "relevance": 0.445556640625
    },
    "Entity-minimum_cardinality_constraint": {
      "node_id": "minimum_cardinality_constraint",
      "disambiguation_index": 0,
      "label": "minimum cardinality constraints",
      "aliases": [
        "minimum cardinality constraints",
        "cardinality constraints"
      ],
      "types": [
        "mathematical constraint",
        "constraint",
        "mathematical condition",
        "rule condition",
        "mathematical concept",
        "rule",
        "logical condition"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Minimum cardinality constraints are mathematical conditions that specify the least number of instances or elements that must be present in a given set or structure.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-2",
          "local_name": "minimum cardinality constraints",
          "local_types": [
            "constraint",
            "mathematical concept"
          ],
          "iri": "Entity-minimum_cardinality_constraint-Mention-1"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-3",
          "local_name": "minimum cardinality constraints",
          "local_types": [
            "constraint",
            "rule condition",
            "logical condition",
            "mathematical condition"
          ],
          "iri": "Entity-minimum_cardinality_constraint-Mention-2"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-2",
          "local_name": "minimum cardinality constraints",
          "local_types": [
            "constraint",
            "logical condition",
            "rule",
            "mathematical constraint"
          ],
          "iri": "Entity-minimum_cardinality_constraint-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-2",
          "local_name": "cardinality constraints",
          "local_types": [
            "mathematical concept",
            "constraint",
            "rule"
          ],
          "iri": "Entity-minimum_cardinality_constraint-Mention-4"
        },
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "cardinality constraints",
          "local_types": [
            "constraint",
            "mathematical concept",
            "rule"
          ],
          "iri": "Entity-minimum_cardinality_constraint-Mention-5"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-2",
          "local_name": "cardinality constraints",
          "local_types": [
            "constraint"
          ],
          "iri": "Entity-minimum_cardinality_constraint-Mention-6"
        },
        {
          "reference": "Section-18-Paragraph-3-Sentence-2",
          "local_name": "cardinality constraints",
          "local_types": [
            "mathematical concept",
            "constraint"
          ],
          "iri": "Entity-minimum_cardinality_constraint-Mention-7"
        }
      ],
      "relevance": 0.4453125
    },
    "Entity-rdf_triple": {
      "node_id": "rdf_triple",
      "disambiguation_index": 0,
      "label": "RDF triple",
      "aliases": [
        "RDF triple"
      ],
      "types": [
        "semantic web",
        "data structure",
        "RDF"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An RDF triple is a data structure used in the Resource Description Framework (RDF) to represent information as a subject-predicate-object relationship.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "RDF triple",
          "local_types": [
            "semantic web",
            "data structure"
          ],
          "iri": "Entity-rdf_triple-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-5",
          "local_name": "RDF triple",
          "local_types": [
            "semantic web",
            "data structure",
            "RDF"
          ],
          "iri": "Entity-rdf_triple-Mention-2"
        }
      ],
      "relevance": 0.44482421875
    },
    "Entity-matrix_p_k": {
      "node_id": "matrix_p_k",
      "disambiguation_index": 0,
      "label": "matrix P_k",
      "aliases": [
        "matrix P_k"
      ],
      "types": [
        "predicate",
        "mathematical object",
        "matrix"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The matrix P_k represents the embedding of a predicate in the RESCAL model, structured as a d x d matrix where d is a parameter defining the dimensionality of the embedding space.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "matrix P_k",
          "local_types": [
            "predicate",
            "mathematical object",
            "matrix"
          ],
          "iri": "Entity-matrix_p_k-Mention-1"
        }
      ],
      "relevance": 0.44482421875
    },
    "Entity-0": {
      "node_id": "0",
      "disambiguation_index": 0,
      "label": "0",
      "aliases": [
        "0"
      ],
      "types": [
        "binary value"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention '0' refers to a binary value in the context of an adjacency matrix representation of a knowledge graph, where it indicates the presence (1) or absence (0) of a fact between two entities.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "0",
          "local_types": [
            "binary value"
          ],
          "iri": "Entity-0-Mention-1"
        }
      ],
      "relevance": 0.44482421875
    },
    "Entity-min_cardinality": {
      "node_id": "min_cardinality",
      "disambiguation_index": 0,
      "label": "min cardinality",
      "aliases": [
        "min cardinality"
      ],
      "types": [
        "constraint",
        "cardinality",
        "concept",
        "cardinality constraint"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Min cardinality refers to a constraint that specifies the minimum number of instances of a particular property that must be present in a data structure or model.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "min cardinality",
          "local_types": [
            "constraint",
            "cardinality",
            "concept",
            "cardinality constraint"
          ],
          "iri": "Entity-min_cardinality-Mention-1"
        }
      ],
      "relevance": 0.444580078125
    },
    "Entity-data_type_validation": {
      "node_id": "data_type_validation",
      "disambiguation_index": 0,
      "label": "data type validation",
      "aliases": [
        "data type validation"
      ],
      "types": [
        "validation process",
        "validation",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Data type validation is the process of ensuring that data entered into a system conforms to the expected data types defined for that data, thereby preventing errors and ensuring data integrity.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "data type validation",
          "local_types": [
            "validation process",
            "validation",
            "process"
          ],
          "iri": "Entity-data_type_validation-Mention-1"
        }
      ],
      "relevance": 0.44384765625
    },
    "Entity-logical_formalism": {
      "node_id": "logical_formalism",
      "disambiguation_index": 0,
      "label": "logical formalisms",
      "aliases": [
        "logical formalisms"
      ],
      "types": [
        "mathematical framework",
        "concept",
        "formalism",
        "theoretical framework",
        "theory",
        "mathematical structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Logical formalisms are structured systems of symbols and rules used to represent and manipulate logical expressions and reasoning in a precise and unambiguous manner.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-3",
          "local_name": "logical formalisms",
          "local_types": [
            "mathematical framework",
            "concept",
            "formalism",
            "theoretical framework",
            "theory",
            "mathematical structure"
          ],
          "iri": "Entity-logical_formalism-Mention-1"
        }
      ],
      "relevance": 0.44384765625
    },
    "Entity-body_atom": {
      "node_id": "body_atom",
      "disambiguation_index": 0,
      "label": "body atom",
      "aliases": [
        "body atom"
      ],
      "types": [
        "logical component",
        "atom"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'body atom' refers to a single logical component in a predicate calculus formalism, which is part of a rule structure that consists of one body atom and a series of conjunctive atoms in the head, used for expressing constraints in knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-6-Sentence-2",
          "local_name": "body atom",
          "local_types": [
            "logical component",
            "atom"
          ],
          "iri": "Entity-body_atom-Mention-1"
        }
      ],
      "relevance": 0.443603515625
    },
    "Entity-relational_database": {
      "node_id": "relational_database",
      "disambiguation_index": 0,
      "label": "relational database",
      "aliases": [
        "a relational database",
        "relational database"
      ],
      "types": [
        "data management system",
        "data structure",
        "database"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A relational database is a type of data management system that organizes data into structured tables with predefined relationships, allowing for efficient data retrieval and manipulation through the use of structured query language (SQL).",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-2",
          "local_name": "relational database",
          "local_types": [
            "data management system",
            "data structure",
            "database"
          ],
          "iri": "Entity-relational_database-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-3-Sentence-5",
          "local_name": "relational database",
          "local_types": [
            "data structure",
            "database"
          ],
          "iri": "Entity-relational_database-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-2-Sentence-2",
          "local_name": "a relational database",
          "local_types": [
            "database"
          ],
          "iri": "Entity-relational_database-Mention-3"
        }
      ],
      "relevance": 0.443359375
    },
    "Entity-union": {
      "node_id": "union",
      "disambiguation_index": 0,
      "label": "union",
      "aliases": [
        "union"
      ],
      "types": [
        "operation",
        "set operation",
        "mathematical operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the algorithm, 'union' refers to the mathematical operation that combines multiple sets of entities, specifically the sets Ei for i ranging from 1 to l, into a single set Esample.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-9",
          "local_name": "union",
          "local_types": [
            "operation",
            "set operation",
            "mathematical operation"
          ],
          "iri": "Entity-union-Mention-1"
        }
      ],
      "relevance": 0.443115234375
    },
    "Entity-explanatory_power": {
      "node_id": "explanatory_power",
      "disambiguation_index": 0,
      "label": "explanatory power",
      "aliases": [
        "explanatory power"
      ],
      "types": [
        "statistical concept",
        "concept",
        "measure of effectiveness",
        "evaluation criterion"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Explanatory power is a measure of how well a model or rule accounts for or predicts the outcomes of a given set of data, indicating the proportion of variance explained by the model.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-4",
          "local_name": "explanatory power",
          "local_types": [
            "statistical concept",
            "concept",
            "measure of effectiveness",
            "evaluation criterion"
          ],
          "iri": "Entity-explanatory_power-Mention-1"
        }
      ],
      "relevance": 0.442138671875
    },
    "Entity-rank": {
      "node_id": "rank",
      "disambiguation_index": 0,
      "label": "ranks",
      "aliases": [
        "rank",
        "ranks"
      ],
      "types": [
        "game category",
        "card classification",
        "classification",
        "attribute",
        "card attribute"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of poker, 'ranks' refers to the classification of poker hands, which can include categories such as High Card, One Pair, Two Pair, etc., based on the combination of cards drawn from a standard deck.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-5",
          "local_name": "ranks",
          "local_types": [
            "attribute",
            "classification",
            "card attribute"
          ],
          "iri": "Entity-rank-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-6",
          "local_name": "rank",
          "local_types": [
            "attribute",
            "card classification"
          ],
          "iri": "Entity-rank-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-7",
          "local_name": "ranks",
          "local_types": [
            "classification",
            "game category"
          ],
          "iri": "Entity-rank-Mention-3"
        }
      ],
      "relevance": 0.442138671875
    },
    "Entity-intermediate_variable": {
      "node_id": "intermediate_variable",
      "disambiguation_index": 0,
      "label": "intermediate variables",
      "aliases": [
        "intermediate variables"
      ],
      "types": [
        "mathematical entity",
        "data element",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Intermediate variables are data elements or mathematical entities that serve as transitional points in a process or function, often used to connect inputs and outputs in a systematic manner.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-5-Sentence-2",
          "local_name": "intermediate variables",
          "local_types": [
            "mathematical entity",
            "data element",
            "variable"
          ],
          "iri": "Entity-intermediate_variable-Mention-1"
        }
      ],
      "relevance": 0.44189453125
    },
    "Entity-child__x__z_": {
      "node_id": "child__x__z_",
      "disambiguation_index": 0,
      "label": "child(x, z)",
      "aliases": [
        "child(x, z)"
      ],
      "types": [
        "predicate",
        "relation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'child(x, z)' refers to a relationship indicating that entity 'x' is a parent of entity 'z', as implied by the open path rule involving the existence of a child based on the relationship of 'x' with another entity 'y'.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-4",
          "local_name": "child(x, z)",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-child__x__z_-Mention-1"
        }
      ],
      "relevance": 0.440185546875
    },
    "Entity-an_entity": {
      "node_id": "an_entity",
      "disambiguation_index": 0,
      "label": "an entity",
      "aliases": [
        "an entity"
      ],
      "types": [
        "entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity refers to a specific instance or object in a knowledge graph that is classified as a 'song'.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-4",
          "local_name": "an entity",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-an_entity-Mention-1"
        }
      ],
      "relevance": 0.439208984375
    },
    "Entity-11_million_fact": {
      "node_id": "11_million_fact",
      "disambiguation_index": 0,
      "label": "11 million facts",
      "aliases": [
        "11 million facts"
      ],
      "types": [
        "fact",
        "data"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '11 million facts' refers to the number of individual data entries contained within the DBpedia knowledge graph, which is a large-scale structured dataset derived from Wikipedia.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-2-Sentence-1",
          "local_name": "11 million facts",
          "local_types": [
            "fact",
            "data"
          ],
          "iri": "Entity-11_million_fact-Mention-1"
        }
      ],
      "relevance": 0.439208984375
    },
    "Entity-album_y": {
      "node_id": "album_y",
      "disambiguation_index": 0,
      "label": "album y",
      "aliases": [
        "album y"
      ],
      "types": [
        "album"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of knowledge graphs, 'album y' refers to a specific album entity that is associated with a song entity, indicating that the song is part of this album and may have additional attributes such as a record label.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-3",
          "local_name": "album y",
          "local_types": [
            "album"
          ],
          "iri": "Entity-album_y-Mention-1"
        }
      ],
      "relevance": 0.439208984375
    },
    "Entity-abstract_model": {
      "node_id": "abstract_model",
      "disambiguation_index": 0,
      "label": "abstract model",
      "aliases": [
        "abstract model"
      ],
      "types": [
        "framework",
        "concept",
        "theoretical model"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An abstract model is a theoretical framework that represents complex systems or concepts in a simplified form, often using mathematical or logical structures to facilitate understanding and analysis.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-3",
          "local_name": "abstract model",
          "local_types": [
            "framework",
            "concept",
            "theoretical model"
          ],
          "iri": "Entity-abstract_model-Mention-1"
        }
      ],
      "relevance": 0.438720703125
    },
    "Entity-validation_of_rdf_database": {
      "node_id": "validation_of_rdf_database",
      "disambiguation_index": 0,
      "label": "validation of RDF databases",
      "aliases": [
        "the validation of RDF databases",
        "validation of RDF databases"
      ],
      "types": [
        "validation",
        "RDF",
        "RDF database"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The validation of RDF databases refers to the process of ensuring that the data stored in Resource Description Framework (RDF) format adheres to specified constraints and structures, often using validation languages or frameworks.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "validation of RDF databases",
          "local_types": [
            "validation",
            "RDF"
          ],
          "iri": "Entity-validation_of_rdf_database-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "the validation of RDF databases",
          "local_types": [
            "validation",
            "RDF database"
          ],
          "iri": "Entity-validation_of_rdf_database-Mention-2"
        }
      ],
      "relevance": 0.43798828125
    },
    "Entity-locatedin__z__y_": {
      "node_id": "locatedin__z__y_",
      "disambiguation_index": 0,
      "label": "locatedIn(z, y)",
      "aliases": [
        "locatedIn(z, y)"
      ],
      "types": [
        "predicate",
        "rule",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The expression 'locatedIn(z, y)' represents a relationship in a knowledge graph where the entity 'z' is situated within the geographical or conceptual area denoted by the entity 'y'.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "locatedIn(z, y)",
          "local_types": [
            "predicate",
            "rule",
            "logical expression"
          ],
          "iri": "Entity-locatedin__z__y_-Mention-1"
        }
      ],
      "relevance": 0.436767578125
    },
    "Entity-genre": {
      "node_id": "genre",
      "disambiguation_index": 0,
      "label": "genre",
      "aliases": [
        "genre",
        "a genre"
      ],
      "types": [
        "music",
        "entity",
        "music genre",
        "music classification",
        "genre",
        "category"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "In this context, 'genre' refers to a category of music that classifies a song based on its style or characteristics, as indicated in the tree structure describing relationships in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "genre",
          "local_types": [
            "music",
            "entity",
            "music genre",
            "music classification",
            "category"
          ],
          "iri": "Entity-genre-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "a genre",
          "local_types": [
            "genre"
          ],
          "iri": "Entity-genre-Mention-2"
        }
      ],
      "relevance": 0.436279296875
    },
    "Entity-record_label_z": {
      "node_id": "record_label_z",
      "disambiguation_index": 0,
      "label": "record label z",
      "aliases": [
        "record label z"
      ],
      "types": [
        "label",
        "record label"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "record label z refers to a specific entity in the DBpedia knowledge graph that represents the label associated with a music album containing a song.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-3",
          "local_name": "record label z",
          "local_types": [
            "label",
            "record label"
          ],
          "iri": "Entity-record_label_z-Mention-1"
        }
      ],
      "relevance": 0.436279296875
    },
    "Entity-the_body_of_r_(1)": {
      "node_id": "the_body_of_r_(1)",
      "disambiguation_index": 1,
      "label": "the body of r",
      "aliases": [
        "the body of r"
      ],
      "types": [
        "body"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The body of r refers to the predicate Pt in a tree structure that denotes a relationship between two entities in a knowledge graph, where the satisfaction of this body indicates that the relationship is a factual statement within the graph.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-4",
          "local_name": "the body of r",
          "local_types": [
            "body"
          ],
          "iri": "Entity-the_body_of_r_(1)-Mention-1"
        }
      ],
      "relevance": 0.436279296875
    },
    "Entity-heuristic_function": {
      "node_id": "heuristic_function",
      "disambiguation_index": 0,
      "label": "heuristic functions",
      "aliases": [
        "heuristic functions"
      ],
      "types": [
        "function",
        "mathematical function",
        "algorithm component",
        "algorithmic concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Heuristic functions are mathematical functions used in algorithms to estimate the cost or value of a particular state or action, guiding the search process towards optimal solutions.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-1-Sentence-5",
          "local_name": "heuristic functions",
          "local_types": [
            "function",
            "mathematical function",
            "algorithm component",
            "algorithmic concept"
          ],
          "iri": "Entity-heuristic_function-Mention-1"
        }
      ],
      "relevance": 0.43603515625
    },
    "Entity-post-processing_step": {
      "node_id": "post-processing_step",
      "disambiguation_index": 0,
      "label": "post-processing step",
      "aliases": [
        "post-processing step"
      ],
      "types": [
        "method",
        "step",
        "process",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A post-processing step refers to a method or procedure applied after the initial processing of data or results to enhance, refine, or analyze the output.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-5-Sentence-2",
          "local_name": "post-processing step",
          "local_types": [
            "method",
            "step",
            "process",
            "methodology"
          ],
          "iri": "Entity-post-processing_step-Mention-1"
        }
      ],
      "relevance": 0.43603515625
    },
    "Entity-locatedin": {
      "node_id": "locatedin",
      "disambiguation_index": 0,
      "label": "locatedIn",
      "aliases": [
        "locatedIn"
      ],
      "types": [
        "relation",
        "logical statement"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'locatedIn' refers to a binary predicate in a knowledge graph that indicates the relationship between an entity, such as a place, and its geographical location.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "locatedIn",
          "local_types": [
            "relation",
            "logical statement"
          ],
          "iri": "Entity-locatedin-Mention-1"
        }
      ],
      "relevance": 0.435302734375
    },
    "Entity-cognitive_load": {
      "node_id": "cognitive_load",
      "disambiguation_index": 0,
      "label": "cognitive load",
      "aliases": [
        "cognitive load"
      ],
      "types": [
        "mental effort",
        "concept",
        "psychological concept",
        "cognitive concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Cognitive load refers to the amount of mental effort and resources required to process information and perform tasks, often influencing learning and problem-solving capabilities.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-7",
          "local_name": "cognitive load",
          "local_types": [
            "mental effort",
            "concept",
            "psychological concept",
            "cognitive concept"
          ],
          "iri": "Entity-cognitive_load-Mention-1"
        }
      ],
      "relevance": 0.43408203125
    },
    "Entity-human_interpretability": {
      "node_id": "human_interpretability",
      "disambiguation_index": 0,
      "label": "human interpretability",
      "aliases": [
        "human interpretability"
      ],
      "types": [
        "cognitive process",
        "concept",
        "interpretability"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Human interpretability refers to the ability of a model or system to be understood and interpreted by humans, allowing them to grasp its decision-making processes and outcomes.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-1",
          "local_name": "human interpretability",
          "local_types": [
            "cognitive process",
            "concept",
            "interpretability"
          ],
          "iri": "Entity-human_interpretability-Mention-1"
        }
      ],
      "relevance": 0.43408203125
    },
    "Entity-value": {
      "node_id": "value",
      "disambiguation_index": 0,
      "label": "value",
      "aliases": [
        "value"
      ],
      "types": [
        "numerical quantity",
        "mathematical property"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'value' refers to the numerical quantity obtained from the matrix product of adjacency matrices representing predicates, specifically the elements that meet or exceed a specified cardinality threshold (Car) in the evaluation of rules.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-2",
          "local_name": "value",
          "local_types": [
            "numerical quantity",
            "mathematical property"
          ],
          "iri": "Entity-value-Mention-1"
        }
      ],
      "relevance": 0.433837890625
    },
    "Entity-datatype_property": {
      "node_id": "datatype_property",
      "disambiguation_index": 0,
      "label": "datatype properties",
      "aliases": [
        "datatype properties"
      ],
      "types": [
        "attribute",
        "concept",
        "property type"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Datatype properties are a type of property in semantic web technologies that link a resource to a literal value, typically representing data types such as strings, numbers, or dates.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "datatype properties",
          "local_types": [
            "attribute",
            "concept",
            "property type"
          ],
          "iri": "Entity-datatype_property-Mention-1"
        }
      ],
      "relevance": 0.43359375
    },
    "Entity-citizenof": {
      "node_id": "citizenof",
      "disambiguation_index": 0,
      "label": "citizenOf",
      "aliases": [
        "citizenOf"
      ],
      "types": [
        "predicate",
        "relation",
        "logical statement",
        "relationship",
        "social construct",
        "social status"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'citizenOf' refers to a predicate in a knowledge graph that establishes a relationship indicating that an entity (such as a person) is a citizen of a specific location (such as a country).",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "citizenOf",
          "local_types": [
            "relation",
            "logical statement"
          ],
          "iri": "Entity-citizenof-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "citizenOf",
          "local_types": [
            "predicate",
            "social status",
            "relationship"
          ],
          "iri": "Entity-citizenof-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "citizenOf",
          "local_types": [
            "predicate",
            "relation",
            "social construct",
            "relationship"
          ],
          "iri": "Entity-citizenof-Mention-3"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "citizenOf",
          "local_types": [
            "relation",
            "predicate"
          ],
          "iri": "Entity-citizenof-Mention-4"
        }
      ],
      "relevance": 0.43310546875
    },
    "Entity-scoring_function": {
      "node_id": "scoring_function",
      "disambiguation_index": 0,
      "label": "scoring function",
      "aliases": [
        "scoring function",
        "scoring functions"
      ],
      "types": [
        "function",
        "computational method",
        "mathematical function",
        "method",
        "algorithm",
        "evaluation technique",
        "evaluation metric",
        "evaluation method"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A scoring function is a mathematical function or algorithm used to evaluate the quality or relevance of a given input by producing a numerical score based on specific criteria.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-4",
          "local_name": "scoring function",
          "local_types": [
            "function",
            "computational method",
            "mathematical function"
          ],
          "iri": "Entity-scoring_function-Mention-1"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-5",
          "local_name": "scoring function",
          "local_types": [
            "mathematical function",
            "evaluation metric"
          ],
          "iri": "Entity-scoring_function-Mention-2"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-2",
          "local_name": "scoring function",
          "local_types": [
            "function",
            "mathematical function",
            "evaluation method"
          ],
          "iri": "Entity-scoring_function-Mention-3"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-3",
          "local_name": "scoring function",
          "local_types": [
            "function",
            "mathematical function",
            "algorithm",
            "evaluation metric",
            "evaluation method"
          ],
          "iri": "Entity-scoring_function-Mention-4"
        },
        {
          "reference": "Section-10-Paragraph-5-Sentence-1",
          "local_name": "scoring functions",
          "local_types": [
            "function",
            "mathematical function",
            "method",
            "evaluation technique",
            "evaluation metric",
            "evaluation method"
          ],
          "iri": "Entity-scoring_function-Mention-5"
        },
        {
          "reference": "Section-16-Paragraph-6-Sentence-2",
          "local_name": "scoring function",
          "local_types": [
            "function",
            "evaluation metric",
            "mathematical function",
            "algorithm"
          ],
          "iri": "Entity-scoring_function-Mention-6"
        }
      ],
      "relevance": 0.43310546875
    },
    "Entity-attribute": {
      "node_id": "attribute",
      "disambiguation_index": 0,
      "label": "attributes",
      "aliases": [
        "attributes"
      ],
      "types": [
        "database component",
        "attribute",
        "data element"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of relational databases, 'attributes' refer to the specific data fields or properties that must be defined and instantiated according to schema-based constraints.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-2",
          "local_name": "attributes",
          "local_types": [
            "database component",
            "attribute",
            "data element"
          ],
          "iri": "Entity-attribute-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-6",
          "local_name": "attributes",
          "local_types": [
            "attribute"
          ],
          "iri": "Entity-attribute-Mention-2"
        }
      ],
      "relevance": 0.432861328125
    },
    "Entity-property_declaration": {
      "node_id": "property_declaration",
      "disambiguation_index": 0,
      "label": "property declaration",
      "aliases": [
        "property declaration"
      ],
      "types": [
        "semantic web",
        "data modeling"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A property declaration is a formal specification that defines the characteristics and constraints of a property within a data model or semantic web framework.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-5-Sentence-4",
          "local_name": "property declaration",
          "local_types": [
            "semantic web",
            "data modeling"
          ],
          "iri": "Entity-property_declaration-Mention-1"
        }
      ],
      "relevance": 0.432373046875
    },
    "Entity-the_set": {
      "node_id": "the_set",
      "disambiguation_index": 0,
      "label": "the set",
      "aliases": [
        "the set"
      ],
      "types": [
        "set"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The set refers to a collection of entities, specifically {e2}, that satisfy a given condition in the context of the discussed rule with a cardinality constraint of 2.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-5",
          "local_name": "the set",
          "local_types": [
            "set"
          ],
          "iri": "Entity-the_set-Mention-1"
        }
      ],
      "relevance": 0.431884765625
    },
    "Entity-an_answer_to_the_former": {
      "node_id": "an_answer_to_the_former",
      "disambiguation_index": 0,
      "label": "an answer to the former",
      "aliases": [
        "an answer to the former"
      ],
      "types": [
        "answer"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'an answer to the former' refers to the response or information obtained from the first question in a sequence of dependent questions that guide the process of knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-5",
          "local_name": "an answer to the former",
          "local_types": [
            "answer"
          ],
          "iri": "Entity-an_answer_to_the_former-Mention-1"
        }
      ],
      "relevance": 0.431640625
    },
    "Entity-each_human": {
      "node_id": "each_human",
      "disambiguation_index": 0,
      "label": "each human",
      "aliases": [
        "each human"
      ],
      "types": [
        "entity",
        "human"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'each human' refers to every individual member of the species Homo sapiens, particularly in the context of establishing rules or constraints related to their relationships and characteristics within knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-2",
          "local_name": "each human",
          "local_types": [
            "entity",
            "human"
          ],
          "iri": "Entity-each_human-Mention-1"
        }
      ],
      "relevance": 0.431396484375
    },
    "Entity-human_knowledge": {
      "node_id": "human_knowledge",
      "disambiguation_index": 0,
      "label": "human knowledge",
      "aliases": [
        "human knowledge"
      ],
      "types": [
        "cognitive science",
        "knowledge domain"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Human knowledge refers to the collective understanding, information, and skills acquired by humans through experience, education, and cultural transmission over time.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-3",
          "local_name": "human knowledge",
          "local_types": [
            "cognitive science",
            "knowledge domain"
          ],
          "iri": "Entity-human_knowledge-Mention-1"
        }
      ],
      "relevance": 0.43115234375
    },
    "Entity-shared_variable": {
      "node_id": "shared_variable",
      "disambiguation_index": 0,
      "label": "shared variable",
      "aliases": [
        "shared variable"
      ],
      "types": [
        "variable",
        "data structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A shared variable is a data structure that can be accessed and modified by multiple processes or threads, allowing for communication and synchronization between them.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-6",
          "local_name": "shared variable",
          "local_types": [
            "variable",
            "data structure"
          ],
          "iri": "Entity-shared_variable-Mention-1"
        }
      ],
      "relevance": 0.43115234375
    },
    "Entity-human_validation": {
      "node_id": "human_validation",
      "disambiguation_index": 0,
      "label": "human validation",
      "aliases": [
        "human validation"
      ],
      "types": [
        "methodology",
        "process",
        "evaluation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Human validation is a methodology or process that involves the assessment and confirmation of data or outputs by human evaluators to ensure accuracy and reliability.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-3",
          "local_name": "human validation",
          "local_types": [
            "methodology",
            "process",
            "evaluation"
          ],
          "iri": "Entity-human_validation-Mention-1"
        }
      ],
      "relevance": 0.43115234375
    },
    "Entity-computer_scientist": {
      "node_id": "computer_scientist",
      "disambiguation_index": 0,
      "label": "computer scientists",
      "aliases": [
        "computer scientists"
      ],
      "types": [
        "profession",
        "scientist",
        "academic",
        "entity type"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Computer scientists are professionals who specialize in the study, development, and application of computer science principles and technologies.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-5",
          "local_name": "computer scientists",
          "local_types": [
            "profession",
            "scientist",
            "academic",
            "entity type"
          ],
          "iri": "Entity-computer_scientist-Mention-1"
        }
      ],
      "relevance": 0.430908203125
    },
    "Entity-existential_rule": {
      "node_id": "existential_rule",
      "disambiguation_index": 0,
      "label": "existential rules",
      "aliases": [
        "existential rules"
      ],
      "types": [
        "logical construct",
        "concept",
        "formalism",
        "rule",
        "logical rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Existential rules are a type of logical construct used in formal systems that allow for the expression of statements involving the existence of certain elements under specific conditions.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-1",
          "local_name": "existential rules",
          "local_types": [
            "rule",
            "logical rule",
            "formalism"
          ],
          "iri": "Entity-existential_rule-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-7",
          "local_name": "existential rules",
          "local_types": [
            "concept",
            "rule",
            "logical construct"
          ],
          "iri": "Entity-existential_rule-Mention-2"
        }
      ],
      "relevance": 0.4306640625
    },
    "Entity-prior_sampling": {
      "node_id": "prior_sampling",
      "disambiguation_index": 0,
      "label": "prior Sampling",
      "aliases": [
        "prior Sampling"
      ],
      "types": [
        "technique",
        "method",
        "sampling method",
        "statistical technique"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Prior Sampling is a statistical technique used to reduce the search space in probabilistic models by sampling from prior distributions before observing data.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-1-Sentence-1",
          "local_name": "prior Sampling",
          "local_types": [
            "technique",
            "method",
            "sampling method",
            "statistical technique"
          ],
          "iri": "Entity-prior_sampling-Mention-1"
        }
      ],
      "relevance": 0.4306640625
    },
    "Entity-syntactic_sugar": {
      "node_id": "syntactic_sugar",
      "disambiguation_index": 0,
      "label": "syntactic sugar",
      "aliases": [
        "syntactic sugar"
      ],
      "types": [
        "programming concept",
        "language feature",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Syntactic sugar refers to syntax within a programming language that is designed to make code easier to read and write, without changing its functionality.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-6-Sentence-3",
          "local_name": "syntactic sugar",
          "local_types": [
            "programming concept",
            "language feature",
            "concept"
          ],
          "iri": "Entity-syntactic_sugar-Mention-1"
        }
      ],
      "relevance": 0.430419921875
    },
    "Entity-five_playing_card": {
      "node_id": "five_playing_card",
      "disambiguation_index": 0,
      "label": "five playing cards",
      "aliases": [
        "five playing cards"
      ],
      "types": [
        "playing cards"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Five playing cards refer to a specific combination of cards drawn from a standard deck, consisting of thirteen ranks and four suits, used to form a poker hand in the context of evaluating the completeness of a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-5",
          "local_name": "five playing cards",
          "local_types": [
            "playing cards"
          ],
          "iri": "Entity-five_playing_card-Mention-1"
        }
      ],
      "relevance": 0.429931640625
    },
    "Entity-learning_process": {
      "node_id": "learning_process",
      "disambiguation_index": 0,
      "label": "learning process",
      "aliases": [
        "learning process"
      ],
      "types": [
        "educational process",
        "cognitive process",
        "process",
        "methodology"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The learning process refers to the systematic series of actions or steps taken to acquire knowledge, skills, or understanding through experience, study, or instruction.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-4-Sentence-3",
          "local_name": "learning process",
          "local_types": [
            "educational process",
            "cognitive process",
            "process",
            "methodology"
          ],
          "iri": "Entity-learning_process-Mention-1"
        }
      ],
      "relevance": 0.4296875
    },
    "Entity-sampling_process": {
      "node_id": "sampling_process",
      "disambiguation_index": 0,
      "label": "sampling process",
      "aliases": [
        "sampling process"
      ],
      "types": [
        "methodology",
        "process",
        "statistical technique"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The sampling process is a methodological approach used to select a subset of individuals or items from a larger population to make statistical inferences or analyses.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-1-Sentence-5",
          "local_name": "sampling process",
          "local_types": [
            "methodology",
            "process",
            "statistical technique"
          ],
          "iri": "Entity-sampling_process-Mention-1"
        }
      ],
      "relevance": 0.429443359375
    },
    "Entity-the_former_question": {
      "node_id": "the_former_question",
      "disambiguation_index": 0,
      "label": "the former question",
      "aliases": [
        "the former question"
      ],
      "types": [
        "question"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The former question refers to a preceding inquiry in a sequence of dependent questions that must be answered before progressing to the next question in the context of knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-5",
          "local_name": "the former question",
          "local_types": [
            "question"
          ],
          "iri": "Entity-the_former_question-Mention-1"
        }
      ],
      "relevance": 0.429443359375
    },
    "Entity-the_goal_of_pruning": {
      "node_id": "the_goal_of_pruning",
      "disambiguation_index": 0,
      "label": "the goal of pruning",
      "aliases": [
        "the goal of pruning"
      ],
      "types": [
        "goal",
        "pruning"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The goal of pruning refers to the objective of enhancing computational efficiency in the learning process while ensuring that high-quality rules are not overlooked.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-5-Sentence-3",
          "local_name": "the goal of pruning",
          "local_types": [
            "goal",
            "pruning"
          ],
          "iri": "Entity-the_goal_of_pruning-Mention-1"
        }
      ],
      "relevance": 0.429443359375
    },
    "Entity-benchmark": {
      "node_id": "benchmark",
      "disambiguation_index": 0,
      "label": "benchmark",
      "aliases": [
        "benchmarks",
        "benchmark"
      ],
      "types": [
        "reference point",
        "comparison",
        "standard",
        "evaluation metric",
        "evaluation standard"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A benchmark is a standard or reference point used for comparison and evaluation in various fields, often serving as a basis for measuring performance or quality.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-3",
          "local_name": "benchmark",
          "local_types": [
            "standard",
            "comparison",
            "reference point"
          ],
          "iri": "Entity-benchmark-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-5",
          "local_name": "benchmarks",
          "local_types": [
            "standard",
            "evaluation metric",
            "reference point",
            "evaluation standard"
          ],
          "iri": "Entity-benchmark-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-4",
          "local_name": "benchmarks",
          "local_types": [
            "evaluation standard",
            "reference point"
          ],
          "iri": "Entity-benchmark-Mention-3"
        }
      ],
      "relevance": 0.42919921875
    },
    "Entity-performance_evaluation": {
      "node_id": "performance_evaluation",
      "disambiguation_index": 0,
      "label": "performance evaluation",
      "aliases": [
        "performance evaluation"
      ],
      "types": [
        "evaluation process",
        "methodology",
        "assessment",
        "evaluation",
        "performance"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Performance evaluation refers to the systematic process of assessing an individual's or system's performance against established standards or criteria.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-2-Sentence-5",
          "local_name": "performance evaluation",
          "local_types": [
            "evaluation process",
            "methodology",
            "assessment",
            "evaluation",
            "performance"
          ],
          "iri": "Entity-performance_evaluation-Mention-1"
        }
      ],
      "relevance": 0.42919921875
    },
    "Entity-related_work": {
      "node_id": "related_work",
      "disambiguation_index": 0,
      "label": "related work",
      "aliases": [
        "related work"
      ],
      "types": [
        "research context",
        "literature review",
        "concept",
        "research",
        "work"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Related work refers to the body of existing research and literature that is relevant to a particular study or topic, often reviewed to provide context and background for new findings.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-2",
          "local_name": "related work",
          "local_types": [
            "research context",
            "literature review",
            "concept",
            "research",
            "work"
          ],
          "iri": "Entity-related_work-Mention-1"
        }
      ],
      "relevance": 0.427490234375
    },
    "Entity-all_variable_of_a_rule": {
      "node_id": "all_variable_of_a_rule",
      "disambiguation_index": 0,
      "label": "all variables of a rule",
      "aliases": [
        "all variables of a rule"
      ],
      "types": [
        "rule",
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'all variables of a rule' refers to the set of variables within a logical rule that, if they are all closed (occurring in at least two distinct predicate terms), classifies the rule as a closed rule, indicating that it does not contain any open variables.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-2",
          "local_name": "all variables of a rule",
          "local_types": [
            "rule",
            "variable"
          ],
          "iri": "Entity-all_variable_of_a_rule-Mention-1"
        }
      ],
      "relevance": 0.42724609375
    },
    "Entity-simplicity": {
      "node_id": "simplicity",
      "disambiguation_index": 0,
      "label": "simplicity",
      "aliases": [
        "simplicity"
      ],
      "types": [
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'simplicity' refers to the quality of making tree shapes easier to interpret by reducing complexity through the unification of variables in predicates across multiple branches.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "simplicity",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-simplicity-Mention-1"
        }
      ],
      "relevance": 0.427001953125
    },
    "Entity-a_specific_poker_hand": {
      "node_id": "a_specific_poker_hand",
      "disambiguation_index": 0,
      "label": "a specific poker hand",
      "aliases": [
        "a specific poker hand"
      ],
      "types": [
        "poker hand"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A specific poker hand refers to a unique combination of five playing cards drawn from a standard deck, categorized into one of nine ranks such as High Card, One Pair, or Full House, and represented in the context of knowledge graphs as a unary predicate in the Poker knowledge graph.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-9",
          "local_name": "a specific poker hand",
          "local_types": [
            "poker hand"
          ],
          "iri": "Entity-a_specific_poker_hand-Mention-1"
        }
      ],
      "relevance": 0.427001953125
    },
    "Entity-binary_predicate": {
      "node_id": "binary_predicate",
      "disambiguation_index": 0,
      "label": "binary predicate",
      "aliases": [
        "binary predicate",
        "binary predicates"
      ],
      "types": [
        "logical predicate",
        "logical construct",
        "property",
        "predicate",
        "relation",
        "concept",
        "data structure",
        "type",
        "mathematical concept",
        "logical expression",
        "predicate type"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A binary predicate is a logical construct that represents a relationship between two entities, typically expressed as a function or relation that takes two arguments.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "binary predicate",
          "local_types": [
            "property",
            "predicate",
            "relation"
          ],
          "iri": "Entity-binary_predicate-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-4",
          "local_name": "binary predicates",
          "local_types": [
            "mathematical concept",
            "predicate"
          ],
          "iri": "Entity-binary_predicate-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-3",
          "local_name": "binary predicates",
          "local_types": [
            "mathematical concept",
            "predicate",
            "logical predicate",
            "logical expression"
          ],
          "iri": "Entity-binary_predicate-Mention-3"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-4",
          "local_name": "binary predicates",
          "local_types": [
            "logical construct",
            "predicate",
            "concept",
            "type",
            "predicate type"
          ],
          "iri": "Entity-binary_predicate-Mention-4"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-6",
          "local_name": "binary predicates",
          "local_types": [
            "predicate type"
          ],
          "iri": "Entity-binary_predicate-Mention-5"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-2",
          "local_name": "binary predicates",
          "local_types": [
            "logical construct",
            "predicate",
            "data structure",
            "type",
            "predicate type"
          ],
          "iri": "Entity-binary_predicate-Mention-6"
        }
      ],
      "relevance": 0.4267578125
    },
    "Entity-class_declaration": {
      "node_id": "class_declaration",
      "disambiguation_index": 0,
      "label": "class declaration",
      "aliases": [
        "class declaration"
      ],
      "types": [
        "programming concept",
        "programming construct",
        "definition"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A class declaration is a programming construct that defines a new class, specifying its properties and behaviors in object-oriented programming.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-4",
          "local_name": "class declaration",
          "local_types": [
            "programming concept",
            "programming construct",
            "definition"
          ],
          "iri": "Entity-class_declaration-Mention-1"
        }
      ],
      "relevance": 0.426025390625
    },
    "Entity-research": {
      "node_id": "research",
      "disambiguation_index": 0,
      "label": "research",
      "aliases": [
        "research"
      ],
      "types": [
        "academic work",
        "study"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Research refers to the systematic investigation and study of materials and sources to establish facts and reach new conclusions.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-7",
          "local_name": "research",
          "local_types": [
            "academic work",
            "study"
          ],
          "iri": "Entity-research-Mention-1"
        }
      ],
      "relevance": 0.4248046875
    },
    "Entity-sample_of_data": {
      "node_id": "sample_of_data",
      "disambiguation_index": 0,
      "label": "sample of data",
      "aliases": [
        "sample of data"
      ],
      "types": [
        "input data",
        "data set",
        "data",
        "data subset",
        "input"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A sample of data refers to a selected portion or subset of a larger dataset that is used for analysis, testing, or training purposes.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "sample of data",
          "local_types": [
            "input data",
            "data set",
            "data",
            "data subset",
            "input"
          ],
          "iri": "Entity-sample_of_data-Mention-1"
        }
      ],
      "relevance": 0.424072265625
    },
    "Entity-union__from_i1_to_l__of_ei": {
      "node_id": "union__from_i1_to_l__of_ei",
      "disambiguation_index": 0,
      "label": "union (from i=1 to l) of Ei",
      "aliases": [
        "union (from i=1 to l) of Ei"
      ],
      "types": [
        "operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A mathematical operation that combines multiple sets or elements, represented as the collective set of all distinct elements from each set Ei, where i ranges from 1 to l.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-3-Sentence-9",
          "local_name": "union (from i=1 to l) of Ei",
          "local_types": [
            "operation"
          ],
          "iri": "Entity-union__from_i1_to_l__of_ei-Mention-1"
        }
      ],
      "relevance": 0.423828125
    },
    "Entity-resource_constraint": {
      "node_id": "resource_constraint",
      "disambiguation_index": 0,
      "label": "resource constraints",
      "aliases": [
        "resource constraints"
      ],
      "types": [
        "economic factor",
        "constraint",
        "limitation",
        "resource"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Resource constraints refer to the limitations imposed by the availability and allocation of resources, which can affect the capacity to achieve certain goals or complete tasks.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-3",
          "local_name": "resource constraints",
          "local_types": [
            "economic factor",
            "constraint",
            "limitation",
            "resource"
          ],
          "iri": "Entity-resource_constraint-Mention-1"
        }
      ],
      "relevance": 0.423583984375
    },
    "Entity-livesin__x__z_": {
      "node_id": "livesin__x__z_",
      "disambiguation_index": 0,
      "label": "livesIn(x, z)",
      "aliases": [
        "livesIn(x, z)"
      ],
      "types": [
        "predicate",
        "rule",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention 'livesIn(x, z)' refers to a predicate that indicates the relationship where entity 'x' resides in location 'z' within a knowledge graph context.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "livesIn(x, z)",
          "local_types": [
            "predicate",
            "rule",
            "logical expression"
          ],
          "iri": "Entity-livesin__x__z_-Mention-1"
        }
      ],
      "relevance": 0.423583984375
    },
    "Entity-an_entity_e": {
      "node_id": "an_entity_e",
      "disambiguation_index": 0,
      "label": "An entity e",
      "aliases": [
        "An entity e"
      ],
      "types": [
        "entity"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "An entity e refers to a specific identifier used to represent an object, which can be a place or a person, within the context of a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-1",
          "local_name": "An entity e",
          "local_types": [
            "entity"
          ],
          "iri": "Entity-an_entity_e-Mention-1"
        }
      ],
      "relevance": 0.423583984375
    },
    "Entity-x_(3)": {
      "node_id": "x_(3)",
      "disambiguation_index": 3,
      "label": "x",
      "aliases": [
        "x"
      ],
      "types": [
        "variable"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In this context, 'x' refers to a variable representing the name of an album, which is used to create new predicates from existing facts in the knowledge graph.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-4",
          "local_name": "x",
          "local_types": [
            "variable"
          ],
          "iri": "Entity-x_(3)-Mention-1"
        }
      ],
      "relevance": 0.423095703125
    },
    "Entity-unary_predicate": {
      "node_id": "unary_predicate",
      "disambiguation_index": 0,
      "label": "unary predicates",
      "aliases": [
        "unary predicate",
        "unary predicates",
        "Unary predicates"
      ],
      "types": [
        "logical predicate",
        "logical construct",
        "predicate",
        "concept",
        "type",
        "mathematical concept",
        "logical expression",
        "predicate type"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Unary predicates are logical expressions that take a single argument and evaluate to true or false, often used to define properties or characteristics of objects in formal logic and mathematical contexts.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-7-Sentence-1",
          "local_name": "unary predicates",
          "local_types": [
            "predicate",
            "concept",
            "logical construct"
          ],
          "iri": "Entity-unary_predicate-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-3",
          "local_name": "unary predicates",
          "local_types": [
            "predicate",
            "logical expression"
          ],
          "iri": "Entity-unary_predicate-Mention-2"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-4",
          "local_name": "unary predicates",
          "local_types": [
            "mathematical concept",
            "predicate"
          ],
          "iri": "Entity-unary_predicate-Mention-3"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-5",
          "local_name": "Unary predicates",
          "local_types": [
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-unary_predicate-Mention-4"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "unary predicate",
          "local_types": [
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-unary_predicate-Mention-5"
        },
        {
          "reference": "Section-7-Paragraph-2-Sentence-2",
          "local_name": "unary predicates",
          "local_types": [
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-unary_predicate-Mention-6"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-9",
          "local_name": "unary predicates",
          "local_types": [
            "predicate",
            "predicate type",
            "logical construct"
          ],
          "iri": "Entity-unary_predicate-Mention-7"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-3",
          "local_name": "unary predicates",
          "local_types": [
            "mathematical concept",
            "predicate",
            "logical predicate",
            "logical expression"
          ],
          "iri": "Entity-unary_predicate-Mention-8"
        },
        {
          "reference": "Section-14-Paragraph-6-Sentence-1",
          "local_name": "unary predicates",
          "local_types": [
            "mathematical concept",
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-unary_predicate-Mention-9"
        },
        {
          "reference": "Section-14-Paragraph-6-Sentence-3",
          "local_name": "unary predicates",
          "local_types": [
            "predicate",
            "logical expression"
          ],
          "iri": "Entity-unary_predicate-Mention-10"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-3",
          "local_name": "unary predicates",
          "local_types": [
            "mathematical concept",
            "predicate",
            "logical expression",
            "logical construct"
          ],
          "iri": "Entity-unary_predicate-Mention-11"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-1",
          "local_name": "unary predicates",
          "local_types": [
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-unary_predicate-Mention-12"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-3",
          "local_name": "unary predicates",
          "local_types": [
            "predicate",
            "logical expression"
          ],
          "iri": "Entity-unary_predicate-Mention-13"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-5",
          "local_name": "unary predicates",
          "local_types": [
            "logical expression",
            "mathematical concept"
          ],
          "iri": "Entity-unary_predicate-Mention-14"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-3",
          "local_name": "unary predicates",
          "local_types": [
            "logical construct",
            "predicate",
            "concept",
            "type",
            "logical expression",
            "predicate type"
          ],
          "iri": "Entity-unary_predicate-Mention-15"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-6",
          "local_name": "unary predicates",
          "local_types": [
            "predicate type"
          ],
          "iri": "Entity-unary_predicate-Mention-16"
        },
        {
          "reference": "Section-15-Paragraph-5-Sentence-2",
          "local_name": "unary predicates",
          "local_types": [
            "predicate",
            "predicate type",
            "logical construct",
            "type"
          ],
          "iri": "Entity-unary_predicate-Mention-17"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-3",
          "local_name": "unary predicates",
          "local_types": [
            "predicate",
            "predicate type",
            "logical construct",
            "type"
          ],
          "iri": "Entity-unary_predicate-Mention-18"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-5",
          "local_name": "unary predicate",
          "local_types": [
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-unary_predicate-Mention-19"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-2",
          "local_name": "unary predicates",
          "local_types": [
            "predicate",
            "concept",
            "predicate type",
            "logical construct"
          ],
          "iri": "Entity-unary_predicate-Mention-20"
        }
      ],
      "relevance": 0.42236328125
    },
    "Entity-experimental_evaluation": {
      "node_id": "experimental_evaluation",
      "disambiguation_index": 0,
      "label": "experimental evaluation",
      "aliases": [
        "experimental evaluation"
      ],
      "types": [
        "research method",
        "evaluation",
        "evaluation technique"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Experimental evaluation is a systematic research method used to assess the effectiveness or performance of a particular intervention, treatment, or process through controlled experiments and empirical data collection.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-3",
          "local_name": "experimental evaluation",
          "local_types": [
            "research method",
            "evaluation",
            "evaluation technique"
          ],
          "iri": "Entity-experimental_evaluation-Mention-1"
        }
      ],
      "relevance": 0.42236328125
    },
    "Entity-embedding_space": {
      "node_id": "embedding_space",
      "disambiguation_index": 0,
      "label": "embedding space",
      "aliases": [
        "embedding space"
      ],
      "types": [
        "data representation",
        "vector space",
        "mathematical space"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An embedding space is a mathematical construct that represents data points as vectors in a high-dimensional space, allowing for the analysis of relationships and properties among the data.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-2",
          "local_name": "embedding space",
          "local_types": [
            "data representation",
            "vector space",
            "mathematical space"
          ],
          "iri": "Entity-embedding_space-Mention-1"
        }
      ],
      "relevance": 0.42236328125
    },
    "Entity-pairwise_multiplication": {
      "node_id": "pairwise_multiplication",
      "disambiguation_index": 0,
      "label": "pairwise multiplication",
      "aliases": [
        "pairwise multiplication"
      ],
      "types": [
        "operation",
        "vector operation",
        "mathematical operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Pairwise multiplication is a mathematical operation that involves multiplying corresponding elements of two vectors or sequences to produce a new vector or sequence.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-3",
          "local_name": "pairwise multiplication",
          "local_types": [
            "operation",
            "vector operation",
            "mathematical operation"
          ],
          "iri": "Entity-pairwise_multiplication-Mention-1"
        }
      ],
      "relevance": 0.42236328125
    },
    "Entity-section": {
      "node_id": "section",
      "disambiguation_index": 0,
      "label": "section",
      "aliases": [
        "section"
      ],
      "types": [
        "document structure",
        "part"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A section is a distinct part of a document that organizes content into manageable segments, often focusing on a specific topic or theme.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-1-Sentence-1",
          "local_name": "section",
          "local_types": [
            "document structure",
            "part"
          ],
          "iri": "Entity-section-Mention-1"
        }
      ],
      "relevance": 0.42138671875
    },
    "Entity-logical_foundation": {
      "node_id": "logical_foundation",
      "disambiguation_index": 0,
      "label": "logical foundations",
      "aliases": [
        "logical foundations"
      ],
      "types": [
        "philosophical concept",
        "theoretical basis",
        "concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Logical foundations refer to the underlying principles and theoretical basis that provide a coherent framework for reasoning and argumentation in various fields, particularly in philosophy and mathematics.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-1-Sentence-2",
          "local_name": "logical foundations",
          "local_types": [
            "philosophical concept",
            "theoretical basis",
            "concept"
          ],
          "iri": "Entity-logical_foundation-Mention-1"
        }
      ],
      "relevance": 0.421142578125
    },
    "Entity-fullhouse__x_": {
      "node_id": "fullhouse__x_",
      "disambiguation_index": 0,
      "label": "fullHouse(x)",
      "aliases": [
        "fullHouse",
        "fullHouse(x)"
      ],
      "types": [
        "function",
        "predicate",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "fullHouse(x) is a unary predicate representing a specific poker hand classification in a knowledge graph, indicating that the hand consists of three cards of one rank and two cards of another rank.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-9",
          "local_name": "fullHouse(x)",
          "local_types": [
            "function",
            "predicate",
            "mathematical expression"
          ],
          "iri": "Entity-fullhouse__x_-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-9",
          "local_name": "fullHouse",
          "local_types": [
            "predicate",
            "function"
          ],
          "iri": "Entity-fullhouse__x_-Mention-2"
        }
      ],
      "relevance": 0.421142578125
    },
    "Entity-experiment": {
      "node_id": "experiment",
      "disambiguation_index": 0,
      "label": "experiments",
      "aliases": [
        "experiment",
        "experiments"
      ],
      "types": [
        "study",
        "scientific method",
        "scientific study",
        "scientific investigation",
        "evaluation process",
        "research method",
        "research activity",
        "research",
        "experiment",
        "evaluation",
        "research study"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Experiments are systematic investigations or tests conducted to explore hypotheses, evaluate outcomes, or gather data in a scientific context.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-1-Sentence-1",
          "local_name": "experiments",
          "local_types": [
            "research",
            "research method",
            "experiment",
            "evaluation"
          ],
          "iri": "Entity-experiment-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-1",
          "local_name": "experiments",
          "local_types": [
            "scientific study",
            "research method",
            "research activity",
            "scientific method"
          ],
          "iri": "Entity-experiment-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-1",
          "local_name": "experiments",
          "local_types": [
            "research method",
            "study"
          ],
          "iri": "Entity-experiment-Mention-3"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-1",
          "local_name": "experiments",
          "local_types": [
            "research method",
            "scientific study"
          ],
          "iri": "Entity-experiment-Mention-4"
        },
        {
          "reference": "Section-16-Paragraph-1-Sentence-2",
          "local_name": "experiments",
          "local_types": [
            "research",
            "evaluation process",
            "research method"
          ],
          "iri": "Entity-experiment-Mention-5"
        },
        {
          "reference": "Section-16-Paragraph-3-Sentence-1",
          "local_name": "experiment",
          "local_types": [
            "scientific investigation",
            "research",
            "research study"
          ],
          "iri": "Entity-experiment-Mention-6"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-1",
          "local_name": "experiments",
          "local_types": [
            "research",
            "study"
          ],
          "iri": "Entity-experiment-Mention-7"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-1",
          "local_name": "experiments",
          "local_types": [
            "research method",
            "study"
          ],
          "iri": "Entity-experiment-Mention-8"
        }
      ],
      "relevance": 0.4208984375
    },
    "Entity-human__x__x__-__citizenof__x__z1___country__z1__z1___father__x__z2___human__z2__z2___nativelanguage__x__z3___language__z3__z3_": {
      "node_id": "human__x__x__-__citizenof__x__z1___country__z1__z1___father__x__z2___human__z2__z2___nativelanguage__x__z3___language__z3__z3_",
      "disambiguation_index": 0,
      "label": "human(x, x) -> citizenOf(x, z1) ^ country(z1, z1) ^ father(x, z2) ^ human(z2, z2) ^ nativeLanguage(x, z3) ^ language(z3, z3)",
      "aliases": [
        "human(x, x) -> citizenOf(x, z1) ^ country(z1, z1) ^ father(x, z2) ^ human(z2, z2) ^ nativeLanguage(x, z3) ^ language(z3, z3)"
      ],
      "types": [
        "expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity mention describes a logical expression representing a tree structure in a knowledge graph, where an individual 'x' is a human who is a citizen of a country 'z1', has a father 'z2' who is also a human, and possesses a native language 'z3', with 'z3' being a language.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "human(x, x) -> citizenOf(x, z1) ^ country(z1, z1) ^ father(x, z2) ^ human(z2, z2) ^ nativeLanguage(x, z3) ^ language(z3, z3)",
          "local_types": [
            "expression"
          ],
          "iri": "Entity-human__x__x__-__citizenof__x__z1___country__z1__z1___father__x__z2___human__z2__z2___nativelanguage__x__z3___language__z3__z3_-Mention-1"
        }
      ],
      "relevance": 0.420654296875
    },
    "Entity-fig_._2": {
      "node_id": "fig_._2",
      "disambiguation_index": 0,
      "label": "Fig. 2",
      "aliases": [
        "Fig. 2"
      ],
      "types": [
        "reference",
        "figure",
        "visual representation",
        "illustration"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "Fig. 2 is a visual representation that illustrates a specific concept or data related to the content of the paper.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "Fig. 2",
          "local_types": [
            "reference",
            "figure",
            "illustration"
          ],
          "iri": "Entity-fig_._2-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-2-Sentence-2",
          "local_name": "Fig. 2",
          "local_types": [
            "figure",
            "visual representation",
            "illustration"
          ],
          "iri": "Entity-fig_._2-Mention-2"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "Fig. 2",
          "local_types": [
            "figure",
            "reference"
          ],
          "iri": "Entity-fig_._2-Mention-3"
        }
      ],
      "relevance": 0.419677734375
    },
    "Entity-data_entry": {
      "node_id": "data_entry",
      "disambiguation_index": 0,
      "label": "data entry",
      "aliases": [
        "data entry"
      ],
      "types": [
        "data processing",
        "process",
        "data management"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Data entry refers to the process of inputting, updating, or managing data in a digital format, typically involving the use of software applications to ensure accurate and efficient data handling.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-6",
          "local_name": "data entry",
          "local_types": [
            "data processing",
            "data management"
          ],
          "iri": "Entity-data_entry-Mention-1"
        },
        {
          "reference": "Section-18-Paragraph-1-Sentence-1",
          "local_name": "data entry",
          "local_types": [
            "data management",
            "process"
          ],
          "iri": "Entity-data_entry-Mention-2"
        }
      ],
      "relevance": 0.419189453125
    },
    "Entity-paper": {
      "node_id": "paper",
      "disambiguation_index": 0,
      "label": "paper",
      "aliases": [
        "papers",
        "paper"
      ],
      "types": [
        "research document",
        "academic publication",
        "academic document",
        "research publication",
        "research work",
        "research"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A paper is a written work that presents research findings, theories, or arguments, typically published in an academic or professional context.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-1",
          "local_name": "paper",
          "local_types": [
            "academic document",
            "research publication"
          ],
          "iri": "Entity-paper-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-8-Sentence-1",
          "local_name": "paper",
          "local_types": [
            "academic document",
            "research publication",
            "research work"
          ],
          "iri": "Entity-paper-Mention-2"
        },
        {
          "reference": "Section-13-Paragraph-1-Sentence-3",
          "local_name": "paper",
          "local_types": [
            "academic document",
            "research publication"
          ],
          "iri": "Entity-paper-Mention-3"
        },
        {
          "reference": "Section-13-Paragraph-3-Sentence-3",
          "local_name": "paper",
          "local_types": [
            "academic document",
            "research publication"
          ],
          "iri": "Entity-paper-Mention-4"
        },
        {
          "reference": "Section-13-Paragraph-5-Sentence-1",
          "local_name": "papers",
          "local_types": [
            "research",
            "research document",
            "academic publication"
          ],
          "iri": "Entity-paper-Mention-5"
        }
      ],
      "relevance": 0.419189453125
    },
    "Entity-two_producer": {
      "node_id": "two_producer",
      "disambiguation_index": 0,
      "label": "two producers",
      "aliases": [
        "two producers"
      ],
      "types": [
        "producer"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In the context of the tree structure derived from knowledge graphs, 'two producers' refers to a specific attribute of an album indicating that it is associated with two distinct individuals or entities responsible for its production.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "two producers",
          "local_types": [
            "producer"
          ],
          "iri": "Entity-two_producer-Mention-1"
        }
      ],
      "relevance": 0.4189453125
    },
    "Entity-role": {
      "node_id": "role",
      "disambiguation_index": 0,
      "label": "roles",
      "aliases": [
        "roles"
      ],
      "types": [
        "property",
        "role",
        "relation"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of Description Logic ontologies, 'roles' refers to binary predicates that define relationships between entities.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-5-Sentence-3",
          "local_name": "roles",
          "local_types": [
            "property",
            "role",
            "relation"
          ],
          "iri": "Entity-role-Mention-1"
        }
      ],
      "relevance": 0.418701171875
    },
    "Entity-a_fact": {
      "node_id": "a_fact",
      "disambiguation_index": 0,
      "label": "A fact",
      "aliases": [
        "A fact"
      ],
      "types": [
        "concept"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A fact refers to an RDF triple represented as (e, P, e'), indicating a relationship between a subject entity e and an object entity e' through a binary predicate P.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "A fact",
          "local_types": [
            "concept"
          ],
          "iri": "Entity-a_fact-Mention-1"
        }
      ],
      "relevance": 0.41845703125
    },
    "Entity-not-null": {
      "node_id": "not-null",
      "disambiguation_index": 0,
      "label": "not-null",
      "aliases": [
        "not-null"
      ],
      "types": [
        "constraint",
        "database rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "not-null is a database constraint that ensures a specified attribute must always contain a value and cannot be left empty.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-2",
          "local_name": "not-null",
          "local_types": [
            "constraint",
            "database rule"
          ],
          "iri": "Entity-not-null-Mention-1"
        }
      ],
      "relevance": 0.41748046875
    },
    "Entity-outside": {
      "node_id": "outside",
      "disambiguation_index": 0,
      "label": "outside",
      "aliases": [
        "outside"
      ],
      "types": [
        "context",
        "position"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'outside' refers to the scope or boundary where free variables are universally quantified in the formal structure of the tree shapes being discussed.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-2-Sentence-3",
          "local_name": "outside",
          "local_types": [
            "context",
            "position"
          ],
          "iri": "Entity-outside-Mention-1"
        }
      ],
      "relevance": 0.41748046875
    },
    "Entity-dynamic_data_entry_form": {
      "node_id": "dynamic_data_entry_form",
      "disambiguation_index": 0,
      "label": "dynamic data entry forms",
      "aliases": [
        "dynamic data entry forms"
      ],
      "types": [
        "data entry form",
        "user interface",
        "form"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Dynamic data entry forms are interactive user interface elements designed to facilitate the input of data by users, often adapting in real-time to the information being entered or the context of the data being collected.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-2-Sentence-4",
          "local_name": "dynamic data entry forms",
          "local_types": [
            "data entry form",
            "user interface",
            "form"
          ],
          "iri": "Entity-dynamic_data_entry_form-Mention-1"
        }
      ],
      "relevance": 0.416748046875
    },
    "Entity-wikipedia": {
      "node_id": "wikipedia",
      "disambiguation_index": 0,
      "label": "Wikipedia",
      "aliases": [
        "Wikipedia"
      ],
      "types": [
        "website",
        "source",
        "online encyclopedia",
        "information source"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "Wikipedia is a free, web-based online encyclopedia that allows users to collaboratively create and edit articles on a wide range of topics.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-3",
          "local_name": "Wikipedia",
          "local_types": [
            "website",
            "source",
            "online encyclopedia",
            "information source"
          ],
          "iri": "Entity-wikipedia-Mention-1"
        }
      ],
      "relevance": 0.414794921875
    },
    "Entity-component": {
      "node_id": "component",
      "disambiguation_index": 0,
      "label": "components",
      "aliases": [
        "components"
      ],
      "types": [
        "mathematical elements"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'components' refers to the individual predicates that make up the composite predicate in the rule representation, specifically the elements Pt, P1, and P2 that are combined to form the overall structure of the predicate.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-4-Sentence-2",
          "local_name": "components",
          "local_types": [
            "mathematical elements"
          ],
          "iri": "Entity-component-Mention-1"
        }
      ],
      "relevance": 0.414794921875
    },
    "Entity-shex": {
      "node_id": "shex",
      "disambiguation_index": 0,
      "label": "ShEx",
      "aliases": [
        "ShEx"
      ],
      "types": [
        "data representation",
        "schema language",
        "specification",
        "language"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "ShEx is a schema language used for defining the structure and constraints of RDF data.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-2-Sentence-3",
          "local_name": "ShEx",
          "local_types": [
            "data representation",
            "schema language",
            "specification",
            "language"
          ],
          "iri": "Entity-shex-Mention-1"
        }
      ],
      "relevance": 0.41455078125
    },
    "Entity-formalisation": {
      "node_id": "formalisation",
      "disambiguation_index": 0,
      "label": "formalisation",
      "aliases": [
        "formalisation"
      ],
      "types": [
        "methodology",
        "approach"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Formalisation refers to the process of systematically defining and structuring a methodology or approach to ensure clarity and precision in its application.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-3-Sentence-2",
          "local_name": "formalisation",
          "local_types": [
            "methodology",
            "approach"
          ],
          "iri": "Entity-formalisation-Mention-1"
        }
      ],
      "relevance": 0.41455078125
    },
    "Entity-p__e__e__": {
      "node_id": "p__e__e__",
      "disambiguation_index": 0,
      "label": "P(e, e')",
      "aliases": [
        "P(e, e')"
      ],
      "types": [
        "notation"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "P(e, e') is a notation representing an RDF triple where the subject entity e is related to the object entity e' through a binary predicate P.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "P(e, e')",
          "local_types": [
            "notation"
          ],
          "iri": "Entity-p__e__e__-Mention-1"
        }
      ],
      "relevance": 0.41455078125
    },
    "Entity-worst_case": {
      "node_id": "worst_case",
      "disambiguation_index": 0,
      "label": "worst case",
      "aliases": [
        "worst case"
      ],
      "types": [
        "computational complexity"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The worst case refers to the most unfavorable scenario or maximum resource requirement in computational complexity, often used to analyze the performance limits of algorithms.",
      "mentions": [
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "worst case",
          "local_types": [
            "computational complexity"
          ],
          "iri": "Entity-worst_case-Mention-1"
        }
      ],
      "relevance": 0.414306640625
    },
    "Entity-universal_quantification": {
      "node_id": "universal_quantification",
      "disambiguation_index": 0,
      "label": "universal quantification",
      "aliases": [
        "universal quantification"
      ],
      "types": [
        "quantification",
        "concept",
        "logic",
        "mathematical concept",
        "logical concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Universal quantification is a logical concept that expresses that a property or condition holds for all elements in a given set or domain.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-1",
          "local_name": "universal quantification",
          "local_types": [
            "quantification",
            "concept",
            "logic",
            "mathematical concept",
            "logical concept"
          ],
          "iri": "Entity-universal_quantification-Mention-1"
        }
      ],
      "relevance": 0.4140625
    },
    "Entity-syntax": {
      "node_id": "syntax",
      "disambiguation_index": 0,
      "label": "syntax",
      "aliases": [
        "syntax"
      ],
      "types": [
        "grammatical feature",
        "linguistic structure",
        "structure",
        "grammar",
        "syntax"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Syntax refers to the set of rules, principles, and processes that govern the structure of sentences in a given language, specifically the arrangement of words and phrases to create well-formed sentences.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-4-Sentence-5",
          "local_name": "syntax",
          "local_types": [
            "grammatical feature",
            "linguistic structure",
            "structure",
            "grammar",
            "syntax"
          ],
          "iri": "Entity-syntax-Mention-1"
        }
      ],
      "relevance": 0.413330078125
    },
    "Entity-evaluation_experiment": {
      "node_id": "evaluation_experiment",
      "disambiguation_index": 0,
      "label": "evaluation experiments",
      "aliases": [
        "evaluation experiments"
      ],
      "types": [
        "experiment",
        "research methodology",
        "experimental study"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "evaluation experiments refer to systematic investigations conducted to assess the effectiveness, performance, or quality of a particular method, model, or system through controlled testing and analysis.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-4",
          "local_name": "evaluation experiments",
          "local_types": [
            "experiment",
            "research methodology",
            "experimental study"
          ],
          "iri": "Entity-evaluation_experiment-Mention-1"
        }
      ],
      "relevance": 0.4130859375
    },
    "Entity-a_song__x_": {
      "node_id": "a_song__x_",
      "disambiguation_index": 0,
      "label": "a song (x)",
      "aliases": [
        "a song (x)"
      ],
      "types": [
        "song"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'a song (x)' refers to a musical composition that is required to have at least one producer, as specified in the context of learning rules from knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "a song (x)",
          "local_types": [
            "song"
          ],
          "iri": "Entity-a_song__x_-Mention-1"
        }
      ],
      "relevance": 0.4130859375
    },
    "Entity-use_case": {
      "node_id": "use_case",
      "disambiguation_index": 0,
      "label": "use cases",
      "aliases": [
        "use cases"
      ],
      "types": [
        "example",
        "application",
        "practical example"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Use cases refer to specific scenarios or applications that illustrate how a particular concept, system, or technology can be utilized in practice.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-3",
          "local_name": "use cases",
          "local_types": [
            "example",
            "application",
            "practical example"
          ],
          "iri": "Entity-use_case-Mention-1"
        }
      ],
      "relevance": 0.412841796875
    },
    "Entity-an_entity_of_type_song": {
      "node_id": "an_entity_of_type_song",
      "disambiguation_index": 0,
      "label": "an entity of type song",
      "aliases": [
        "an entity of type song"
      ],
      "types": [
        "entity",
        "song"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "An entity of type song refers to a specific instance within a knowledge graph that represents a musical composition, which is expected to have associated metadata and relationships, such as album information and production details.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-5",
          "local_name": "an entity of type song",
          "local_types": [
            "entity",
            "song"
          ],
          "iri": "Entity-an_entity_of_type_song-Mention-1"
        }
      ],
      "relevance": 0.412109375
    },
    "Entity-predicate_embeddings": {
      "node_id": "predicate_embeddings",
      "disambiguation_index": 0,
      "label": "predicate embeddings",
      "aliases": [
        "predicate embeddings"
      ],
      "types": [
        "predicate",
        "embedding",
        "representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Predicate embeddings are vector representations that capture the semantic meaning of predicates in a given context, facilitating various natural language processing tasks.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-1",
          "local_name": "predicate embeddings",
          "local_types": [
            "predicate",
            "embedding",
            "representation"
          ],
          "iri": "Entity-predicate_embeddings-Mention-1"
        }
      ],
      "relevance": 0.411865234375
    },
    "Entity-schema-free_database": {
      "node_id": "schema-free_database",
      "disambiguation_index": 0,
      "label": "schema-free database",
      "aliases": [
        "schema-free database"
      ],
      "types": [
        "database"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A schema-free database is a type of database that allows for the storage and retrieval of data without requiring a predefined schema, enabling flexible and dynamic data structures.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-1-Sentence-1",
          "local_name": "schema-free database",
          "local_types": [
            "database"
          ],
          "iri": "Entity-schema-free_database-Mention-1"
        }
      ],
      "relevance": 0.411376953125
    },
    "Entity-variable_unification": {
      "node_id": "variable_unification",
      "disambiguation_index": 0,
      "label": "variable unification",
      "aliases": [
        "variable unification"
      ],
      "types": [
        "transformation",
        "logical operation",
        "process"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Variable unification is a logical operation that involves the process of making two or more variables identical by finding a substitution that makes them equal.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-5",
          "local_name": "variable unification",
          "local_types": [
            "transformation",
            "logical operation",
            "process"
          ],
          "iri": "Entity-variable_unification-Mention-1"
        }
      ],
      "relevance": 0.4111328125
    },
    "Entity-predicate": {
      "node_id": "predicate",
      "disambiguation_index": 0,
      "label": "predicate",
      "aliases": [
        "predicate",
        "predicates"
      ],
      "types": [
        "property",
        "logical statement",
        "data representation",
        "logical expression",
        "expression",
        "linguistic term",
        "logical operator",
        "mathematical term",
        "relation",
        "data attribute",
        "mathematical entity",
        "statement",
        "semantic relation",
        "grammatical element",
        "mathematical object",
        "knowledge representation",
        "data structure",
        "component of rule",
        "mathematical concept",
        "logical term",
        "grammatical structure",
        "data",
        "logical construct",
        "predicate",
        "logical entity",
        "component",
        "linguistic element",
        "grammatical function"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A predicate is a fundamental component in logic and linguistics that expresses a relation or property of subjects, often used in formal systems to denote the relationship between entities.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-2",
          "local_name": "predicate",
          "local_types": [
            "property",
            "relation"
          ],
          "iri": "Entity-predicate-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-3-Sentence-5",
          "local_name": "predicate",
          "local_types": [
            "logical term",
            "linguistic term",
            "component of rule",
            "grammatical function"
          ],
          "iri": "Entity-predicate-Mention-2"
        },
        {
          "reference": "Section-4-Paragraph-1-Sentence-3",
          "local_name": "predicate",
          "local_types": [
            "logical construct",
            "relation"
          ],
          "iri": "Entity-predicate-Mention-3"
        },
        {
          "reference": "Section-4-Paragraph-2-Sentence-1",
          "local_name": "predicate",
          "local_types": [
            "logical construct",
            "relation"
          ],
          "iri": "Entity-predicate-Mention-4"
        },
        {
          "reference": "Section-5-Paragraph-4-Sentence-3",
          "local_name": "predicates",
          "local_types": [
            "logical operator",
            "predicate",
            "relation"
          ],
          "iri": "Entity-predicate-Mention-5"
        },
        {
          "reference": "Section-5-Paragraph-5-Sentence-2",
          "local_name": "predicates",
          "local_types": [
            "predicate",
            "mathematical term",
            "logical statement",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-6"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-4",
          "local_name": "predicates",
          "local_types": [
            "logical statement",
            "expression"
          ],
          "iri": "Entity-predicate-Mention-7"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-3",
          "local_name": "predicates",
          "local_types": [
            "data",
            "component"
          ],
          "iri": "Entity-predicate-Mention-8"
        },
        {
          "reference": "Section-7-Paragraph-1-Sentence-5",
          "local_name": "predicates",
          "local_types": [
            "predicate",
            "mathematical term",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-9"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "predicate",
            "relation",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-10"
        },
        {
          "reference": "Section-8-Paragraph-1-Sentence-5",
          "local_name": "predicates",
          "local_types": [
            "logical construct",
            "mathematical term"
          ],
          "iri": "Entity-predicate-Mention-11"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-2",
          "local_name": "predicates",
          "local_types": [
            "predicate",
            "relation",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-12"
        },
        {
          "reference": "Section-8-Paragraph-2-Sentence-4",
          "local_name": "predicate",
          "local_types": [
            "relation",
            "data attribute"
          ],
          "iri": "Entity-predicate-Mention-13"
        },
        {
          "reference": "Section-8-Paragraph-3-Sentence-2",
          "local_name": "predicates",
          "local_types": [
            "predicate",
            "relation",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-14"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "linguistic element",
            "predicate",
            "grammatical structure"
          ],
          "iri": "Entity-predicate-Mention-15"
        },
        {
          "reference": "Section-9-Paragraph-1-Sentence-2",
          "local_name": "predicates",
          "local_types": [
            "logical construct",
            "mathematical entity"
          ],
          "iri": "Entity-predicate-Mention-16"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-2",
          "local_name": "predicates",
          "local_types": [
            "predicate"
          ],
          "iri": "Entity-predicate-Mention-17"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-3",
          "local_name": "predicate",
          "local_types": [
            "linguistic term",
            "grammatical element"
          ],
          "iri": "Entity-predicate-Mention-18"
        },
        {
          "reference": "Section-10-Paragraph-1-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "mathematical object",
            "logical construct",
            "predicate",
            "mathematical term",
            "logical entity"
          ],
          "iri": "Entity-predicate-Mention-19"
        },
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "predicate",
            "mathematical object",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-20"
        },
        {
          "reference": "Section-10-Paragraph-3-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "predicate",
            "mathematical object",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-21"
        },
        {
          "reference": "Section-10-Paragraph-4-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "predicate",
            "mathematical object",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-22"
        },
        {
          "reference": "Section-11-Paragraph-2-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "logical operator",
            "predicate",
            "relation"
          ],
          "iri": "Entity-predicate-Mention-23"
        },
        {
          "reference": "Section-11-Paragraph-4-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "logical operator",
            "logical construct",
            "mathematical term",
            "predicate",
            "relation"
          ],
          "iri": "Entity-predicate-Mention-24"
        },
        {
          "reference": "Section-12-Paragraph-6-Sentence-2",
          "local_name": "predicates",
          "local_types": [
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-25"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-9",
          "local_name": "predicates",
          "local_types": [
            "mathematical concept",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-26"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "logical statement",
            "relation"
          ],
          "iri": "Entity-predicate-Mention-27"
        },
        {
          "reference": "Section-14-Paragraph-5-Sentence-2",
          "local_name": "predicates",
          "local_types": [
            "logical construct",
            "statement"
          ],
          "iri": "Entity-predicate-Mention-28"
        },
        {
          "reference": "Section-14-Paragraph-6-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "logical construct",
            "mathematical object"
          ],
          "iri": "Entity-predicate-Mention-29"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-2",
          "local_name": "predicates",
          "local_types": [
            "logical construct",
            "predicate",
            "relation",
            "data structure",
            "semantic relation"
          ],
          "iri": "Entity-predicate-Mention-30"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-4",
          "local_name": "predicates",
          "local_types": [
            "logical construct",
            "mathematical concept"
          ],
          "iri": "Entity-predicate-Mention-31"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-5",
          "local_name": "predicate",
          "local_types": [
            "logical construct",
            "mathematical term"
          ],
          "iri": "Entity-predicate-Mention-32"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-2",
          "local_name": "predicates",
          "local_types": [
            "mathematical concept",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-33"
        },
        {
          "reference": "Section-14-Paragraph-8-Sentence-4",
          "local_name": "predicates",
          "local_types": [
            "logical statement",
            "knowledge representation"
          ],
          "iri": "Entity-predicate-Mention-34"
        },
        {
          "reference": "Section-17-Paragraph-1-Sentence-3",
          "local_name": "predicates",
          "local_types": [
            "data representation",
            "predicate",
            "logical construct"
          ],
          "iri": "Entity-predicate-Mention-35"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-3",
          "local_name": "predicates",
          "local_types": [
            "data representation",
            "mathematical term",
            "logical construct",
            "predicate"
          ],
          "iri": "Entity-predicate-Mention-36"
        },
        {
          "reference": "Section-17-Paragraph-5-Sentence-1",
          "local_name": "predicates",
          "local_types": [
            "logical construct",
            "predicate",
            "logical statement",
            "data representation",
            "mathematical concept",
            "logical expression"
          ],
          "iri": "Entity-predicate-Mention-37"
        }
      ],
      "relevance": 0.41064453125
    },
    "Entity-livesin": {
      "node_id": "livesin",
      "disambiguation_index": 0,
      "label": "livesIn",
      "aliases": [
        "livesIn"
      ],
      "types": [
        "relation",
        "logical statement"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention 'livesIn' refers to a binary predicate in a knowledge graph that indicates the relationship between an entity, such as a person, and a location, signifying that the entity resides in that location.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "livesIn",
          "local_types": [
            "relation",
            "logical statement"
          ],
          "iri": "Entity-livesin-Mention-1"
        }
      ],
      "relevance": 0.41064453125
    },
    "Entity-car": {
      "node_id": "car",
      "disambiguation_index": 0,
      "label": "Car",
      "aliases": [
        "Car"
      ],
      "types": [
        "annotation",
        "entity",
        "concept",
        "cardinality",
        "variable",
        "abbreviation",
        "object",
        "parameter",
        "mathematical concept",
        "term",
        "transportation",
        "value",
        "integer",
        "vehicle",
        "metric",
        "mathematical constant",
        "constant",
        "data type"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "A car is a wheeled motor vehicle used for transportation, typically designed to carry a small number of passengers.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-3",
          "local_name": "Car",
          "local_types": [
            "parameter",
            "mathematical concept",
            "concept",
            "cardinality"
          ],
          "iri": "Entity-car-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-5",
          "local_name": "Car",
          "local_types": [
            "variable",
            "integer"
          ],
          "iri": "Entity-car-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-4",
          "local_name": "Car",
          "local_types": [
            "entity",
            "object"
          ],
          "iri": "Entity-car-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-8-Sentence-1",
          "local_name": "Car",
          "local_types": [
            "annotation",
            "concept",
            "cardinality",
            "abbreviation",
            "term",
            "metric"
          ],
          "iri": "Entity-car-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-2",
          "local_name": "Car",
          "local_types": [
            "parameter",
            "mathematical concept",
            "cardinality"
          ],
          "iri": "Entity-car-Mention-5"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-4",
          "local_name": "Car",
          "local_types": [
            "vehicle",
            "transportation"
          ],
          "iri": "Entity-car-Mention-6"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "Car",
          "local_types": [
            "cardinality",
            "value",
            "parameter",
            "mathematical constant",
            "constant"
          ],
          "iri": "Entity-car-Mention-7"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "Car",
          "local_types": [
            "cardinality",
            "variable",
            "object",
            "value",
            "parameter",
            "data type"
          ],
          "iri": "Entity-car-Mention-8"
        }
      ],
      "relevance": 0.40966796875
    },
    "Entity-existential_variable": {
      "node_id": "existential_variable",
      "disambiguation_index": 0,
      "label": "existential variables",
      "aliases": [
        "existential variables"
      ],
      "types": [
        "mathematical concept",
        "variable type",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Existential variables are a type of variable used in logic and mathematics that represent the existence of some elements within a certain domain, typically used in the context of existential quantification.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-7",
          "local_name": "existential variables",
          "local_types": [
            "mathematical concept",
            "variable type",
            "variable"
          ],
          "iri": "Entity-existential_variable-Mention-1"
        }
      ],
      "relevance": 0.40966796875
    },
    "Entity-matrix_product": {
      "node_id": "matrix_product",
      "disambiguation_index": 0,
      "label": "matrix product",
      "aliases": [
        "matrix product"
      ],
      "types": [
        "linear algebra",
        "operation",
        "matrix operation",
        "mathematical operation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The matrix product is a mathematical operation that combines two or more matrices to produce a new matrix, where the elements of the resulting matrix are calculated as the sum of the products of corresponding elements from the rows of the first matrix and the columns of the second matrix.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-7-Sentence-2",
          "local_name": "matrix product",
          "local_types": [
            "linear algebra",
            "operation",
            "matrix operation",
            "mathematical operation"
          ],
          "iri": "Entity-matrix_product-Mention-1"
        }
      ],
      "relevance": 0.408935546875
    },
    "Entity-class_with_few_instance": {
      "node_id": "class_with_few_instance",
      "disambiguation_index": 0,
      "label": "classes with few instances",
      "aliases": [
        "classes with few instances"
      ],
      "types": [
        "class"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "classes that contain a limited number of examples or instances, often making them less significant for learning or analysis purposes.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-8-Sentence-3",
          "local_name": "classes with few instances",
          "local_types": [
            "class"
          ],
          "iri": "Entity-class_with_few_instance-Mention-1"
        }
      ],
      "relevance": 0.408935546875
    },
    "Entity-minimum_cardinality_1": {
      "node_id": "minimum_cardinality_1",
      "disambiguation_index": 0,
      "label": "minimum cardinality 1",
      "aliases": [
        "minimum cardinality 1"
      ],
      "types": [
        "constraint",
        "mathematical condition"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Minimum cardinality 1 is a constraint in mathematical conditions that specifies that at least one instance of a particular element or entity must be present.",
      "mentions": [
        {
          "reference": "Section-7-Paragraph-2-Sentence-3",
          "local_name": "minimum cardinality 1",
          "local_types": [
            "constraint",
            "mathematical condition"
          ],
          "iri": "Entity-minimum_cardinality_1-Mention-1"
        }
      ],
      "relevance": 0.407958984375
    },
    "Entity-predicate_logic": {
      "node_id": "predicate_logic",
      "disambiguation_index": 0,
      "label": "predicate logic",
      "aliases": [
        "predicate logic"
      ],
      "types": [
        "mathematical logic",
        "logic"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Predicate logic is a formal system in mathematical logic that uses quantifiers and predicates to express statements about objects and their relationships.",
      "mentions": [
        {
          "reference": "Section-1-Paragraph-2-Sentence-1",
          "local_name": "predicate logic",
          "local_types": [
            "mathematical logic",
            "logic"
          ],
          "iri": "Entity-predicate_logic-Mention-1"
        }
      ],
      "relevance": 0.407470703125
    },
    "Entity-sub-tree": {
      "node_id": "sub-tree",
      "disambiguation_index": 0,
      "label": "sub-tree",
      "aliases": [
        "sub-tree"
      ],
      "types": [
        "data structure",
        "component",
        "tree",
        "structure",
        "tree structure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A sub-tree is a portion of a tree data structure that consists of a node and all its descendants, representing a hierarchical relationship within the larger tree.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-1",
          "local_name": "sub-tree",
          "local_types": [
            "data structure",
            "component",
            "tree",
            "structure",
            "tree structure"
          ],
          "iri": "Entity-sub-tree-Mention-1"
        }
      ],
      "relevance": 0.407470703125
    },
    "Entity-the_new_fact": {
      "node_id": "the_new_fact",
      "disambiguation_index": 0,
      "label": "the new fact",
      "aliases": [
        "the new fact"
      ],
      "types": [
        "fact"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The new fact refers to an inferred relationship in a knowledge graph, specifically a conclusion drawn from existing facts and rules, exemplified by the assertion that 'citizenOf(Mary, Australia)' can be derived from the facts 'livesIn(Mary, Canberra)' and 'locatedIn(Canberra, Australia)'.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "the new fact",
          "local_types": [
            "fact"
          ],
          "iri": "Entity-the_new_fact-Mention-1"
        }
      ],
      "relevance": 0.4072265625
    },
    "Entity-binary_value": {
      "node_id": "binary_value",
      "disambiguation_index": 0,
      "label": "binary values",
      "aliases": [
        "binary values"
      ],
      "types": [
        "data type",
        "value type",
        "numerical representation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Binary values are numerical representations that can take on one of two possible states, typically represented as 0 and 1, used in various computational and data processing contexts.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-4",
          "local_name": "binary values",
          "local_types": [
            "data type",
            "value type",
            "numerical representation"
          ],
          "iri": "Entity-binary_value-Mention-1"
        }
      ],
      "relevance": 0.406982421875
    },
    "Entity-__e__there_exists_e__such_that_headr__e__and_pt__e___e___": {
      "node_id": "__e__there_exists_e__such_that_headr__e__and_pt__e___e___",
      "disambiguation_index": 0,
      "label": "|{ e : there exists e' such that headr(e) and Pt(e', e) }|",
      "aliases": [
        "|{ e : there exists e' such that headr(e) and Pt(e', e) }|"
      ],
      "types": [
        "set",
        "count"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The entity refers to the set of entities e that satisfy the condition of having a corresponding entity e' such that the head of a tree structure is satisfied by e and the body predicate Pt is satisfied by the pair (e', e).",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-3-Sentence-5",
          "local_name": "|{ e : there exists e' such that headr(e) and Pt(e', e) }|",
          "local_types": [
            "set",
            "count"
          ],
          "iri": "Entity-__e__there_exists_e__such_that_headr__e__and_pt__e___e___-Mention-1"
        }
      ],
      "relevance": 0.406982421875
    },
    "Entity-predicate_argument": {
      "node_id": "predicate_argument",
      "disambiguation_index": 0,
      "label": "predicate arguments",
      "aliases": [
        "predicate arguments"
      ],
      "types": [
        "logical component",
        "argument",
        "argument structure",
        "linguistic construct"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Predicate arguments are the components of a logical structure that specify the roles or functions of entities in relation to a predicate within a sentence or expression.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-3-Sentence-1",
          "local_name": "predicate arguments",
          "local_types": [
            "logical component",
            "argument",
            "argument structure",
            "linguistic construct"
          ],
          "iri": "Entity-predicate_argument-Mention-1"
        }
      ],
      "relevance": 0.40673828125
    },
    "Entity-feature_value": {
      "node_id": "feature_value",
      "disambiguation_index": 0,
      "label": "feature values",
      "aliases": [
        "feature values"
      ],
      "types": [
        "data attribute",
        "characteristic"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Feature values refer to the specific attributes or characteristics assigned to data points that describe their properties or behaviors in a given context.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-4",
          "local_name": "feature values",
          "local_types": [
            "data attribute",
            "characteristic"
          ],
          "iri": "Entity-feature_value-Mention-1"
        }
      ],
      "relevance": 0.406494140625
    },
    "Entity-human-expert_evaluation": {
      "node_id": "human-expert_evaluation",
      "disambiguation_index": 0,
      "label": "human-expert evaluation",
      "aliases": [
        "human-expert evaluation"
      ],
      "types": [
        "assessment",
        "evaluation method"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "human-expert evaluation refers to an assessment method that involves the judgment and analysis of trained professionals to evaluate the quality or effectiveness of a system, model, or process.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-5-Sentence-1",
          "local_name": "human-expert evaluation",
          "local_types": [
            "assessment",
            "evaluation method"
          ],
          "iri": "Entity-human-expert_evaluation-Mention-1"
        }
      ],
      "relevance": 0.40576171875
    },
    "Entity-rdf__type": {
      "node_id": "rdf__type",
      "disambiguation_index": 0,
      "label": "rdf:type",
      "aliases": [
        "rdf:type"
      ],
      "types": [
        "property",
        "RDF vocabulary"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "rdf:type is a property in the RDF vocabulary used to indicate the class or datatype of a resource in RDF triples.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-5",
          "local_name": "rdf:type",
          "local_types": [
            "property",
            "RDF vocabulary"
          ],
          "iri": "Entity-rdf__type-Mention-1"
        }
      ],
      "relevance": 0.404296875
    },
    "Entity-2.20_ghz": {
      "node_id": "2.20_ghz",
      "disambiguation_index": 0,
      "label": "2.20 GHz",
      "aliases": [
        "2.20 GHz"
      ],
      "types": [
        "frequency",
        "specification"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "2.20 GHz refers to a specific frequency measurement, commonly used to denote the clock speed of a processor or CPU.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-4-Sentence-1",
          "local_name": "2.20 GHz",
          "local_types": [
            "frequency",
            "specification"
          ],
          "iri": "Entity-2.20_ghz-Mention-1"
        }
      ],
      "relevance": 0.40234375
    },
    "Entity-the_second_rule": {
      "node_id": "the_second_rule",
      "disambiguation_index": 0,
      "label": "The second rule",
      "aliases": [
        "The second rule"
      ],
      "types": [
        "rule"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The second rule is a specific IOP rule that stipulates that a song must have at least one producer, distinguishing it from another rule that requires at least two producers.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "The second rule",
          "local_types": [
            "rule"
          ],
          "iri": "Entity-the_second_rule-Mention-1"
        }
      ],
      "relevance": 0.402099609375
    },
    "Entity-error_of_omission_and_commission": {
      "node_id": "error_of_omission_and_commission",
      "disambiguation_index": 0,
      "label": "errors of omission and commission",
      "aliases": [
        "errors of omission and commission"
      ],
      "types": [
        "data error",
        "data quality issue",
        "error"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Errors of omission and commission refer to inaccuracies in data that arise from failing to include necessary information (omission) or including incorrect information (commission).",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-3",
          "local_name": "errors of omission and commission",
          "local_types": [
            "data error",
            "data quality issue",
            "error"
          ],
          "iri": "Entity-error_of_omission_and_commission-Mention-1"
        }
      ],
      "relevance": 0.40185546875
    },
    "Entity-2": {
      "node_id": "2",
      "disambiguation_index": 0,
      "label": "2",
      "aliases": [
        "2"
      ],
      "types": [
        "value",
        "number",
        "integer"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The mention '2' refers to the count of distinct entities that satisfy a specific condition in the context of the example provided, indicating that there are two entities in the set {e2, e3}.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-8-Sentence-4",
          "local_name": "2",
          "local_types": [
            "number",
            "integer"
          ],
          "iri": "Entity-2-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-9-Sentence-1",
          "local_name": "2",
          "local_types": [
            "integer",
            "value"
          ],
          "iri": "Entity-2-Mention-2"
        }
      ],
      "relevance": 0.40185546875
    },
    "Entity-relationship": {
      "node_id": "relationship",
      "disambiguation_index": 0,
      "label": "relationship",
      "aliases": [
        "relationship"
      ],
      "types": [
        "relationship"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In this context, 'relationship' refers to the connection or correlation between the logical formulation of a rule and the characteristics of the embedding space in which the predicates are represented.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-2",
          "local_name": "relationship",
          "local_types": [
            "relationship"
          ],
          "iri": "Entity-relationship-Mention-1"
        }
      ],
      "relevance": 0.401611328125
    },
    "Entity-_e__rdf__type__p_": {
      "node_id": "_e__rdf__type__p_",
      "disambiguation_index": 0,
      "label": "(e, rdf:type, P)",
      "aliases": [
        "(e, rdf:type, P)"
      ],
      "types": [
        "expression"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term '(e, rdf:type, P)' refers to a representation of a class assertion in RDF, indicating that the entity 'e' is of type 'P', where 'P' can be a class or datatype.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-2-Sentence-5",
          "local_name": "(e, rdf:type, P)",
          "local_types": [
            "expression"
          ],
          "iri": "Entity-_e__rdf__type__p_-Mention-1"
        }
      ],
      "relevance": 0.4013671875
    },
    "Entity-rule_head": {
      "node_id": "rule_head",
      "disambiguation_index": 0,
      "label": "rule head",
      "aliases": [
        "rule head"
      ],
      "types": [
        "logic rule",
        "logical construct",
        "component"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A rule head is a component of a logic rule that specifies the conclusion or outcome derived from the conditions defined in the rule.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-8-Sentence-6",
          "local_name": "rule head",
          "local_types": [
            "logic rule",
            "logical construct",
            "component"
          ],
          "iri": "Entity-rule_head-Mention-1"
        }
      ],
      "relevance": 0.39990234375
    },
    "Entity-section_6": {
      "node_id": "section_6",
      "disambiguation_index": 0,
      "label": "Section 6",
      "aliases": [
        "Section 6"
      ],
      "types": [
        "document part",
        "section",
        "report section",
        "document section",
        "part of paper"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Section 6 is the concluding section of the paper where the authors summarize their findings and insights from the research presented.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-3",
          "local_name": "Section 6",
          "local_types": [
            "document part",
            "section",
            "report section",
            "document section",
            "part of paper"
          ],
          "iri": "Entity-section_6-Mention-1"
        }
      ],
      "relevance": 0.3994140625
    },
    "Entity-previous_research": {
      "node_id": "previous_research",
      "disambiguation_index": 0,
      "label": "previous research",
      "aliases": [
        "previous research"
      ],
      "types": [
        "research",
        "literature",
        "academic work"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "previous research refers to earlier studies or academic work conducted on a specific topic prior to the current investigation.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-7",
          "local_name": "previous research",
          "local_types": [
            "research",
            "literature",
            "academic work"
          ],
          "iri": "Entity-previous_research-Mention-1"
        }
      ],
      "relevance": 0.397705078125
    },
    "Entity-album": {
      "node_id": "album",
      "disambiguation_index": 0,
      "label": "album",
      "aliases": [
        "album"
      ],
      "types": [
        "collection",
        "music collection",
        "music",
        "entity",
        "musical work",
        "musical collection",
        "artistic work",
        "media"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'album' refers to a musical collection that contains songs and is associated with a record label, as exemplified in the path from the knowledge graph DBpedia.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-3",
          "local_name": "album",
          "local_types": [
            "musical collection",
            "music",
            "entity",
            "artistic work"
          ],
          "iri": "Entity-album-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-4",
          "local_name": "album",
          "local_types": [
            "collection",
            "musical work",
            "music collection",
            "media"
          ],
          "iri": "Entity-album-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-3",
          "local_name": "album",
          "local_types": [
            "music collection",
            "music",
            "entity",
            "artistic work",
            "media"
          ],
          "iri": "Entity-album-Mention-3"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "album",
          "local_types": [
            "collection",
            "music",
            "entity",
            "musical work",
            "musical collection",
            "artistic work"
          ],
          "iri": "Entity-album-Mention-4"
        }
      ],
      "relevance": 0.397705078125
    },
    "Entity-semantics": {
      "node_id": "semantics",
      "disambiguation_index": 0,
      "label": "semantics",
      "aliases": [
        "semantics"
      ],
      "types": [
        "linguistics",
        "concept",
        "theory",
        "linguistic concept",
        "meaning"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Semantics refers to the study of meaning in language, encompassing the interpretation of words, phrases, and sentences within various contexts.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-7-Sentence-1",
          "local_name": "semantics",
          "local_types": [
            "theory",
            "linguistics",
            "concept",
            "meaning"
          ],
          "iri": "Entity-semantics-Mention-1"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-2",
          "local_name": "semantics",
          "local_types": [
            "concept",
            "meaning"
          ],
          "iri": "Entity-semantics-Mention-2"
        },
        {
          "reference": "Section-13-Paragraph-7-Sentence-3",
          "local_name": "semantics",
          "local_types": [
            "linguistic concept",
            "meaning"
          ],
          "iri": "Entity-semantics-Mention-3"
        }
      ],
      "relevance": 0.3974609375
    },
    "Entity-nine_different_rank": {
      "node_id": "nine_different_rank",
      "disambiguation_index": 0,
      "label": "nine different ranks",
      "aliases": [
        "nine different ranks"
      ],
      "types": [
        "rank"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'nine different ranks' refers to the classification of poker hands in the game of poker, where each hand can be categorized into one of nine distinct ranks such as High Card, One Pair, and Two Pair.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-7",
          "local_name": "nine different ranks",
          "local_types": [
            "rank"
          ],
          "iri": "Entity-nine_different_rank-Mention-1"
        }
      ],
      "relevance": 0.397216796875
    },
    "Entity-high_card": {
      "node_id": "high_card",
      "disambiguation_index": 0,
      "label": "High Card",
      "aliases": [
        "High Card"
      ],
      "types": [
        "poker hand rank",
        "game category",
        "rank",
        "poker hand"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "High Card refers to a specific rank in poker hand rankings, where the hand consists of five cards that do not form any other higher-ranking combination, and the highest card in the hand determines its value.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-7",
          "local_name": "High Card",
          "local_types": [
            "poker hand rank",
            "game category",
            "rank",
            "poker hand"
          ],
          "iri": "Entity-high_card-Mention-1"
        }
      ],
      "relevance": 0.396728515625
    },
    "Entity-thirteen_rank": {
      "node_id": "thirteen_rank",
      "disambiguation_index": 0,
      "label": "thirteen ranks",
      "aliases": [
        "thirteen ranks"
      ],
      "types": [
        "rank",
        "attribute"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'thirteen ranks' refers to the distinct categories of playing cards in a standard deck, which include Ace, 2 through 10, Jack, Queen, and King, used in various card games such as poker.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-5",
          "local_name": "thirteen ranks",
          "local_types": [
            "rank",
            "attribute"
          ],
          "iri": "Entity-thirteen_rank-Mention-1"
        }
      ],
      "relevance": 0.396728515625
    },
    "Entity-implication_arrow": {
      "node_id": "implication_arrow",
      "disambiguation_index": 0,
      "label": "implication arrow",
      "aliases": [
        "implication arrow"
      ],
      "types": [
        "logical operator",
        "symbol"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The implication arrow is a logical operator represented by a symbol that denotes a conditional relationship between two statements, indicating that if the first statement (the antecedent) is true, then the second statement (the consequent) is also true.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-3-Sentence-4",
          "local_name": "implication arrow",
          "local_types": [
            "logical operator",
            "symbol"
          ],
          "iri": "Entity-implication_arrow-Mention-1"
        }
      ],
      "relevance": 0.396484375
    },
    "Entity-capitalof": {
      "node_id": "capitalof",
      "disambiguation_index": 0,
      "label": "capitalOf",
      "aliases": [
        "capitalOf"
      ],
      "types": [
        "function",
        "query",
        "property",
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "capitalOf is a function or query that determines the capital city of a specified country or region.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-4",
          "local_name": "capitalOf",
          "local_types": [
            "function",
            "query",
            "property",
            "predicate"
          ],
          "iri": "Entity-capitalof-Mention-1"
        }
      ],
      "relevance": 0.396484375
    },
    "Entity-straight_form": {
      "node_id": "straight_form",
      "disambiguation_index": 0,
      "label": "straight form",
      "aliases": [
        "the straight form",
        "straight form"
      ],
      "types": [
        "structure",
        "form"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'straight form' refers to a representation of a binary target predicate in which the object argument is used as a common variable to connect the head of the predicate.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "straight form",
          "local_types": [
            "form",
            "structure"
          ],
          "iri": "Entity-straight_form-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "the straight form",
          "local_types": [
            "form"
          ],
          "iri": "Entity-straight_form-Mention-2"
        }
      ],
      "relevance": 0.395751953125
    },
    "Entity-playing_card": {
      "node_id": "playing_card",
      "disambiguation_index": 0,
      "label": "playing cards",
      "aliases": [
        "playing cards"
      ],
      "types": [
        "game element",
        "card",
        "game component"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Playing cards are rectangular pieces of card or plastic used as a game element in various card games, typically featuring a combination of ranks and suits.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-5",
          "local_name": "playing cards",
          "local_types": [
            "game element",
            "card",
            "game component"
          ],
          "iri": "Entity-playing_card-Mention-1"
        }
      ],
      "relevance": 0.395263671875
    },
    "Entity-human_expert": {
      "node_id": "human_expert",
      "disambiguation_index": 0,
      "label": "human expert",
      "aliases": [
        "human expert"
      ],
      "types": [
        "expert",
        "individual",
        "person",
        "professional"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A human expert is a knowledgeable and skilled individual in a specific field who provides insights, analysis, or guidance based on their expertise.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-9-Sentence-1",
          "local_name": "human expert",
          "local_types": [
            "expert",
            "individual",
            "person",
            "professional"
          ],
          "iri": "Entity-human_expert-Mention-1"
        }
      ],
      "relevance": 0.39453125
    },
    "Entity-interactive_interface": {
      "node_id": "interactive_interface",
      "disambiguation_index": 0,
      "label": "interactive interface",
      "aliases": [
        "interactive interface"
      ],
      "types": [
        "interface",
        "user interface",
        "software component"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An interactive interface is a user interface designed to facilitate real-time interaction between a user and a software application, allowing for dynamic input and feedback.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "interactive interface",
          "local_types": [
            "interface",
            "user interface",
            "software component"
          ],
          "iri": "Entity-interactive_interface-Mention-1"
        }
      ],
      "relevance": 0.39453125
    },
    "Entity-50_": {
      "node_id": "50_",
      "disambiguation_index": 0,
      "label": "50%",
      "aliases": [
        "50%"
      ],
      "types": [
        "percentage"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "In this context, '50%' refers to the average proportion of branches in the mined trees relative to the corresponding number of mined rules, indicating a specific quantitative relationship in the results of the study.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-3-Sentence-1",
          "local_name": "50%",
          "local_types": [
            "percentage"
          ],
          "iri": "Entity-50_-Mention-1"
        }
      ],
      "relevance": 0.39404296875
    },
    "Entity-future_work": {
      "node_id": "future_work",
      "disambiguation_index": 0,
      "label": "future work",
      "aliases": [
        "future work"
      ],
      "types": [
        "research direction",
        "project",
        "research",
        "future research",
        "work"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "future work refers to planned or proposed research activities or projects that are intended to be conducted at a later time.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-5-Sentence-2",
          "local_name": "future work",
          "local_types": [
            "research direction",
            "project",
            "research",
            "future research",
            "work"
          ],
          "iri": "Entity-future_work-Mention-1"
        }
      ],
      "relevance": 0.392822265625
    },
    "Entity-each_card": {
      "node_id": "each_card",
      "disambiguation_index": 0,
      "label": "Each card",
      "aliases": [
        "Each card"
      ],
      "types": [
        "object"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "Each card refers to an individual playing card in a poker hand, characterized by two attributes: suit and rank.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-6",
          "local_name": "Each card",
          "local_types": [
            "object"
          ],
          "iri": "Entity-each_card-Mention-1"
        }
      ],
      "relevance": 0.39111328125
    },
    "Entity-a_record_label": {
      "node_id": "a_record_label",
      "disambiguation_index": 0,
      "label": "a record label",
      "aliases": [
        "a record label"
      ],
      "types": [
        "record label"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "A record label is a company or organization that produces and distributes music recordings, often associated with specific artists and albums.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "a record label",
          "local_types": [
            "record label"
          ],
          "iri": "Entity-a_record_label-Mention-1"
        }
      ],
      "relevance": 0.389892578125
    },
    "Entity-object_argument": {
      "node_id": "object_argument",
      "disambiguation_index": 0,
      "label": "object argument",
      "aliases": [
        "object argument"
      ],
      "types": [
        "logical component",
        "linguistic term",
        "predicate component",
        "logical construct",
        "object",
        "parameter",
        "linguistic element",
        "grammatical function",
        "argument",
        "linguistic role"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An object argument is a linguistic term that refers to a component of a predicate that typically represents the entity that is affected by the action of the subject in a sentence.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-1",
          "local_name": "object argument",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-object_argument-Mention-1"
        },
        {
          "reference": "Section-9-Paragraph-2-Sentence-3",
          "local_name": "object argument",
          "local_types": [
            "grammatical function",
            "argument",
            "linguistic role",
            "object"
          ],
          "iri": "Entity-object_argument-Mention-2"
        },
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "object argument",
          "local_types": [
            "logical component",
            "argument",
            "logical construct"
          ],
          "iri": "Entity-object_argument-Mention-3"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-3",
          "local_name": "object argument",
          "local_types": [
            "linguistic element",
            "linguistic term",
            "argument"
          ],
          "iri": "Entity-object_argument-Mention-4"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-5",
          "local_name": "object argument",
          "local_types": [
            "argument",
            "parameter"
          ],
          "iri": "Entity-object_argument-Mention-5"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "object argument",
          "local_types": [
            "argument",
            "predicate component"
          ],
          "iri": "Entity-object_argument-Mention-6"
        }
      ],
      "relevance": 0.389404296875
    },
    "Entity-error_of_omission": {
      "node_id": "error_of_omission",
      "disambiguation_index": 0,
      "label": "errors of omission",
      "aliases": [
        "errors of omission"
      ],
      "types": [
        "data quality issue"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Errors of omission refer to instances where relevant information is not included or recorded, leading to incomplete data or knowledge representation.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-2-Sentence-3",
          "local_name": "errors of omission",
          "local_types": [
            "data quality issue"
          ],
          "iri": "Entity-error_of_omission-Mention-1"
        }
      ],
      "relevance": 0.388916015625
    },
    "Entity-record_label": {
      "node_id": "record_label",
      "disambiguation_index": 0,
      "label": "record label",
      "aliases": [
        "record label"
      ],
      "types": [
        "music company",
        "business",
        "music",
        "entity",
        "music industry entity",
        "music industry",
        "label",
        "organization",
        "organisation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A record label is a company or organization that produces and distributes music recordings, manages artists, and promotes their work within the music industry.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-3",
          "local_name": "record label",
          "local_types": [
            "music",
            "entity",
            "music industry",
            "organization",
            "business"
          ],
          "iri": "Entity-record_label-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-3",
          "local_name": "record label",
          "local_types": [
            "music company",
            "music",
            "entity",
            "music industry",
            "label",
            "organisation"
          ],
          "iri": "Entity-record_label-Mention-2"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "record label",
          "local_types": [
            "music",
            "entity",
            "music industry",
            "music industry entity",
            "organisation"
          ],
          "iri": "Entity-record_label-Mention-3"
        }
      ],
      "relevance": 0.38720703125
    },
    "Entity-suit": {
      "node_id": "suit",
      "disambiguation_index": 0,
      "label": "suits",
      "aliases": [
        "suit",
        "suits"
      ],
      "types": [
        "attribute",
        "classification",
        "card classification",
        "card attribute"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of poker, 'suits' refers to the four categories of playing cards, which are typically hearts, diamonds, clubs, and spades.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-5",
          "local_name": "suits",
          "local_types": [
            "attribute",
            "classification",
            "card attribute"
          ],
          "iri": "Entity-suit-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-6",
          "local_name": "suit",
          "local_types": [
            "attribute",
            "card classification"
          ],
          "iri": "Entity-suit-Mention-2"
        }
      ],
      "relevance": 0.38720703125
    },
    "Entity-one_pair": {
      "node_id": "one_pair",
      "disambiguation_index": 0,
      "label": "One Pair",
      "aliases": [
        "Two Pair",
        "One Pair"
      ],
      "types": [
        "poker hand",
        "game category",
        "rank",
        "poker hand rank"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "One Pair refers to a specific rank in poker hand rankings, where a hand consists of two cards of the same rank and three other cards of different ranks.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-7",
          "local_name": "One Pair",
          "local_types": [
            "poker hand rank",
            "game category",
            "rank",
            "poker hand"
          ],
          "iri": "Entity-one_pair-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-7",
          "local_name": "Two Pair",
          "local_types": [
            "poker hand rank",
            "game category",
            "rank",
            "poker hand"
          ],
          "iri": "Entity-one_pair-Mention-2"
        }
      ],
      "relevance": 0.38720703125
    },
    "Entity-it_reverse_form": {
      "node_id": "it_reverse_form",
      "disambiguation_index": 0,
      "label": "its reverse form",
      "aliases": [
        "its reverse form"
      ],
      "types": [
        "form"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "The term 'its reverse form' refers to the representation of a binary predicate in which the subject argument is used to connect the head, as opposed to the straight form where the object argument serves this purpose.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "its reverse form",
          "local_types": [
            "form"
          ],
          "iri": "Entity-it_reverse_form-Mention-1"
        }
      ],
      "relevance": 0.38720703125
    },
    "Entity-card": {
      "node_id": "card",
      "disambiguation_index": 0,
      "label": "card",
      "aliases": [
        "card"
      ],
      "types": [
        "playing card",
        "game component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "The term 'card' refers to a playing card used in the context of poker, characterized by two attributes: suit and rank.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-6",
          "local_name": "card",
          "local_types": [
            "playing card",
            "game component"
          ],
          "iri": "Entity-card-Mention-1"
        }
      ],
      "relevance": 0.386962890625
    },
    "Entity-example": {
      "node_id": "example",
      "disambiguation_index": 0,
      "label": "example",
      "aliases": [
        "example"
      ],
      "types": [
        "example",
        "illustration",
        "case study"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An example is a specific instance or case that illustrates a broader concept or principle.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-6-Sentence-1",
          "local_name": "example",
          "local_types": [
            "illustration",
            "case study"
          ],
          "iri": "Entity-example-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-3-Sentence-1",
          "local_name": "example",
          "local_types": [
            "example"
          ],
          "iri": "Entity-example-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-6-Sentence-4",
          "local_name": "example",
          "local_types": [
            "example"
          ],
          "iri": "Entity-example-Mention-3"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-5",
          "local_name": "example",
          "local_types": [
            "example",
            "case study",
            "illustration"
          ],
          "iri": "Entity-example-Mention-4"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-4",
          "local_name": "example",
          "local_types": [
            "example"
          ],
          "iri": "Entity-example-Mention-5"
        }
      ],
      "relevance": 0.38671875
    },
    "Entity-non-zero_element": {
      "node_id": "non-zero_element",
      "disambiguation_index": 0,
      "label": "non-zero element",
      "aliases": [
        "non-zero element",
        "non-zero elements"
      ],
      "types": [
        "data characteristic",
        "element",
        "set",
        "mathematical property",
        "mathematical concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A non-zero element is a mathematical term referring to an element of a set that is not equal to zero, often used in various mathematical contexts to denote values that contribute to certain properties or calculations.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-6-Sentence-3",
          "local_name": "non-zero element",
          "local_types": [
            "mathematical concept",
            "element"
          ],
          "iri": "Entity-non-zero_element-Mention-1"
        },
        {
          "reference": "Section-11-Paragraph-7-Sentence-4",
          "local_name": "non-zero elements",
          "local_types": [
            "mathematical property",
            "set"
          ],
          "iri": "Entity-non-zero_element-Mention-2"
        },
        {
          "reference": "Section-11-Paragraph-8-Sentence-2",
          "local_name": "non-zero elements",
          "local_types": [
            "mathematical concept",
            "data characteristic"
          ],
          "iri": "Entity-non-zero_element-Mention-3"
        }
      ],
      "relevance": 0.3857421875
    },
    "Entity-human": {
      "node_id": "human",
      "disambiguation_index": 0,
      "label": "human",
      "aliases": [
        "human"
      ],
      "types": [
        "organism",
        "entity",
        "concept",
        "predicate",
        "type",
        "entity type",
        "biological classification",
        "species",
        "biological entity",
        "biological organism"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A human is a member of the species Homo sapiens, characterized by advanced cognitive abilities, social behavior, and the capacity for language and culture.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-2",
          "local_name": "human",
          "local_types": [
            "predicate",
            "entity",
            "concept",
            "entity type"
          ],
          "iri": "Entity-human-Mention-1"
        },
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "human",
          "local_types": [
            "biological classification",
            "species"
          ],
          "iri": "Entity-human-Mention-2"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "human",
          "local_types": [
            "biological classification",
            "entity",
            "concept",
            "type"
          ],
          "iri": "Entity-human-Mention-3"
        },
        {
          "reference": "Section-6-Paragraph-7-Sentence-2",
          "local_name": "human",
          "local_types": [
            "organism",
            "entity",
            "biological classification",
            "biological entity"
          ],
          "iri": "Entity-human-Mention-4"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "human",
          "local_types": [
            "entity",
            "concept"
          ],
          "iri": "Entity-human-Mention-5"
        },
        {
          "reference": "Section-12-Paragraph-8-Sentence-7",
          "local_name": "human",
          "local_types": [
            "entity",
            "biological organism"
          ],
          "iri": "Entity-human-Mention-6"
        }
      ],
      "relevance": 0.38525390625
    },
    "Entity-nativelanguage": {
      "node_id": "nativelanguage",
      "disambiguation_index": 0,
      "label": "nativeLanguage",
      "aliases": [
        "nativeLanguage"
      ],
      "types": [
        "predicate",
        "concept",
        "linguistic attribute",
        "relation",
        "linguistic concept",
        "relationship",
        "language proficiency",
        "language"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "nativeLanguage refers to the primary language that a person or entity naturally acquires and uses for communication.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "nativeLanguage",
          "local_types": [
            "predicate",
            "language proficiency",
            "linguistic attribute",
            "concept"
          ],
          "iri": "Entity-nativelanguage-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "nativeLanguage",
          "local_types": [
            "predicate",
            "relation",
            "linguistic concept",
            "relationship",
            "language"
          ],
          "iri": "Entity-nativelanguage-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "nativeLanguage",
          "local_types": [
            "relation",
            "predicate"
          ],
          "iri": "Entity-nativelanguage-Mention-3"
        }
      ],
      "relevance": 0.385009765625
    },
    "Entity-lemma": {
      "node_id": "lemma",
      "disambiguation_index": 0,
      "label": "lemma",
      "aliases": [
        "lemma"
      ],
      "types": [
        "theoretical construct",
        "concept",
        "mathematical object"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A lemma is a theoretical construct or concept in mathematics and logic that serves as a preliminary proposition or statement used to prove a larger theorem or result.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-11-Sentence-1",
          "local_name": "lemma",
          "local_types": [
            "theoretical construct",
            "concept",
            "mathematical object"
          ],
          "iri": "Entity-lemma-Mention-1"
        }
      ],
      "relevance": 0.384521484375
    },
    "Entity-intel_xeon_cpu_e5-2650_v4": {
      "node_id": "intel_xeon_cpu_e5-2650_v4",
      "disambiguation_index": 0,
      "label": "Intel Xeon CPU E5-2650 v4",
      "aliases": [
        "Intel Xeon CPU E5-2650 v4"
      ],
      "types": [
        "CPU",
        "hardware",
        "processor"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "The Intel Xeon CPU E5-2650 v4 is a server-grade microprocessor designed for high-performance computing, featuring multiple cores and threads to efficiently handle demanding workloads.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-4-Sentence-1",
          "local_name": "Intel Xeon CPU E5-2650 v4",
          "local_types": [
            "CPU",
            "hardware",
            "processor"
          ],
          "iri": "Entity-intel_xeon_cpu_e5-2650_v4-Mention-1"
        }
      ],
      "relevance": 0.384033203125
    },
    "Entity-66_gb_ram": {
      "node_id": "66_gb_ram",
      "disambiguation_index": 0,
      "label": "66 GB RAM",
      "aliases": [
        "66 GB RAM"
      ],
      "types": [
        "memory",
        "hardware specification",
        "RAM"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "66 GB RAM refers to a type of computer memory that provides 66 gigabytes of volatile storage used for temporary data processing and active tasks in a computing system.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-4-Sentence-1",
          "local_name": "66 GB RAM",
          "local_types": [
            "memory",
            "hardware specification",
            "RAM"
          ],
          "iri": "Entity-66_gb_ram-Mention-1"
        }
      ],
      "relevance": 0.3828125
    },
    "Entity-centos_8": {
      "node_id": "centos_8",
      "disambiguation_index": 0,
      "label": "CentOS 8",
      "aliases": [
        "CentOS 8"
      ],
      "types": [
        "software",
        "operating system"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "CentOS 8 is a free and open-source Linux distribution that serves as a community-supported computing platform derived from the sources of Red Hat Enterprise Linux.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-4-Sentence-1",
          "local_name": "CentOS 8",
          "local_types": [
            "software",
            "operating system"
          ],
          "iri": "Entity-centos_8-Mention-1"
        }
      ],
      "relevance": 0.38232421875
    },
    "Entity-running_time": {
      "node_id": "running_time",
      "disambiguation_index": 0,
      "label": "running times",
      "aliases": [
        "running times",
        "running time"
      ],
      "types": [
        "performance measure",
        "performance metric",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Running times refer to the duration taken to complete a specific task or process, typically measured in hours or other time units.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "running times",
          "local_types": [
            "metric",
            "performance measure"
          ],
          "iri": "Entity-running_time-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-2-Sentence-1",
          "local_name": "running time",
          "local_types": [
            "performance metric"
          ],
          "iri": "Entity-running_time-Mention-2"
        }
      ],
      "relevance": 0.382080078125
    },
    "Entity-string": {
      "node_id": "string",
      "disambiguation_index": 0,
      "label": "string",
      "aliases": [
        "string"
      ],
      "types": [
        "data type"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A string is a data type used in programming and data representation that consists of a sequence of characters, typically used to represent text.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-2",
          "local_name": "string",
          "local_types": [
            "data type"
          ],
          "iri": "Entity-string-Mention-1"
        }
      ],
      "relevance": 0.381103515625
    },
    "Entity-rd": {
      "node_id": "rd",
      "disambiguation_index": 0,
      "label": "R^d",
      "aliases": [
        "R^d"
      ],
      "types": [
        "mathematical space",
        "mathematical object",
        "mathematical notation",
        "vector space"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "R^d refers to a d-dimensional vector space over the field of real numbers, where d is a positive integer.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "R^d",
          "local_types": [
            "mathematical space",
            "mathematical object",
            "mathematical notation",
            "vector space"
          ],
          "iri": "Entity-rd-Mention-1"
        }
      ],
      "relevance": 0.380859375
    },
    "Entity-universally_quantified": {
      "node_id": "universally_quantified",
      "disambiguation_index": 0,
      "label": "universally quantified",
      "aliases": [
        "universally quantified"
      ],
      "types": [
        "quantification",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A universally quantified expression is a logical statement that asserts a property holds for all elements in a specified domain, typically represented using the universal quantifier symbol (\u2200).",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-2",
          "local_name": "universally quantified",
          "local_types": [
            "quantification",
            "logical expression"
          ],
          "iri": "Entity-universally_quantified-Mention-1"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-3",
          "local_name": "universally quantified",
          "local_types": [
            "quantification",
            "logical expression"
          ],
          "iri": "Entity-universally_quantified-Mention-2"
        }
      ],
      "relevance": 0.380615234375
    },
    "Entity-human_interaction": {
      "node_id": "human_interaction",
      "disambiguation_index": 0,
      "label": "human interaction",
      "aliases": [
        "human interaction"
      ],
      "types": [
        "human",
        "interaction",
        "communication",
        "social interaction"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Human interaction refers to the ways in which individuals communicate, engage, and connect with one another in social contexts.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-7-Sentence-1",
          "local_name": "human interaction",
          "local_types": [
            "human",
            "interaction",
            "communication",
            "social interaction"
          ],
          "iri": "Entity-human_interaction-Mention-1"
        }
      ],
      "relevance": 0.380615234375
    },
    "Entity-body_of_the_rule": {
      "node_id": "body_of_the_rule",
      "disambiguation_index": 0,
      "label": "body of the rule",
      "aliases": [
        "body of the rule",
        "rule body"
      ],
      "types": [
        "rule component",
        "logical structure",
        "body",
        "component of rule",
        "logic",
        "component",
        "rule",
        "logic rule"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The body of the rule refers to the part of a logical rule that specifies the conditions or premises that must be satisfied for the rule to be applied or for the conclusion to be drawn.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-1",
          "local_name": "body of the rule",
          "local_types": [
            "rule component",
            "rule",
            "body",
            "logic"
          ],
          "iri": "Entity-body_of_the_rule-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-8-Sentence-4",
          "local_name": "rule body",
          "local_types": [
            "logical structure",
            "body",
            "component of rule",
            "component",
            "rule",
            "logic rule"
          ],
          "iri": "Entity-body_of_the_rule-Mention-2"
        }
      ],
      "relevance": 0.3798828125
    },
    "Entity-each_poker_hand": {
      "node_id": "each_poker_hand",
      "disambiguation_index": 0,
      "label": "Each poker hand",
      "aliases": [
        "Each hand",
        "Each poker hand"
      ],
      "types": [
        "poker hand",
        "hand"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "Each poker hand refers to a specific combination of five playing cards selected from a standard deck, which consists of thirteen ranks and four suits, and is categorized into various ranks such as High Card, One Pair, and Two Pair.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-5",
          "local_name": "Each poker hand",
          "local_types": [
            "poker hand"
          ],
          "iri": "Entity-each_poker_hand-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-7",
          "local_name": "Each hand",
          "local_types": [
            "hand"
          ],
          "iri": "Entity-each_poker_hand-Mention-2"
        }
      ],
      "relevance": 0.3798828125
    },
    "Entity-human_user": {
      "node_id": "human_user",
      "disambiguation_index": 0,
      "label": "human user",
      "aliases": [
        "human user"
      ],
      "types": [
        "individual",
        "end user",
        "user"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A human user is an individual who interacts with a system or application, typically to perform tasks or access information.",
      "mentions": [
        {
          "reference": "Section-13-Paragraph-2-Sentence-1",
          "local_name": "human user",
          "local_types": [
            "individual",
            "end user",
            "user"
          ],
          "iri": "Entity-human_user-Mention-1"
        }
      ],
      "relevance": 0.379150390625
    },
    "Entity-quantifier": {
      "node_id": "quantifier",
      "disambiguation_index": 0,
      "label": "quantifiers",
      "aliases": [
        "quantifiers"
      ],
      "types": [
        "grammatical element",
        "linguistic term",
        "logical concept"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Quantifiers are linguistic elements that express the quantity of subjects or objects in a sentence, often indicating how many or how much of something is being referred to.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-3",
          "local_name": "quantifiers",
          "local_types": [
            "grammatical element",
            "linguistic term",
            "logical concept"
          ],
          "iri": "Entity-quantifier-Mention-1"
        }
      ],
      "relevance": 0.378662109375
    },
    "Entity-country": {
      "node_id": "country",
      "disambiguation_index": 0,
      "label": "country",
      "aliases": [
        "country"
      ],
      "types": [
        "geographical concept",
        "entity",
        "concept",
        "nation",
        "type",
        "geopolitical entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A country is a distinct territorial body or political entity that is recognized as an independent nation, characterized by its own government, laws, and often a defined population and culture.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "country",
          "local_types": [
            "geographical concept",
            "entity",
            "concept",
            "nation",
            "geopolitical entity"
          ],
          "iri": "Entity-country-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "country",
          "local_types": [
            "entity",
            "concept",
            "nation",
            "type",
            "geopolitical entity"
          ],
          "iri": "Entity-country-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "country",
          "local_types": [
            "entity",
            "concept"
          ],
          "iri": "Entity-country-Mention-3"
        }
      ],
      "relevance": 0.37841796875
    },
    "Entity-the_literature": {
      "node_id": "the_literature",
      "disambiguation_index": 0,
      "label": "the literature",
      "aliases": [
        "the literature"
      ],
      "types": [
        "literature"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The literature refers to the body of scholarly work and research that discusses and analyzes the concept of existential rules in the context of logic and knowledge representation.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-2-Sentence-7",
          "local_name": "the literature",
          "local_types": [
            "literature"
          ],
          "iri": "Entity-the_literature-Mention-1"
        }
      ],
      "relevance": 0.37841796875
    },
    "Entity-hand": {
      "node_id": "hand",
      "disambiguation_index": 0,
      "label": "hand",
      "aliases": [
        "hand"
      ],
      "types": [
        "card hand",
        "game element"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of poker, a 'hand' refers to a specific combination of five playing cards drawn from a standard deck, which can be classified into various ranks such as High Card, One Pair, or Two Pair.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-7",
          "local_name": "hand",
          "local_types": [
            "card hand",
            "game element"
          ],
          "iri": "Entity-hand-Mention-1"
        }
      ],
      "relevance": 0.378173828125
    },
    "Entity-universally_quantified_(1)": {
      "node_id": "universally_quantified_(1)",
      "disambiguation_index": 1,
      "label": "universally quantified",
      "aliases": [
        "universally quantified"
      ],
      "types": [
        "quantification"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term 'universally quantified' refers to the logical condition where all free variables in a predicate logic expression are quantified to indicate that the statement holds true for all possible values of those variables.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-3",
          "local_name": "universally quantified",
          "local_types": [
            "quantification"
          ],
          "iri": "Entity-universally_quantified_(1)-Mention-1"
        }
      ],
      "relevance": 0.378173828125
    },
    "Entity-an_artist": {
      "node_id": "an_artist",
      "disambiguation_index": 0,
      "label": "an artist",
      "aliases": [
        "an artist"
      ],
      "types": [
        "artist"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "An artist refers to a musical artist who creates and performs music, often associated with specific songs and albums in the context of knowledge graphs.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "an artist",
          "local_types": [
            "artist"
          ],
          "iri": "Entity-an_artist-Mention-1"
        }
      ],
      "relevance": 0.37744140625
    },
    "Entity-_i__j__-th_element": {
      "node_id": "_i__j__-th_element",
      "disambiguation_index": 0,
      "label": "[i, j]-th element",
      "aliases": [
        "[i, j]-th element"
      ],
      "types": [
        "matrix element"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The [i, j]-th element refers to a specific entry located at the i-th row and j-th column of a matrix.",
      "mentions": [
        {
          "reference": "Section-11-Paragraph-2-Sentence-3",
          "local_name": "[i, j]-th element",
          "local_types": [
            "matrix element"
          ],
          "iri": "Entity-_i__j__-th_element-Mention-1"
        }
      ],
      "relevance": 0.376220703125
    },
    "Entity-the_object_argument_of_the_target_predicate": {
      "node_id": "the_object_argument_of_the_target_predicate",
      "disambiguation_index": 0,
      "label": "the object argument of the target predicate",
      "aliases": [
        "the object argument of the target predicate"
      ],
      "types": [
        "argument"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "the object argument of the target predicate refers to the specific entity or value that is associated with the action or state described by the target predicate in a logical or linguistic structure.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-4-Sentence-5",
          "local_name": "the object argument of the target predicate",
          "local_types": [
            "argument"
          ],
          "iri": "Entity-the_object_argument_of_the_target_predicate-Mention-1"
        }
      ],
      "relevance": 0.371337890625
    },
    "Entity-pop_star": {
      "node_id": "pop_star",
      "disambiguation_index": 0,
      "label": "pop stars",
      "aliases": [
        "pop stars"
      ],
      "types": [
        "entertainment",
        "entity",
        "entity type",
        "entertainer",
        "musician"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Pop stars are popular musicians known for their commercial success and widespread appeal in the genre of pop music.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-4",
          "local_name": "pop stars",
          "local_types": [
            "entertainment",
            "entity",
            "entity type",
            "entertainer",
            "musician"
          ],
          "iri": "Entity-pop_star-Mention-1"
        }
      ],
      "relevance": 0.370361328125
    },
    "Entity-percentage_difference": {
      "node_id": "percentage_difference",
      "disambiguation_index": 0,
      "label": "percentage difference",
      "aliases": [
        "percentage difference"
      ],
      "types": [
        "metric",
        "statistical measure",
        "quantitative analysis",
        "comparison metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Percentage difference is a statistical measure that quantifies the relative change between two values, expressed as a percentage of the original value.",
      "mentions": [
        {
          "reference": "Section-16-Paragraph-3-Sentence-4",
          "local_name": "percentage difference",
          "local_types": [
            "metric",
            "statistical measure",
            "quantitative analysis",
            "comparison metric"
          ],
          "iri": "Entity-percentage_difference-Mention-1"
        }
      ],
      "relevance": 0.368896484375
    },
    "Entity-numerator": {
      "node_id": "numerator",
      "disambiguation_index": 0,
      "label": "numerator",
      "aliases": [
        "numerator"
      ],
      "types": [
        "fraction component",
        "mathematical term"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "In mathematics, a numerator is the top part of a fraction that indicates how many parts of the whole are being considered.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-4",
          "local_name": "numerator",
          "local_types": [
            "fraction component",
            "mathematical term"
          ],
          "iri": "Entity-numerator-Mention-1"
        }
      ],
      "relevance": 0.368408203125
    },
    "Entity-denominator": {
      "node_id": "denominator",
      "disambiguation_index": 0,
      "label": "denominator",
      "aliases": [
        "denominator"
      ],
      "types": [
        "fraction component",
        "mathematical term"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "In mathematics, a denominator is the bottom part of a fraction that indicates the number of equal parts into which the whole is divided.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-10-Sentence-4",
          "local_name": "denominator",
          "local_types": [
            "fraction component",
            "mathematical term"
          ],
          "iri": "Entity-denominator-Mention-1"
        }
      ],
      "relevance": 0.3681640625
    },
    "Entity-poker_hand": {
      "node_id": "poker_hand",
      "disambiguation_index": 0,
      "label": "poker hand",
      "aliases": [
        "poker hand",
        "poker hands"
      ],
      "types": [
        "game element",
        "game term",
        "game",
        "card game",
        "card combination",
        "hand"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A poker hand is a specific combination of five playing cards used in the game of poker, which can vary in rank and suit.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-5",
          "local_name": "poker hand",
          "local_types": [
            "game element",
            "hand",
            "card combination"
          ],
          "iri": "Entity-poker_hand-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-8",
          "local_name": "poker hands",
          "local_types": [
            "game",
            "card game"
          ],
          "iri": "Entity-poker_hand-Mention-2"
        },
        {
          "reference": "Section-14-Paragraph-3-Sentence-9",
          "local_name": "poker hand",
          "local_types": [
            "game term",
            "card combination"
          ],
          "iri": "Entity-poker_hand-Mention-3"
        }
      ],
      "relevance": 0.367919921875
    },
    "Entity-father": {
      "node_id": "father",
      "disambiguation_index": 0,
      "label": "father",
      "aliases": [
        "father"
      ],
      "types": [
        "family role",
        "predicate",
        "relation",
        "relationship"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of the paper, 'father' refers to a predicate that establishes a relationship between an entity x, which satisfies the condition of being human, and another entity z2, indicating that z2 is a human offspring of x.",
      "mentions": [
        {
          "reference": "Section-5-Paragraph-3-Sentence-4",
          "local_name": "father",
          "local_types": [
            "family role",
            "predicate",
            "relationship"
          ],
          "iri": "Entity-father-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-1-Sentence-2",
          "local_name": "father",
          "local_types": [
            "predicate",
            "family role",
            "relation",
            "relationship"
          ],
          "iri": "Entity-father-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-4",
          "local_name": "father",
          "local_types": [
            "relation",
            "predicate"
          ],
          "iri": "Entity-father-Mention-3"
        }
      ],
      "relevance": 0.36767578125
    },
    "Entity-cultural_bias": {
      "node_id": "cultural_bias",
      "disambiguation_index": 0,
      "label": "cultural bias",
      "aliases": [
        "cultural bias"
      ],
      "types": [
        "bias",
        "cultural",
        "social phenomenon"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Cultural bias refers to the tendency to interpret and judge phenomena based on the values and standards of one's own culture, often leading to a distorted understanding of other cultures.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-3",
          "local_name": "cultural bias",
          "local_types": [
            "bias",
            "cultural",
            "social phenomenon"
          ],
          "iri": "Entity-cultural_bias-Mention-1"
        }
      ],
      "relevance": 0.3671875
    },
    "Entity-statistical_likelihood": {
      "node_id": "statistical_likelihood",
      "disambiguation_index": 0,
      "label": "statistical likelihood",
      "aliases": [
        "statistical likelihood"
      ],
      "types": [
        "statistical concept",
        "probability"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Statistical likelihood refers to the probability or chance that a particular event or outcome will occur based on statistical analysis and data.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-4-Sentence-5",
          "local_name": "statistical likelihood",
          "local_types": [
            "statistical concept",
            "probability"
          ],
          "iri": "Entity-statistical_likelihood-Mention-1"
        }
      ],
      "relevance": 0.3662109375
    },
    "Entity-z_child__x__z_": {
      "node_id": "z_child__x__z_",
      "disambiguation_index": 0,
      "label": "\u2203z child(x, z)",
      "aliases": [
        "\u2203z child(x, z)"
      ],
      "types": [
        "existential quantifier",
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The expression denotes the existence of at least one individual z that is a child of the individual x.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-4",
          "local_name": "\u2203z child(x, z)",
          "local_types": [
            "existential quantifier",
            "predicate"
          ],
          "iri": "Entity-z_child__x__z_-Mention-1"
        }
      ],
      "relevance": 0.3642578125
    },
    "Entity-person": {
      "node_id": "person",
      "disambiguation_index": 0,
      "label": "person",
      "aliases": [
        "persons",
        "person"
      ],
      "types": [
        "entity",
        "person",
        "type",
        "entity type",
        "individual",
        "human"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A person is an individual human being, typically characterized by attributes such as name, birth date, and place of birth.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-2",
          "local_name": "person",
          "local_types": [
            "individual",
            "entity"
          ],
          "iri": "Entity-person-Mention-1"
        },
        {
          "reference": "Section-3-Paragraph-2-Sentence-1",
          "local_name": "person",
          "local_types": [
            "individual",
            "human"
          ],
          "iri": "Entity-person-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-3",
          "local_name": "persons",
          "local_types": [
            "entity",
            "person",
            "type",
            "entity type",
            "human"
          ],
          "iri": "Entity-person-Mention-3"
        }
      ],
      "relevance": 0.364013671875
    },
    "Entity-deck": {
      "node_id": "deck",
      "disambiguation_index": 0,
      "label": "deck",
      "aliases": [
        "deck"
      ],
      "types": [
        "collection",
        "set of cards",
        "game element",
        "game component"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of poker, a 'deck' refers to a standard set of playing cards consisting of thirteen ranks and four suits, from which hands are drawn.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-5",
          "local_name": "deck",
          "local_types": [
            "collection",
            "set of cards",
            "game element",
            "game component"
          ],
          "iri": "Entity-deck-Mention-1"
        }
      ],
      "relevance": 0.359375
    },
    "Entity-logical_statement": {
      "node_id": "logical_statement",
      "disambiguation_index": 0,
      "label": "logical statement",
      "aliases": [
        "logical statement"
      ],
      "types": [
        "proposition",
        "concept",
        "logical expression",
        "mathematical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A logical statement is a declarative sentence that can be classified as true or false, often used in formal logic and mathematics to express propositions or relationships.",
      "mentions": [
        {
          "reference": "Section-10-Paragraph-2-Sentence-2",
          "local_name": "logical statement",
          "local_types": [
            "proposition",
            "concept",
            "logical expression",
            "mathematical expression"
          ],
          "iri": "Entity-logical_statement-Mention-1"
        }
      ],
      "relevance": 0.358642578125
    },
    "Entity-runtime": {
      "node_id": "runtime",
      "disambiguation_index": 0,
      "label": "runtime",
      "aliases": [
        "runtime"
      ],
      "types": [
        "performance metric",
        "metric"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Runtime refers to the duration of time that a program or process takes to execute from start to finish.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-3-Sentence-1",
          "local_name": "runtime",
          "local_types": [
            "performance metric",
            "metric"
          ],
          "iri": "Entity-runtime-Mention-1"
        }
      ],
      "relevance": 0.357177734375
    },
    "Entity-set_of_real_number": {
      "node_id": "set_of_real_number",
      "disambiguation_index": 0,
      "label": "set of real numbers",
      "aliases": [
        "set of real numbers"
      ],
      "types": [
        "mathematical set"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The set of real numbers is a mathematical set that includes all the numbers on the continuous number line, encompassing both rational and irrational numbers.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-1-Sentence-3",
          "local_name": "set of real numbers",
          "local_types": [
            "mathematical set"
          ],
          "iri": "Entity-set_of_real_number-Mention-1"
        }
      ],
      "relevance": 0.354736328125
    },
    "Entity-free_variable": {
      "node_id": "free_variable",
      "disambiguation_index": 0,
      "label": "free variables",
      "aliases": [
        "Free variables",
        "free variables"
      ],
      "types": [
        "mathematical concept",
        "quantifier",
        "variable"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Free variables are variables in a mathematical expression or logical formula that are not bound by a quantifier and can take on any value from their domain.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-1-Sentence-3",
          "local_name": "free variables",
          "local_types": [
            "mathematical concept",
            "variable"
          ],
          "iri": "Entity-free_variable-Mention-1"
        },
        {
          "reference": "Section-6-Paragraph-2-Sentence-2",
          "local_name": "free variables",
          "local_types": [
            "quantifier",
            "variable"
          ],
          "iri": "Entity-free_variable-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-2-Sentence-3",
          "local_name": "free variables",
          "local_types": [
            "mathematical concept",
            "variable"
          ],
          "iri": "Entity-free_variable-Mention-3"
        }
      ],
      "relevance": 0.35400390625
    },
    "Entity-entrepreneur": {
      "node_id": "entrepreneur",
      "disambiguation_index": 0,
      "label": "entrepreneur",
      "aliases": [
        "entrepreneur"
      ],
      "types": [
        "role",
        "person",
        "occupation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An entrepreneur is an individual who initiates, develops, and manages a business venture, often taking on financial risks in the hope of profit.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-3",
          "local_name": "entrepreneur",
          "local_types": [
            "role",
            "person",
            "occupation"
          ],
          "iri": "Entity-entrepreneur-Mention-1"
        }
      ],
      "relevance": 0.3515625
    },
    "Entity-a_deck": {
      "node_id": "a_deck",
      "disambiguation_index": 0,
      "label": "a deck",
      "aliases": [
        "a deck"
      ],
      "types": [
        "deck"
      ],
      "node_type": "other",
      "LLM_familiarity": false,
      "description": "A deck refers to a standard set of playing cards used in games, consisting of thirteen ranks and four suits.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-5",
          "local_name": "a deck",
          "local_types": [
            "deck"
          ],
          "iri": "Entity-a_deck-Mention-1"
        }
      ],
      "relevance": 0.3515625
    },
    "Entity-proportion": {
      "node_id": "proportion",
      "disambiguation_index": 0,
      "label": "proportion",
      "aliases": [
        "proportion"
      ],
      "types": [
        "statistical measure"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Proportion is a statistical measure that represents the relationship of a part to the whole, often expressed as a fraction or percentage.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-2-Sentence-1",
          "local_name": "proportion",
          "local_types": [
            "statistical measure"
          ],
          "iri": "Entity-proportion-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-3-Sentence-4",
          "local_name": "proportion",
          "local_types": [
            "statistical measure"
          ],
          "iri": "Entity-proportion-Mention-2"
        },
        {
          "reference": "Section-15-Paragraph-4-Sentence-2",
          "local_name": "proportion",
          "local_types": [
            "statistical measure"
          ],
          "iri": "Entity-proportion-Mention-3"
        },
        {
          "reference": "Section-15-Paragraph-6-Sentence-1",
          "local_name": "proportion",
          "local_types": [
            "statistical measure"
          ],
          "iri": "Entity-proportion-Mention-4"
        },
        {
          "reference": "Section-15-Paragraph-9-Sentence-2",
          "local_name": "proportion",
          "local_types": [
            "statistical measure"
          ],
          "iri": "Entity-proportion-Mention-5"
        }
      ],
      "relevance": 0.35009765625
    },
    "Entity-conclude": {
      "node_id": "conclude",
      "disambiguation_index": 0,
      "label": "conclude",
      "aliases": [
        "conclude"
      ],
      "types": [
        "summary",
        "final remarks"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The term 'conclude' refers to the act of bringing a discussion or argument to a close, often summarizing the main points or providing final remarks.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-8-Sentence-3",
          "local_name": "conclude",
          "local_types": [
            "summary",
            "final remarks"
          ],
          "iri": "Entity-conclude-Mention-1"
        }
      ],
      "relevance": 0.346435546875
    },
    "Entity-spouse__x__y_": {
      "node_id": "spouse__x__y_",
      "disambiguation_index": 0,
      "label": "spouse(x, y)",
      "aliases": [
        "spouse(x, y)"
      ],
      "types": [
        "predicate",
        "relation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The relation 'spouse(x, y)' denotes a marital connection between two individuals, x and y, indicating that they are legally or socially recognized partners in a committed relationship.",
      "mentions": [
        {
          "reference": "Section-4-Paragraph-2-Sentence-4",
          "local_name": "spouse(x, y)",
          "local_types": [
            "predicate",
            "relation"
          ],
          "iri": "Entity-spouse__x__y_-Mention-1"
        }
      ],
      "relevance": 0.34619140625
    },
    "Entity-an_album": {
      "node_id": "an_album",
      "disambiguation_index": 0,
      "label": "an album",
      "aliases": [
        "an album"
      ],
      "types": [
        "album"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "An album refers to a collection of musical recordings, typically released as a single entity, which may include various songs and is often associated with a specific record label.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-8-Sentence-3",
          "local_name": "an album",
          "local_types": [
            "album"
          ],
          "iri": "Entity-an_album-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "an album",
          "local_types": [
            "album"
          ],
          "iri": "Entity-an_album-Mention-2"
        }
      ],
      "relevance": 0.345947265625
    },
    "Entity-four_suit": {
      "node_id": "four_suit",
      "disambiguation_index": 0,
      "label": "four suits",
      "aliases": [
        "four suits"
      ],
      "types": [
        "suit",
        "attribute"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term 'four suits' refers to the four distinct categories of playing cards in a standard deck, which are Hearts, Diamonds, Clubs, and Spades, each representing a different symbol and color.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-3-Sentence-5",
          "local_name": "four suits",
          "local_types": [
            "suit",
            "attribute"
          ],
          "iri": "Entity-four_suit-Mention-1"
        }
      ],
      "relevance": 0.345458984375
    },
    "Entity-mary": {
      "node_id": "mary",
      "disambiguation_index": 0,
      "label": "Mary",
      "aliases": [
        "Mary"
      ],
      "types": [
        "individual",
        "entity",
        "person"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "Mary is an individual who is identified as living in Canberra and is inferred to be a citizen of Australia based on the relationships defined in a knowledge graph.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "Mary",
          "local_types": [
            "individual",
            "entity",
            "person"
          ],
          "iri": "Entity-mary-Mention-1"
        }
      ],
      "relevance": 0.344970703125
    },
    "Entity-manual_mode": {
      "node_id": "manual_mode",
      "disambiguation_index": 0,
      "label": "manual mode",
      "aliases": [
        "manual mode"
      ],
      "types": [
        "approach",
        "method",
        "operating mode"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Manual mode refers to an operating mode in which tasks or processes are performed by human intervention rather than automated systems.",
      "mentions": [
        {
          "reference": "Section-18-Paragraph-3-Sentence-1",
          "local_name": "manual mode",
          "local_types": [
            "approach",
            "method",
            "operating mode"
          ],
          "iri": "Entity-manual_mode-Mention-1"
        }
      ],
      "relevance": 0.343994140625
    },
    "Entity-birthplace": {
      "node_id": "birthplace",
      "disambiguation_index": 0,
      "label": "birthPlace",
      "aliases": [
        "birthPlace"
      ],
      "types": [
        "function",
        "query",
        "property",
        "predicate"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "birthPlace refers to the geographical location where an individual was born.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-4",
          "local_name": "birthPlace",
          "local_types": [
            "function",
            "query",
            "property",
            "predicate"
          ],
          "iri": "Entity-birthplace-Mention-1"
        }
      ],
      "relevance": 0.34228515625
    },
    "Entity-parent": {
      "node_id": "parent",
      "disambiguation_index": 0,
      "label": "parents",
      "aliases": [
        "parents"
      ],
      "types": [
        "biological relation",
        "family relation",
        "biological entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In this context, 'parents' refers to the biological or familial entities that are responsible for the procreation and upbringing of a human, indicating that each human is expected to have at least two such entities.",
      "mentions": [
        {
          "reference": "Section-6-Paragraph-7-Sentence-2",
          "local_name": "parents",
          "local_types": [
            "biological relation",
            "family relation",
            "biological entity"
          ],
          "iri": "Entity-parent-Mention-1"
        }
      ],
      "relevance": 0.341064453125
    },
    "Entity-producer": {
      "node_id": "producer",
      "disambiguation_index": 0,
      "label": "producers",
      "aliases": [
        "producer",
        "producers"
      ],
      "types": [
        "profession",
        "music professional",
        "music",
        "entity",
        "music industry",
        "music producer",
        "role"
      ],
      "node_type": "general term",
      "LLM_familiarity": false,
      "description": "In the context of music, 'producers' refers to individuals who are responsible for overseeing and managing the production of a song, including its recording and arrangement.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-5-Sentence-2",
          "local_name": "producers",
          "local_types": [
            "profession",
            "role"
          ],
          "iri": "Entity-producer-Mention-1"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "producer",
          "local_types": [
            "music",
            "entity",
            "role",
            "music professional"
          ],
          "iri": "Entity-producer-Mention-2"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "producers",
          "local_types": [
            "profession",
            "music",
            "entity",
            "music industry",
            "music producer"
          ],
          "iri": "Entity-producer-Mention-3"
        }
      ],
      "relevance": 0.34033203125
    },
    "Entity-australia": {
      "node_id": "australia",
      "disambiguation_index": 0,
      "label": "Australia",
      "aliases": [
        "Australia"
      ],
      "types": [
        "location",
        "country",
        "entity",
        "place"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "Australia is a country and continent located in the Southern Hemisphere, known for its diverse landscapes, unique wildlife, and vibrant cities.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "Australia",
          "local_types": [
            "location",
            "country",
            "entity",
            "place"
          ],
          "iri": "Entity-australia-Mention-1"
        }
      ],
      "relevance": 0.33935546875
    },
    "Entity-birthplace__trump___": {
      "node_id": "birthplace__trump___",
      "disambiguation_index": 0,
      "label": "birthPlace(Trump, ?)",
      "aliases": [
        "birthPlace(Trump, ?)"
      ],
      "types": [
        "query",
        "question"
      ],
      "node_type": "other",
      "LLM_familiarity": true,
      "description": "The term 'birthPlace(Trump, ?)' refers to a query asking for the birthplace of Donald Trump, which is a dependent question in a sequence of queries related to knowledge graph completion.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-4",
          "local_name": "birthPlace(Trump, ?)",
          "local_types": [
            "query",
            "question"
          ],
          "iri": "Entity-birthplace__trump___-Mention-1"
        }
      ],
      "relevance": 0.33740234375
    },
    "Entity-artist": {
      "node_id": "artist",
      "disambiguation_index": 0,
      "label": "artist",
      "aliases": [
        "artist"
      ],
      "types": [
        "performer",
        "music",
        "entity",
        "musical artist",
        "individual"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "An artist is an individual who creates or performs art, particularly in the context of music, and is recognized for their creative contributions.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "artist",
          "local_types": [
            "performer",
            "music",
            "entity",
            "musical artist",
            "individual"
          ],
          "iri": "Entity-artist-Mention-1"
        }
      ],
      "relevance": 0.3330078125
    },
    "Entity-citizenof__x__y_": {
      "node_id": "citizenof__x__y_",
      "disambiguation_index": 0,
      "label": "citizenOf(x, y)",
      "aliases": [
        "citizenOf(x, y)"
      ],
      "types": [
        "predicate",
        "rule",
        "logical expression"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The predicate citizenOf(x, y) indicates that entity x is a citizen of entity y, typically representing a relationship between a person and a country or state.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "citizenOf(x, y)",
          "local_types": [
            "predicate",
            "rule",
            "logical expression"
          ],
          "iri": "Entity-citizenof__x__y_-Mention-1"
        }
      ],
      "relevance": 0.332763671875
    },
    "Entity-subject_argument": {
      "node_id": "subject_argument",
      "disambiguation_index": 0,
      "label": "subject argument",
      "aliases": [
        "subject argument"
      ],
      "types": [
        "subject",
        "linguistic term",
        "logical component",
        "predicate component",
        "logical construct",
        "grammatical component",
        "linguistic element",
        "grammatical function",
        "argument",
        "linguistic role"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A subject argument is a linguistic term that refers to the noun phrase or entity in a sentence that typically performs the action of the verb or is described by the predicate.",
      "mentions": [
        {
          "reference": "Section-9-Paragraph-2-Sentence-3",
          "local_name": "subject argument",
          "local_types": [
            "grammatical function",
            "argument",
            "subject",
            "linguistic role"
          ],
          "iri": "Entity-subject_argument-Mention-1"
        },
        {
          "reference": "Section-10-Paragraph-2-Sentence-1",
          "local_name": "subject argument",
          "local_types": [
            "logical component",
            "argument",
            "logical construct"
          ],
          "iri": "Entity-subject_argument-Mention-2"
        },
        {
          "reference": "Section-12-Paragraph-1-Sentence-3",
          "local_name": "subject argument",
          "local_types": [
            "linguistic element",
            "linguistic term",
            "argument"
          ],
          "iri": "Entity-subject_argument-Mention-3"
        },
        {
          "reference": "Section-12-Paragraph-4-Sentence-2",
          "local_name": "subject argument",
          "local_types": [
            "linguistic term",
            "grammatical component"
          ],
          "iri": "Entity-subject_argument-Mention-4"
        },
        {
          "reference": "Section-15-Paragraph-1-Sentence-5",
          "local_name": "subject argument",
          "local_types": [
            "argument",
            "predicate component"
          ],
          "iri": "Entity-subject_argument-Mention-5"
        }
      ],
      "relevance": 0.325927734375
    },
    "Entity-canberra": {
      "node_id": "canberra",
      "disambiguation_index": 0,
      "label": "Canberra",
      "aliases": [
        "Canberra"
      ],
      "types": [
        "location",
        "place",
        "entity",
        "city"
      ],
      "node_type": "named entity",
      "LLM_familiarity": false,
      "description": "Canberra is the capital city of Australia, known for its national institutions and cultural attractions.",
      "mentions": [
        {
          "reference": "Section-3-Paragraph-5-Sentence-2",
          "local_name": "Canberra",
          "local_types": [
            "location",
            "place",
            "entity",
            "city"
          ],
          "iri": "Entity-canberra-Mention-1"
        }
      ],
      "relevance": 0.3193359375
    },
    "Entity-trump": {
      "node_id": "trump",
      "disambiguation_index": 0,
      "label": "Trump",
      "aliases": [
        "Trump"
      ],
      "types": [
        "politician",
        "entity",
        "person"
      ],
      "node_type": "named entity",
      "LLM_familiarity": true,
      "description": "Trump refers to Donald Trump, an American businessman and politician who served as the 45th President of the United States.",
      "mentions": [
        {
          "reference": "Section-12-Paragraph-8-Sentence-4",
          "local_name": "Trump",
          "local_types": [
            "politician",
            "entity",
            "person"
          ],
          "iri": "Entity-trump-Mention-1"
        }
      ],
      "relevance": 0.3193359375
    },
    "Entity-song": {
      "node_id": "song",
      "disambiguation_index": 0,
      "label": "song",
      "aliases": [
        "song",
        "a song"
      ],
      "types": [
        "artistic creation",
        "music",
        "entity",
        "musical work",
        "musical composition",
        "type",
        "artistic work",
        "media",
        "song"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A song is a musical composition typically consisting of lyrics and melody, often performed by vocalists and accompanied by instruments.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-4-Sentence-3",
          "local_name": "song",
          "local_types": [
            "music",
            "entity",
            "musical work",
            "artistic creation"
          ],
          "iri": "Entity-song-Mention-1"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-2",
          "local_name": "song",
          "local_types": [
            "entity",
            "musical work",
            "artistic creation",
            "type"
          ],
          "iri": "Entity-song-Mention-2"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-4",
          "local_name": "song",
          "local_types": [
            "artistic work",
            "musical composition",
            "type"
          ],
          "iri": "Entity-song-Mention-3"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-5",
          "local_name": "song",
          "local_types": [
            "entity",
            "musical work"
          ],
          "iri": "Entity-song-Mention-4"
        },
        {
          "reference": "Section-15-Paragraph-8-Sentence-4",
          "local_name": "song",
          "local_types": [
            "music",
            "entity",
            "musical composition",
            "artistic work",
            "media"
          ],
          "iri": "Entity-song-Mention-5"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "song",
          "local_types": [
            "music",
            "entity",
            "musical work",
            "artistic creation"
          ],
          "iri": "Entity-song-Mention-6"
        },
        {
          "reference": "Section-2-Paragraph-5-Sentence-2",
          "local_name": "a song",
          "local_types": [
            "entity",
            "song"
          ],
          "iri": "Entity-song-Mention-7"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "a song",
          "local_types": [
            "song"
          ],
          "iri": "Entity-song-Mention-8"
        }
      ],
      "relevance": 0.3173828125
    },
    "Entity-name_of_an_album": {
      "node_id": "name_of_an_album",
      "disambiguation_index": 0,
      "label": "name of an album",
      "aliases": [
        "the name of an album",
        "name of an album"
      ],
      "types": [
        "album",
        "name"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The name of an album refers to the title of a collection of music tracks released by an artist or a band.",
      "mentions": [
        {
          "reference": "Section-14-Paragraph-7-Sentence-4",
          "local_name": "name of an album",
          "local_types": [
            "album"
          ],
          "iri": "Entity-name_of_an_album-Mention-1"
        },
        {
          "reference": "Section-14-Paragraph-7-Sentence-4",
          "local_name": "the name of an album",
          "local_types": [
            "album",
            "name"
          ],
          "iri": "Entity-name_of_an_album-Mention-2"
        }
      ],
      "relevance": 0.317138671875
    },
    "Entity-opera_singer": {
      "node_id": "opera_singer",
      "disambiguation_index": 0,
      "label": "opera singers",
      "aliases": [
        "opera singers"
      ],
      "types": [
        "performer",
        "entertainment",
        "entity",
        "entity type",
        "musician"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "Opera singers are vocal performers who specialize in singing opera, a theatrical art form that combines music, singing, and drama.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-4",
          "local_name": "opera singers",
          "local_types": [
            "performer",
            "entertainment",
            "entity",
            "entity type",
            "musician"
          ],
          "iri": "Entity-opera_singer-Mention-1"
        }
      ],
      "relevance": 0.3076171875
    },
    "Entity-singer": {
      "node_id": "singer",
      "disambiguation_index": 0,
      "label": "singer",
      "aliases": [
        "singer"
      ],
      "types": [
        "role",
        "person",
        "occupation"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A singer is a person who uses their voice to produce music, typically performing songs for an audience.",
      "mentions": [
        {
          "reference": "Section-15-Paragraph-9-Sentence-3",
          "local_name": "singer",
          "local_types": [
            "role",
            "person",
            "occupation"
          ],
          "iri": "Entity-singer-Mention-1"
        }
      ],
      "relevance": 0.30615234375
    },
    "Entity-musical_artist": {
      "node_id": "musical_artist",
      "disambiguation_index": 0,
      "label": "musical artist",
      "aliases": [
        "musical artist",
        "a musical artist"
      ],
      "types": [
        "profession",
        "performer",
        "music",
        "entity",
        "musical artist"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "A musical artist is an individual or group that creates, performs, and/or produces music across various genres.",
      "mentions": [
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "musical artist",
          "local_types": [
            "profession",
            "music",
            "entity",
            "performer"
          ],
          "iri": "Entity-musical_artist-Mention-1"
        },
        {
          "reference": "Section-17-Paragraph-4-Sentence-3",
          "local_name": "a musical artist",
          "local_types": [
            "musical artist"
          ],
          "iri": "Entity-musical_artist-Mention-2"
        }
      ],
      "relevance": 0.305419921875
    },
    "Entity-country_of_residence": {
      "node_id": "country_of_residence",
      "disambiguation_index": 0,
      "label": "country of residence",
      "aliases": [
        "country of residence"
      ],
      "types": [
        "location",
        "attribute",
        "geographical entity"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The country of residence refers to the nation where an individual currently lives or has established their primary home.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-1-Sentence-5",
          "local_name": "country of residence",
          "local_types": [
            "location",
            "attribute",
            "geographical entity"
          ],
          "iri": "Entity-country_of_residence-Mention-1"
        }
      ],
      "relevance": 0.301025390625
    },
    "Entity-place_of_birth": {
      "node_id": "place_of_birth",
      "disambiguation_index": 0,
      "label": "place of birth",
      "aliases": [
        "place of birth"
      ],
      "types": [
        "property",
        "location",
        "attribute"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The place of birth refers to the geographical location where an individual was born.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-2",
          "local_name": "place of birth",
          "local_types": [
            "property",
            "location",
            "attribute"
          ],
          "iri": "Entity-place_of_birth-Mention-1"
        }
      ],
      "relevance": 0.2939453125
    },
    "Entity-birth_date": {
      "node_id": "birth_date",
      "disambiguation_index": 0,
      "label": "birth date",
      "aliases": [
        "birth date"
      ],
      "types": [
        "property",
        "attribute",
        "date"
      ],
      "node_type": "general term",
      "LLM_familiarity": true,
      "description": "The birth date is a specific date that indicates the day on which a person was born.",
      "mentions": [
        {
          "reference": "Section-2-Paragraph-3-Sentence-2",
          "local_name": "birth date",
          "local_types": [
            "property",
            "attribute",
            "date"
          ],
          "iri": "Entity-birth_date-Mention-1"
        }
      ],
      "relevance": 0.29345703125
    }
  },
  "summary": "Knowledge Graphs (KGs) have gained popularity since Google's knowledge panels in 2012. KGs are large databases with weak inference rules, and SHACL is a W3C standard for graph data constraints. Many KGs lack shape constraints, hindering their maintenance. We propose Inverse Open Path (IOP) rules to define shapes as paths over connected entities, enhanced with cardinality constraints. We introduce SHACLEARNER, a method for learning high-quality IOP rules from KGs, demonstrating its effectiveness on large KGs like YAGO2s, DBpedia, and Wikidata, showing it can learn diverse and high-quality shapes.\n\nInterest in enterprise knowledge graphs (KGs) increased after Google Search's knowledge panels were launched in 2012. KGs, while diverse, often lack completeness due to the dynamic nature of knowledge and resource limitations, as seen with Wikidata. They adopt a data-first approach, allowing contributions without strict schemas. SHACL, recommended by W3C in 2017, defines constraints on KGs as shapes. This paper presents SHACLEARNER, a system that extracts shapes from KG data using Inverse Open Path (IOP) rules, enhancing KGs with cardinality constraints and quality measures. It details the SHACL learning method, related work, and experimental findings.\n\nThis section covers closed path (CP) and open path rules in knowledge graphs (KGs), which consist of entities and RDF triples. CP rules, utilized in systems like RLvLR and SCALEKB, enable the inference of new facts from existing ones. Their effectiveness is evaluated using support, standard confidence (SC), and head coverage (HC), where support counts instances satisfying both the body and head of a rule, while SC and HC measure rule quality and explanatory power.\n\nOPRL for active knowledge graph completion uses open path (OP) rules structured as P1(z0, z1) \u2227 P2(z1, z2) \u2227 ... \u2227 Pn(zn\u22121, y) \u2192 \u2203x Pt(x, z0). Variables are classified as closed if they appear in multiple predicates, while open variables do not. OP rules, featuring two open variables y and x, indicate facts like spouse(x, y) leading to child(x, z). These rules can be converted to closed path (CP) rules via variable unification. Evaluation of OP rules involves open path standard confidence (OPSC) and open path head coverage (OPHC), calculated from the relationships in the knowledge graph.\n\nA Knowledge Graph (KG) is a schema-free database enhanced with type information for validation and inference. The Shapes Constraint Language (SHACL), introduced in 2017, defines schema information for KGs as RDF graphs through constraints called shapes, which validate KG quality and identify patterns. SHACL focuses on node shapes that constrain predicates, especially property shapes. Various formalisms like Closed rules (CR) and Functional Graph Dependency (FGD) express KG patterns. This text highlights path shapes as templates for complex shapes and proposes methods for defining Inverse Open Path rules and mining them from KGs, aiding in KG completion.\n\nInverse open path rules (IOP) relate to SHACL shapes and derive from specific IOP rules, which involve predicates in a knowledge graph (KG) and are not Horn. IOP rule quality is evaluated using measures like support, standard confidence, and head coverage, with support being equivalent to that of open path (OP) rules. IOP rules can include cardinality annotations to indicate the minimum number of head paths in the KG. A lemma suggests that IOP standard confidence decreases with rule length, which aids in rule learning. The SHACLearner algorithm is introduced to generate IOP rules from a KG through sampling, embeddings, and path finding.\n\nSHACLEARNER is an adaptation of the OPRL algorithm for mining annotated IOP rules, utilizing embedding-based learning. It prunes less relevant entities and predicates to create a sampled knowledge graph for the RESCAL learner. The embeddings are used in heuristic functions to generate and filter IOP rules, which are then aggregated into a tree for each argument of the target predicate. SHACLEARNER uniquely handles unary predicates and minimum cardinality constraints, featuring novel evaluation and aggregation methods.\n\nThe Sampling() method in Algorithm 1 creates a fragment of the knowledge graph (KG) K', which includes a limited number of entities related to the target predicate Pt, addressing the challenges faced by embedding learners with large KGs like YAGO2. Algorithm 2 details the process of finding IOP rules with up to l atoms using the sampled entity set Esample and fact set K', while excluding less relevant predicates to reduce problem size. Although the worst-case complexity is O(|K|), real-world KGs are usually sparse, resulting in a smaller sampled KG. Algorithm 2 specifies the steps for sampling the KG based on the target predicate and maximum rule length.\n\nIn Embeddings(), we compute embeddings for predicates, subjects, and objects using RESCAL. Each entity e_i is represented as a vector E_i in R^d, and each predicate P_k as a matrix P_k in R^(d x d). The scoring function f(e1, P0, e2) = E1^T . P0 . E2 evaluates the relationship between e1 and e2. We also aggregate entity embeddings to create two vectors, P1_k and P2_k, for the subject and object arguments of each predicate P_k.\n\nAlgorithm 1, PathFinding(), generates candidate IOP rules from predicate embeddings, which are pruned using a scoring heuristic for OP rules. High-scoring OP rules indicate strong IOP rules due to their relationship. IOP rules connect entities via predicates with properties in the embedding space, such as similar argument embeddings and a composite predicate from the chain. The plausibility of this composite predicate is assessed using scoring functions, which help reduce the candidate set for final evaluations.\n\nThe computation of quality measures for SHACLearner involves evaluating candidate rules on a sampled knowledge graph (KG) using IOPsupp, IOPSC, and IOPHC. The KG is represented as square adjacency matrices, where A(Pk)[i, j] shows predicate presence. For the rule Pt(x, z0) -> P1(z0, x) ^ P2(z1, y), IOPSC and IOPHC are computed by counting entities that satisfy the rule's body and head through matrix operations. This process is demonstrated with matrices for predicates P1, P2, and Pt, leading to counts of distinct entities for different cardinality (Car) values, resulting in three rule versions with specific IOP measures.\n\nIn Algorithm 1, SHACL trees are created from annotated IOP rules using a greedy search in SHACLearner, which defines a tree structure with a body (Pt) and head (paths). Tree quality is evaluated using support and confidence metrics. Trees are built by sorting rules by IOPSC and adding them until TreeSC is below a threshold. Uncertain shapes can be simplified to standard SHACL shapes by removing low-quality annotations. While SHACLearner supports SHACL Core features, it has limitations, such as treating all properties as plain predicates and only managing min cardinality. Tree shapes improve KG documentation and validation, aiding KG-completion with a depth-first questioning strategy that lessens cognitive load. Pruning trees can result in simpler, more confident structures.\n\nCurrent methods for learning SHACL shapes from KGs are procedural and not scalable for real-world use. Some semi-automatic methods involve a graph structure learner with human input, while others let users define shapes but lack quality measures. Existing studies focus on RDF validation rather than shape discovery. A proposal links inference rules with SHACL shapes, and some efforts aim to establish SHACL semantics, but our approach uses established logical formalisms to derive SHACL-expressible shapes.\n\nWe implemented SHACLEARNER based on Algorithm 1 to evaluate its effectiveness in capturing shapes from large knowledge graphs (KGs). As the first method to automatically learn shapes from massive KGs, it performs well despite the absence of benchmarks. SHACLEARNER is scalable, handling KGs like DBpedia with over 11 million facts, and efficiently discovers high-quality rules and complex shapes. Our experiments used four benchmark KGs, including YAGO2s, Wikidata, DBpedia, and a synthetic Poker KG, created to analyze our algorithm's completeness. We transformed KGs with type predicates for a common representation, generating new unary predicates from DBpedia and Wikidata for effective learning.\n\nThe evaluation of KG rule-learning methods assesses the quantity and quality of rules using IOPSC and IOPHC metrics. We analyzed 74 target predicates from Wikidata, DBPedia, and YAGO2s, with a 10-hour limit for each. SHACLEARNER excelled in runtime and quality, producing a variety of rule lengths. The quality of mined rules decreased with higher IOPSC and IOPHC, with DBpedia generating the most quality rules. Most rules had a cardinality of 1, and longer rules were more common. Mined rules from DBpedia demonstrate the significance of IOPSC and IOPHC in relation to target predicates.\n\nSHACLEARNER uses prior sampling and heuristic pruning to optimize IOP rule search in PathFinding. Three variants were tested: (-S+H) with complete KG, (+S-H) with sampling only, and (-S-H) as a brute-force learner. Experiments on the small Poker KG with 28 unary predicates showed that (-S-H) found 163 rules, while (-S+H) found 146, a 10% reduction. SHACLEARNER retains high-quality rules (IOPSC >= 0.9) but misses lower-quality ones due to pruning. Heuristic pruning does not always enhance rule quality, and using the complete KG can degrade embedding quality, whereas sampling improves it.\n\nTrees built from IOP rules show aggregation time is over 10 times faster than initial IOP mining. Discovering complex shapes is time-consuming due to exponential rule growth. The average number of branches in mined trees is much lower than the number of mined rules, resulting in at least 44% pruning of IOP rules. A 39-branched tree from DBpedia exemplifies this structure, showing relationships like a song having an album. Future work will explore improving tree shapes for better simplicity and interpretation.\n\nThis paper introduces a method for learning SHACL shapes from knowledge graphs (KGs) to define patterns, validate KGs, and support data entry. The shapes impose constraints on properties for entities with target predicates, utilizing Inverse Open Path rules (IOP) and quality measures like IOP Standard Confidence and Cardinality. IOPSC improves SHACL by quantifying uncertainty in shape selection for KG verification. The method aggregates IOP rules to identify complex shapes, aiding human validation and knowledge graph completion via dynamic data entry forms. An embedding-based Open Path Rule Learner (OPRL) is used to mine rules with open variables, including cardinality constraints. Experiments show SHACLearner's effectiveness in mining IOP rules from large benchmark KGs such as Yago, Wikidata, and DBpedia. The paper addresses challenges in learning shape constraints from schema-free KGs and managing uncertainty, positioning SHACLearner as a benchmark. Future work will focus on validating learned shapes through expert evaluation and redesigning SHACLearner for MapReduce to accommodate larger KGs.",
  "triples": [
    [
      "Entity-knowledge_graph",
      "Predicate-have_proliferated_on",
      "Entity-the_web"
    ],
    [
      "Entity-knowledge_panel",
      "Predicate-introduced_to",
      "Entity-google_search"
    ],
    [
      "Entity-knowledge_panel",
      "Predicate-introduced_to",
      "Entity-google"
    ],
    [
      "Entity-knowledge_graph__kg_",
      "Predicate-have_proliferated_on",
      "Entity-the_web"
    ],
    [
      "Entity-kg",
      "Predicate-are",
      "Entity-large_data-first_graph_database"
    ],
    [
      "Entity-large_data-first_graph_database",
      "Predicate-have",
      "Entity-weak_inference_rule"
    ],
    [
      "Entity-large_data-first_graph_database",
      "Predicate-have",
      "Entity-weakly-constraining_data_scheme"
    ],
    [
      "Entity-shacl",
      "Predicate-for_expressing",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-shape_constraint_language",
      "Predicate-is",
      "Entity-shacl"
    ],
    [
      "Entity-shacl_shape",
      "Predicate-serve_to_validate",
      "Entity-kg"
    ],
    [
      "Entity-shacl_shape",
      "Predicate-serve_to_underpin",
      "Entity-manual_kg_editing_task"
    ],
    [
      "Entity-shacl_shape",
      "Predicate-serve_to_offer_insight_into",
      "Entity-kg_structure"
    ],
    [
      "Entity-large_kg",
      "Predicate-have_no_available",
      "Entity-shape_constraint"
    ],
    [
      "Entity-large_kg",
      "Predicate-cannot_obtain",
      "Entity-ongoing_maintenance_and_extension"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-introduce",
      "Entity-inverse_open_path"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-presents",
      "Entity-specific_shape"
    ],
    [
      "Entity-specific_shape",
      "Predicate-in_the_form_of",
      "Entity-path_over_connected_entity"
    ],
    [
      "Entity-path_over_connected_entity",
      "Predicate-over",
      "Entity-connected_entity"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-is_a",
      "Entity-predicate_logic_formalism"
    ],
    [
      "Entity-iop_rule",
      "Predicate-express",
      "Entity-shape_pattern"
    ],
    [
      "Entity-shape_pattern",
      "Predicate-can_be_augmented_with",
      "Entity-minimum_cardinality_constraint"
    ],
    [
      "Entity-shape_pattern",
      "Predicate-used_as_a_building_block_for",
      "Entity-more_complex_shape"
    ],
    [
      "Entity-more_complex_shape",
      "Predicate-include",
      "Entity-tree"
    ],
    [
      "Entity-more_complex_shape",
      "Predicate-include",
      "Entity-other_rule_pattern"
    ],
    [
      "Entity-iop_rule",
      "Predicate-can_be_augmented_with",
      "Entity-minimum_cardinality_constraint"
    ],
    [
      "Entity-iop_rule",
      "Predicate-used_as_a",
      "Entity-building_block_(1)"
    ],
    [
      "Entity-building_block_(1)",
      "Predicate-for",
      "Entity-more_complex_shape"
    ],
    [
      "Entity-formal_quality_measure",
      "Predicate-define_for",
      "Entity-iop_rule"
    ],
    [
      "Entity-novel_method",
      "Predicate-propose_to_learn",
      "Entity-high-quality_rule"
    ],
    [
      "Entity-novel_method",
      "Predicate-learn_from",
      "Entity-kg"
    ],
    [
      "Entity-novel_method",
      "Predicate-to_learn",
      "Entity-high-quality_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-builds",
      "Entity-high-quality_tree_shape"
    ],
    [
      "Entity-iop_rule",
      "Predicate-builds",
      "Entity-tree_shape"
    ],
    [
      "Entity-our_learning_method",
      "Predicate-is_adapted_from",
      "Entity-embedding-based_open_path_rule_learner"
    ],
    [
      "Entity-shaclearner",
      "Predicate-evaluates_on",
      "Entity-massive_kg"
    ],
    [
      "Entity-massive_kg",
      "Predicate-include",
      "Entity-yago2s"
    ],
    [
      "Entity-massive_kg",
      "Predicate-include",
      "Entity-dbpedia_3.8"
    ],
    [
      "Entity-massive_kg",
      "Predicate-include",
      "Entity-wikidata"
    ],
    [
      "Entity-shaclearner",
      "Predicate-evaluates_on",
      "Entity-yago2s"
    ],
    [
      "Entity-shaclearner",
      "Predicate-evaluates_on",
      "Entity-dbpedia_3.8"
    ],
    [
      "Entity-shaclearner",
      "Predicate-evaluates_on",
      "Entity-wikidata"
    ],
    [
      "Entity-the_experiment",
      "Predicate-show_that",
      "Entity-shaclearner"
    ],
    [
      "Entity-shaclearner",
      "Predicate-can_learn",
      "Entity-informative_and_intuitive_shape"
    ],
    [
      "Entity-shaclearner",
      "Predicate-can_learn_from",
      "Entity-massive_kg"
    ],
    [
      "Entity-shaclearner",
      "Predicate-can_effectively_learn",
      "Entity-informative_and_intuitive_shape"
    ],
    [
      "Entity-shaclearner",
      "Predicate-learns",
      "Entity-informative_and_intuitive_shape"
    ],
    [
      "Entity-the_shape",
      "Predicate-are_diverse_in",
      "Entity-structural_feature"
    ],
    [
      "Entity-the_shape",
      "Predicate-are_diverse_in",
      "Entity-quality_measure"
    ],
    [
      "Entity-quality_measure",
      "Predicate-indicate",
      "Entity-confidence"
    ],
    [
      "Entity-quality_measure",
      "Predicate-indicate",
      "Entity-generality"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-express",
      "Entity-shape_pattern"
    ],
    [
      "Entity-public_knowledge_graph",
      "Predicate-became_popular_with",
      "Entity-yago"
    ],
    [
      "Entity-knowledge_panel",
      "Predicate-on",
      "Entity-google_search"
    ],
    [
      "Entity-google_search_engine",
      "Predicate-driven_by",
      "Entity-it_internal_knowledge_graph"
    ],
    [
      "Entity-knowledge_panel",
      "Predicate-on",
      "Entity-google_search_engine"
    ],
    [
      "Entity-these_kg",
      "Predicate-are",
      "Entity-massive_and_diverse"
    ],
    [
      "Entity-these_kg",
      "Predicate-are_typically",
      "Entity-incomplete"
    ],
    [
      "Entity-a_kg",
      "Predicate-will_be",
      "Entity-incomplete"
    ],
    [
      "Entity-the_evolving_nature_of_human_knowledge",
      "Predicate-is_a_reason_for",
      "Entity-incomplete"
    ],
    [
      "Entity-wikidata",
      "Predicate-has_more_complete_information_for",
      "Entity-pop_star"
    ],
    [
      "Entity-wikidata",
      "Predicate-has_less_complete_information_for",
      "Entity-opera_singer"
    ],
    [
      "Entity-computer_scientist",
      "Predicate-depend_on",
      "Entity-country_of_residence"
    ],
    [
      "Entity-the_power_of_kg",
      "Predicate-comes_from",
      "Entity-data-first_approach"
    ],
    [
      "Entity-contributor",
      "Predicate-extend",
      "Entity-a_kg"
    ],
    [
      "Entity-kg",
      "Predicate-comes_from",
      "Entity-data-first_approach"
    ],
    [
      "Entity-relational_database",
      "Predicate-employs",
      "Entity-not-null_and_other_schema-based_constraint"
    ],
    [
      "Entity-relational_database",
      "Predicate-requires",
      "Entity-attribute"
    ],
    [
      "Entity-large_kg",
      "Predicate-populated_by",
      "Entity-automatic_and_semi-automatic_method"
    ],
    [
      "Entity-automatic_and_semi-automatic_method",
      "Predicate-using",
      "Entity-non-structured_source"
    ],
    [
      "Entity-non-structured_source",
      "Predicate-such_as",
      "Entity-wikipedia"
    ],
    [
      "Entity-non-structured_source",
      "Predicate-prone_to",
      "Entity-error_of_omission_and_commission"
    ],
    [
      "Entity-non-structured_source",
      "Predicate-include",
      "Entity-wikipedia"
    ],
    [
      "Entity-both_kind_of_error",
      "Predicate-can_be_highlighted_for_correction_by",
      "Entity-schema-based_constraint"
    ],
    [
      "Entity-schema-based_constraint",
      "Predicate-are_commonly_unavailable",
      "Entity-such_constraint"
    ],
    [
      "Entity-shacl",
      "Predicate-recommended_by",
      "Entity-w3c"
    ],
    [
      "Entity-w3c",
      "Predicate-recommended",
      "Entity-shacl"
    ],
    [
      "Entity-w3c",
      "Predicate-recommended_in",
      "Entity-2017"
    ],
    [
      "Entity-shacl",
      "Predicate-expresses_constraints_on",
      "Entity-kg"
    ],
    [
      "Entity-shacl",
      "Predicate-expresses",
      "Entity-shape"
    ],
    [
      "Entity-shacl",
      "Predicate-can_be_used_to_express",
      "Entity-shape"
    ],
    [
      "Entity-shape",
      "Predicate-characterize",
      "Entity-the_kg"
    ],
    [
      "Entity-shacl",
      "Predicate-can_be_used_to_express",
      "Entity-a_person"
    ],
    [
      "Entity-a_person",
      "Predicate-needs_to_have",
      "Entity-name"
    ],
    [
      "Entity-a_person",
      "Predicate-needs_to_have",
      "Entity-birth_date"
    ],
    [
      "Entity-a_person",
      "Predicate-needs_to_have",
      "Entity-place_of_birth"
    ],
    [
      "Entity-name",
      "Predicate-has_particular_type",
      "Entity-string"
    ],
    [
      "Entity-birth_date",
      "Predicate-has_particular_type",
      "Entity-date"
    ],
    [
      "Entity-place_of_birth",
      "Predicate-has_particular_type",
      "Entity-location"
    ],
    [
      "Entity-the_shape",
      "Predicate-are_used_to_guide",
      "Entity-the_population_of_a_kg"
    ],
    [
      "Entity-shape",
      "Predicate-are_used_to_guide",
      "Entity-the_population_of_a_kg"
    ],
    [
      "Entity-shape",
      "Predicate-could_be_inferred_from",
      "Entity-kg"
    ],
    [
      "Entity-the_shape",
      "Predicate-characterize",
      "Entity-the_kg"
    ],
    [
      "Entity-shape",
      "Predicate-can_be_used_for",
      "Entity-data_cleaning"
    ],
    [
      "Entity-shape",
      "Predicate-can_be_used_for",
      "Entity-data_entry"
    ],
    [
      "Entity-shape",
      "Predicate-can_be_used_for",
      "Entity-subsequent_data_cleaning"
    ],
    [
      "Entity-shape",
      "Predicate-can_be_used_for",
      "Entity-ongoing_data_entry"
    ],
    [
      "Entity-this_topic",
      "Predicate-has",
      "Entity-scant_previous_research"
    ],
    [
      "Entity-shape",
      "Predicate-are_expressed_by",
      "Entity-alternative_formalism"
    ],
    [
      "Entity-shape",
      "Predicate-include",
      "Entity-rule_and_constraint"
    ],
    [
      "Entity-shape",
      "Predicate-include",
      "Entity-closed_rule"
    ],
    [
      "Entity-shape",
      "Predicate-include",
      "Entity-tree"
    ],
    [
      "Entity-shape",
      "Predicate-include",
      "Entity-existential_rule"
    ],
    [
      "Entity-shape",
      "Predicate-include",
      "Entity-graph_functional_dependency"
    ],
    [
      "Entity-all_these_shape",
      "Predicate-has_common_underlying_form",
      "Entity-common_underlying_form"
    ],
    [
      "Entity-common_underlying_form",
      "Predicate-is",
      "Entity-the_path"
    ],
    [
      "Entity-additional_constraint",
      "Predicate-induce",
      "Entity-alternative_shape"
    ],
    [
      "Entity-all_these_shape",
      "Predicate-is",
      "Entity-common_underlying_form"
    ],
    [
      "Entity-entity_x",
      "Predicate-is_a",
      "Entity-song"
    ],
    [
      "Entity-entity_x",
      "Predicate-is_in",
      "Entity-album_y"
    ],
    [
      "Entity-album_y",
      "Predicate-has_a",
      "Entity-record_label_z"
    ],
    [
      "Entity-entity_x",
      "Predicate-is",
      "Entity-song"
    ],
    [
      "Entity-album_y",
      "Predicate-has",
      "Entity-record_label_z"
    ],
    [
      "Entity-the_satisfaction_of_a_less-constrained_shape",
      "Predicate-is_a_necessary_condition_for",
      "Entity-satisfaction_of_a_more_complex_shape"
    ],
    [
      "Entity-this_paper",
      "Predicate-focuses_on",
      "Entity-learning_path"
    ],
    [
      "Entity-minimum_cardinality_constraint",
      "Predicate-express",
      "Entity-song"
    ],
    [
      "Entity-song",
      "Predicate-has",
      "Entity-2_producer"
    ],
    [
      "Entity-the_process_of_constructing_one_kind_of_more_complex_shape",
      "Predicate-investigates",
      "Entity-tree"
    ],
    [
      "Entity-the_process_of_constructing_one_kind_of_more_complex_shape",
      "Predicate-investigates",
      "Entity-path"
    ],
    [
      "Entity-the_process_of_constructing_one_kind_of_more_complex_shape",
      "Predicate-is_a_process_of_constructing",
      "Entity-a_tree"
    ],
    [
      "Entity-tree",
      "Predicate-has_type",
      "Entity-song"
    ],
    [
      "Entity-a_tree_(1)",
      "Predicate-is_about",
      "Entity-an_entity"
    ],
    [
      "Entity-an_entity_of_type_song",
      "Predicate-is_expected_to_have",
      "Entity-associated_fact"
    ],
    [
      "Entity-kg",
      "Predicate-suggests",
      "Entity-associated_fact"
    ],
    [
      "Entity-this_paper",
      "Predicate-presents",
      "Entity-a_system_(1)"
    ],
    [
      "Entity-a_system_(1)",
      "Predicate-mines",
      "Entity-the_shape"
    ],
    [
      "Entity-a_system_(1)",
      "Predicate-mines_from",
      "Entity-kg"
    ],
    [
      "Entity-a_system_(1)",
      "Predicate-mines",
      "Entity-kg"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-are_an_inverse_version_of",
      "Entity-open_path_rule"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-are_called",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-rule",
      "Predicate-are",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-learns",
      "Entity-embedding-based_open_path_rule_learner"
    ],
    [
      "Entity-iop_rule",
      "Predicate-are_an_inverse_version_of",
      "Entity-open_path_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-are_adapted_by",
      "Entity-embedding-based_open_path_rule_learner"
    ],
    [
      "Entity-quality_measure",
      "Predicate-express",
      "Entity-the_validity_of_iop_rule"
    ],
    [
      "Entity-quality_measure",
      "Predicate-express",
      "Entity-iop_rule"
    ],
    [
      "Entity-shaclearner",
      "Predicate-uses",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-the_mined_iop_rule",
      "Predicate-discover",
      "Entity-more_complex_tree_shape"
    ],
    [
      "Entity-the_mined_iop_rule",
      "Predicate-are_used_to_discover",
      "Entity-more_complex_tree_shape"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_a",
      "Entity-shacl_shape"
    ],
    [
      "Entity-tree",
      "Predicate-is_a",
      "Entity-shacl_shape"
    ],
    [
      "Entity-mined_shape",
      "Predicate-are_augmented_with",
      "Entity-numerical_confidence_measure"
    ],
    [
      "Entity-numerical_confidence_measure",
      "Predicate-expresses",
      "Entity-strength_of_evidence"
    ],
    [
      "Entity-kg",
      "Predicate-contains",
      "Entity-evidence"
    ],
    [
      "Entity-this_paper",
      "Predicate-introduce",
      "Entity-inverse_open_path_rule"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "Predicate-extends",
      "Entity-iop_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-annotated_with",
      "Entity-minimum_cardinality_constraint"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-act_as",
      "Entity-class_or_type_constraint"
    ],
    [
      "Entity-method_to_aggregate_iop_rule",
      "Predicate-produces",
      "Entity-tree_shape"
    ],
    [
      "Entity-this_paper",
      "Predicate-presents",
      "Entity-foundation"
    ],
    [
      "Entity-this_paper",
      "Predicate-describes",
      "Entity-shacl_learning_method"
    ],
    [
      "Entity-shacl_learning_method",
      "Predicate-include",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-shacl_learning_method",
      "Predicate-include",
      "Entity-method_to_aggregate_iop_rule"
    ],
    [
      "Entity-embedding-based_method",
      "Predicate-discovers",
      "Entity-iop_rule"
    ],
    [
      "Entity-this_paper",
      "Predicate-is_organized_as_follows",
      "Entity-foundation"
    ],
    [
      "Entity-method_to_aggregate_iop_rule",
      "Predicate-is_part_of",
      "Entity-shacl_learning_method"
    ],
    [
      "Entity-section_4",
      "Predicate-presents",
      "Entity-related_work"
    ],
    [
      "Entity-section_5",
      "Predicate-discusses",
      "Entity-result_of_an_experimental_evaluation"
    ],
    [
      "Entity-section_6",
      "Predicate-concludes",
      "Entity-result_of_an_experimental_evaluation"
    ],
    [
      "Entity-this_paper",
      "Predicate-presents",
      "Entity-related_work"
    ],
    [
      "Entity-this_paper",
      "Predicate-discusses",
      "Entity-result_of_an_experimental_evaluation"
    ],
    [
      "Entity-this_paper",
      "Predicate-concludes_in",
      "Entity-section_6"
    ],
    [
      "Entity-closed_path_rule",
      "Predicate-is_presented_in",
      "Entity-this_section"
    ],
    [
      "Entity-open_path_rule",
      "Predicate-is_presented_in",
      "Entity-this_section"
    ],
    [
      "Entity-closed_path_rule",
      "Predicate-are_a_type_of",
      "Entity-rule"
    ],
    [
      "Entity-an_entity_e",
      "Predicate-can_represent",
      "Entity-a_place"
    ],
    [
      "Entity-an_entity_e",
      "Predicate-can_represent",
      "Entity-a_person_(1)"
    ],
    [
      "Entity-e",
      "Predicate-is_a_set_of",
      "Entity-entity"
    ],
    [
      "Entity-a_fact",
      "Predicate-is_known_as",
      "Entity-link"
    ],
    [
      "Entity-a_fact",
      "Predicate-is",
      "Entity-rdf_triple"
    ],
    [
      "Entity-subject_entity",
      "Predicate-is_related_to",
      "Entity-object_entity"
    ],
    [
      "Entity-object_entity",
      "Predicate-is_related_to",
      "Entity-subject_entity"
    ],
    [
      "Entity-binary_predicate",
      "Predicate-is_known_as",
      "Entity-property"
    ],
    [
      "Entity-rdf_triple",
      "Predicate-is_written_as",
      "Entity-p__e__e__"
    ],
    [
      "Entity-a_fact",
      "Predicate-is_a",
      "Entity-rdf_triple"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-allow",
      "Entity-p__e_"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-equivalently_written_as",
      "Entity-p__e_"
    ],
    [
      "Entity-p__e_",
      "Predicate-is_a",
      "Entity-binary_fact"
    ],
    [
      "Entity-the_binary_fact_p__e__e_",
      "Predicate-is_a",
      "Entity-binary_fact"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-act_as",
      "Entity-the_label_of_a_link_in_the_graph"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-model_as",
      "Entity-self-loops"
    ],
    [
      "Entity-binary_predicate",
      "Predicate-similar_to",
      "Entity-unary_predicate"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-represent",
      "Entity-class_assertion"
    ],
    [
      "Entity-rdf_triple",
      "Predicate-expressed_as",
      "Entity-_e__rdf__type__p_"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-may_represent",
      "Entity-class_assertion"
    ],
    [
      "Entity-the_kg",
      "Predicate-is_a_pair",
      "Entity-k___e__f_"
    ],
    [
      "Entity-f",
      "Predicate-is_a_set_of",
      "Entity-fact"
    ],
    [
      "Entity-entity",
      "Predicate-occur_in",
      "Entity-f"
    ],
    [
      "Entity-entity",
      "Predicate-occur_in",
      "Entity-e"
    ],
    [
      "Entity-kg_rule_learning_system",
      "Predicate-employ",
      "Entity-rule_language"
    ],
    [
      "Entity-rlvlr",
      "Predicate-uses",
      "Entity-closed_path__cp__rule"
    ],
    [
      "Entity-scalekb",
      "Predicate-uses",
      "Entity-closed_path__cp__rule"
    ],
    [
      "Entity-each_consists_of_a_head_at_the_front_of_the_implication_arrow",
      "Predicate-consists_of",
      "Entity-head"
    ],
    [
      "Entity-each_consists_of_a_head_at_the_front_of_the_implication_arrow",
      "Predicate-consists_of",
      "Entity-body"
    ],
    [
      "Entity-the_rule",
      "Predicate-is_about",
      "Entity-the_predicate_of_the_head"
    ],
    [
      "Entity-the_rule",
      "Predicate-has_a",
      "Entity-head"
    ],
    [
      "Entity-rule",
      "Predicate-is_about",
      "Entity-the_predicate_of_the_head"
    ],
    [
      "Entity-the_rule_(1)",
      "Predicate-forms",
      "Entity-closed_path_rule"
    ],
    [
      "Entity-closed_path_rule",
      "Predicate-is",
      "Entity-single_unbroken_loop_of_link"
    ],
    [
      "Entity-closed_path_rule",
      "Predicate-is",
      "Entity-loop"
    ],
    [
      "Entity-closed_path_rule",
      "Predicate-is",
      "Entity-link_between_the_variable"
    ],
    [
      "Entity-rule",
      "Predicate-forms",
      "Entity-closed_path_rule"
    ],
    [
      "Entity-the_rule",
      "Predicate-has",
      "Entity-general_form"
    ],
    [
      "Entity-pt__x__y_",
      "Predicate--",
      "Entity-p1__x__z1_"
    ],
    [
      "Entity-pt__x__y_",
      "Predicate--",
      "Entity-p2__z1__z2_"
    ],
    [
      "Entity-pt__x__y_",
      "Predicate--",
      "Entity-pn__zn-1__y_"
    ],
    [
      "Entity-rule",
      "Predicate-interpreted_with",
      "Entity-universal_quantification"
    ],
    [
      "Entity-fact",
      "Predicate-instantiates",
      "Entity-head_of_the_rule"
    ],
    [
      "Entity-body_of_the_rule",
      "Predicate-found_in",
      "Entity-kg"
    ],
    [
      "Entity-variable",
      "Predicate-quantified_by",
      "Entity-universal_quantification"
    ],
    [
      "Entity-the_rule",
      "Predicate-has_a",
      "Entity-body"
    ],
    [
      "Entity-rule",
      "Predicate-interpret_with",
      "Entity-universal_quantification"
    ],
    [
      "Entity-mary",
      "Predicate-livesIn",
      "Entity-canberra"
    ],
    [
      "Entity-canberra",
      "Predicate-locatedIn",
      "Entity-australia"
    ],
    [
      "Entity-mary",
      "Predicate-citizenOf",
      "Entity-australia"
    ],
    [
      "Entity-livesin",
      "Predicate-is_part_of",
      "Entity-citizenof__x__y_"
    ],
    [
      "Entity-locatedin",
      "Predicate-is_part_of",
      "Entity-citizenof__x__y_"
    ],
    [
      "Entity-rule",
      "Predicate-are_considered_more_use_if_they_generalise_well",
      "Entity-many_fact"
    ],
    [
      "Entity-rule",
      "Predicate-explain",
      "Entity-fact"
    ],
    [
      "Entity-rule",
      "Predicate-are_considered_more_use_if_they_generalise_well",
      "Entity-fact"
    ],
    [
      "Entity-measure_support",
      "Predicate-are_used_in",
      "Entity-major_approach_to_rule_learning"
    ],
    [
      "Entity-head_coverage",
      "Predicate-are_used_in",
      "Entity-major_approach_to_rule_learning"
    ],
    [
      "Entity-standard_confidence",
      "Predicate-are_used_in",
      "Entity-major_approach_to_rule_learning"
    ],
    [
      "Entity-definition_1",
      "Predicate-satisfies",
      "Entity-support"
    ],
    [
      "Entity-r",
      "Predicate-is_a",
      "Entity-closed_path__cp__rule"
    ],
    [
      "Entity-closed_path__cp__rule",
      "Predicate-of_the_form",
      "Entity-_1_"
    ],
    [
      "Entity-entity__e__e__",
      "Predicate-satisfies",
      "Entity-body_of_r"
    ],
    [
      "Entity-body_of_r",
      "Predicate-denoted_by",
      "Entity-body_r__e__e__"
    ],
    [
      "Entity-entity__e__e__",
      "Predicate-exist_in",
      "Entity-kg"
    ],
    [
      "Entity-p1",
      "Predicate-are_facts_in",
      "Entity-kg"
    ],
    [
      "Entity-pn",
      "Predicate-are_facts_in",
      "Entity-kg"
    ],
    [
      "Entity-body_r__e__e__",
      "Predicate-is_a_fact_in",
      "Entity-the_kg"
    ],
    [
      "Entity-further__e__e__",
      "Predicate-satisfies",
      "Entity-head_of_r"
    ],
    [
      "Entity-pt__e__e__",
      "Predicate-is_a_fact_in",
      "Entity-kg"
    ],
    [
      "Entity-pt__e__e__",
      "Predicate-is_a_fact_in",
      "Entity-the_kg"
    ],
    [
      "Entity-support_of_r",
      "Predicate-counts",
      "Entity-rule_instance"
    ],
    [
      "Entity-the_body_and_the_head",
      "Predicate-are_satisfied_in",
      "Entity-kg"
    ],
    [
      "Entity-support_of_r",
      "Predicate-counts",
      "Entity-the_rule_instance"
    ],
    [
      "Entity-suppr",
      "Predicate-is_defined_as",
      "Entity-body_r"
    ],
    [
      "Entity-suppr",
      "Predicate-is_defined_as",
      "Entity-pt"
    ],
    [
      "Entity-entity__e__e__",
      "Predicate-satisfies",
      "Entity-head_of_r"
    ],
    [
      "Entity-standard_confidence__sc_",
      "Predicate-offers",
      "Entity-standardised_measure"
    ],
    [
      "Entity-head_coverage__hc_",
      "Predicate-offers",
      "Entity-standardised_measure"
    ],
    [
      "Entity-standard_confidence__sc_",
      "Predicate-compares",
      "Entity-rule_quality"
    ],
    [
      "Entity-head_coverage__hc_",
      "Predicate-compares",
      "Entity-rule_quality"
    ],
    [
      "Entity-standard_confidence__sc_",
      "Predicate-describes",
      "Entity-the_rule"
    ],
    [
      "Entity-the_body_in_the_kg",
      "Predicate-satisfies",
      "Entity-entity_pair"
    ],
    [
      "Entity-inferred_head_instance",
      "Predicate-are_satisfied_by",
      "Entity-entity_pair"
    ],
    [
      "Entity-confidence",
      "Predicate-is_closely_related_to",
      "Entity-association_rule_mining"
    ],
    [
      "Entity-head_coverage__hc_",
      "Predicate-measures",
      "Entity-explanatory_power_of_the_rule"
    ],
    [
      "Entity-cover",
      "Predicate-is_used_for",
      "Entity-rule_learning"
    ],
    [
      "Entity-cover",
      "Predicate-is_related_to",
      "Entity-inductive_logic_programming"
    ],
    [
      "Entity-non-recursive_rule",
      "Predicate-is_redundant_with_respect_to",
      "Entity-kg"
    ],
    [
      "Entity-every_kg_fact",
      "Predicate-is_an_instance_of",
      "Entity-the_predicate_of_the_head"
    ],
    [
      "Entity-every_kg_fact",
      "Predicate-is_redundant_with_respect_to",
      "Entity-the_predicate_of_the_head"
    ],
    [
      "Entity-non-recursive_rule",
      "Predicate-has",
      "Entity-100__sc_and_hc"
    ],
    [
      "Entity-the_predicate_of_the_head",
      "Predicate-is_redundant_with_respect_to",
      "Entity-the_kg"
    ],
    [
      "Entity-standard_confidence",
      "Predicate-is",
      "Entity-sc__r_"
    ],
    [
      "Entity-standard_confidence",
      "Predicate-calculated_using",
      "Entity-body_r"
    ],
    [
      "Entity-head_coverage",
      "Predicate-is",
      "Entity-hc__r_"
    ],
    [
      "Entity-head_coverage",
      "Predicate-calculated_using",
      "Entity-pt"
    ],
    [
      "Entity-closed_path_rule",
      "Predicate-are_used_by",
      "Entity-kg_rule_learning_system"
    ],
    [
      "Entity-oprl",
      "Predicate-defines",
      "Entity-open_path__op__rule"
    ],
    [
      "Entity-rule_mining_for_kg_completion",
      "Predicate-is_unlike",
      "Entity-rule_mining_for_kg_completion"
    ],
    [
      "Entity-oprl",
      "Predicate-is_for",
      "Entity-active_knowledge_graph_completion"
    ],
    [
      "Entity-p1",
      "Predicate-is_part_of",
      "Entity-p1__x__z0_"
    ],
    [
      "Entity-p1",
      "Predicate-is_part_of",
      "Entity-p2__z1__z2_"
    ],
    [
      "Entity-pn",
      "Predicate-is_part_of",
      "Entity-pn__zn-1__y_"
    ],
    [
      "Entity-z0",
      "Predicate-is_related_to",
      "Entity-p1__x__z0_"
    ],
    [
      "Entity-z1",
      "Predicate-is_related_to",
      "Entity-p2__z1__z2_"
    ],
    [
      "Entity-z2",
      "Predicate-is_related_to",
      "Entity-pn__zn-1__y_"
    ],
    [
      "Entity-free_variable",
      "Predicate-are",
      "Entity-universally_quantified_(1)"
    ],
    [
      "Entity-_x__zi__y_",
      "Predicate-are",
      "Entity-entity_variable"
    ],
    [
      "Entity-pi",
      "Predicate-is_a_predicate_in",
      "Entity-kg"
    ],
    [
      "Entity-open_path__op__rule",
      "Predicate-of_the_form",
      "Entity-p1__z0__z1___p2__z1__z2___...__pn__zn1__y___x_pt__x__z0_"
    ],
    [
      "Entity-a_variable",
      "Predicate-is",
      "Entity-closed"
    ],
    [
      "Entity-a_variable",
      "Predicate-is",
      "Entity-open"
    ],
    [
      "Entity-all_variable_of_a_rule",
      "Predicate-are",
      "Entity-closed"
    ],
    [
      "Entity-open_path__op__rule",
      "Predicate-is",
      "Entity-closed"
    ],
    [
      "Entity-a_rule",
      "Predicate-is",
      "Entity-closed"
    ],
    [
      "Entity-all_variable_of_a_rule",
      "Predicate-make_the_rule",
      "Entity-closed"
    ],
    [
      "Entity-op_rule",
      "Predicate-has",
      "Entity-two_open_variable"
    ],
    [
      "Entity-two_open_variable",
      "Predicate-include",
      "Entity-y_and_x"
    ],
    [
      "Entity-op_rule",
      "Predicate-are_used_since_they_imply",
      "Entity-fact"
    ],
    [
      "Entity-spouse__x__y_",
      "Predicate-implies",
      "Entity-z_child__x__z_"
    ],
    [
      "Entity-variable_unification",
      "Predicate-transforms",
      "Entity-op_rule_to_a_cp_rule"
    ],
    [
      "Entity-entity-instantiation",
      "Predicate-is_also_an",
      "Entity-entity-instantiation_of_the_related_op_rule"
    ],
    [
      "Entity-entity-instantiation_of_the_related_op_rule",
      "Predicate-is_an_entity-instantiation_of",
      "Entity-op_rule"
    ],
    [
      "Entity-entity-instantiation",
      "Predicate-is_an_entity-instantiation_of",
      "Entity-closed_path__cp__rule"
    ],
    [
      "Entity-open_path_standard_confidence",
      "Predicate-derived_from",
      "Entity-closed_path_form"
    ],
    [
      "Entity-open_path_head_coverage",
      "Predicate-derived_from",
      "Entity-closed_path_form"
    ],
    [
      "Entity-op_rule",
      "Predicate-assess_the_quality_of",
      "Entity-the_quality_of_op_rule"
    ],
    [
      "Entity-open_path_standard_confidence",
      "Predicate-is_derived_from",
      "Entity-closed_path_form"
    ],
    [
      "Entity-open_path_head_coverage",
      "Predicate-is_derived_from",
      "Entity-closed_path_form"
    ],
    [
      "Entity-pair_of_entity__e__e__",
      "Predicate-satisfies",
      "Entity-body_r"
    ],
    [
      "Entity-body_r",
      "Predicate-denoted_as",
      "Entity-body_r__e__e__"
    ],
    [
      "Entity-entity",
      "Predicate-exist_in",
      "Entity-kg"
    ],
    [
      "Entity-entity_e1__...__e__n-1_",
      "Predicate-are_part_of",
      "Entity-pair_of_entity__e__e__"
    ],
    [
      "Entity-pair_of_entity__e__e__",
      "Predicate-satisfies",
      "Entity-head_of_r"
    ],
    [
      "Entity-pt",
      "Predicate-denotes",
      "Entity-head_of_r"
    ],
    [
      "Entity-pt__e___e_",
      "Predicate-is",
      "Entity-a_fact_in_the_kg"
    ],
    [
      "Entity-head_of_r",
      "Predicate-satisfies",
      "Entity-pair_of_entity__e__e__"
    ],
    [
      "Entity-e_",
      "Predicate-satisfies",
      "Entity-head_of_r"
    ],
    [
      "Entity-open_path_support",
      "Predicate-is_given_by",
      "Entity-r"
    ],
    [
      "Entity-open_path_standard_confidence",
      "Predicate-is_given_by",
      "Entity-r"
    ],
    [
      "Entity-open_path_head_coverage",
      "Predicate-is_given_by_(1)",
      "Entity-r"
    ],
    [
      "Entity-open_path_support",
      "Predicate-given_by",
      "Entity-opsupp__r_"
    ],
    [
      "Entity-open_path_standard_confidence",
      "Predicate-is_given_by",
      "Entity-opsc__r_"
    ],
    [
      "Entity-open_path_head_coverage",
      "Predicate-is_given_by",
      "Entity-ophc__r_"
    ],
    [
      "Entity-a_kg_(1)",
      "Predicate-is",
      "Entity-schema-free_database"
    ],
    [
      "Entity-many_kg",
      "Predicate-are_augmented_with",
      "Entity-type_information"
    ],
    [
      "Entity-type_information",
      "Predicate-can_be_used_to_understand_and_validate",
      "Entity-data"
    ],
    [
      "Entity-type_information",
      "Predicate-can_be_very_helpful_for",
      "Entity-inference_process"
    ],
    [
      "Entity-inference_process",
      "Predicate-on",
      "Entity-a_kg_(1)"
    ],
    [
      "Entity-shape_constraint_language",
      "Predicate-defines",
      "Entity-schema_information_for_kg"
    ],
    [
      "Entity-shacl",
      "Predicate-defines",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-shacl",
      "Predicate-defines",
      "Entity-shape"
    ],
    [
      "Entity-kg",
      "Predicate-validated_against",
      "Entity-set_of_shape"
    ],
    [
      "Entity-kg",
      "Predicate-can_then_be_validated_against",
      "Entity-set_of_shape"
    ],
    [
      "Entity-shape",
      "Predicate-serve",
      "Entity-validating_the_quality_of_a_kg"
    ],
    [
      "Entity-shape",
      "Predicate-serve",
      "Entity-characterising_the_frequent_pattern_in_a_kg"
    ],
    [
      "Entity-shape",
      "Predicate-can_serve",
      "Entity-validating_the_quality_of_a_kg"
    ],
    [
      "Entity-shape",
      "Predicate-can_serve",
      "Entity-characterising_the_frequent_pattern_in_a_kg"
    ],
    [
      "Entity-wikidata",
      "Predicate-illustrates",
      "Entity-an_example_of_a_shape_from_wikidata"
    ],
    [
      "Entity-x_and_z_i",
      "Predicate-are_instantiated_by",
      "Entity-entity"
    ],
    [
      "Entity-an_example_of_a_shape_from_wikidata",
      "Predicate-illustrate",
      "Entity-fig_._2"
    ],
    [
      "Entity-the_shape_(1)",
      "Predicate-is_expressed_in",
      "Entity-shex"
    ],
    [
      "Entity-the_shape_(1)",
      "Predicate-is_translated_to",
      "Entity-shacl"
    ],
    [
      "Entity-shacl",
      "Predicate-together_with",
      "Entity-shacl_advanced_feature"
    ],
    [
      "Entity-shacl",
      "Predicate-is_extensive_with",
      "Entity-shacl_advanced_feature"
    ],
    [
      "Entity-node_shape",
      "Predicate-constrain",
      "Entity-target_predicate"
    ],
    [
      "Entity-property_shape",
      "Predicate-express",
      "Entity-constraint_over_fact"
    ],
    [
      "Entity-constraint_over_fact",
      "Predicate-is_related_to",
      "Entity-target_predicate"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-is",
      "Entity-human"
    ],
    [
      "Entity-property_shape",
      "Predicate-act_to_constrain",
      "Entity-target_predicate"
    ],
    [
      "Entity-entity_x_(1)",
      "Predicate-satisfies",
      "Entity-human__x_"
    ],
    [
      "Entity-entity_x_(1)",
      "Predicate-satisfies",
      "Entity-citizenof__x__z1_"
    ],
    [
      "Entity-entity_x_(1)",
      "Predicate-satisfies",
      "Entity-father__x__z2_"
    ],
    [
      "Entity-entity_x_(1)",
      "Predicate-satisfies",
      "Entity-nativelanguage__x__z3__(1)"
    ],
    [
      "Entity-citizenof__x__z1_",
      "Predicate-requires",
      "Entity-country__z1__z1_"
    ],
    [
      "Entity-father__x__z2_",
      "Predicate-requires",
      "Entity-human__z2__z2_"
    ],
    [
      "Entity-nativelanguage__x__z3__(1)",
      "Predicate-requires",
      "Entity-language__z3__z3_"
    ],
    [
      "Entity-citizenof",
      "Predicate-is_related_to",
      "Entity-entity_x_(1)"
    ],
    [
      "Entity-father",
      "Predicate-is_related_to",
      "Entity-entity_x_(1)"
    ],
    [
      "Entity-nativelanguage",
      "Predicate-is_related_to",
      "Entity-entity_x_(1)"
    ],
    [
      "Entity-formalism",
      "Predicate-proposed_to_express",
      "Entity-pattern"
    ],
    [
      "Entity-pattern",
      "Predicate-exhibited_in",
      "Entity-kg"
    ],
    [
      "Entity-formalism",
      "Predicate-corresponding_to",
      "Entity-the_shape"
    ],
    [
      "Entity-cr",
      "Predicate-is_used_for",
      "Entity-inferring_new_fact"
    ],
    [
      "Entity-cr",
      "Predicate-are_used_for",
      "Entity-fact"
    ],
    [
      "Entity-fgds",
      "Predicate-defines",
      "Entity-constraint"
    ],
    [
      "Entity-entity",
      "Predicate-can_be_related_by",
      "Entity-specific_predicate"
    ],
    [
      "Entity-constraint",
      "Predicate-are_deployed_to_make",
      "Entity-a_kg_(1)"
    ],
    [
      "Entity-formalism",
      "Predicate-share",
      "Entity-a_key_feature_in_their_syntax"
    ],
    [
      "Entity-difference_between_the_formalism",
      "Predicate-exist",
      "Entity-formalism"
    ],
    [
      "Entity-building_block",
      "Predicate-for_expressing",
      "Entity-shape_constraint"
    ],
    [
      "Entity-building_block",
      "Predicate-is",
      "Entity-sequence_of_predicate"
    ],
    [
      "Entity-shape_constraint",
      "Predicate-is",
      "Entity-sequence_of_predicate"
    ],
    [
      "Entity-closed_rule__cr_",
      "Predicate-is_used_for",
      "Entity-inferring_new_fact"
    ],
    [
      "Entity-functional_graph_dependency__fgd_",
      "Predicate-defines",
      "Entity-constraint"
    ],
    [
      "Entity-path_shape",
      "Predicate-focuses_on",
      "Entity-shape_learning_system"
    ],
    [
      "Entity-a_path",
      "Predicate-is",
      "Entity-a_sequence_of_predicate"
    ],
    [
      "Entity-a_sequence_of_predicate",
      "Predicate-connected_by",
      "Entity-closed_intermediate_variable"
    ],
    [
      "Entity-a_sequence_of_predicate",
      "Predicate-terminating_with",
      "Entity-open_variable"
    ],
    [
      "Entity-a_sequence_of_predicate",
      "Predicate-terminating_with",
      "Entity-intermediate_variable"
    ],
    [
      "Entity-shape_in_the_form_of_a_path",
      "Predicate-are_a_more_general_template_for",
      "Entity-more_complex_shape"
    ],
    [
      "Entity-more_complex_shape",
      "Predicate-include",
      "Entity-closed_rule"
    ],
    [
      "Entity-tree",
      "Predicate-are_also",
      "Entity-path"
    ],
    [
      "Entity-inverse_open_path_rule",
      "Predicate-induced_from",
      "Entity-path"
    ],
    [
      "Entity-inverse_open_path_rule",
      "Predicate-have_a_straightforward_interpretation_as",
      "Entity-shape"
    ],
    [
      "Entity-these_kind_of_shape",
      "Predicate-serve_as",
      "Entity-building_block"
    ],
    [
      "Entity-a_method",
      "Predicate-builds",
      "Entity-tree"
    ],
    [
      "Entity-such_tree",
      "Predicate-discuss_the_application_of",
      "Entity-kg_completion"
    ],
    [
      "Entity-such_tree",
      "Predicate-apply_to",
      "Entity-kg_completion"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-correspond_to",
      "Entity-shacl_shape"
    ],
    [
      "Entity-the_converse_of_op_rule",
      "Predicate-corresponds_to",
      "Entity-shacl_shape"
    ],
    [
      "Entity-the_shape_(1)",
      "Predicate-can_be_derived_from",
      "Entity-iop_rule"
    ],
    [
      "Entity-human__x__x__-__citizenof__x__z1___country__z1__z1_",
      "Predicate-is_derived_from",
      "Entity-iop_rule"
    ],
    [
      "Entity-human__x__x__-__father__x__z2___human__z2__z2_",
      "Predicate-is_derived_from",
      "Entity-iop_rule"
    ],
    [
      "Entity-human__x__x__-__nativelanguage__x__z3___language__z3__z3_",
      "Predicate-is_derived_from",
      "Entity-iop_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_derived_from",
      "Entity-human__x__x__-__citizenof__x__z1___country__z1__z1_"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_derived_from",
      "Entity-human__x__x__-__father__x__z2___human__z2__z2_"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_derived_from",
      "Entity-human__x__x__-__nativelanguage__x__z3___language__z3__z3_"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_given_by_(1)",
      "Entity-pt___x__z0__-__exists__z1__...__z__n-1___y__p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_"
    ],
    [
      "Entity-pt___x__z0_",
      "Predicate-leads_to",
      "Entity-exists__z1__...__z__n-1___y_"
    ],
    [
      "Entity-p1_",
      "Predicate-is_part_of",
      "Entity-p1___z0__z1_"
    ],
    [
      "Entity-p2_",
      "Predicate-is_part_of",
      "Entity-p2__z1__z2_"
    ],
    [
      "Entity-pn_",
      "Predicate-is_part_of",
      "Entity-pn___z__n-1___y_"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_given_by",
      "Entity-pt___x__z0__-__exists__z1__...__z__n-1___y__p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_"
    ],
    [
      "Entity-subject_and_object_binding",
      "Predicate-are_swapped",
      "Entity-subject_and_object_binding"
    ],
    [
      "Entity-free_variable",
      "Predicate-are",
      "Entity-universally_quantified"
    ],
    [
      "Entity-iop_rule",
      "Predicate-omit",
      "Entity-the_quantifier"
    ],
    [
      "Entity-iop_rule",
      "Predicate-has_body",
      "Entity-the_body_of_the_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-has_head",
      "Entity-the_sequence_of_predicate_p1__p2__...__pn"
    ],
    [
      "Entity-the_body_of_the_rule",
      "Predicate-is",
      "Entity-pt"
    ],
    [
      "Entity-iop_rule",
      "Predicate-has",
      "Entity-the_body_of_the_rule"
    ],
    [
      "Entity-atomic_body",
      "Predicate-instantiates",
      "Entity-an_instance_of_the_head"
    ],
    [
      "Entity-the_pattern_of_existential_variable_in_the_head_and_universal_variable_in_the_body",
      "Predicate-has_been_investigated_in",
      "Entity-the_literature"
    ],
    [
      "Entity-existential_variable",
      "Predicate-are_part_of",
      "Entity-existential_rule"
    ],
    [
      "Entity-universal_variable",
      "Predicate-are_part_of",
      "Entity-existential_rule"
    ],
    [
      "Entity-existential_variable",
      "Predicate-has_been_investigated_in",
      "Entity-the_literature"
    ],
    [
      "Entity-the_body_of_the_rule",
      "Predicate-is_instantiated_to_predict",
      "Entity-an_instance_of_the_head"
    ],
    [
      "Entity-the_head",
      "Predicate-is",
      "Entity-the_sequence_of_predicate_p1__p2__...__pn"
    ],
    [
      "Entity-iop_rule",
      "Predicate-assess_the_quality_of",
      "Entity-the_validity_of_iop_rule"
    ],
    [
      "Entity-quality_measure",
      "Predicate-similar_to_those_used_for",
      "Entity-op_rule"
    ],
    [
      "Entity-head_of_r",
      "Predicate-denoted_by",
      "Entity-head_r__e__e__"
    ],
    [
      "Entity-entity",
      "Predicate-satisfies",
      "Entity-the_body_of_r"
    ],
    [
      "Entity-the_body_of_r",
      "Predicate-is_a_fact_in",
      "Entity-kg"
    ],
    [
      "Entity-inverse_open_path_support",
      "Predicate-is_given_by",
      "Entity-r"
    ],
    [
      "Entity-inverse_open_path_standard_confidence",
      "Predicate-is_given_by",
      "Entity-r"
    ],
    [
      "Entity-inverse_open_path_head_coverage",
      "Predicate-is_given_by",
      "Entity-r"
    ],
    [
      "Entity-e",
      "Predicate-is_related_to",
      "Entity-e_"
    ],
    [
      "Entity-iopsupp",
      "Predicate-is_given_by",
      "Entity-head_r__e__e__"
    ],
    [
      "Entity-iop_rule",
      "Predicate-include",
      "Entity-op"
    ],
    [
      "Entity-iop_rule",
      "Predicate-include",
      "Entity-iop"
    ],
    [
      "Entity-open_path_in_a_kg",
      "Predicate-include",
      "Entity-op"
    ],
    [
      "Entity-open_path_in_a_kg",
      "Predicate-include",
      "Entity-iop"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_the_same_as",
      "Entity-opsc"
    ],
    [
      "Entity-open_path_in_a_kg",
      "Predicate-include",
      "Entity-relationship_between_op_and_iop_rule"
    ],
    [
      "Entity-relationship_between_op_and_iop_rule",
      "Predicate-mined_in",
      "Entity-one_process"
    ],
    [
      "Entity-relationship_between_op_and_iop_rule",
      "Predicate-helps",
      "Entity-mine_both_op_and_iop_rule"
    ],
    [
      "Entity-relationship_between_op_and_iop_rule",
      "Predicate-is_close",
      "Entity-this_close_relationship"
    ],
    [
      "Entity-op_rule",
      "Predicate-has_a_relationship_with",
      "Entity-it_converse_iop_version"
    ],
    [
      "Entity-the_relationship_between_an_op_rule_and_it_converse_iop_version",
      "Predicate-is_shown_in",
      "Entity-example"
    ],
    [
      "Entity-the_relationship_between_an_op_rule_and_it_converse_iop_version",
      "Predicate-shows",
      "Entity-op_rule"
    ],
    [
      "Entity-the_relationship_between_an_op_rule_and_it_converse_iop_version",
      "Predicate-shows",
      "Entity-it_converse_iop_version"
    ],
    [
      "Entity-p1",
      "Predicate-is_part_of",
      "Entity-op_rule_p1"
    ],
    [
      "Entity-p3",
      "Predicate-is_part_of",
      "Entity-op_rule_p1"
    ],
    [
      "Entity-op_rule_p1",
      "Predicate-instantiates",
      "Entity-z0"
    ],
    [
      "Entity-three_entity__e3__e4__e5_",
      "Predicate-instantiate",
      "Entity-z0"
    ],
    [
      "Entity-three_entity__e3__e4__e5_",
      "Predicate-satisfy",
      "Entity-p1__x__z0_"
    ],
    [
      "Entity-z0",
      "Predicate-related_to",
      "Entity-z1"
    ],
    [
      "Entity-z1",
      "Predicate-related_to",
      "Entity-z2"
    ],
    [
      "Entity-entity",
      "Predicate-instantiate",
      "Entity-z0"
    ],
    [
      "Entity-z0",
      "Predicate-can_be_instantiated_by",
      "Entity-5___e1__e2__e3__e4__e5__"
    ],
    [
      "Entity-z0",
      "Predicate-can_be_instantiated_by",
      "Entity-7___e2__e4__e5__e6__e7__e8__e9__"
    ],
    [
      "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part",
      "Predicate-is",
      "Entity-5___e1__e2__e3__e4__e5__"
    ],
    [
      "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part",
      "Predicate-is",
      "Entity-7___e2__e4__e5__e6__e7__e8__e9__"
    ],
    [
      "Entity-iop_version_of_the_same_rule",
      "Predicate-instantiates",
      "Entity-z0"
    ],
    [
      "Entity-the_same_entity",
      "Predicate-instantiates",
      "Entity-z0"
    ],
    [
      "Entity-p1__x__z0_",
      "Predicate-leads_to",
      "Entity-p2__z1__z2_"
    ],
    [
      "Entity-p2__z1__z2_",
      "Predicate-is_part_of",
      "Entity-p1__x__z0__-__p2__z0__z1___p3__z1__z2_"
    ],
    [
      "Entity-p3__z1__z2_",
      "Predicate-is_part_of",
      "Entity-p1__x__z0__-__p2__z0__z1___p3__z1__z2_"
    ],
    [
      "Entity-the_body_and_head_predicate",
      "Predicate-are",
      "Entity-swapped"
    ],
    [
      "Entity-rule",
      "Predicate-express",
      "Entity-number_of_different_chain"
    ],
    [
      "Entity-iop_rule",
      "Predicate-express",
      "Entity-number_of_different_chain"
    ],
    [
      "Entity-each_human",
      "Predicate-has",
      "Entity-at_least_two_parent"
    ],
    [
      "Entity-each_human",
      "Predicate-has",
      "Entity-two_parent"
    ],
    [
      "Entity-iop_rule",
      "Predicate-annotated_with",
      "Entity-car"
    ],
    [
      "Entity-iop_rule",
      "Predicate-giving",
      "Entity-cardinality_car"
    ],
    [
      "Entity-iop_rule",
      "Predicate-annotated_with",
      "Entity-cardinality_car"
    ],
    [
      "Entity-iopsc",
      "Predicate-denotes",
      "Entity-the_quality_of_the_rule"
    ],
    [
      "Entity-iophc",
      "Predicate-denotes",
      "Entity-the_quality_of_the_rule"
    ],
    [
      "Entity-annotated_iop_rule",
      "Predicate-is_of_the_form",
      "Entity-iop_rule"
    ],
    [
      "Entity-car__r_",
      "Predicate-is_the_cardinality_annotation_for",
      "Entity-r"
    ],
    [
      "Entity-iop_rule",
      "Predicate-satisfies",
      "Entity-car__r_"
    ],
    [
      "Entity-r",
      "Predicate-satisfies",
      "Entity-car__r_"
    ],
    [
      "Entity-entity_e_(1)",
      "Predicate-holds",
      "Entity-pt__e___e_"
    ],
    [
      "Entity-head_r__e__e__",
      "Predicate-is_at_least",
      "Entity-car__r_"
    ],
    [
      "Entity-the_number_of_distinct_instantiation_of_head_r__e__e__",
      "Predicate-is_at_least",
      "Entity-car__r_"
    ],
    [
      "Entity-entity",
      "Predicate-such_that",
      "Entity-pt__e___e_"
    ],
    [
      "Entity-head_path",
      "Predicate-are_satisfied_in",
      "Entity-the_kg"
    ],
    [
      "Entity-body",
      "Predicate-links_to",
      "Entity-head"
    ],
    [
      "Entity-rule_with_the_same_head_and_the_same_body",
      "Predicate-may_have",
      "Entity-different_cardinality"
    ],
    [
      "Entity-a_rule_(1)",
      "Predicate-may_have",
      "Entity-a_certain_cardinality_c1"
    ],
    [
      "Entity-a_larger_required_cardinality",
      "Predicate-places",
      "Entity-the_number_of_instance_of_the_head_in_the_kb"
    ],
    [
      "Entity-iopsc",
      "Predicate-is",
      "Entity-non-increasing_with_length"
    ],
    [
      "Entity-lemma_1",
      "Predicate-is_related_to",
      "Entity-length"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_of_the_form",
      "Entity-form__3_"
    ],
    [
      "Entity-r__(1)",
      "Predicate-is_the_same_rule_as",
      "Entity-iop_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-has",
      "Entity-n___2"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_shortened_by_removing",
      "Entity-the_last_head_predicate"
    ],
    [
      "Entity-iopsc__r_",
      "Predicate-_is_less_than_or_equal_to",
      "Entity-iopsc__r_"
    ],
    [
      "Entity-iopsc__r_",
      "Predicate-",
      "Entity-iopsc__r_"
    ],
    [
      "Entity-the_denominator_of_iopsc__r_",
      "Predicate-is_not_affected_by",
      "Entity-the_head_of_the_rule"
    ],
    [
      "Entity-the_numerator",
      "Predicate-can_only_decrease_when",
      "Entity-additional_head_predicate"
    ],
    [
      "Entity-this_lemma",
      "Predicate-is_useful_for",
      "Entity-rule_learning"
    ],
    [
      "Entity-rule",
      "Predicate-has_low",
      "Entity-iopsc"
    ],
    [
      "Entity-version_of_the_rule_extended_with_additional_head_atom",
      "Predicate-would_have_at_most_as_low",
      "Entity-iopsc"
    ],
    [
      "Entity-algorithm_1",
      "Predicate-uses",
      "Entity-shaclearner"
    ],
    [
      "Entity-kg_k",
      "Predicate-is",
      "Entity-a_kg_k"
    ],
    [
      "Entity-target_predicate_pt",
      "Predicate-is",
      "Entity-a_target_predicate_pt"
    ],
    [
      "Entity-the_iop_rule_r",
      "Predicate-outputs",
      "Entity-iop_rule"
    ],
    [
      "Entity-the_iop_rule_r",
      "Predicate-outputs",
      "Entity-tree"
    ],
    [
      "Entity-k_",
      "Predicate-is_assigned_by",
      "Entity-sampling__k__pt_"
    ],
    [
      "Entity-k_",
      "Predicate-is_obtained_by",
      "Entity-sampling__k__pt_"
    ],
    [
      "Entity-p",
      "Predicate-is_assigned_to",
      "Entity-_p__a____embeddings__k__"
    ],
    [
      "Entity-embeddings",
      "Predicate-is_a_function_of",
      "Entity-k_"
    ],
    [
      "Entity-_p__a____embeddings__k__",
      "Predicate-is_defined_as",
      "Entity-embeddings"
    ],
    [
      "Entity-p",
      "Predicate-is_obtained_by",
      "Entity-embeddings__k__"
    ],
    [
      "Entity-pathfinding",
      "Predicate-added_to",
      "Entity-r_"
    ],
    [
      "Entity-r_",
      "Predicate-is_updated_by",
      "Entity-add_pathfinding__k___pt__p__a__k__to_r_"
    ],
    [
      "Entity-r",
      "Predicate-is_assigned_to",
      "Entity-ev__r___k__mcar__miniopsc__miniophc_"
    ],
    [
      "Entity-r",
      "Predicate-is_obtained_by",
      "Entity-ev__r___k__mcar__miniopsc__miniophc_"
    ],
    [
      "Entity-tree",
      "Predicate-is_defined_as",
      "Entity-greedysearch__r__mintreesc_"
    ],
    [
      "Entity-tree",
      "Predicate-is_obtained_by",
      "Entity-greedysearch__r__mintreesc_"
    ],
    [
      "Entity-tree",
      "Predicate-returned_with",
      "Entity-r"
    ],
    [
      "Entity-algorithm_1",
      "Predicate-takes_input_from",
      "Entity-kg_k"
    ],
    [
      "Entity-algorithm_1",
      "Predicate-takes_input_from",
      "Entity-target_predicate_pt"
    ],
    [
      "Entity-algorithm_1",
      "Predicate-has_parameters",
      "Entity-max_rule_length"
    ],
    [
      "Entity-algorithm_1",
      "Predicate-has_parameters",
      "Entity-max_rule_cardinality_mcar"
    ],
    [
      "Entity-algorithm_1",
      "Predicate-has_parameters",
      "Entity-miniopsc"
    ],
    [
      "Entity-algorithm_1",
      "Predicate-has_parameters",
      "Entity-miniophc"
    ],
    [
      "Entity-algorithm_1",
      "Predicate-has_parameters",
      "Entity-mintreesc"
    ],
    [
      "Entity-iop_rule",
      "Predicate-satisfies",
      "Entity-head_r__e__e__"
    ],
    [
      "Entity-iop_rule",
      "Predicate-has",
      "Entity-different_cardinality"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is",
      "Entity-non-increasing_with_length"
    ],
    [
      "Entity-open_path_rule_learner__oprl_",
      "Predicate-adapts",
      "Entity-embedding-based_op_rule_learning"
    ],
    [
      "Entity-embedding-based_op_rule_learning",
      "Predicate-learns",
      "Entity-annotated_iop_rule"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-called",
      "Entity-shaclearner"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-shown_in",
      "Entity-algorithm_1"
    ],
    [
      "Entity-shaclearner",
      "Predicate-uses",
      "Entity-a_sampling_method_sampling"
    ],
    [
      "Entity-a_sampling_method_sampling",
      "Predicate-to_prune",
      "Entity-entity_and_predicate"
    ],
    [
      "Entity-entity_and_predicate",
      "Predicate-are_less_relevant_to",
      "Entity-target_predicate_(1)"
    ],
    [
      "Entity-shaclearner",
      "Predicate-obtains",
      "Entity-sampled_knowledge_graph"
    ],
    [
      "Entity-shaclearner",
      "Predicate-uses",
      "Entity-sampling"
    ],
    [
      "Entity-sampling",
      "Predicate-prunes",
      "Entity-entity_and_predicate"
    ],
    [
      "Entity-sample",
      "Predicate-is_fed_to",
      "Entity-embedding_learner"
    ],
    [
      "Entity-embedding_learner",
      "Predicate-is",
      "Entity-rescal"
    ],
    [
      "Entity-embedding_learner",
      "Predicate-in",
      "Entity-embeddings"
    ],
    [
      "Entity-sample",
      "Predicate-is_fed_to",
      "Entity-rescal"
    ],
    [
      "Entity-shaclearner",
      "Predicate-uses",
      "Entity-embeddings"
    ],
    [
      "Entity-potential_iop_rule",
      "Predicate-are_evaluated_in",
      "Entity-ev"
    ],
    [
      "Entity-potential_iop_rule",
      "Predicate-are_annotated_in",
      "Entity-ev"
    ],
    [
      "Entity-potential_iop_rule",
      "Predicate-are_filtered_in",
      "Entity-ev"
    ],
    [
      "Entity-ev",
      "Predicate-produces",
      "Entity-annotated_iop_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-aggregating_mined",
      "Entity-a_tree_(2)"
    ],
    [
      "Entity-a_tree_(2)",
      "Predicate-is_discovered_for",
      "Entity-each_argument"
    ],
    [
      "Entity-a_tree_(2)",
      "Predicate-is_discovered_for",
      "Entity-each_target_predicate"
    ],
    [
      "Entity-iop_rule",
      "Predicate-are_aggregated_in",
      "Entity-greedysearch"
    ],
    [
      "Entity-tree",
      "Predicate-is_discovered_for",
      "Entity-each_argument"
    ],
    [
      "Entity-shaclearner",
      "Predicate-adapts",
      "Entity-embedding-based_op_rule_learning"
    ],
    [
      "Entity-shaclearner",
      "Predicate-similar_to",
      "Entity-oprl"
    ],
    [
      "Entity-shaclearner",
      "Predicate-similar_to",
      "Entity-embedding-based_scoring_function"
    ],
    [
      "Entity-oprl",
      "Predicate-cannot_handle",
      "Entity-unary_predicate"
    ],
    [
      "Entity-shaclearner",
      "Predicate-admits",
      "Entity-unary_predicate"
    ],
    [
      "Entity-shaclearner",
      "Predicate-admits",
      "Entity-iop_rule"
    ],
    [
      "Entity-shaclearner",
      "Predicate-can_discover_and_evaluate",
      "Entity-iop_rule"
    ],
    [
      "Entity-oprl",
      "Predicate-is_limited_to_learning",
      "Entity-minimum_cardinality_1"
    ],
    [
      "Entity-oprl",
      "Predicate-is_limited_to_learning",
      "Entity-all_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-have",
      "Entity-minimum_cardinality_constraint"
    ],
    [
      "Entity-iop_rule",
      "Predicate-have",
      "Entity-the_head_of_the_iop_rule"
    ],
    [
      "Entity-shaclearner",
      "Predicate-is_limited_to_learning",
      "Entity-minimum_cardinality_1"
    ],
    [
      "Entity-evaluation_method_of_shaclearner",
      "Predicate-differs_from",
      "Entity-oprl_evaluation_module"
    ],
    [
      "Entity-shaclearner",
      "Predicate-differs_from",
      "Entity-oprl_evaluation_module"
    ],
    [
      "Entity-aggregation_module",
      "Predicate-produces",
      "Entity-tree"
    ],
    [
      "Entity-aggregation_module",
      "Predicate-is_novel_in",
      "Entity-shaclearner"
    ],
    [
      "Entity-tree",
      "Predicate-ready_for_translation_to",
      "Entity-shacl"
    ],
    [
      "Entity-shaclearner",
      "Predicate-produces",
      "Entity-tree"
    ],
    [
      "Entity-sampling__",
      "Predicate-computes",
      "Entity-fragment_of_the_kg_k_"
    ],
    [
      "Entity-fragment_of_the_kg_k_",
      "Predicate-consists_of",
      "Entity-bounded_number_of_entity"
    ],
    [
      "Entity-bounded_number_of_entity",
      "Predicate-is_related_to",
      "Entity-target_predicate_pt"
    ],
    [
      "Entity-this_sampling",
      "Predicate-is_essential_since",
      "Entity-embedding_learner"
    ],
    [
      "Entity-embedding_learner",
      "Predicate-cannot_handle",
      "Entity-massive_kg"
    ],
    [
      "Entity-massive_kg",
      "Predicate-contain",
      "Entity-million_of_entity"
    ],
    [
      "Entity-sampling__",
      "Predicate-shown_in",
      "Entity-algorithm_2"
    ],
    [
      "Entity-iop_rule",
      "Predicate-search_for",
      "Entity-l_atom"
    ],
    [
      "Entity-esample",
      "Predicate-contains",
      "Entity-information_needed_for_learning_such_rule"
    ],
    [
      "Entity-fact_set_k_",
      "Predicate-contains",
      "Entity-information_needed_for_learning_such_rule"
    ],
    [
      "Entity-predicate_less_relevant_to_the_target_predicate",
      "Predicate-are_pruned_in",
      "Entity-the_sampling_process"
    ],
    [
      "Entity-fact_about_those_predicate",
      "Predicate-remain_in",
      "Entity-k_"
    ],
    [
      "Entity-sampling__",
      "Predicate-is_essential_since",
      "Entity-embedding_learner"
    ],
    [
      "Entity-this_simple_approach",
      "Predicate-reduces",
      "Entity-the_size_of_the_problem"
    ],
    [
      "Entity-kg_k",
      "Predicate-has",
      "Entity-entity_e"
    ],
    [
      "Entity-kg_k",
      "Predicate-has",
      "Entity-fact_f"
    ],
    [
      "Entity-the_set_of_sampled_entity_for_a_target_predicate",
      "Predicate-will_be_of_size",
      "Entity-2lfe"
    ],
    [
      "Entity-the_set_of_sampled_entity_for_a_target_predicate",
      "Predicate-will_be_of_size",
      "Entity-size_2lfe"
    ],
    [
      "Entity-the_set_of_sampled_entity_for_a_target_predicate",
      "Predicate-will_be_in_the_worst_case",
      "Entity-worst_case"
    ],
    [
      "Entity-the_complexity_of_the_sampling_algorithm",
      "Predicate-is",
      "Entity-o__k_"
    ],
    [
      "Entity-sampling_algorithm",
      "Predicate-is",
      "Entity-o__k_"
    ],
    [
      "Entity-sampled_kg",
      "Predicate-is_the_same_as",
      "Entity-original_kg"
    ],
    [
      "Entity-real-world_kg",
      "Predicate-are",
      "Entity-sparse"
    ],
    [
      "Entity-entity",
      "Predicate-associated_with",
      "Entity-any_predicate"
    ],
    [
      "Entity-entity",
      "Predicate-associated_with",
      "Entity-only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l"
    ],
    [
      "Entity-sampled_kg",
      "Predicate-is_far_smaller_than",
      "Entity-original_kg"
    ],
    [
      "Entity-kg_k_",
      "Predicate-has",
      "Entity-target_predicate_pt"
    ],
    [
      "Entity-max_rule_length",
      "Predicate-is",
      "Entity-max_rule_length"
    ],
    [
      "Entity-k_",
      "Predicate-is_a_subgraph_of",
      "Entity-the_input_graph"
    ],
    [
      "Entity-input_graph",
      "Predicate-is",
      "Entity-the_input_graph"
    ],
    [
      "Entity-e1",
      "Predicate-is_defined_as",
      "Entity-pt__e__e___or_pt__e___e_"
    ],
    [
      "Entity-e1",
      "Predicate-contains",
      "Entity-e"
    ],
    [
      "Entity-ek",
      "Predicate-is_defined_as",
      "Entity-pi__e__e___or_pi__e___e_"
    ],
    [
      "Entity-e",
      "Predicate-exists_in",
      "Entity-e__k-1_"
    ],
    [
      "Entity-e_",
      "Predicate-exists_in",
      "Entity-e__k-1_"
    ],
    [
      "Entity-ek",
      "Predicate-is_derived_from",
      "Entity-e__k-1_"
    ],
    [
      "Entity-esample",
      "Predicate-is",
      "Entity-union__from_i1_to_l__of_ei"
    ],
    [
      "Entity-esample",
      "Predicate-is_the_union_of",
      "Entity-ei"
    ],
    [
      "Entity-algorithm_2",
      "Predicate-samples",
      "Entity-kg_k_"
    ],
    [
      "Entity-predicate",
      "Predicate-computed_as",
      "Entity-predicate_embeddings"
    ],
    [
      "Entity-predicate",
      "Predicate-computed_as",
      "Entity-subject_and_object_argument_embeddings"
    ],
    [
      "Entity-k_",
      "Predicate-contains",
      "Entity-all_predicate_in_the_sampled_k_"
    ],
    [
      "Entity-embedding",
      "Predicate-obtained_from",
      "Entity-rescal"
    ],
    [
      "Entity-rescal",
      "Predicate-can_provide",
      "Entity-an_extensive_representation_of_predicate_and_entity"
    ],
    [
      "Entity-an_extensive_representation_of_predicate_and_entity",
      "Predicate-shown_in",
      "Entity-previous_heuristic_rule_learner"
    ],
    [
      "Entity-rescal",
      "Predicate-provides",
      "Entity-an_extensive_representation_of_predicate_and_entity"
    ],
    [
      "Entity-rescal",
      "Predicate-embeds",
      "Entity-each_entity_e_i"
    ],
    [
      "Entity-each_entity_e_i",
      "Predicate-to_a_vector",
      "Entity-entity_e_i"
    ],
    [
      "Entity-predicate_p_k",
      "Predicate-to_a_matrix",
      "Entity-predicate_p_k"
    ],
    [
      "Entity-entity_e_i",
      "Predicate-in",
      "Entity-rd"
    ],
    [
      "Entity-each_entity_e_i",
      "Predicate-is_embedded_to",
      "Entity-vector_e_i"
    ],
    [
      "Entity-predicate_p_k",
      "Predicate-is_embedded_to",
      "Entity-matrix_p_k"
    ],
    [
      "Entity-fact",
      "Predicate-is_represented_by",
      "Entity-fact_p0__e1__e2_"
    ],
    [
      "Entity-scoring_function",
      "Predicate-is_computed_for",
      "Entity-fact_p0__e1__e2_"
    ],
    [
      "Entity-fact_p0__e1__e2_",
      "Predicate-is_computed_by",
      "Entity-scoring_function"
    ],
    [
      "Entity-the_scoring_function",
      "Predicate-indicates",
      "Entity-plausibility_of_the_fact"
    ],
    [
      "Entity-e1",
      "Predicate-has_relation",
      "Entity-relation_p0"
    ],
    [
      "Entity-e2",
      "Predicate-has_relation",
      "Entity-relation_p0"
    ],
    [
      "Entity-scoring_function",
      "Predicate-indicates",
      "Entity-plausibility_of_the_fact"
    ],
    [
      "Entity-embeddings__",
      "Predicate-compute",
      "Entity-subject_and_object_argument_embeddings"
    ],
    [
      "Entity-entity",
      "Predicate-occur_as_the_subject_of",
      "Entity-predicate_p_k"
    ],
    [
      "Entity-entity",
      "Predicate-occur_as_the_object_of",
      "Entity-predicate_p_k"
    ],
    [
      "Entity-predicate_p_k",
      "Predicate-has",
      "Entity-two_vector"
    ],
    [
      "Entity-two_vector",
      "Predicate-represent",
      "Entity-subject_argument"
    ],
    [
      "Entity-two_vector",
      "Predicate-represent",
      "Entity-object_argument"
    ],
    [
      "Entity-predicate_p_k",
      "Predicate-represent",
      "Entity-subject_argument"
    ],
    [
      "Entity-predicate_p_k",
      "Predicate-represent",
      "Entity-object_argument"
    ],
    [
      "Entity-predicate_p_k",
      "Predicate-has",
      "Entity-subject_argument"
    ],
    [
      "Entity-predicate_p_k",
      "Predicate-has",
      "Entity-object_argument"
    ],
    [
      "Entity-predicate_p_k",
      "Predicate-represent",
      "Entity-p1_k"
    ],
    [
      "Entity-entity",
      "Predicate-occur_as",
      "Entity-subject_argument"
    ],
    [
      "Entity-entity",
      "Predicate-occur_as",
      "Entity-object_argument"
    ],
    [
      "Entity-pathfinding__",
      "Predicate-produces",
      "Entity-candidate_iop_rule"
    ],
    [
      "Entity-candidate_iop_rule",
      "Predicate-based_on",
      "Entity-embedding_representation_of_the_predicate"
    ],
    [
      "Entity-candidate_rule",
      "Predicate-are_pruned_in",
      "Entity-scoring_function_heuristic_for_op_rule"
    ],
    [
      "Entity-high-scoring_candidate_op_rule",
      "Predicate-suggests",
      "Entity-good_op_rule"
    ],
    [
      "Entity-high-scoring_candidate_op_rule",
      "Predicate-suggests",
      "Entity-good_iop_rule"
    ],
    [
      "Entity-op_rule",
      "Predicate-have_a_close_relationship_with",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-acts_to_connect",
      "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt"
    ],
    [
      "Entity-iop_rule",
      "Predicate-acts_to_connect",
      "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2"
    ],
    [
      "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt",
      "Predicate-connects_to",
      "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2"
    ],
    [
      "Entity-iop_rule_pt__x__y__-__p1__y__z___p2__z__t_",
      "Predicate-satisfies",
      "Entity-chain_of_predicate"
    ],
    [
      "Entity-the_logical_statement_of_the_rule",
      "Predicate-has_a_relationship_with",
      "Entity-certain_property_in_the_embedding_space"
    ],
    [
      "Entity-relationship",
      "Predicate-exists_between",
      "Entity-the_logical_statement_of_the_rule"
    ],
    [
      "Entity-relationship",
      "Predicate-exists_between",
      "Entity-certain_property_in_the_embedding_space"
    ],
    [
      "Entity-iop_rule_pt__x__y__-__p1__y__z___p2__z__t_",
      "Predicate-has_a_relationship_with",
      "Entity-certain_property_in_the_embedding_space"
    ],
    [
      "Entity-the_predicate_argument",
      "Predicate-have",
      "Entity-the_same_variable_in_the_rule"
    ],
    [
      "Entity-the_predicate_argument",
      "Predicate-have",
      "Entity-similar_argument_embeddings"
    ],
    [
      "Entity-p2_t",
      "Predicate-has_similarity_with",
      "Entity-p1_1"
    ],
    [
      "Entity-p2_t",
      "Predicate-has_similarity_with",
      "Entity-p2_t"
    ],
    [
      "Entity-p2_t",
      "Predicate-similar_to",
      "Entity-p1_1"
    ],
    [
      "Entity-p2_t",
      "Predicate-similar_to",
      "Entity-p2_t"
    ],
    [
      "Entity-the_whole_path",
      "Predicate-forms",
      "Entity-composite_predicate"
    ],
    [
      "Entity-composite_predicate",
      "Predicate-is_represented_by",
      "Entity-p___x__t_"
    ],
    [
      "Entity-p___x__t_",
      "Predicate-is_computed_from",
      "Entity-pt__x__y_"
    ],
    [
      "Entity-p___x__t_",
      "Predicate-is_computed_from",
      "Entity-p1__y__z_"
    ],
    [
      "Entity-p___x__t_",
      "Predicate-is_computed_from",
      "Entity-p2__z__t_"
    ],
    [
      "Entity-p_",
      "Predicate-based_on",
      "Entity-it_component"
    ],
    [
      "Entity-embeddings",
      "Predicate-is_of",
      "Entity-composite_predicate"
    ],
    [
      "Entity-p___x__t_",
      "Predicate-is_computed_based_on",
      "Entity-it_component"
    ],
    [
      "Entity-p___x__t_",
      "Predicate-based_on",
      "Entity-it_component"
    ],
    [
      "Entity-p___x__t_",
      "Predicate-checked_for",
      "Entity-pair_of_entity_(1)"
    ],
    [
      "Entity-scoring_function",
      "Predicate-used_for",
      "Entity-pair_of_entity_(1)"
    ],
    [
      "Entity-entity",
      "Predicate-are_used_in_(1)",
      "Entity-scoring_function"
    ],
    [
      "Entity-pair_of_entity_(1)",
      "Predicate-is_checked_using",
      "Entity-scoring_function"
    ],
    [
      "Entity-similarity",
      "Predicate-will_hold_for",
      "Entity-entity-free_rule"
    ],
    [
      "Entity-p1_t",
      "Predicate-similar_to",
      "Entity-p___x__t_"
    ],
    [
      "Entity-two_scoring_function",
      "Predicate-are_defined_to_help",
      "Entity-iop_rule"
    ],
    [
      "Entity-two_scoring_function",
      "Predicate-producing",
      "Entity-candidate_iop_rule"
    ],
    [
      "Entity-two_scoring_function",
      "Predicate-are_defined_to_help",
      "Entity-candidate_iop_rule"
    ],
    [
      "Entity-the_ultimate_evaluation",
      "Predicate-will_be_done_in",
      "Entity-the_next_step"
    ],
    [
      "Entity-ultimate_evaluation_of_an_iop_rule",
      "Predicate-will_be_done_in",
      "Entity-the_next_step"
    ],
    [
      "Entity-iop_rule",
      "Predicate-will_be_done_in",
      "Entity-the_next_step"
    ],
    [
      "Entity-candidate_iop_rule",
      "Predicate-are_pruned_in",
      "Entity-scoring_function_heuristic"
    ],
    [
      "Entity-shaclearner",
      "Predicate-novel_for",
      "Entity-quality_measure"
    ],
    [
      "Entity-matrix-computation",
      "Predicate-of",
      "Entity-quality_measure"
    ],
    [
      "Entity-matrix-computation_of_the_quality_measure",
      "Predicate-focuses_on",
      "Entity-quality_measure"
    ],
    [
      "Entity-shaclearner",
      "Predicate-focuses_on",
      "Entity-matrix-computation_of_the_quality_measure"
    ],
    [
      "Entity-ev__",
      "Predicate-evaluates",
      "Entity-candidate_rule"
    ],
    [
      "Entity-ev__",
      "Predicate-selects",
      "Entity-rule"
    ],
    [
      "Entity-rule",
      "Predicate-with",
      "Entity-iopsupp"
    ],
    [
      "Entity-iopsupp",
      "Predicate-greater_than_or_equal_to",
      "Entity-1"
    ],
    [
      "Entity-candidate_rule",
      "Predicate-on",
      "Entity-small_sampled_kg"
    ],
    [
      "Entity-candidate_rule",
      "Predicate-are_selected_based_on",
      "Entity-iopsupp"
    ],
    [
      "Entity-redundant_and_low_quality_rule",
      "Predicate-are_downselected_based_on",
      "Entity-iopsc"
    ],
    [
      "Entity-redundant_and_low_quality_rule",
      "Predicate-are_downselected_based_on",
      "Entity-iophc"
    ],
    [
      "Entity-redundant_and_low_quality_rule",
      "Predicate-are_downselected_based_on",
      "Entity-the_full_kg"
    ],
    [
      "Entity-rule",
      "Predicate-may_include",
      "Entity-redundant_and_low_quality_rule"
    ],
    [
      "Entity-massive_kg",
      "Predicate-compute_measures_over",
      "Entity-the_kg"
    ],
    [
      "Entity-adjacency_matrix_representation_of_the_kg",
      "Predicate-uses",
      "Entity-adjacency_matrix"
    ],
    [
      "Entity-these_measure",
      "Predicate-computed_over",
      "Entity-massive_kg"
    ],
    [
      "Entity-measure",
      "Predicate-computed_over",
      "Entity-massive_kg"
    ],
    [
      "Entity-the_kg",
      "Predicate-is_represented_by",
      "Entity-adjacency_matrix_representation_of_the_kg"
    ],
    [
      "Entity-k",
      "Predicate-is_defined_as",
      "Entity-_e__f_"
    ],
    [
      "Entity-k",
      "Predicate-is_represented_by",
      "Entity-square_n_x_n_adjacency_matrix"
    ],
    [
      "Entity-square_n_x_n_adjacency_matrix",
      "Predicate-is_defined_by",
      "Entity-function_a"
    ],
    [
      "Entity-the__i__j__-th_element_a__pk___i__j_",
      "Predicate-is",
      "Entity-1"
    ],
    [
      "Entity-the__i__j__-th_element_a__pk___i__j_",
      "Predicate-is",
      "Entity-0"
    ],
    [
      "Entity-fact_pk__ei__ej_",
      "Predicate-is_in",
      "Entity-f"
    ],
    [
      "Entity-set__a__pk___k_in_1_.._m_",
      "Predicate-represent",
      "Entity-k"
    ],
    [
      "Entity-a__pk_",
      "Predicate-is",
      "Entity-a_matrix_of_binary_value"
    ],
    [
      "Entity-iopsc",
      "Predicate-illustrates_the_computation_of",
      "Entity-an_example"
    ],
    [
      "Entity-iophc",
      "Predicate-illustrates_the_computation_of",
      "Entity-an_example"
    ],
    [
      "Entity-iopsc",
      "Predicate-illustrates_the_computation_of",
      "Entity-iophc"
    ],
    [
      "Entity-pt",
      "Predicate-leads_to",
      "Entity-p1"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_represented_by",
      "Entity-pt___x__z0_"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_represented_by",
      "Entity-p1__x__z0_"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_represented_by",
      "Entity-p2__z1__z2_"
    ],
    [
      "Entity-e",
      "Predicate-is_defined_as",
      "Entity-e___e1__e2__e3_"
    ],
    [
      "Entity-f",
      "Predicate-is_defined_as_(1)",
      "Entity-f___p1__e1__e2___p1__e2__e1___p1__e2__e3___p1__e3__e1___p2__e1__e2___p2__e3__e2___p2__e3__e3___p1__e1__e3___pt__e3__e2___pt__e3__e3__"
    ],
    [
      "Entity-e",
      "Predicate-contains",
      "Entity-e1__e2__e3"
    ],
    [
      "Entity-the_adjacency_matrix",
      "Predicate-are_for",
      "Entity-predicate_p1__p2__and_pt"
    ],
    [
      "Entity-the_adjacency_matrix",
      "Predicate-are_for",
      "Entity-predicate"
    ],
    [
      "Entity-a__p1_",
      "Predicate-",
      "Entity-_0_1_0__1_0_1__0_0_0_"
    ],
    [
      "Entity-a__p1_",
      "Predicate-is",
      "Entity-_0_1_0__1_0_1__0_0_0_"
    ],
    [
      "Entity-a__pt_",
      "Predicate-is",
      "Entity-_0_1_0__1_0_1__0_0_0_"
    ],
    [
      "Entity-the_number_of_entity_that_satisfy_the_body_of_the_rule",
      "Predicate-is",
      "Entity-the_count_of_e_"
    ],
    [
      "Entity-pt",
      "Predicate-relates_to",
      "Entity-e_"
    ],
    [
      "Entity-the_number_of_entity_that_satisfy_the_head_of_the_rule",
      "Predicate-is",
      "Entity-the_count_of_e_"
    ],
    [
      "Entity-entity",
      "Predicate-satisfy",
      "Entity-the_head_of_the_rule_(1)"
    ],
    [
      "Entity-entity",
      "Predicate-join",
      "Entity-the_head_of_the_rule_(1)"
    ],
    [
      "Entity-head_r__e__e__",
      "Predicate-relates_to",
      "Entity-e_"
    ],
    [
      "Entity-the_number_of_entity_that_join_the_head_of_the_rule_to_it_body",
      "Predicate-is",
      "Entity-the_count_of_e_"
    ],
    [
      "Entity-entity",
      "Predicate-join",
      "Entity-it_body"
    ],
    [
      "Entity-a__pt_",
      "Predicate-contains",
      "Entity-the_pair__e___e_"
    ],
    [
      "Entity-a__pt_",
      "Predicate-contains",
      "Entity-pair__e___e_"
    ],
    [
      "Entity-each_column",
      "Predicate-sum_to_obtain",
      "Entity-vector_v2__pt_"
    ],
    [
      "Entity-vector_v2__pt_",
      "Predicate-is",
      "Entity-vector_v2__pt_"
    ],
    [
      "Entity-each_column",
      "Predicate-is_summed_to_obtain",
      "Entity-vector_v2__pt_"
    ],
    [
      "Entity-count",
      "Predicate-is_the_count_of",
      "Entity-non-zero_element"
    ],
    [
      "Entity-a__pt_",
      "Predicate-has",
      "Entity-a__pt___1__3_"
    ],
    [
      "Entity-vector_v2__pt_",
      "Predicate-equals",
      "Entity-v2__pt____0_1_2__t"
    ],
    [
      "Entity-_e2__e3_",
      "Predicate-satisfies",
      "Entity-the_head_(1)"
    ],
    [
      "Entity-count",
      "Predicate-is",
      "Entity-count_2"
    ],
    [
      "Entity-e2",
      "Predicate-satisfies",
      "Entity-the_head_(1)"
    ],
    [
      "Entity-e3",
      "Predicate-satisfies",
      "Entity-the_head_(1)"
    ],
    [
      "Entity-a__pt_",
      "Predicate-has",
      "Entity-non-zero_element"
    ],
    [
      "Entity-pair__e___e_",
      "Predicate-satisfying",
      "Entity-the_head_(1)"
    ],
    [
      "Entity-pair__e___e_",
      "Predicate-connected_by",
      "Entity-the_path_p1__p2__...__pm"
    ],
    [
      "Entity-element_with_a_value___car",
      "Predicate-obtained_from",
      "Entity-the_matrix_product_a__p1___a__p2___...__a__pm_"
    ],
    [
      "Entity-rule_with_cardinality_car",
      "Predicate-taking",
      "Entity-element_with_a_value___car"
    ],
    [
      "Entity-this_product",
      "Predicate-is_summed_to_obtain",
      "Entity-v1__a__p1___a__p2___...__a__pm__"
    ],
    [
      "Entity-each_row_of_this_product",
      "Predicate-is_summed_to_obtain",
      "Entity-v1__a__p1___a__p2___...__a__pm__"
    ],
    [
      "Entity-element_with_a_value___car",
      "Predicate-indicates",
      "Entity-a_satisfying_e"
    ],
    [
      "Entity-the_count_of_distinct_e_s",
      "Predicate-is",
      "Entity-the_count_of_non-zero_element_in_that_vector"
    ],
    [
      "Entity-a__p1___a__p2_",
      "Predicate-equals",
      "Entity-__000____021____100__"
    ],
    [
      "Entity-v1__p1__p2_",
      "Predicate-equals",
      "Entity-_031_"
    ],
    [
      "Entity-car1",
      "Predicate-has",
      "Entity-satisfying_entity_e2_and_e3"
    ],
    [
      "Entity-satisfying_entity_e2_and_e3",
      "Predicate-has",
      "Entity-count"
    ],
    [
      "Entity-satisfying_entity_e2_and_e3",
      "Predicate-has",
      "Entity-count_2"
    ],
    [
      "Entity-satisfying_entity",
      "Predicate-include",
      "Entity-e2"
    ],
    [
      "Entity-satisfying_entity",
      "Predicate-include",
      "Entity-e3"
    ],
    [
      "Entity-car2_(1)",
      "Predicate-results_in",
      "Entity-the_count"
    ],
    [
      "Entity-the_count",
      "Predicate-is",
      "Entity-1"
    ],
    [
      "Entity-the_matrix_product_a__p1___a__p2___...__a__pm_",
      "Predicate-obtained_from",
      "Entity-the_path_p1__p2__...__pm"
    ],
    [
      "Entity-vector_v2__pt_",
      "Predicate-indicates",
      "Entity-entity_that_satisfy_the_second_argument_of_the_body"
    ],
    [
      "Entity-v1__a__p1___a__p2___...__a__pm__",
      "Predicate-indicates",
      "Entity-entity_that_satisfy_the_first_argument_of_the_head"
    ],
    [
      "Entity-non-zero_element_of_v2__pt_",
      "Predicate-indicates",
      "Entity-entity_that_satisfy_the_second_argument_of_the_body"
    ],
    [
      "Entity-element_with_value___car_of_v1__a__p1___a__p2___...__a__pm__",
      "Predicate-indicates",
      "Entity-entity_that_satisfy_the_first_argument_of_the_head"
    ],
    [
      "Entity-pairwise_multiplication",
      "Predicate-of",
      "Entity-those_vector"
    ],
    [
      "Entity-car1",
      "Predicate-results_in",
      "Entity-the_set_of_such_entity"
    ],
    [
      "Entity-the_set_of_such_entity",
      "Predicate-contains",
      "Entity-_e2__e3__(1)"
    ],
    [
      "Entity-the_set_of_such_entity",
      "Predicate-has",
      "Entity-count_2"
    ],
    [
      "Entity-the_set_of_such_entity",
      "Predicate-is_represented_by",
      "Entity-_e2__e3__(1)"
    ],
    [
      "Entity-the_set_of_such_entity",
      "Predicate-is",
      "Entity-_e2__e3__(1)"
    ],
    [
      "Entity-car2_(1)",
      "Predicate-results_in",
      "Entity-the_set"
    ],
    [
      "Entity-the_set",
      "Predicate-contains",
      "Entity-e2"
    ],
    [
      "Entity-the_set",
      "Predicate-has",
      "Entity-count_1"
    ],
    [
      "Entity-the_set",
      "Predicate-is",
      "Entity-_e2_"
    ],
    [
      "Entity-r",
      "Predicate-has",
      "Entity-three_version_of_r"
    ],
    [
      "Entity-car",
      "Predicate-has",
      "Entity-three_different_car_value_1__2__and_3"
    ],
    [
      "Entity-car",
      "Predicate-has_versions",
      "Entity-three_version_of_r"
    ],
    [
      "Entity-car",
      "Predicate-has_values",
      "Entity-car_value_1__2__and_3"
    ],
    [
      "Entity-r",
      "Predicate-is_represented_by",
      "Entity-r1"
    ],
    [
      "Entity-r",
      "Predicate-is_represented_by",
      "Entity-r2"
    ],
    [
      "Entity-r",
      "Predicate-is_represented_by",
      "Entity-r3"
    ],
    [
      "Entity-iopsupp__r1_",
      "Predicate-equals",
      "Entity-__e2__e3__"
    ],
    [
      "Entity-__e2__e3__",
      "Predicate-equals",
      "Entity-2_(1)"
    ],
    [
      "Entity-iopsupp__r1_",
      "Predicate-is_equal_to",
      "Entity-__e2__e3__"
    ],
    [
      "Entity-iopsupp",
      "Predicate-calculates_for",
      "Entity-r1"
    ],
    [
      "Entity-iophc__r1_",
      "Predicate-equals",
      "Entity-22"
    ],
    [
      "Entity-iopsc__r1_",
      "Predicate-equals",
      "Entity-22"
    ],
    [
      "Entity-iophc__r1_",
      "Predicate-is_calculated_as",
      "Entity-22"
    ],
    [
      "Entity-iophc",
      "Predicate-calculates_for",
      "Entity-r1"
    ],
    [
      "Entity-iopsc",
      "Predicate-calculates_for",
      "Entity-r1"
    ],
    [
      "Entity-iopsupp",
      "Predicate-is_equal_to",
      "Entity-_e2_"
    ],
    [
      "Entity-iopsupp__r1_",
      "Predicate-is_equal_to",
      "Entity-_e2_"
    ],
    [
      "Entity-iopsupp",
      "Predicate-calculates_for",
      "Entity-r2"
    ],
    [
      "Entity-iopsupp__r1_",
      "Predicate-equals",
      "Entity-_e2_"
    ],
    [
      "Entity-iophc",
      "Predicate-calculates_for",
      "Entity-r2"
    ],
    [
      "Entity-iopsc",
      "Predicate-calculates_for",
      "Entity-r2"
    ],
    [
      "Entity-car3",
      "Predicate-has_the_same_values_as",
      "Entity-car2"
    ],
    [
      "Entity-car",
      "Predicate-has_the_same_values_as",
      "Entity-car2_(1)"
    ],
    [
      "Entity-iopsupp",
      "Predicate-is_calculated_over",
      "Entity-the_full_kg"
    ],
    [
      "Entity-the_full_kg",
      "Predicate-is_represented_by",
      "Entity-adjacency_matrix"
    ],
    [
      "Entity-the_iop_rule_r",
      "Predicate-is_illustrated_through",
      "Entity-an_example"
    ],
    [
      "Entity-the_count_of_e_",
      "Predicate-is_determined_by",
      "Entity-a__pt_"
    ],
    [
      "Entity-the_matrix_product_a__p1___a__p2___...__a__pm_",
      "Predicate-is_used_to_find",
      "Entity-satisfying_entity"
    ],
    [
      "Entity-satisfying_entity",
      "Predicate-are_counted_as",
      "Entity-distinct_e_s"
    ],
    [
      "Entity-algorithm_1",
      "Predicate-derives",
      "Entity-shacl_tree"
    ],
    [
      "Entity-annotated_iop_rule_(1)",
      "Predicate-illustrated_in",
      "Entity-fig_._3"
    ],
    [
      "Entity-shacl_tree",
      "Predicate-derived_from",
      "Entity-annotated_iop_rule_(1)"
    ],
    [
      "Entity-this_procedure",
      "Predicate-is_used_in",
      "Entity-shaclearner"
    ],
    [
      "Entity-greedy_search",
      "Predicate-use",
      "Entity-iop_rule"
    ],
    [
      "Entity-greedy_search",
      "Predicate-aggregate",
      "Entity-the_subject_argument"
    ],
    [
      "Entity-greedy_search",
      "Predicate-aggregate",
      "Entity-the_object_argument"
    ],
    [
      "Entity-iop_rule",
      "Predicate-for",
      "Entity-each_target_predicate"
    ],
    [
      "Entity-the_subject_argument",
      "Predicate-binds",
      "Entity-each_target_predicate"
    ],
    [
      "Entity-greedy_search",
      "Predicate-aggregates",
      "Entity-iop_rule"
    ],
    [
      "Entity-the_subject_argument",
      "Predicate-is_for",
      "Entity-each_target_predicate"
    ],
    [
      "Entity-the_object_argument",
      "Predicate-is_for",
      "Entity-each_target_predicate"
    ],
    [
      "Entity-human__x__x_",
      "Predicate-leads_to",
      "Entity-citizenof__x__z1_"
    ],
    [
      "Entity-human__x__x_",
      "Predicate-leads_to",
      "Entity-country__z1__z1_"
    ],
    [
      "Entity-human__x__x_",
      "Predicate-leads_to",
      "Entity-father__x__z2_"
    ],
    [
      "Entity-human__x__x_",
      "Predicate-leads_to",
      "Entity-human__z2__z2_"
    ],
    [
      "Entity-human__x__x_",
      "Predicate-leads_to",
      "Entity-nativelanguage__x__z3_"
    ],
    [
      "Entity-human__x__x_",
      "Predicate-leads_to",
      "Entity-language__z3__z3_"
    ],
    [
      "Entity-fig_._2",
      "Predicate-has_the_following_tree",
      "Entity-human__x__x__-__citizenof__x__z1___country__z1__z1___father__x__z2___human__z2__z2___nativelanguage__x__z3___language__z3__z3_"
    ],
    [
      "Entity-tree",
      "Predicate-is_given_by",
      "Entity-pt__x__z0_"
    ],
    [
      "Entity-free_variable",
      "Predicate-are_quantified_at",
      "Entity-the_outside"
    ],
    [
      "Entity-shape",
      "Predicate-is_represented_by",
      "Entity-pt"
    ],
    [
      "Entity-shape",
      "Predicate-has_body",
      "Entity-the_body_of_the_shape"
    ],
    [
      "Entity-shape",
      "Predicate-has_a_head",
      "Entity-it_head"
    ],
    [
      "Entity-head",
      "Predicate-is",
      "Entity-sequence_of_path_or_branch"
    ],
    [
      "Entity-body",
      "Predicate-is",
      "Entity-pt"
    ],
    [
      "Entity-head",
      "Predicate-is_represented_by",
      "Entity-path1__path2__...__pathq"
    ],
    [
      "Entity-tree",
      "Predicate-has",
      "Entity-the_body_of_the_shape"
    ],
    [
      "Entity-the_body_of_the_shape",
      "Predicate-is",
      "Entity-pt"
    ],
    [
      "Entity-sequence_of_path_or_branch",
      "Predicate-includes",
      "Entity-path1__path2__...__pathq"
    ],
    [
      "Entity-the_atomic_body",
      "Predicate-instantiates",
      "Entity-an_instance_of_the_head_(1)"
    ],
    [
      "Entity-the_atomic_body",
      "Predicate-predicts",
      "Entity-an_instance_of_the_head_(1)"
    ],
    [
      "Entity-head_branch",
      "Predicate-join_in",
      "Entity-one_shared_variable"
    ],
    [
      "Entity-the_body_(1)",
      "Predicate-join_in",
      "Entity-one_shared_variable"
    ],
    [
      "Entity-the_quality_of_a_tree",
      "Predicate-assessed_by",
      "Entity-quality_measure_for_iop_rule"
    ],
    [
      "Entity-the_body_of_the_shape",
      "Predicate-is_instantiated_to_predict",
      "Entity-an_instance_of_the_head_(1)"
    ],
    [
      "Entity-the_head",
      "Predicate-is",
      "Entity-sequence_of_path_or_branch"
    ],
    [
      "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_",
      "Predicate-satisfies",
      "Entity-the_head_of_r"
    ],
    [
      "Entity-sequence_of_entity",
      "Predicate-exist_in",
      "Entity-kg"
    ],
    [
      "Entity-p1__e__e1___p2__e1__e2___...__pt__e__q-1____eq_",
      "Predicate-are_facts_in",
      "Entity-kg"
    ],
    [
      "Entity-pair_of_entity",
      "Predicate-satisfies",
      "Entity-the_body_of_r_(1)"
    ],
    [
      "Entity-r",
      "Predicate-is_given_by",
      "Entity-treesupp"
    ],
    [
      "Entity-r",
      "Predicate-is_given_by",
      "Entity-treesc__r_"
    ],
    [
      "Entity-treesupp",
      "Predicate-is_calculated_as",
      "Entity-__e__there_exists_e__such_that_headr__e__and_pt__e___e___"
    ],
    [
      "Entity-treesc__r_",
      "Predicate-is_given_by",
      "Entity-treesupp"
    ],
    [
      "Entity-treesupp",
      "Predicate-is_given_by_(1)",
      "Entity-the_head_of_r"
    ],
    [
      "Entity-each_tree",
      "Predicate-employs",
      "Entity-a_greedy_search"
    ],
    [
      "Entity-greedysearch",
      "Predicate-is_in",
      "Entity-line_8_of_algorithm_1"
    ],
    [
      "Entity-greedy_search",
      "Predicate-employs",
      "Entity-each_tree"
    ],
    [
      "Entity-all_rule_that_bind_the_subject_argument",
      "Predicate-sort",
      "Entity-the_subject_argument"
    ],
    [
      "Entity-left-hand_tree",
      "Predicate-is",
      "Entity-the_subject_argument"
    ],
    [
      "Entity-rule",
      "Predicate-binds",
      "Entity-subject_argument"
    ],
    [
      "Entity-the_first_rule_in_the_list",
      "Predicate-added_to",
      "Entity-the_tree"
    ],
    [
      "Entity-the_tree",
      "Predicate-computes",
      "Entity-treesc"
    ],
    [
      "Entity-treesc",
      "Predicate-drops_below",
      "Entity-the_defined_threshold__treescmin_"
    ],
    [
      "Entity-rule",
      "Predicate-added_to",
      "Entity-the_tree"
    ],
    [
      "Entity-right-hand_tree",
      "Predicate-binds",
      "Entity-the_object_argument_of_the_target_predicate"
    ],
    [
      "Entity-the_rule_(3)",
      "Predicate-bind",
      "Entity-the_object_argument_of_the_target_predicate"
    ],
    [
      "Entity-the_object_argument",
      "Predicate-binds",
      "Entity-target_predicate_(1)"
    ],
    [
      "Entity-rule",
      "Predicate-binds",
      "Entity-object_argument"
    ],
    [
      "Entity-conjunction_of_iop_rule",
      "Predicate-forms",
      "Entity-a_tree"
    ],
    [
      "Entity-treesc",
      "Predicate-is_bounded_above_by",
      "Entity-the_minimum_iopsc"
    ],
    [
      "Entity-treesc",
      "Predicate-is_bounded_above_by",
      "Entity-it_constituent_iop_rule"
    ],
    [
      "Entity-conjunction_of_iop_rule",
      "Predicate-forms",
      "Entity-tree"
    ],
    [
      "Entity-these_uncertain_shape",
      "Predicate-can_be_presented_as",
      "Entity-standard_shacl_shape"
    ],
    [
      "Entity-standard_shacl_shape",
      "Predicate-delete",
      "Entity-quality_annotation"
    ],
    [
      "Entity-the_tree",
      "Predicate-interpreted_as",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-every_path_from_the_target_predicate",
      "Predicate-terminating_at",
      "Entity-a_node_in_the_tree"
    ],
    [
      "Entity-the_tree",
      "Predicate-may_be_interpreted_as",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-body_predicate",
      "Predicate-is_declared_as",
      "Entity-sh__nodeshape"
    ],
    [
      "Entity-the_path_of_head_predicate",
      "Predicate-as",
      "Entity-nested_sh__path_declaration"
    ],
    [
      "Entity-nested_sh__path_declaration",
      "Predicate-within",
      "Entity-sh__property_declaration"
    ],
    [
      "Entity-the_path_of_head_predicate",
      "Predicate-is_declared_as",
      "Entity-nested_sh__path_declaration"
    ],
    [
      "Entity-cardinality_of_a_path",
      "Predicate-is_read_from",
      "Entity-the_annotation_of_the_branch_at_the_terminating_node"
    ],
    [
      "Entity-sh__mincount",
      "Predicate-declared_by",
      "Entity-the_property_declaration"
    ],
    [
      "Entity-cardinality_of_a_path",
      "Predicate-declared_by",
      "Entity-sh__mincount"
    ],
    [
      "Entity-shaclearner",
      "Predicate-supports",
      "Entity-shacl_core_feature"
    ],
    [
      "Entity-shacl_core_feature",
      "Predicate-include",
      "Entity-node_and_property_shape"
    ],
    [
      "Entity-shaclearner",
      "Predicate-treats",
      "Entity-property"
    ],
    [
      "Entity-shaclearner",
      "Predicate-has_limitations_with_respect_to",
      "Entity-shacl_core"
    ],
    [
      "Entity-shaclearner",
      "Predicate-does_not_perform",
      "Entity-data_type_validation"
    ],
    [
      "Entity-cardinality_expression",
      "Predicate-handles",
      "Entity-min_cardinality"
    ],
    [
      "Entity-shaclearner",
      "Predicate-handles",
      "Entity-min_cardinality"
    ],
    [
      "Entity-shaclearner",
      "Predicate-does_not_mine",
      "Entity-sparql-like_constraint"
    ],
    [
      "Entity-tree_shape",
      "Predicate-is_useful_for",
      "Entity-human_interaction"
    ],
    [
      "Entity-shape",
      "Predicate-offers",
      "Entity-kg_documentation"
    ],
    [
      "Entity-shape",
      "Predicate-provides",
      "Entity-readable_pattern"
    ],
    [
      "Entity-our_novel_tree_shape",
      "Predicate-can_be_used_for",
      "Entity-kg_completion"
    ],
    [
      "Entity-tree_shape",
      "Predicate-can_be_used_for",
      "Entity-kg_completion"
    ],
    [
      "Entity-method",
      "Predicate-proposed_to_complete",
      "Entity-kg"
    ],
    [
      "Entity-method",
      "Predicate-traverse",
      "Entity-kg"
    ],
    [
      "Entity-method",
      "Predicate-predicting",
      "Entity-missing_fact"
    ],
    [
      "Entity-our_proposed_tree_shape",
      "Predicate-provides",
      "Entity-an_opportunity_to_work_sequentially_along_a_path_of_dependent_question"
    ],
    [
      "Entity-birthplace",
      "Predicate-is_used_in",
      "Entity-birthplace__trump___"
    ],
    [
      "Entity-capitalof",
      "Predicate-are_used_in",
      "Entity-capitalof_____"
    ],
    [
      "Entity-birthplace__trump___",
      "Predicate-is_followed_by",
      "Entity-capitalof_____"
    ],
    [
      "Entity-the_former_question",
      "Predicate-has_an_answer_for",
      "Entity-an_answer_to_the_former"
    ],
    [
      "Entity-an_answer_to_the_former",
      "Predicate-gives_us_confidence_to_proceed_to",
      "Entity-the_next_question"
    ],
    [
      "Entity-the_next_question",
      "Predicate-is_along",
      "Entity-the_path_(1)"
    ],
    [
      "Entity-the_former_question",
      "Predicate-gives_us",
      "Entity-an_answer_to_the_former"
    ],
    [
      "Entity-an_answer_to_the_former",
      "Predicate-allows_us_to_proceed_to",
      "Entity-the_next_question"
    ],
    [
      "Entity-completion_strategy",
      "Predicate-is",
      "Entity-depth-first"
    ],
    [
      "Entity-completion_strategy",
      "Predicate-works_through",
      "Entity-shape_tree"
    ],
    [
      "Entity-depth-first_questioning_strategy",
      "Predicate-reduces",
      "Entity-cognitive_load"
    ],
    [
      "Entity-contextual_connection",
      "Predicate-exists_between",
      "Entity-successive_question"
    ],
    [
      "Entity-this_strategy_for_human-kg-completion",
      "Predicate-is_applied_in",
      "Entity-smart_kg_editor"
    ],
    [
      "Entity-tree",
      "Predicate-can_be_generated_by",
      "Entity-shaclearner"
    ],
    [
      "Entity-tree_shape",
      "Predicate-helps",
      "Entity-human_expert"
    ],
    [
      "Entity-human_expert",
      "Predicate-extracts",
      "Entity-sub-tree"
    ],
    [
      "Entity-sub-tree",
      "Predicate-is_desired_for",
      "Entity-human_interpretability"
    ],
    [
      "Entity-sub-tree",
      "Predicate-is_extracted_out_of",
      "Entity-deeper__more_complex_tree"
    ],
    [
      "Entity-treescnew",
      "Predicate-greater_than_or_equal_to",
      "Entity-treescorig"
    ],
    [
      "Entity-a_tree",
      "Predicate-remains",
      "Entity-valid_tree"
    ],
    [
      "Entity-pruning_a_tree",
      "Predicate-obtains",
      "Entity-a_simpler_tree"
    ],
    [
      "Entity-a_simpler_tree",
      "Predicate-has",
      "Entity-higher_confidence_in_the_kg"
    ],
    [
      "Entity-tree_shape",
      "Predicate-offers",
      "Entity-kg_documentation"
    ],
    [
      "Entity-exploratory_attempt",
      "Predicate-address",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "Predicate-involves",
      "Entity-shacl_shape"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "Predicate-involves",
      "Entity-kg"
    ],
    [
      "Entity-procedural_method",
      "Predicate-are_without",
      "Entity-logical_foundation"
    ],
    [
      "Entity-procedural_method",
      "Predicate-are_not_shown_to_be_scalable_to_handle",
      "Entity-real-world_kg"
    ],
    [
      "Entity-representation_formalism",
      "Predicate-is_difficult_to_compare_with",
      "Entity-iop_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-is_used_in",
      "Entity-this_paper"
    ],
    [
      "Entity-procedural_method",
      "Predicate-work_with",
      "Entity-small_amount_of_data"
    ],
    [
      "Entity-one_approach",
      "Predicate-provides",
      "Entity-a_sample_of_data"
    ],
    [
      "Entity-one_approach",
      "Predicate-provides",
      "Entity-the_output"
    ],
    [
      "Entity-the_output",
      "Predicate-is_provided_in",
      "Entity-an_interactive_interface"
    ],
    [
      "Entity-an_interactive_interface",
      "Predicate-is_used_by",
      "Entity-a_human_user"
    ],
    [
      "Entity-approach",
      "Predicate-provides",
      "Entity-a_sample_of_data"
    ],
    [
      "Entity-approach",
      "Predicate-provides",
      "Entity-the_output"
    ],
    [
      "Entity-another_work",
      "Predicate-provides",
      "Entity-an_interactive_framework"
    ],
    [
      "Entity-an_interactive_framework",
      "Predicate-defines",
      "Entity-shacl_shape"
    ],
    [
      "Entity-shacl_shape",
      "Predicate-include",
      "Entity-nested_pattern"
    ],
    [
      "Entity-nested_pattern",
      "Predicate-similar_to",
      "Entity-the_tree_(1)"
    ],
    [
      "Entity-interactive_framework",
      "Predicate-defines",
      "Entity-shacl_shape"
    ],
    [
      "Entity-shacl_shape",
      "Predicate-have",
      "Entity-different_complexity"
    ],
    [
      "Entity-a_formalisation_of_the_approach",
      "Predicate-is_given",
      "Entity-shape_quality_measure"
    ],
    [
      "Entity-shape_quality_measure",
      "Predicate-are_essential_for",
      "Entity-large_scale_shape_mining"
    ],
    [
      "Entity-the_paper",
      "Predicate-does_not_provide",
      "Entity-a_system_that_discovers_pattern_from_massive_kg"
    ],
    [
      "Entity-their_method",
      "Predicate-cannot_deploy",
      "Entity-comparison_purpose"
    ],
    [
      "Entity-the_paper",
      "Predicate-cannot_deploy",
      "Entity-their_method"
    ],
    [
      "Entity-existing_ontology_for_kg",
      "Predicate-uses",
      "Entity-shacl_shape"
    ],
    [
      "Entity-existing_ontology_for_kg",
      "Predicate-generate",
      "Entity-shacl_shape"
    ],
    [
      "Entity-kg",
      "Predicate-generate",
      "Entity-shacl_shape"
    ],
    [
      "Entity-one_work",
      "Predicate-uses",
      "Entity-two_different_kind_of_knowledge"
    ],
    [
      "Entity-two_different_kind_of_knowledge",
      "Predicate-generate",
      "Entity-shacl_shape"
    ],
    [
      "Entity-two_different_kind_of_knowledge",
      "Predicate-generate",
      "Entity-ontology_constraint_pattern"
    ],
    [
      "Entity-two_different_kind_of_knowledge",
      "Predicate-generate",
      "Entity-input_ontology"
    ],
    [
      "Entity-one_work",
      "Predicate-uses",
      "Entity-ontology_constraint_pattern"
    ],
    [
      "Entity-one_work",
      "Predicate-uses",
      "Entity-input_ontology"
    ],
    [
      "Entity-our_work",
      "Predicate-uses",
      "Entity-a_kg_(1)"
    ],
    [
      "Entity-our_work",
      "Predicate-uses",
      "Entity-kg_itself"
    ],
    [
      "Entity-our_work",
      "Predicate-discovers",
      "Entity-shape"
    ],
    [
      "Entity-paper",
      "Predicate-investigate",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-application_of_shacl_shape",
      "Predicate-contributes_to",
      "Entity-discovery_of_shape"
    ],
    [
      "Entity-one_proposal",
      "Predicate-suggests",
      "Entity-extended_validation_framework"
    ],
    [
      "Entity-extended_validation_framework",
      "Predicate-is_for",
      "Entity-interaction_between_inference_rule_and_shacl_shape"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "Predicate-involves",
      "Entity-inference_rule"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "Predicate-involves",
      "Entity-shacl_shape"
    ],
    [
      "Entity-set_of_rule_and_shape",
      "Predicate-provides",
      "Entity-shape"
    ],
    [
      "Entity-set_of_rule_and_shape",
      "Predicate-proposes",
      "Entity-a_method_(1)"
    ],
    [
      "Entity-method",
      "Predicate-detects",
      "Entity-which_shape_could_be_violated_by_applying_a_rule"
    ],
    [
      "Entity-rule",
      "Predicate-could_violate",
      "Entity-shape"
    ],
    [
      "Entity-set_of_rule_and_shape",
      "Predicate-are_provided",
      "Entity-a_method_(1)"
    ],
    [
      "Entity-a_method_(1)",
      "Predicate-is_proposed_to_detect",
      "Entity-which_shape_could_be_violated_by_applying_a_rule"
    ],
    [
      "Entity-shacl",
      "Predicate-provides_logical_foundations_for",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-recursive_shacl_shape",
      "Predicate-presents",
      "Entity-recursive_shacl_shape"
    ],
    [
      "Entity-shacl_shape",
      "Predicate-presents",
      "Entity-recursive_shacl_shape"
    ],
    [
      "Entity-shacl",
      "Predicate-provides",
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language"
    ],
    [
      "Entity-recursive_shacl_shape",
      "Predicate-presents",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-our_work_(1)",
      "Predicate-approaches",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-logical_formalism",
      "Predicate-start_with",
      "Entity-well-defined_semantics"
    ],
    [
      "Entity-logical_formalism",
      "Predicate-start_with",
      "Entity-motivating_use_case"
    ],
    [
      "Entity-logical_formalism",
      "Predicate-derive",
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "Predicate-is_expressed_in",
      "Entity-fragment_of_shacl"
    ],
    [
      "Entity-logical_formalism",
      "Predicate-have",
      "Entity-well-defined_semantics"
    ],
    [
      "Entity-logical_formalism",
      "Predicate-have",
      "Entity-motivating_use_case"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "Predicate-are_derived_from",
      "Entity-logical_formalism"
    ],
    [
      "Entity-shaclearner",
      "Predicate-implemented_based_on",
      "Entity-algorithm_1"
    ],
    [
      "Entity-shaclearner",
      "Predicate-conducted_experiments_to_assess",
      "Entity-experiment"
    ],
    [
      "Entity-the_experiment",
      "Predicate-are_designed_to_prove",
      "Entity-the_effectiveness_of_our_shaclearner"
    ],
    [
      "Entity-shaclearner",
      "Predicate-captures",
      "Entity-shape"
    ],
    [
      "Entity-shaclearner",
      "Predicate-captures",
      "Entity-confidence"
    ],
    [
      "Entity-shaclearner",
      "Predicate-captures",
      "Entity-length"
    ],
    [
      "Entity-shaclearner",
      "Predicate-captures",
      "Entity-cardinality"
    ],
    [
      "Entity-shaclearner",
      "Predicate-captures_from",
      "Entity-real-world_massive_knowledge_graph__kg_"
    ],
    [
      "Entity-the_experiment",
      "Predicate-assess",
      "Entity-shaclearner"
    ],
    [
      "Entity-shaclearner",
      "Predicate-handles",
      "Entity-real-world_massive_knowledge_graph__kg_"
    ],
    [
      "Entity-shaclearner",
      "Predicate-learns",
      "Entity-shape"
    ],
    [
      "Entity-the_experiment",
      "Predicate-conducted_to_assess",
      "Entity-shaclearner"
    ],
    [
      "Entity-shape",
      "Predicate-with_varying",
      "Entity-confidence"
    ],
    [
      "Entity-shape",
      "Predicate-with_varying",
      "Entity-length"
    ],
    [
      "Entity-shape",
      "Predicate-with_varying",
      "Entity-cardinality"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-is_the_first_method_to_learn",
      "Entity-shape"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-learn_from",
      "Entity-massive_kg"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-has_no",
      "Entity-benchmark"
    ],
    [
      "Entity-the_performance_of_our_system",
      "Predicate-shows_that_it_can_handle",
      "Entity-the_task"
    ],
    [
      "Entity-the_performance_of_our_system",
      "Predicate-can_be_applied_in",
      "Entity-practice"
    ],
    [
      "Entity-system",
      "Predicate-can_be_applied_in",
      "Entity-practice"
    ],
    [
      "Entity-shaclearner",
      "Predicate-is_scalable_so_it_can_handle",
      "Entity-real-world_massive_knowledge_graph__kg_"
    ],
    [
      "Entity-real-world_massive_knowledge_graph__kg_",
      "Predicate-include",
      "Entity-dbpedia_3.8"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-has",
      "Entity-over_11_million_fact"
    ],
    [
      "Entity-shaclearner",
      "Predicate-can_learn",
      "Entity-shape"
    ],
    [
      "Entity-shape",
      "Predicate-for",
      "Entity-target_predicate"
    ],
    [
      "Entity-shaclearner",
      "Predicate-discovers",
      "Entity-shape"
    ],
    [
      "Entity-shaclearner",
      "Predicate-discovers",
      "Entity-shape_of_varying_complexity_and_diversity"
    ],
    [
      "Entity-shaclearner",
      "Predicate-discovers",
      "Entity-length_and_cardinality"
    ],
    [
      "Entity-shaclearner",
      "Predicate-discovers",
      "Entity-high-quality_rule"
    ],
    [
      "Entity-small_complete_kg",
      "Predicate-is_compared_with",
      "Entity-ideal_learner"
    ],
    [
      "Entity-high-quality_rule",
      "Predicate-is_for",
      "Entity-small_complete_kg"
    ],
    [
      "Entity-shaclearner",
      "Predicate-discovers",
      "Entity-complex_shape_(1)"
    ],
    [
      "Entity-shaclearner",
      "Predicate-aggregates",
      "Entity-learnt_iop_rule"
    ],
    [
      "Entity-four_benchmark_kg",
      "Predicate-are_described_in",
      "Entity-table_1"
    ],
    [
      "Entity-yago2s",
      "Predicate-have_been_used_in",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-wikidata",
      "Predicate-have_been_used_in",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-have_been_used_in",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-yago2s",
      "Predicate-are_common_KGs_and_have_been_used_in",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-wikidata",
      "Predicate-are_common_KGs_and_have_been_used_in",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-are_common_KGs_and_have_been_used_in",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-synthetic_kg",
      "Predicate-is",
      "Entity-poker"
    ],
    [
      "Entity-synthetic_kg",
      "Predicate-is_for_analyzing",
      "Entity-completeness_of_our_algorithm"
    ],
    [
      "Entity-poker_kg",
      "Predicate-is_adapted_from",
      "Entity-classic_version"
    ],
    [
      "Entity-each_poker_hand",
      "Predicate-comprises",
      "Entity-five_playing_card"
    ],
    [
      "Entity-five_playing_card",
      "Predicate-drawn_from",
      "Entity-a_deck"
    ],
    [
      "Entity-a_deck",
      "Predicate-with",
      "Entity-thirteen_rank"
    ],
    [
      "Entity-a_deck",
      "Predicate-with",
      "Entity-four_suit"
    ],
    [
      "Entity-a_deck",
      "Predicate-has",
      "Entity-thirteen_rank"
    ],
    [
      "Entity-a_deck",
      "Predicate-has",
      "Entity-four_suit"
    ],
    [
      "Entity-each_card",
      "Predicate-is_described_using",
      "Entity-attribute"
    ],
    [
      "Entity-attribute",
      "Predicate-include",
      "Entity-suit"
    ],
    [
      "Entity-attribute",
      "Predicate-include",
      "Entity-rank"
    ],
    [
      "Entity-each_poker_hand",
      "Predicate-is_assigned_to",
      "Entity-nine_different_rank"
    ],
    [
      "Entity-nine_different_rank",
      "Predicate-include",
      "Entity-high_card"
    ],
    [
      "Entity-nine_different_rank",
      "Predicate-include",
      "Entity-one_pair"
    ],
    [
      "Entity-five_hundred_poker_hand",
      "Predicate-generate",
      "Entity-fact_related_to_them"
    ],
    [
      "Entity-five_hundred_poker_hand",
      "Predicate-builds",
      "Entity-small_complete_kg"
    ],
    [
      "Entity-twenty-eight_out_of_thirty-five_predicate",
      "Predicate-are",
      "Entity-unary_predicate"
    ],
    [
      "Entity-fullhouse__x_",
      "Predicate-is",
      "Entity-a_specific_poker_hand"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-such_as",
      "Entity-fullhouse__x_"
    ],
    [
      "Entity-transforming_kg_with_type_predicate_for_experiment",
      "Predicate-is_necessary_since",
      "Entity-real-world_kg_model"
    ],
    [
      "Entity-real-world_kg_model",
      "Predicate-treats",
      "Entity-entity_and_predicate"
    ],
    [
      "Entity-common_representation",
      "Predicate-requires",
      "Entity-this_work"
    ],
    [
      "Entity-common_representation",
      "Predicate-distinguishes",
      "Entity-entity_and_predicate"
    ],
    [
      "Entity-abstract_model",
      "Predicate-is_used_in",
      "Entity-description_logic_ontology"
    ],
    [
      "Entity-class",
      "Predicate-are_named",
      "Entity-unary_predicate"
    ],
    [
      "Entity-role",
      "Predicate-are_named",
      "Entity-binary_predicate"
    ],
    [
      "Entity-role",
      "Predicate-also_called",
      "Entity-property"
    ],
    [
      "Entity-an_abstract_model",
      "Predicate-are_used_in",
      "Entity-description_logic_ontology"
    ],
    [
      "Entity-property",
      "Predicate-are_named",
      "Entity-binary_predicate"
    ],
    [
      "Entity-class_and_type_information",
      "Predicate-allows",
      "Entity-fully_abstracted__entity-free__shape"
    ],
    [
      "Entity-class_and_type_information",
      "Predicate-allows",
      "Entity-partially_instantiated_shape"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-allows",
      "Entity-fully_abstracted__entity-free__shape"
    ],
    [
      "Entity-this_feature",
      "Predicate-is_important_since",
      "Entity-learning_partially_instantiated_shape"
    ],
    [
      "Entity-learning_partially_instantiated_shape",
      "Predicate-can_cause",
      "Entity-an_explosion_in_the_space_of_possible_shape"
    ],
    [
      "Entity-self-loop_link",
      "Predicate-is",
      "Entity-convenient_syntactic_sugar"
    ],
    [
      "Entity-convenient_syntactic_sugar",
      "Predicate-keeps",
      "Entity-the_presentation_in_the_triple_format"
    ],
    [
      "Entity-self-loop_link",
      "Predicate-is_for",
      "Entity-unary_predicate"
    ],
    [
      "Entity-input_kg",
      "Predicate-is",
      "Entity-input_kg"
    ],
    [
      "Entity-self-loop_link",
      "Predicate-keeps",
      "Entity-the_presentation_in_the_triple_format"
    ],
    [
      "Entity-real-world_kg",
      "Predicate-modeled_as",
      "Entity-entity_instance"
    ],
    [
      "Entity-concept_or_class_membership",
      "Predicate-modeled_as",
      "Entity-entity_instance"
    ],
    [
      "Entity-class_membership",
      "Predicate-modeled_as",
      "Entity-entity_instance"
    ],
    [
      "Entity-real-world_kg",
      "Predicate-may_be_modeled_as",
      "Entity-entity_instance"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-contains",
      "Entity-predicate"
    ],
    [
      "Entity-predicate",
      "Predicate-are",
      "Entity-type_or_class"
    ],
    [
      "Entity-type_or_class",
      "Predicate-modeled_with",
      "Entity-unary_predicate"
    ],
    [
      "Entity-new_predicate",
      "Predicate-make_from",
      "Entity-fact"
    ],
    [
      "Entity-new_predicate",
      "Predicate-are_produced_from",
      "Entity-fact"
    ],
    [
      "Entity-new_predicate",
      "Predicate-produces",
      "Entity-new_unary_fact"
    ],
    [
      "Entity-new_predicate",
      "Predicate-is_related_to",
      "Entity-related_fact"
    ],
    [
      "Entity-new_unary_fact",
      "Predicate-are_based_on",
      "Entity-new_predicate"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-generates",
      "Entity-unary_predicate"
    ],
    [
      "Entity-wikidata",
      "Predicate-generates",
      "Entity-unary_predicate"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-generate",
      "Entity-fact"
    ],
    [
      "Entity-wikidata",
      "Predicate-generate",
      "Entity-fact"
    ],
    [
      "Entity-the_two_type-like_predicate_from_dbpedia_3.8",
      "Predicate-uses",
      "Entity-unary_predicate_which_have_at_least_one_hundred_fact"
    ],
    [
      "Entity-the_one_from_wikidata",
      "Predicate-uses",
      "Entity-unary_predicate_which_have_at_least_one_hundred_fact"
    ],
    [
      "Entity-these_predicate",
      "Predicate-have",
      "Entity-a_class"
    ],
    [
      "Entity-these_predicate",
      "Predicate-have",
      "Entity-their_second_argument"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-consider",
      "Entity-unary_predicate_which_have_at_least_one_hundred_fact"
    ],
    [
      "Entity-unary_predicate_which_have_at_least_one_hundred_fact",
      "Predicate-have",
      "Entity-one_hundred_fact"
    ],
    [
      "Entity-class_with_few_instance",
      "Predicate-prune",
      "Entity-class"
    ],
    [
      "Entity-unary_predicate_which_have_at_least_one_hundred_fact",
      "Predicate-consider",
      "Entity-class_with_few_instance"
    ],
    [
      "Entity-kg",
      "Predicate-retains",
      "Entity-the_original_predicate_and_fact_in_the_kg"
    ],
    [
      "Entity-kg",
      "Predicate-extending_with",
      "Entity-our_new_one"
    ],
    [
      "Entity-table_1",
      "Predicate-reports",
      "Entity-the_specification_of_two_benchmark"
    ],
    [
      "Entity-benchmark",
      "Predicate-have_added",
      "Entity-unary_predicate_which_have_at_least_one_hundred_fact"
    ],
    [
      "Entity-the_established_approach",
      "Predicate-is_for_evaluating",
      "Entity-kg_rule-learning_method"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-involves_measuring",
      "Entity-the_quantity_and_quality_of_distinct_rule_learnt"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-evaluating",
      "Entity-the_established_approach"
    ],
    [
      "Entity-rule_quality",
      "Predicate-is_measured_by",
      "Entity-inverse_open_path_standard_confidence"
    ],
    [
      "Entity-rule_quality",
      "Predicate-is_measured_by",
      "Entity-inverse_open_path_head_coverage"
    ],
    [
      "Entity-rule",
      "Predicate-is_measured_by",
      "Entity-iopsc"
    ],
    [
      "Entity-rule",
      "Predicate-is_measured_by",
      "Entity-iophc"
    ],
    [
      "Entity-50_target_predicate",
      "Predicate-select_from",
      "Entity-wikidata"
    ],
    [
      "Entity-50_target_predicate",
      "Predicate-select_from",
      "Entity-dbpedia_3.8"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-has",
      "Entity-355"
    ],
    [
      "Entity-wikidata",
      "Predicate-has",
      "Entity-157"
    ],
    [
      "Entity-all_binary_predicate_of_yago2s",
      "Predicate-use",
      "Entity-binary_predicate"
    ],
    [
      "Entity-all_binary_predicate_of_yago2s",
      "Predicate-are",
      "Entity-target_predicate"
    ],
    [
      "Entity-yago2s",
      "Predicate-uses",
      "Entity-binary_predicate"
    ],
    [
      "Entity-all_binary_predicate_of_yago2s",
      "Predicate-used_as_a",
      "Entity-target_predicate"
    ],
    [
      "Entity-binary_target_predicate",
      "Predicate-serves_as",
      "Entity-two_target_predicate"
    ],
    [
      "Entity-binary_target_predicate",
      "Predicate-serves_in",
      "Entity-straight_form"
    ],
    [
      "Entity-binary_target_predicate",
      "Predicate-serves_in",
      "Entity-it_reverse_form"
    ],
    [
      "Entity-the_object_argument_(1)",
      "Predicate-connects",
      "Entity-the_head_(2)"
    ],
    [
      "Entity-straight_form",
      "Predicate-is_where",
      "Entity-the_object_argument_(1)"
    ],
    [
      "Entity-it_reverse_form",
      "Predicate-is_where",
      "Entity-the_subject_argument_(1)"
    ],
    [
      "Entity-shaclearner",
      "Predicate-results_on",
      "Entity-yago2s"
    ],
    [
      "Entity-yago2s",
      "Predicate-has",
      "Entity-binary_predicate"
    ],
    [
      "Entity-wikidata",
      "Predicate-has",
      "Entity-unary_predicate"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-has",
      "Entity-unary_predicate"
    ],
    [
      "Entity-yago2s",
      "Predicate-has",
      "Entity-74_target_predicate"
    ],
    [
      "Entity-yago2s",
      "Predicate-has",
      "Entity-74"
    ],
    [
      "Entity-10_hour_limit",
      "Predicate-is_set_for",
      "Entity-learning_each_target_predicate"
    ],
    [
      "Entity-table_2",
      "Predicate-shows",
      "Entity-number_of_rule"
    ],
    [
      "Entity-table_2",
      "Predicate-shows",
      "Entity-the_average_number_of_quality_iop_rule_found"
    ],
    [
      "Entity-table_2",
      "Predicate-shows",
      "Entity-the_proportion_of_target_predicate_for_which_at_least_one_iop_rule_wa_found"
    ],
    [
      "Entity-table_2",
      "Predicate-shows",
      "Entity-the_running_time_in_hour"
    ],
    [
      "Entity-the_proportion_of_target_predicate",
      "Predicate-is_for",
      "Entity-at_least_one_iop_rule"
    ],
    [
      "Entity-high_quality_rule",
      "Predicate-meet",
      "Entity-threshold"
    ],
    [
      "Entity-threshold",
      "Predicate-established_in",
      "Entity-comparative_work"
    ],
    [
      "Entity-rule_of_low_quality",
      "Predicate-are_included",
      "Entity-these_threshold"
    ],
    [
      "Entity-rule",
      "Predicate-can_be_pruned_by_applying",
      "Entity-stricter_quality_threshold"
    ],
    [
      "Entity-low_threshold",
      "Predicate-is_a_safe_choice_since",
      "Entity-the_time_of_learning"
    ],
    [
      "Entity-low_threshold",
      "Predicate-is_a_choice_at_the_time_of",
      "Entity-learning"
    ],
    [
      "Entity-shaclearner",
      "Predicate-shows",
      "Entity-satisfactory_performance"
    ],
    [
      "Entity-shaclearner",
      "Predicate-shows",
      "Entity-number_of_quality_rule_mined"
    ],
    [
      "Entity-shaclearner",
      "Predicate-shows",
      "Entity-runtime"
    ],
    [
      "Entity-shaclearner",
      "Predicate-shows",
      "Entity-quality_rule"
    ],
    [
      "Entity-rule",
      "Predicate-have",
      "Entity-length"
    ],
    [
      "Entity-rule",
      "Predicate-have",
      "Entity-cardinality"
    ],
    [
      "Entity-rule",
      "Predicate-illustrates",
      "Entity-the_distribution_of_rule"
    ],
    [
      "Entity-the_distribution_of_rule",
      "Predicate-with_respect_to",
      "Entity-feature"
    ],
    [
      "Entity-the_distribution_of_rule",
      "Predicate-with_respect_to",
      "Entity-iopsc"
    ],
    [
      "Entity-the_distribution_of_rule",
      "Predicate-with_respect_to",
      "Entity-iophc"
    ],
    [
      "Entity-the_distribution_of_rule",
      "Predicate-with_respect_to",
      "Entity-cardinality"
    ],
    [
      "Entity-the_distribution_of_rule",
      "Predicate-with_respect_to",
      "Entity-length"
    ],
    [
      "Entity-iopsc",
      "Predicate-vs",
      "Entity-length"
    ],
    [
      "Entity-the_proportion_of_mined_rule",
      "Predicate-is_presented",
      "Entity-the_various_feature_value"
    ],
    [
      "Entity-the_proportion_of_mined_rule",
      "Predicate-demonstrates",
      "Entity-the_quality_of_performance"
    ],
    [
      "Entity-the_quality_of_performance",
      "Predicate-is_over",
      "Entity-the_three_very_different_kg"
    ],
    [
      "Entity-rule",
      "Predicate-have",
      "Entity-the_various_feature_value"
    ],
    [
      "Entity-mined_rule",
      "Predicate-demonstrates",
      "Entity-the_quality_of_performance"
    ],
    [
      "Entity-mined_rule",
      "Predicate-present",
      "Entity-the_proportion_of_mined_rule"
    ],
    [
      "Entity-the_distribution_of_mined_rule",
      "Predicate-shown_in",
      "Entity-figure"
    ],
    [
      "Entity-inverse_open_path_standard_confidence",
      "Predicate-increases",
      "Entity-the_proportion_of_quality_rule"
    ],
    [
      "Entity-left-hand_chart",
      "Predicate-observes",
      "Entity-a_consistent_decrease_in_the_proportion_of_quality_rule"
    ],
    [
      "Entity-left-hand_chart",
      "Predicate-shows",
      "Entity-a_consistent_decrease_in_the_proportion_of_quality_rule"
    ],
    [
      "Entity-iopsc",
      "Predicate-increases",
      "Entity-the_proportion_of_quality_rule"
    ],
    [
      "Entity-iophc",
      "Predicate-shows_a_similar_pattern_for",
      "Entity-the_right_hand_chart"
    ],
    [
      "Entity-learned_rule",
      "Predicate-have_lower",
      "Entity-iopsc"
    ],
    [
      "Entity-learned_rule",
      "Predicate-have_lower",
      "Entity-iophc"
    ],
    [
      "Entity-statistical_likelihood",
      "Predicate-is_higher_than",
      "Entity-poor_quality_rule"
    ],
    [
      "Entity-the_statistical_likelihood_of_poor_quality_rule",
      "Predicate-is_higher_than",
      "Entity-poor_quality_rule"
    ],
    [
      "Entity-our_pruning_technique",
      "Predicate-are_necessary_for",
      "Entity-scalability"
    ],
    [
      "Entity-pruning_technique",
      "Predicate-prune_away",
      "Entity-lower_quality_rule"
    ],
    [
      "Entity-our_pruning_technique",
      "Predicate-prune",
      "Entity-lower_quality_rule"
    ],
    [
      "Entity-iopsc",
      "Predicate-learnts_from",
      "Entity-dbpedia_3.8"
    ],
    [
      "Entity-iopsc",
      "Predicate-learnts_from",
      "Entity-wikidata"
    ],
    [
      "Entity-iopsc",
      "Predicate-learnts_from",
      "Entity-yago2s"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-has_more_quality_rules_than",
      "Entity-the_other_kg"
    ],
    [
      "Entity-wikidata",
      "Predicate-comes_second_ahead_of",
      "Entity-yago2s"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-learnts_from",
      "Entity-quality_rule"
    ],
    [
      "Entity-iopsc",
      "Predicate-with_respect_to",
      "Entity-quality_rule"
    ],
    [
      "Entity-this_phenomenon",
      "Predicate-might_be_a_result_of",
      "Entity-type-like_unary_predicate"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-targets",
      "Entity-type-like_unary_predicate"
    ],
    [
      "Entity-wikidata",
      "Predicate-targets",
      "Entity-type-like_unary_predicate"
    ],
    [
      "Entity-dbpedia_3.8",
      "Predicate-has",
      "Entity-type-like_unary_predicate"
    ],
    [
      "Entity-wikidata",
      "Predicate-has",
      "Entity-type-like_unary_predicate"
    ],
    [
      "Entity-yago2s",
      "Predicate-use_every_one_of",
      "Entity-37_binary_predicate"
    ],
    [
      "Entity-the_distribution_of_rule",
      "Predicate-shows",
      "Entity-the_largest_proportion_of_rule"
    ],
    [
      "Entity-the_largest_proportion_of_rule",
      "Predicate-has",
      "Entity-the_least_stringent_requirement"
    ],
    [
      "Entity-the_largest_proportion_of_rule",
      "Predicate-has",
      "Entity-cardinality_of_1"
    ],
    [
      "Entity-rule",
      "Predicate-have",
      "Entity-the_least_stringent_requirement"
    ],
    [
      "Entity-greater_cardinality",
      "Predicate-demand",
      "Entity-tighter_restriction"
    ],
    [
      "Entity-greater_cardinality",
      "Predicate-observes",
      "Entity-an_expected_decrease"
    ],
    [
      "Entity-yago2s",
      "Predicate-demonstrates_a_tendency_towards",
      "Entity-greater_cardinality"
    ],
    [
      "Entity-yago2s",
      "Predicate-demonstrates_a_tendency_towards",
      "Entity-the_other_kg"
    ],
    [
      "Entity-yago2s",
      "Predicate-is_a_result_of",
      "Entity-it_more_curated_development"
    ],
    [
      "Entity-yago2s",
      "Predicate-is_compared_with",
      "Entity-the_other_kg"
    ],
    [
      "Entity-the_distribution_of_mined_rule_(1)",
      "Predicate-shows",
      "Entity-number_of_rule"
    ],
    [
      "Entity-length",
      "Predicate-increases",
      "Entity-number_of_rule"
    ],
    [
      "Entity-number_of_rule",
      "Predicate-would_increase_since",
      "Entity-space_of_possible_rule"
    ],
    [
      "Entity-space_of_possible_rule",
      "Predicate-grows",
      "Entity-number_of_rule"
    ],
    [
      "Entity-shacl_learning_method",
      "Predicate-shows",
      "Entity-iop_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-mined_from",
      "Entity-dbpedia_3.8"
    ],
    [
      "Entity-iop_rule",
      "Predicate-in",
      "Entity-the_experiment_(1)"
    ],
    [
      "Entity-iopsc",
      "Predicate-prefixes",
      "Entity-each_rule_(1)"
    ],
    [
      "Entity-iophc",
      "Predicate-prefixes",
      "Entity-each_rule_(1)"
    ],
    [
      "Entity-cardinality",
      "Predicate-prefixes",
      "Entity-each_rule_(1)"
    ],
    [
      "Entity-cardinality_annotation",
      "Predicate-prefixes",
      "Entity-each_rule_(1)"
    ],
    [
      "Entity-the_first_rule",
      "Predicate-indicates",
      "Entity-an_album"
    ],
    [
      "Entity-an_album",
      "Predicate-has",
      "Entity-record_label"
    ],
    [
      "Entity-the_second_rule",
      "Predicate-requires",
      "Entity-a_song__x_"
    ],
    [
      "Entity-a_song__x_",
      "Predicate-has",
      "Entity-one_producer"
    ],
    [
      "Entity-these_two_rule",
      "Predicate-are_distinguished_by",
      "Entity-cardinality_annotation"
    ],
    [
      "Entity-the_third_rule",
      "Predicate-is_more_constraining_than",
      "Entity-the_second"
    ],
    [
      "Entity-the_confidence_of_the_third_rule",
      "Predicate-is_lower_than",
      "Entity-the_confidence_of_the_second"
    ],
    [
      "Entity-the_third_rule",
      "Predicate-based_on",
      "Entity-kg"
    ],
    [
      "Entity-iopsc",
      "Predicate-illustrates_the_practical_meaning_of",
      "Entity-the_practical_meaning_of_the_iopsc_and_iophc_quality"
    ],
    [
      "Entity-iophc",
      "Predicate-illustrates_the_practical_meaning_of",
      "Entity-the_practical_meaning_of_the_iopsc_and_iophc_quality"
    ],
    [
      "Entity-rule",
      "Predicate-illustrates",
      "Entity-the_practical_meaning_of_the_iopsc_and_iophc_quality"
    ],
    [
      "Entity-iopsc",
      "Predicate-determines",
      "Entity-the_confidence_of_a_rule"
    ],
    [
      "Entity-iophc",
      "Predicate-indicates",
      "Entity-the_proportion_of_rule_consequent_instance"
    ],
    [
      "Entity-iophc",
      "Predicate-indicates",
      "Entity-the_relevance_of_the_rule"
    ],
    [
      "Entity-the_proportion_of_rule_consequent_instance",
      "Predicate-justified_by",
      "Entity-target_predicate_instance_in_the_kg"
    ],
    [
      "Entity-iopsc",
      "Predicate-indicates",
      "Entity-the_confidence_of_a_rule"
    ],
    [
      "Entity-unary_predicate",
      "Predicate-are",
      "Entity-occupation"
    ],
    [
      "Entity-entity_(1)",
      "Predicate-turn_out_to_be",
      "Entity-person"
    ],
    [
      "Entity-occupation",
      "Predicate-turn_out_to_be",
      "Entity-person"
    ],
    [
      "Entity-occupation",
      "Predicate-have",
      "Entity-iop_rule"
    ],
    [
      "Entity-occupation",
      "Predicate-have",
      "Entity-iopsc"
    ],
    [
      "Entity-occupation",
      "Predicate-have",
      "Entity-iophc"
    ],
    [
      "Entity-iop_rule",
      "Predicate-apply_to",
      "Entity-one_specific_unary_predicate"
    ],
    [
      "Entity-unary_occupation_predicate",
      "Predicate-have",
      "Entity-high_iophc"
    ],
    [
      "Entity-shaclearner",
      "Predicate-uses_(1)",
      "Entity-two_trick"
    ],
    [
      "Entity-two_trick",
      "Predicate-reduce",
      "Entity-iop_rule"
    ],
    [
      "Entity-pathfinding",
      "Predicate-is_part_of",
      "Entity-algorithm_1"
    ],
    [
      "Entity-heuristic_pruning",
      "Predicate-used_inside",
      "Entity-pathfinding"
    ],
    [
      "Entity-embedding-based_scoring_function",
      "Predicate-used_inside",
      "Entity-pathfinding"
    ],
    [
      "Entity-shaclearner",
      "Predicate-learns",
      "Entity-iop_rule"
    ],
    [
      "Entity-these_two_pruning_method",
      "Predicate-affect",
      "Entity-shaclearner"
    ],
    [
      "Entity-shaclearner",
      "Predicate-affects",
      "Entity-the_quality_and_quantity_of_learnt_rule"
    ],
    [
      "Entity-shaclearner",
      "Predicate-regard_to",
      "Entity-the_quality_and_quantity_of_learnt_rule"
    ],
    [
      "Entity-shaclearner",
      "Predicate-has",
      "Entity-variant_of_shaclearner"
    ],
    [
      "Entity-shaclearner",
      "Predicate-creates",
      "Entity-variant_of_shaclearner"
    ],
    [
      "Entity-shaclearner",
      "Predicate-include",
      "Entity-embedding_learning"
    ],
    [
      "Entity-shaclearner",
      "Predicate-include",
      "Entity-heuristic_pruning"
    ],
    [
      "Entity-shaclearner",
      "Predicate-include",
      "Entity-ultimate_evaluation"
    ],
    [
      "Entity-shaclearner",
      "Predicate-generate",
      "Entity-rule"
    ],
    [
      "Entity-shaclearner",
      "Predicate-evaluates",
      "Entity-rule"
    ],
    [
      "Entity-rule",
      "Predicate-based_on",
      "Entity-sampled_kg"
    ],
    [
      "Entity-rule",
      "Predicate-evaluated_on",
      "Entity-complete_kg"
    ],
    [
      "Entity-rule",
      "Predicate-are_evaluated_on",
      "Entity-complete_kg"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-generate",
      "Entity-all_possible_rule"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-evaluates",
      "Entity-all_possible_rule"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-evaluates",
      "Entity-rule"
    ],
    [
      "Entity-this_method",
      "Predicate-is_a",
      "Entity-brute-force_search"
    ],
    [
      "Entity-this_method",
      "Predicate-cannot_handle",
      "Entity-real-world_kg"
    ],
    [
      "Entity-real-world_kg",
      "Predicate-used_in",
      "Entity-performance_evaluation"
    ],
    [
      "Entity-shaclearner",
      "Predicate-has",
      "Entity-full_functionality"
    ],
    [
      "Entity-small_poker_kg",
      "Predicate-is_used_for",
      "Entity-this_experiment"
    ],
    [
      "Entity-this_experiment",
      "Predicate-can_handle",
      "Entity-small_poker_kg"
    ],
    [
      "Entity-28_unary_predicate",
      "Predicate-use_as",
      "Entity-the_target_predicate"
    ],
    [
      "Entity-28_unary_predicate",
      "Predicate-are",
      "Entity-target_predicate"
    ],
    [
      "Entity-28_unary_predicate",
      "Predicate-are_used_for",
      "Entity-the_target_predicate"
    ],
    [
      "Entity-modified_shaclearner__-s-h_",
      "Predicate-learnt_by",
      "Entity-iop_rule"
    ],
    [
      "Entity-modified_shaclearner__-s-h_",
      "Predicate-has_no",
      "Entity-pruning"
    ],
    [
      "Entity-modified_shaclearner__-s-h_",
      "Predicate-applies_to",
      "Entity-target_predicate"
    ],
    [
      "Entity-the_latter_row",
      "Predicate-shows",
      "Entity-the_percentage_difference_in_the_number_of_rule_found"
    ],
    [
      "Entity-the_percentage_difference_in_the_number_of_rule_found",
      "Predicate-is_relative_to",
      "Entity-first_row"
    ],
    [
      "Entity-the_last_row",
      "Predicate-corresponds_to",
      "Entity-unmodified_shaclearner_of_algorithm_1"
    ],
    [
      "Entity-unmodified_shaclearner_of_algorithm_1",
      "Predicate-corresponds_to",
      "Entity-the_last_row"
    ],
    [
      "Entity-iopsc",
      "Predicate-is_in",
      "Entity-range"
    ],
    [
      "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_",
      "Predicate-associated_with",
      "Entity-iopsc_in_range_of__0.1__0.3_"
    ],
    [
      "Entity-the_first_column",
      "Predicate-contains",
      "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_"
    ],
    [
      "Entity-iopsc_in_range_of__0.1__0.3_",
      "Predicate-is",
      "Entity-the_first_column"
    ],
    [
      "Entity-ideal_rule_learner",
      "Predicate-learnt",
      "Entity-163_rule"
    ],
    [
      "Entity-shaclearner__-s-h_",
      "Predicate-is",
      "Entity-inefficient_yet_complete"
    ],
    [
      "Entity-ideal_rule_learner__shaclearner__-s-h__",
      "Predicate-is",
      "Entity-inefficient_yet_complete"
    ],
    [
      "Entity-the_performance_of_the_shaclearner__-sh_",
      "Predicate-is_compared_with",
      "Entity-ideal_rule_learner__shaclearner__-s-h__"
    ],
    [
      "Entity-the_system_without_sampling__but_with_the_heuristic_rule_learning_module",
      "Predicate-include",
      "Entity-heuristic_rule_learning_module"
    ],
    [
      "Entity-shaclearner__-s-h_",
      "Predicate-has_performance_of",
      "Entity--10_"
    ],
    [
      "Entity-shaclearner__-s-h_",
      "Predicate-is_compared_with",
      "Entity-ideal_rule_learner__shaclearner__-s-h__"
    ],
    [
      "Entity-shaclearner__-s-h_",
      "Predicate-learns",
      "Entity-146_rule"
    ],
    [
      "Entity-146_rule",
      "Predicate-fewer_than",
      "Entity-the_ideal_learner"
    ],
    [
      "Entity-ideal_rule_learner__shaclearner__-s-h__",
      "Predicate-is",
      "Entity-the_ideal_learner"
    ],
    [
      "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_",
      "Predicate-is",
      "Entity-163_rule"
    ],
    [
      "Entity-shaclearner",
      "Predicate-does_not_miss",
      "Entity-rule_of_the_highest_quality"
    ],
    [
      "Entity-number_of_missing_rule",
      "Predicate-increases_as",
      "Entity-quality_decrease"
    ],
    [
      "Entity-shaclearner",
      "Predicate-fails_to_discover",
      "Entity-rule_of_lower_quality"
    ],
    [
      "Entity-pruning",
      "Predicate-aims_to_improve",
      "Entity-computational_performance"
    ],
    [
      "Entity-pruning",
      "Predicate-associated_with",
      "Entity-high-quality_rule"
    ],
    [
      "Entity-the_goal_of_pruning",
      "Predicate-is_to_improve",
      "Entity-computational_performance"
    ],
    [
      "Entity-pruning",
      "Predicate-is_to_improve",
      "Entity-computational_performance"
    ],
    [
      "Entity-real_application",
      "Predicate-retains",
      "Entity-highest_quality_rule"
    ],
    [
      "Entity-heuristic_pruning",
      "Predicate-does_not_uniformly_increase_in_effectiveness_with",
      "Entity-rule_quality"
    ],
    [
      "Entity-pruning_variant",
      "Predicate-is_unlike",
      "Entity-heuristic_pruning"
    ],
    [
      "Entity-heuristic_pruning",
      "Predicate-does_not_increase_in_effectiveness_with",
      "Entity-rule_quality"
    ],
    [
      "Entity-complete_kg",
      "Predicate-is_used_for_learning_rules_about",
      "Entity-target_predicate"
    ],
    [
      "Entity-the_learnt_embeddings",
      "Predicate-are_used_in",
      "Entity-the_scoring_function_of_shaclearner"
    ],
    [
      "Entity-complete_kg",
      "Predicate-could_harm_the_quality_of",
      "Entity-the_learnt_embeddings"
    ],
    [
      "Entity-complete_kg",
      "Predicate-could_harm_the_quality_of",
      "Entity-learnt_embeddings"
    ],
    [
      "Entity-sampled_kg",
      "Predicate-arises_from",
      "Entity-sampling_method"
    ],
    [
      "Entity-embeddings",
      "Predicate-extracted_from",
      "Entity-sampled_kg"
    ],
    [
      "Entity-kg",
      "Predicate-customised_for",
      "Entity-target_predicate"
    ],
    [
      "Entity-sampling_method",
      "Predicate-creates",
      "Entity-kg"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "Predicate-are_related_to",
      "Entity-target_predicate"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "Predicate-are_neighbours_of",
      "Entity-directly_related_entity"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "Predicate-are_close_neighbours_of",
      "Entity-directly_related_entity"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-are_built_based_on",
      "Entity-the_experiment_(1)"
    ],
    [
      "Entity-a_tree_(2)",
      "Predicate-are_built_based_on",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-result",
      "Predicate-presenting_for",
      "Entity-a_tree_(2)"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-discovered_in",
      "Entity-the_experiment_(1)"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-are_discovered_in",
      "Entity-the_experiment_(1)"
    ],
    [
      "Entity-tree",
      "Predicate-has",
      "Entity-the_characteristic_of_discovered_tree"
    ],
    [
      "Entity-kg",
      "Predicate-shows",
      "Entity-average_treesc"
    ],
    [
      "Entity-tree",
      "Predicate-has",
      "Entity-tree-building_runtime"
    ],
    [
      "Entity-treescmin_parameter",
      "Predicate-is_used_for",
      "Entity-treesc"
    ],
    [
      "Entity-each_kg",
      "Predicate-has",
      "Entity-average_treesc"
    ],
    [
      "Entity-the_average_number_of_branch_in_the_tree",
      "Predicate-is_shown_along_with",
      "Entity-tree-building_runtime"
    ],
    [
      "Entity-the_number_of_tree_for_each_kg",
      "Predicate-is_defined_as",
      "Entity-the_number_of_target_predicate"
    ],
    [
      "Entity-the_number_of_target_predicate",
      "Predicate-has",
      "Entity-at_least_one_iop_rule"
    ],
    [
      "Entity-the_number_of_tree_for_each_kg",
      "Predicate-is_defined_by",
      "Entity-the_number_of_target_predicate"
    ],
    [
      "Entity-the_number_of_target_predicate",
      "Predicate-for_which_we_have",
      "Entity-at_least_one_iop_rule"
    ],
    [
      "Entity-the_characteristic_of_discovered_tree",
      "Predicate-are_reported",
      "Entity-result"
    ],
    [
      "Entity-the_result",
      "Predicate-shows",
      "Entity-the_running_time_for_aggregating_iop_rule_into_tree"
    ],
    [
      "Entity-the_running_time_for_aggregating_iop_rule_into_tree",
      "Predicate-is_lower_than",
      "Entity-initial_iop_mining_time"
    ],
    [
      "Entity-rule_learner",
      "Predicate-sensitivity_to",
      "Entity-maximum_length_of_rule"
    ],
    [
      "Entity-complex_shape",
      "Predicate-discovered_by",
      "Entity-rule_learner"
    ],
    [
      "Entity-potential_rule_in_the_search_space",
      "Predicate-grows_exponentially_with",
      "Entity-maximum_number_of_predicate_of_the_rule"
    ],
    [
      "Entity-mined_rule",
      "Predicate-correspond_to",
      "Entity-the_average_number_of_branch_in_the_mined_tree"
    ],
    [
      "Entity-the_corresponding_number_of_mined_rule",
      "Predicate-is_represented_by",
      "Entity-50___31___and_56_"
    ],
    [
      "Entity-the_additional_tree-shaped_constraint",
      "Predicate-imposes_over",
      "Entity-iop-shaped_constraint"
    ],
    [
      "Entity-44__of_iop_rule",
      "Predicate-are_pruned_in",
      "Entity-iop_rule"
    ],
    [
      "Entity-the_additional_tree-shaped_constraint",
      "Predicate-prunes",
      "Entity-44__of_iop_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-are_pruned_in",
      "Entity-44_"
    ],
    [
      "Entity-the_additional_tree-shaped_constraint",
      "Predicate-imposes",
      "Entity-iop-shaped_constraint"
    ],
    [
      "Entity-39-branched_tree",
      "Predicate-mined_from",
      "Entity-dbpedia_3.8"
    ],
    [
      "Entity-39-branched_tree",
      "Predicate-aggregating",
      "Entity-iop_rule"
    ],
    [
      "Entity-the_first_annotation_value__0.13_",
      "Predicate-presents",
      "Entity-sc_of_the_tree"
    ],
    [
      "Entity-the_subsequent_value",
      "Predicate-indicate",
      "Entity-branch_cardinality"
    ],
    [
      "Entity-song",
      "Predicate-has",
      "Entity-an_album"
    ],
    [
      "Entity-an_album",
      "Predicate-has",
      "Entity-a_record_label"
    ],
    [
      "Entity-an_album",
      "Predicate-has",
      "Entity-two_producer"
    ],
    [
      "Entity-an_album",
      "Predicate-has",
      "Entity-genre"
    ],
    [
      "Entity-an_artist",
      "Predicate-is",
      "Entity-musical_artist"
    ],
    [
      "Entity-song",
      "Predicate-has",
      "Entity-an_artist"
    ],
    [
      "Entity-an_album",
      "Predicate-with",
      "Entity-a_record_label"
    ],
    [
      "Entity-an_album",
      "Predicate-with",
      "Entity-two_producer"
    ],
    [
      "Entity-an_album",
      "Predicate-with",
      "Entity-genre"
    ],
    [
      "Entity-39-branched_tree",
      "Predicate-presents",
      "Entity-sc_of_the_tree"
    ],
    [
      "Entity-39-branched_tree",
      "Predicate-indicates",
      "Entity-branch_cardinality"
    ],
    [
      "Entity-an_opportunity_for_improving_tree_shape",
      "Predicate-remains_for",
      "Entity-tree_shape"
    ],
    [
      "Entity-tree_shape",
      "Predicate-improves",
      "Entity-simplicity_and_easier_interpretation"
    ],
    [
      "Entity-unifying_some_variable",
      "Predicate-occur_in",
      "Entity-predicate_that_occur_in_multiple_branch"
    ],
    [
      "Entity-an_opportunity_for_improving_tree_shape",
      "Predicate-remains_for",
      "Entity-simplicity_and_easier_interpretation"
    ],
    [
      "Entity-this_potential_post-processing_step",
      "Predicate-investigate",
      "Entity-future_work"
    ],
    [
      "Entity-this_potential_post-processing_step",
      "Predicate-to_investigate_in",
      "Entity-future_work"
    ],
    [
      "Entity-this_paper_(1)",
      "Predicate-proposes",
      "Entity-a_method_to_learn_shacl_shape_from_kg"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-describes",
      "Entity-kg_pattern"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-validates",
      "Entity-kg"
    ],
    [
      "Entity-shape",
      "Predicate-describe",
      "Entity-conjunctive_path_of_constraint"
    ],
    [
      "Entity-shape",
      "Predicate-enhanced_with",
      "Entity-minimum_cardinality_constraint"
    ],
    [
      "Entity-entity_(2)",
      "Predicate-satisfy",
      "Entity-target_predicate"
    ],
    [
      "Entity-shacl_learning_problem",
      "Predicate-reduces_to",
      "Entity-learning_a_novel_kind_of_rule"
    ],
    [
      "Entity-shacl_learning_problem",
      "Predicate-reduces_to",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-learning_a_novel_kind_of_rule",
      "Predicate-is_reduced_to",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-rule_quality_measure",
      "Predicate-introduce",
      "Entity-iop_standard_confidence"
    ],
    [
      "Entity-rule_quality_measure",
      "Predicate-introduce_(1)",
      "Entity-iop_head_coverage"
    ],
    [
      "Entity-rule_quality_measure",
      "Predicate-introduce",
      "Entity-cardinality"
    ],
    [
      "Entity-rule_quality_measure",
      "Predicate-augment",
      "Entity-a_rule_(1)"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-introduces",
      "Entity-rule_quality_measure"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-include",
      "Entity-iop_standard_confidence"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-include",
      "Entity-iop_head_coverage"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "Predicate-include",
      "Entity-cardinality"
    ],
    [
      "Entity-iopsc",
      "Predicate-extends",
      "Entity-shacl"
    ],
    [
      "Entity-iopsc",
      "Predicate-represent",
      "Entity-quantified_uncertainty"
    ],
    [
      "Entity-quantified_uncertainty",
      "Predicate-of",
      "Entity-candidate_shape"
    ],
    [
      "Entity-candidate_shape",
      "Predicate-selected_for",
      "Entity-interestingness"
    ],
    [
      "Entity-candidate_shape",
      "Predicate-selected_for",
      "Entity-kg_verification"
    ],
    [
      "Entity-method",
      "Predicate-proposes",
      "Entity-a_method_to_aggregate_learnt_iop_rule"
    ],
    [
      "Entity-method",
      "Predicate-discovers",
      "Entity-more_complex_shape"
    ],
    [
      "Entity-shape",
      "Predicate-include",
      "Entity-complex_shape"
    ],
    [
      "Entity-the_shape",
      "Predicate-supports",
      "Entity-efficient_and_interpretable_human_validation"
    ],
    [
      "Entity-the_shape",
      "Predicate-are_used_in_(1)",
      "Entity-schimatos"
    ],
    [
      "Entity-schimatos",
      "Predicate-is_used_for",
      "Entity-knowledge_graph_completion"
    ],
    [
      "Entity-shape",
      "Predicate-supports",
      "Entity-efficient_and_interpretable_human_validation"
    ],
    [
      "Entity-shape",
      "Predicate-are_used_in_(1)",
      "Entity-schimatos"
    ],
    [
      "Entity-the_shape",
      "Predicate-can_be_used_to_complete",
      "Entity-information_triggered_by_entity"
    ],
    [
      "Entity-information_triggered_by_entity",
      "Predicate-is_triggered_by",
      "Entity-entity"
    ],
    [
      "Entity-the_shape",
      "Predicate-generate_(1)",
      "Entity-dynamic_data_entry_form"
    ],
    [
      "Entity-shape",
      "Predicate-can_be_used_to_complete",
      "Entity-information_triggered_by_entity"
    ],
    [
      "Entity-shape",
      "Predicate-generate",
      "Entity-dynamic_data_entry_form"
    ],
    [
      "Entity-this_manual_mode",
      "Predicate-enables_the_acquisition_of",
      "Entity-fact_about_entity"
    ],
    [
      "Entity-target_predicate",
      "Predicate-is_related_to",
      "Entity-other_predicate_related_to_the_target"
    ],
    [
      "Entity-open_path_rule_learner",
      "Predicate-adapts",
      "Entity-open_path_rule_learner__oprl_"
    ],
    [
      "Entity-iop_rule_language",
      "Predicate-allows",
      "Entity-rule_with_open_variable"
    ],
    [
      "Entity-minimum_cardinality_constraint",
      "Predicate-introduce",
      "Entity-tree_shape"
    ],
    [
      "Entity-iop_rule_and_tree",
      "Predicate-evaluates",
      "Entity-quality_measure"
    ],
    [
      "Entity-quality_measure",
      "Predicate-computed_using",
      "Entity-fast_matrix_and_vector_operation"
    ],
    [
      "Entity-iop_rule_language",
      "Predicate-allows_us_to_mine",
      "Entity-rule_with_open_variable"
    ],
    [
      "Entity-quality_measure",
      "Predicate-are_computed_using",
      "Entity-fast_matrix_and_vector_operation"
    ],
    [
      "Entity-shaclearner",
      "Predicate-mines",
      "Entity-iop_rule"
    ],
    [
      "Entity-shaclearner",
      "Predicate-mines",
      "Entity-three_massive_real-world_benchmark_kg"
    ],
    [
      "Entity-three_massive_real-world_benchmark_kg",
      "Predicate-include",
      "Entity-yago"
    ],
    [
      "Entity-three_massive_real-world_benchmark_kg",
      "Predicate-include",
      "Entity-wikidata"
    ],
    [
      "Entity-three_massive_real-world_benchmark_kg",
      "Predicate-include",
      "Entity-dbpedia_3.8"
    ],
    [
      "Entity-shaclearner",
      "Predicate-can_mine",
      "Entity-iop_rule"
    ],
    [
      "Entity-iop_rule",
      "Predicate-are_mined_from",
      "Entity-three_massive_real-world_benchmark_kg"
    ],
    [
      "Entity-shape_constraint",
      "Predicate-learn_from",
      "Entity-schema-free_knowledge_base"
    ],
    [
      "Entity-formalism_of_constraint",
      "Predicate-determine",
      "Entity-scope_of_knowledge"
    ],
    [
      "Entity-scope_of_knowledge",
      "Predicate-acquired_by",
      "Entity-knowledge_that_can_be_acquired"
    ],
    [
      "Entity-knowledge",
      "Predicate-can_be_acquired_from",
      "Entity-schema-free_knowledge_base"
    ],
    [
      "Entity-learning_method",
      "Predicate-is_designed_for",
      "Entity-dealing_with_uncertainty_in_the_constraint_and_the_learning_process"
    ],
    [
      "Entity-dealing_with_uncertainty_in_the_constraint_and_the_learning_process",
      "Predicate-adds",
      "Entity-an_extra_dimension_of_challenge"
    ],
    [
      "Entity-dealing_with_uncertainty_in_the_constraint_and_the_learning_process",
      "Predicate-adds",
      "Entity-utility"
    ],
    [
      "Entity-a_good_learning_algorithm",
      "Predicate-should_scale",
      "Entity-constraint"
    ],
    [
      "Entity-discovered_constraint",
      "Predicate-are_more_certain_than",
      "Entity-those_that_are_missed"
    ],
    [
      "Entity-shaclearner",
      "Predicate-establishes",
      "Entity-this_problem"
    ],
    [
      "Entity-learning_algorithm",
      "Predicate-should_scale",
      "Entity-discovered_constraint"
    ],
    [
      "Entity-future_work_(1)",
      "Predicate-will_validate",
      "Entity-shape"
    ],
    [
      "Entity-shape",
      "Predicate-learn_with",
      "Entity-shaclearner"
    ],
    [
      "Entity-shape",
      "Predicate-extend_the_expressivity_of",
      "Entity-the_shape_we_can_discover"
    ],
    [
      "Entity-shape",
      "Predicate-validated_via",
      "Entity-human-expert_evaluation"
    ],
    [
      "Entity-shape",
      "Predicate-validated_via",
      "Entity-formal_human-expert_evaluation"
    ],
    [
      "Entity-the_shape_we_can_discover",
      "Predicate-will_be_validated_via",
      "Entity-formal_human-expert_evaluation"
    ],
    [
      "Entity-shaclearner",
      "Predicate-validates",
      "Entity-the_shape_we_can_discover"
    ],
    [
      "Entity-shaclearner_algorithm",
      "Predicate-redesign_for",
      "Entity-mapreduce_implementation"
    ],
    [
      "Entity-mapreduce_implementation",
      "Predicate-handles",
      "Entity-massive_kg"
    ],
    [
      "Entity-massive_kg",
      "Predicate-contains",
      "Entity-ten_of_billion_of_fact"
    ],
    [
      "Entity-massive_kg",
      "Predicate-include",
      "Entity-the_most_recent_version_of_wikidata"
    ],
    [
      "Entity-shaclearner_algorithm",
      "Predicate-is_proposed_to_redesign_for",
      "Entity-mapreduce_implementation"
    ],
    [
      "Entity-massive_kg",
      "Predicate-contain",
      "Entity-ten_of_billion_of_fact"
    ],
    [
      "Entity-wikidata",
      "Predicate-is",
      "Entity-the_most_recent_version_of_wikidata"
    ],
    [
      "Entity-learning_method",
      "Predicate-is_designed_for",
      "Entity-schema-free_knowledge_base"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-learn_from",
      "Entity-kg_k"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-utilizes",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-utilizes",
      "Entity-kg_rule-learning_method"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-is_implemented_by",
      "Entity-a_method_to_learn_shacl_shape_from_kg"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-enables",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-is_implemented_by",
      "Entity-algorithm_1__shaclearner"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-is_implemented_by",
      "Entity-a_method_to_learn_shacl_shape_from_kg"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-defines",
      "Entity-kg_pattern"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-a_method_to_learn_shacl_shape_from_kg"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-utilizes",
      "Entity-open_path_rule_learning_method"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-generate",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-is",
      "Entity-a_method_to_learn_shacl_shape_from_kg"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-learn_from",
      "Entity-each_kg"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-a_method_to_learn_shacl_shape_from_kg"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-utilizes",
      "Entity-input_kg"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-address",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-utilizes",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-extracts",
      "Entity-learned_rule"
    ],
    [
      "Entity-open_path_in_a_kg",
      "Predicate-serves_as_input_for_learning_inverse_open_path_rules",
      "Entity-kg_k"
    ],
    [
      "Entity-kg_k",
      "Predicate-serves_as_input_for",
      "Entity-kg_rule-learning_method"
    ],
    [
      "Entity-kg_k",
      "Predicate-serves_as_the_input_data_structure_for",
      "Entity-our_proposed_system"
    ],
    [
      "Entity-kg_k",
      "Predicate-serves_as_input_for",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-kg_k",
      "Predicate-defines",
      "Entity-kg_pattern"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-kg_k"
    ],
    [
      "Entity-kg_k",
      "Predicate-serves_as_input_for",
      "Entity-open_path_rule_learning_method"
    ],
    [
      "Entity-kg_k",
      "Predicate-serves_as_input_for",
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-kg_k"
    ],
    [
      "Entity-kg_k",
      "Predicate-serves_as_input_for",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-kg_k",
      "Predicate-extracts",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-kg_k",
      "Predicate-extracts",
      "Entity-learned_rule"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "Predicate-utilizes",
      "Entity-a_kg_k"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-serves_as_input_for",
      "Entity-kg_k"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-serves_as_the_input_data_source_for_learning",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-serves_as_input_for",
      "Entity-a_kg_k"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-serves_as_the_input_data_source_for",
      "Entity-a_kg_k"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-serves_as_the_input_data_source_for",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-learn_from",
      "Entity-a_kg_k"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-learn_from",
      "Entity-a_kg_k"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-defines",
      "Entity-kg_pattern"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-a_kg_k"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-serves_as_the_input_data_source_for",
      "Entity-open_path_rule_learning_method"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-generates",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-utilizes",
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-serves_as_the_input_data_source_for_learning",
      "Entity-each_kg"
    ],
    [
      "Entity-section_3",
      "Predicate-describes_the_learning_process_of_inverse_open_path_rules_from_a_KG_K",
      "Entity-a_kg_k"
    ],
    [
      "Entity-input_kg",
      "Predicate-serves_as_the_input_data_source_for",
      "Entity-a_kg_k"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-serves_as_input_for",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-extracts",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-a_kg_k",
      "Predicate-serves_as_input_for_learning",
      "Entity-learned_rule"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-utilizes",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "Predicate-is_used_to_discover_and_learn_rules_from",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-utilizes",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-open_path_in_a_kg",
      "Predicate-is_related_to",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-open_path_in_a_kg",
      "Predicate-defines",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-utilizes",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-utilizes",
      "Entity-kg_rule-learning_method"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-enables",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-evaluate",
      "Entity-the_experiment_(1)"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "Predicate-are_a_type_of",
      "Entity-kg_rule-learning_method"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-utilizes",
      "Entity-kg_rule-learning_method"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-kg_rule-learning_method"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-address",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-extracts",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-extracts",
      "Entity-learned_rule"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-our_proposed_system"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-is",
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically"
    ],
    [
      "Entity-section_3",
      "Predicate-details",
      "Entity-our_proposed_system"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-address",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-extracts",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "Predicate-defines",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-is_implemented_by",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "Predicate-utilizes",
      "Entity-open_path_rule_learning_method"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-is_implemented_by",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-shacl_learning_problem",
      "Predicate-address",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "Predicate-derive",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-learn_from",
      "Entity-kg_k"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-describes_the_learning_process_of_inverse_open_path_rules_from_a_KG_K",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-is_a_method_for_learning_rules_from_knowledge_graphs",
      "Entity-algorithm_1__shaclearner"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-is_implemented_in",
      "Entity-our_proposed_system"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-enables",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-is_an_adaptation_of",
      "Entity-algorithm_1__shaclearner"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-learns",
      "Entity-kg_pattern"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-evaluates",
      "Entity-the_experiment_(1)"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-is_an_adaptation_of",
      "Entity-open_path_rule_learning_method"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-generate",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-is",
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically"
    ],
    [
      "Entity-each_kg",
      "Predicate-learn_from",
      "Entity-algorithm_1__shaclearner"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-algorithm_1__shaclearner"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-learn_from",
      "Entity-input_kg"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-solves",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-extracts",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "Predicate-produces",
      "Entity-learned_rule"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-learn_from",
      "Entity-kg_k"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-learn_from",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-enhances",
      "Entity-kg_rule-learning_method"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-is_a",
      "Entity-iop_rule_learner"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-enables",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-learns",
      "Entity-kg_pattern"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-evaluates",
      "Entity-the_experiment_(1)"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-enhances",
      "Entity-open_path_rule_learning_method"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-generate",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-is",
      "Entity-iop_rule_learner"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-iop_rule_learner"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-address",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-extracts",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-extracts",
      "Entity-learned_rule"
    ],
    [
      "Entity-kg_pattern",
      "Predicate-defines",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-facilitates_the_extraction_and_evaluation_of_rules",
      "Entity-kg_pattern"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-learn_from",
      "Entity-kg_pattern"
    ],
    [
      "Entity-kg_pattern",
      "Predicate-facilitates",
      "Entity-learning_shacl_shape_from_kg"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-kg_pattern"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "Predicate-is_used_to_discover_and_learn_rules_from",
      "Entity-kg_pattern"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-defines",
      "Entity-kg_pattern"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-kg_pattern"
    ],
    [
      "Entity-kg_pattern",
      "Predicate-describes",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-kg_pattern",
      "Predicate-defines",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-kg_pattern",
      "Predicate-defines",
      "Entity-learned_rule"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-evaluates",
      "Entity-the_experiment_(1)"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-is_used_by",
      "Entity-open_path_rule_learning_method"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-open_path_rule_learning_method"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-utilizes",
      "Entity-open_path_rule_learning_method"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-open_path_rule_learning_method"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "Predicate-address",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "Predicate-generates",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-kg_k",
      "Predicate-is_generated_from",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-iop_rule_r",
      "Predicate-defines",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-are_generated_by",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-generate",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "Predicate-is_generated_by",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-iop_rule_r",
      "Predicate-defines",
      "Entity-kg_pattern"
    ],
    [
      "Entity-iop_rule_r",
      "Predicate-evaluate",
      "Entity-the_experiment_(1)"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "Predicate-is_generated_by",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-utilizes",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-shacl_learning_problem",
      "Predicate-solves",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-the_mined_iop_rule",
      "Predicate-are_generated_by",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-iop_rule_r",
      "Predicate-generate",
      "Entity-learned_rule"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-utilizes",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-kg_k",
      "Predicate-analyzes",
      "Entity-each_kg"
    ],
    [
      "Entity-each_kg",
      "Predicate-defines",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-analyze_and_evaluate",
      "Entity-each_kg"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-learns_shapes_from",
      "Entity-each_kg"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "Predicate-enables",
      "Entity-each_kg"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-learn_from",
      "Entity-each_kg"
    ],
    [
      "Entity-kg_pattern",
      "Predicate-defines",
      "Entity-each_kg"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-each_kg"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "Predicate-is_used_to_discover_rules_from",
      "Entity-each_kg"
    ],
    [
      "Entity-iop_rule_r",
      "Predicate-are_evaluated_using",
      "Entity-each_kg"
    ],
    [
      "Entity-each_kg",
      "Predicate-utilizes",
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-each_kg"
    ],
    [
      "Entity-input_kg",
      "Predicate-are_derived_from",
      "Entity-each_kg"
    ],
    [
      "Entity-each_kg",
      "Predicate-address",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-the_mined_iop_rule",
      "Predicate-are_analyzed_using",
      "Entity-each_kg"
    ],
    [
      "Entity-learned_rule",
      "Predicate-are_extracted_from",
      "Entity-each_kg"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-the_experiment_(1)"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically"
    ],
    [
      "Entity-section_3",
      "Predicate-details",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-section_3",
      "Predicate-details",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-kg_k",
      "Predicate-serves_as_the_input_data_structure_for",
      "Entity-input_kg"
    ],
    [
      "Entity-input_kg",
      "Predicate-defines",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-kg_rule-learning_method",
      "Predicate-utilize",
      "Entity-input_kg"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-utilizes",
      "Entity-input_kg"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "Predicate-utilizes",
      "Entity-input_kg"
    ],
    [
      "Entity-iop_rule_learner",
      "Predicate-learn_from",
      "Entity-input_kg"
    ],
    [
      "Entity-input_kg",
      "Predicate-defines",
      "Entity-kg_pattern"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-utilize",
      "Entity-input_kg"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "Predicate-utilizes",
      "Entity-input_kg"
    ],
    [
      "Entity-input_kg",
      "Predicate-generate_(1)",
      "Entity-iop_rule_r"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-utilizes",
      "Entity-input_kg"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-input_kg"
    ],
    [
      "Entity-shacl_learning_problem",
      "Predicate-is_utilized_to_address",
      "Entity-input_kg"
    ],
    [
      "Entity-the_mined_iop_rule",
      "Predicate-are_extracted_from",
      "Entity-input_kg"
    ],
    [
      "Entity-input_kg",
      "Predicate-are_used_to_generate",
      "Entity-learned_rule"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-addresses",
      "Entity-shacl_learning_problem"
    ],
    [
      "Entity-shacl_learning_problem",
      "Predicate-reduces_to",
      "Entity-the_mined_iop_rule"
    ],
    [
      "Entity-learned_rule",
      "Predicate-defines",
      "Entity-open_path_in_a_kg"
    ],
    [
      "Entity-our_proposed_system",
      "Predicate-extracts",
      "Entity-learned_rule"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "Predicate-is_derived_from",
      "Entity-learned_rule"
    ],
    [
      "Entity-the_experiment_(1)",
      "Predicate-evaluate",
      "Entity-learned_rule"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "Predicate-is_derived_from",
      "Entity-learned_rule"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "Predicate-utilizes",
      "Entity-learned_rule"
    ],
    [
      "Entity-section_3",
      "Predicate-describes",
      "Entity-learned_rule"
    ],
    [
      "Entity-shacl_learning_problem",
      "Predicate-address",
      "Entity-learned_rule"
    ],
    [
      "Entity-the_mined_iop_rule",
      "Predicate-are_extracted_from",
      "Entity-learned_rule"
    ]
  ],
  "triples_typing": [
    [
      "Entity-entity_and_predicate",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-x_(4)",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-application",
      "skos:broader",
      "Entity-use_case"
    ],
    [
      "Entity-an_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-ontology_constraint_pattern",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-information_triggered_by_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-distance_l",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-entity-instantiation_of_the_related_op_rule",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-recursive_shacl_shape"
    ],
    [
      "Entity-op_rule_p1__x__z0___-_p2__z0__z1___p3__z1__z2_",
      "skos:broader",
      "Entity-op_rule"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-human__x__x__-__father__x__z2___human__z2__z2_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-country_of_residence",
      "skos:broader",
      "Entity-location"
    ],
    [
      "Entity-embedding_representation_of_the_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-exploratory_attempt",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-human__z2__z2_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-unary_fact",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-pt",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-trump",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-each_card",
      "skos:broader",
      "Entity-object"
    ],
    [
      "Entity-the_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-non-zero_element",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-subject_and_object_binding",
      "skos:broader",
      "Entity-subject"
    ],
    [
      "Entity-shaclearner__-s-h_",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-44__of_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-advanced_feature",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-kg_rule_learning_system",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-the_object_argument",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-complete_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-kg_completion",
      "skos:broader",
      "Entity-application"
    ],
    [
      "Entity-rule_language",
      "skos:broader",
      "Entity-language"
    ],
    [
      "Entity-pair_of_entity_(1)",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-an_example",
      "skos:broader",
      "Entity-example"
    ],
    [
      "Entity-e_s",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-length_and_cardinality",
      "skos:broader",
      "Entity-length"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-the_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-an_example_of_a_shape_from_wikidata",
      "skos:broader",
      "Entity-wikidata"
    ],
    [
      "Entity-tree",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-each_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-association_rule_mining"
    ],
    [
      "Entity-the_set_of_sampled_entity_for_a_target_predicate",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-e_s",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-target",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-set_of_real_number"
    ],
    [
      "Entity-record_label",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-the_sampled_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_scoring_function_of_shaclearner",
      "skos:broader",
      "Entity-the_scoring_function"
    ],
    [
      "Entity-p1__...__pm",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-wikidata",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-link_between_the_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-plausibility",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-contributor",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-process",
      "skos:broader",
      "Entity-procedure"
    ],
    [
      "Entity-graph_data",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-the_mined_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_fact_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-f___p1__e1__e2___p1__e2__e1___p1__e2__e3___p1__e3__e1___p2__e1__e2___p2__e3__e2___p2__e3__e3___p1__e1__e3___pt__e3__e2___pt__e3__e3__",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-high-scoring_candidate_op_rule",
      "skos:broader",
      "Entity-op_rule"
    ],
    [
      "Entity-standard_confidence__sc_",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-kg_k_",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-heuristic_mechanism",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-album",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-fact_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-data_type_validation"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-logical_formalism",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-variable",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-p2_2",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-sampling_process",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-father",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-artist",
      "skos:broader",
      "Entity-person"
    ],
    [
      "Entity-opera_singer",
      "skos:broader",
      "Entity-musical_artist"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-the_set_of_sampled_entity_for_a_target_predicate",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-embedding-based_open_path_rule_learner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-poker_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-motivating_use_case",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-wikidataup",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-tree",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-e6",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-sequence_of_entity_e1__...__e__n-1___e1___...__e__m-1___e1q__e__q-1__",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-bounded_number_of_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_rule_instance",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-head_coverage",
      "skos:broader",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-birth_date",
      "skos:broader",
      "Entity-date"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-standard_shacl_shape"
    ],
    [
      "Entity-e3",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-closed_rule__cr_",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-pruning_technique",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-car1",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-closed_path_form",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_number_of_target_predicate",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-capitalof",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-brute-force_search",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-small_complete_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-ek",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-e3",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-fact_about_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-e8",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-open_path_rule_learner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-inference_rule"
    ],
    [
      "Entity-sequence_of_path_or_branch",
      "skos:broader",
      "Entity-branch"
    ],
    [
      "Entity--10_",
      "skos:broader",
      "Entity-performance"
    ],
    [
      "Entity-citizenof__x__y_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-support",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-similar_argument_embeddings",
      "skos:broader",
      "Entity-learnt_embeddings"
    ],
    [
      "Entity-cardinality_car",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-at_least_one_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-the_average_number_of_quality_iop_rule_found",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-kg_documentation",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-v1__a__p1___a__p2___...__a__pm__",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-the_body_and_the_head",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-satisfaction",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-an_entity_of_type_song",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-open_path_in_a_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-k_",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-iop_head_coverage",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-a_method_(1)",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_body_and_head_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-predicate_embeddings",
      "skos:broader",
      "Entity-embeddings"
    ],
    [
      "Entity-sampled_knowledge_graph",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-rule_learning",
      "skos:broader",
      "Entity-learning"
    ],
    [
      "Entity-smart_kg_editor",
      "skos:broader",
      "Entity-editor"
    ],
    [
      "Entity-e4",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_last_head_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-kg_pattern",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-the_body_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-annotation_value",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-five_hundred_poker_hand",
      "skos:broader",
      "Entity-a_specific_poker_hand"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-validation_framework"
    ],
    [
      "Entity-p0",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-the_number_of_tree_for_each_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-this_is_a_reassuring_property",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-k-cliques",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-formalisation",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-pt__e__e__",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-predicate_embeddings",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-ultimate_evaluation",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-1",
      "skos:broader",
      "Entity-binary_value"
    ],
    [
      "Entity-head",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_common_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-non-zero_element",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-scant_previous_research",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-iop_version_of_the_same_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-the_three_very_different_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-a__p1___a__p2_",
      "skos:broader",
      "Entity-matrix_and_vector_operation"
    ],
    [
      "Entity-p0",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-free_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-shacl-sparql",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-quality_and_quantity_of_learnt_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-performance",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-the_number_of_tree_for_each_kg",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-the_same_variable_in_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-__e__there_exists_e__such_that_headr__e__and_pt__e___e___",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-tree_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-the_power_of_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-mcar",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-real-world_kg_model",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-distinct_e_s",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-thirteen_rank",
      "skos:broader",
      "Entity-rank"
    ],
    [
      "Entity-car2",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-treesc",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-a_fact_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-greedysearch__r__mintreesc_",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-iop_rule_language",
      "skos:broader",
      "Entity-language"
    ],
    [
      "Entity-quality_measure_for_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-yago",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-closed_path_form",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-a_record_label",
      "skos:broader",
      "Entity-record_label"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-song",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_number_of_entity_that_satisfy_the_body_of_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-e1__...__en",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-learning_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-e___e1__e2__e3_",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-kg_structure",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-rescal",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-original_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_first_annotation_value__0.13_",
      "skos:broader",
      "Entity-annotation_value"
    ],
    [
      "Entity-the_head_(1)",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-one_pair",
      "skos:broader",
      "Entity-rank"
    ],
    [
      "Entity-high_quality_rule",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-pattern_from_massive_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-type_or_class",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-op",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-occupation",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-rule_quality_measure",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-146_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-embedding_learning",
      "skos:broader",
      "Entity-embeddings"
    ],
    [
      "Entity-entity_instance",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-this_strategy_for_human-kg-completion",
      "skos:broader",
      "Entity-human-kg-completion"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "skos:broader",
      "Entity-learning"
    ],
    [
      "Entity-iop-shaped_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-learning_partially_instantiated_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-full_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_population_of_a_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-the_minimum_iopsc",
      "skos:broader",
      "Entity-iopsc"
    ],
    [
      "Entity-our_new_one",
      "skos:broader",
      "Entity-new_fact"
    ],
    [
      "Entity-opera_singer",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-massive_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-r3",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-instance_of_the_rule_head",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-opsc",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-body_predicate",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-building_block",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-y_(1)",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-complete_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-p1_1",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-country",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-unary_occupation_predicate",
      "skos:broader",
      "Entity-occupation"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-ev",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-number_of_different_chain",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-inverse_open_path",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-p1__x__z0__-__p2__z0__z1___p3__z1__z2_",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-ev",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-support_of_r",
      "skos:broader",
      "Entity-support"
    ],
    [
      "Entity-shacl",
      "skos:broader",
      "Entity-data_type_validation"
    ],
    [
      "Entity-input_kg_(1)",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-car__r_",
      "skos:broader",
      "Entity-cardinality_annotation"
    ],
    [
      "Entity-open_path",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-the_head_(1)",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-relation_p0",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-class_assertion",
      "skos:broader",
      "Entity-class"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-the_number_of_tree_for_each_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-shaclearner__-s-h_",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-section_6",
      "skos:broader",
      "Entity-section"
    ],
    [
      "Entity-embedding_learner",
      "skos:broader",
      "Entity-embedding_learning"
    ],
    [
      "Entity-procedure",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-occupation",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-t",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-x",
      "skos:broader",
      "Entity-entity_variable"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-mined_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-contributor",
      "skos:broader",
      "Entity-person"
    ],
    [
      "Entity-entity_(2)",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-inverse_open_path_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-annotated_iop_rule_(1)",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-performance_evaluation",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-support",
      "skos:broader",
      "Entity-rule_learning"
    ],
    [
      "Entity-quality_annotation",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-embedding_representation_of_the_predicate",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-these_measure",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-potential_rule_in_the_search_space",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-producer",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_average_number_of_quality_iop_rule_found",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-ev",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-the_quality_performance_of_rule",
      "skos:broader",
      "Entity-performance"
    ],
    [
      "Entity-computer_scientist",
      "skos:broader",
      "Entity-type_of_entity"
    ],
    [
      "Entity-person",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-smart_kg_editor",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-our_work",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-the_logical_statement_of_the_rule",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-quality_and_quantity_of_learnt_rule",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-learning_path",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-an_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-kg_k_",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-entity_e_(1)",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-similarity",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-poker_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-two_open_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-the_first_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-human",
      "skos:broader",
      "Entity-type_of_entity"
    ],
    [
      "Entity-conjunction_of_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-maximum_length",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-l",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-car1",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-it_internal_knowledge_graph",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-rule_quality",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-entity_e_i",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-greedysearch",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-e7",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-2012",
      "skos:broader",
      "Entity-date"
    ],
    [
      "Entity-embedding-based_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-minimum_quality_threshold",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-pt",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-p1__e__e1___p2__e1__e2___...__pn__e__n-1___e__",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-a_person",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-connected_entity",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-additional_head_predicate",
      "skos:broader",
      "Entity-head_predicate"
    ],
    [
      "Entity-k",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-small_complete_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-the_proportion_of_quality_rule",
      "skos:broader",
      "Entity-quality_rule"
    ],
    [
      "Entity-three_massive_real-world_benchmark_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-human_interpretability",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-object_argument",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-over_11_million_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-the_learnt_embeddings",
      "skos:broader",
      "Entity-embedding_learning"
    ],
    [
      "Entity-predicate_less_relevant_to_the_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-section_3",
      "skos:broader",
      "Entity-section"
    ],
    [
      "Entity-146_rule",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-p",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-r3",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-ultimate_evaluation_of_an_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-it_head",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-birth_date",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-constraint_over_fact",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-quality_measure_for_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-one_specific_unary_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-a_greedy_search",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-low_threshold",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-the_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-inverse_open_path",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-kg_fact",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-pair_of_entity_(1)",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-it_body",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-the_number_of_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-which_shape_could_be_violated_by_applying_a_rule",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-maximum_number_of_predicate_of_the_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-x",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-record_label",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-these_uncertain_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-common_underlying_form",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-this_close_relationship",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-entity_e_i",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-the_head_of_the_rule",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-minimum_quality_threshold",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-our_new_one",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-contributor",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_three_very_different_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-learning_each_target_predicate",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-head_branch",
      "skos:broader",
      "Entity-branch"
    ],
    [
      "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-target_predicate",
      "skos:broader",
      "Entity-target"
    ],
    [
      "Entity-the_annotation_of_the_branch_at_the_terminating_node",
      "skos:broader",
      "Entity-branch"
    ],
    [
      "Entity-opsupp",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-node_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-a_kg_(1)",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-rlvlr",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-all_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-completion_strategy",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-real-world_kg_model",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-wikidata",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-candidate_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-car3",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-e9",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-entity_e_i",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-musical_artist",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-tree",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_head_of_the_rule_(1)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-each_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-inverse_open_path_standard_confidence",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-entrepreneur",
      "skos:broader",
      "Entity-a_person_(1)"
    ],
    [
      "Entity-validation_of_rdf_database",
      "skos:broader",
      "Entity-rdf"
    ],
    [
      "Entity-lemma",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-enterprise_knowledge_graph",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-rule_learning",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-high-quality_tree_shape",
      "skos:broader",
      "Entity-shape_tree"
    ],
    [
      "Entity-entity_x",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-this_problem",
      "skos:broader",
      "Entity-problem"
    ],
    [
      "Entity-open_path_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-original_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-the_number_of_target_predicate",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-predicate",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-z",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-miniopsc",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-the_shape",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-unmodified_shaclearner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-variant_of_shaclearner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-the_running_time_for_aggregating_iop_rule_into_tree",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-y",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-e4",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-body_atom",
      "skos:broader",
      "Entity-atom"
    ],
    [
      "Entity-embedding-based_scoring_function",
      "skos:broader",
      "Entity-scoring_function"
    ],
    [
      "Entity-car__r_",
      "skos:broader",
      "Entity-annotation"
    ],
    [
      "Entity-0",
      "skos:broader",
      "Entity-binary_value"
    ],
    [
      "Entity-this_potential_post-processing_step",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-complete_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-australia",
      "skos:broader",
      "Entity-place"
    ],
    [
      "Entity-shacl",
      "skos:broader",
      "Entity-w3c_recommendation"
    ],
    [
      "Entity-type_information",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-k",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-annotated_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-oprl_for_active_knowledge_graph_completion",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-adjacency_matrix_representation_of_the_kg",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-the_number_of_tree_for_each_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-standard_confidence",
      "skos:broader",
      "Entity-rule_learning"
    ],
    [
      "Entity-ej",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-the_relationship_between_an_op_rule_and_it_converse_iop_version",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-different_cardinality",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-one_work",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-iop_version_of_the_same_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-different_complexity",
      "skos:broader",
      "Entity-complexity"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-e5",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-a__p1_",
      "skos:broader",
      "Entity-adjacency_matrix"
    ],
    [
      "Entity-human",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-high_card",
      "skos:broader",
      "Entity-rank"
    ],
    [
      "Entity-over_11_million_fact",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-every_path_from_the_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-car2_(1)",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-tree",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-open_path",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-large_data-first_graph_database",
      "skos:broader",
      "Entity-graph_database"
    ],
    [
      "Entity-length",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-real-world_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-comparative_work",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-related_work",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-these_two_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-more_complex_shape",
      "skos:broader",
      "Entity-complex_shape"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-a_method_to_aggregate_learnt_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-the_performance_of_the_shaclearner__-sh_",
      "skos:broader",
      "Entity-performance"
    ],
    [
      "Entity-poker",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-treescmin_parameter",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-a_kg_(1)",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-album_y",
      "skos:broader",
      "Entity-an_album"
    ],
    [
      "Entity-predicate_embeddings",
      "skos:broader",
      "Entity-embedding_space"
    ],
    [
      "Entity-cardinality_annotation",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-song",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-ultimate_evaluation_of_an_iop_rule",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-open_path_standard_confidence",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-_e2__e3__(1)",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-e1__...__en",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-type_or_class_declaration",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-artist",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-each_human",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-readable_pattern",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-the_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-11_million_fact",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-y_(1)",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-yago",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-the_count_of_e_",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-post-processing_step",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-complex_shape_(1)",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-the_two_type-like_predicate_from_dbpedia_3.8",
      "skos:broader",
      "Entity-dbpedia_3.8"
    ],
    [
      "Entity-entity_instance",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-body_of_the_rule",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-path_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-information_triggered_by_entity",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-learning"
    ],
    [
      "Entity-proposed_system",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-similar_argument_embeddings",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-predicate_embeddings",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-open_path__op__rule",
      "skos:broader",
      "Entity-active_knowledge_graph_completion"
    ],
    [
      "Entity-previous_heuristic_rule_learner",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-wikidata",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-subject_and_object_argument_embeddings",
      "skos:broader",
      "Entity-embedding_learning"
    ],
    [
      "Entity-human_validation",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-three_massive_real-world_benchmark_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-type-like_unary_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-lower-cardinality_version_of_that_rule",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-embedding_learner",
      "skos:broader",
      "Entity-learnt_embeddings"
    ],
    [
      "Entity-p1__x__z0__-__p2__z0__z1___p3__z1__z2_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-sampled_kg",
      "skos:broader",
      "Entity-sample"
    ],
    [
      "Entity-the_defined_threshold__treescmin_",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-nativelanguage",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-fact_pk__ei__ej_",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-common_representation",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-fact_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-country",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-fact",
      "skos:broader",
      "Entity-rdf_triple"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-the_whole_path",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-a_person",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-e1__e2__e3",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-ophc",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-highest_quality_rule",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-large_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-e_s",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-the_denominator_of_iopsc__r_",
      "skos:broader",
      "Entity-denominator"
    ],
    [
      "Entity-additional_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-valid_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-constraint",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-shape_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-birthplace",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-fact_about_those_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_full_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-kg_rule-learning_method",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-the_second",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-occupation",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-object_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-kg_completion",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-entrepreneur",
      "skos:broader",
      "Entity-occupation"
    ],
    [
      "Entity-the_number_of_entity_that_satisfy_the_head_of_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-australia",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-entity_e_(1)",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-name_of_an_album",
      "skos:broader",
      "Entity-album"
    ],
    [
      "Entity-the_rule_(4)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-x_and_z_i",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-the_other_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-each_rule_(1)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-fragment_of_the_kg_k_",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-embedding_learning",
      "skos:broader",
      "Entity-embedding_space"
    ],
    [
      "Entity-complete_kg",
      "skos:broader",
      "Entity-complete"
    ],
    [
      "Entity-cardinality_of_a_path",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-person",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-link_between_the_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-real_application",
      "skos:broader",
      "Entity-application"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-rescal",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-those_we_used_in_the_performance_evaluation",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-exists",
      "skos:broader",
      "Entity-quantifier"
    ],
    [
      "Entity-confidence",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-2017",
      "skos:broader",
      "Entity-date"
    ],
    [
      "Entity-scalability",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-synthetic_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-treescorig",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-a_tree_(1)",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-max_rule_cardinality",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-opsc",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-building_block",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-strength_of_evidence",
      "skos:broader",
      "Entity-evidence"
    ],
    [
      "Entity-a_sampling_method_sampling",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-e7",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-small_poker_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-car1",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-general_form",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-embedding_learning",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-shape_constraint",
      "skos:broader",
      "Entity-data_type_validation"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-it_internal_knowledge_graph",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-p1__x__z0_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_learnt_embeddings",
      "skos:broader",
      "Entity-learnt_embeddings"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-expressivity_of_the_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-e3",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-suit",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-locatedin__z__y_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-complex_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-ideal",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_number_of_entity_that_satisfy_the_body_of_the_rule",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-existing_ontology",
      "skos:broader",
      "Entity-ontology"
    ],
    [
      "Entity-extend_a_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-readable_pattern",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-the_number_of_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-a__pt_",
      "skos:broader",
      "Entity-square_n_x_n_adjacency_matrix"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-tree-building_runtime",
      "skos:broader",
      "Entity-runtime"
    ],
    [
      "Entity-f",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-the_practical_meaning_of_the_iopsc_and_iophc_quality",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-rule_learning",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-the_confidence_of_the_second",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-wikidata",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-connected_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-ontology_constraint_pattern",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-relevant_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-embedding-based_op_rule_learning",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-such_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-tree-shaped_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-rdf"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-iop_head_coverage",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-the_object_argument_(1)",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-the_number_of_entity_that_join_the_head_of_the_rule_to_it_body",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-which_shape_could_be_violated_by_applying_a_rule",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-pathfinding",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-genre",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-z_child__x__z_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-sample",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-p1_t",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-entity-instantiation_of_the_related_op_rule",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-computational_performance",
      "skos:broader",
      "Entity-performance"
    ],
    [
      "Entity-father",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-p2__z0__z1_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-candidate_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_various_feature_value",
      "skos:broader",
      "Entity-feature_value"
    ],
    [
      "Entity-result_of_an_experimental_evaluation",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-treesc",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-this_section",
      "skos:broader",
      "Entity-section"
    ],
    [
      "Entity-human__x__x__-__nativelanguage__x__z3___language__z3__z3_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-inverse_open_path_head_coverage",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl"
    ],
    [
      "Entity-target_predicate",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_common_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-record_label",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-musical_artist",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-embedding_learner",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-number_of_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-country_of_residence",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-free_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-contributor",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-consistent",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-target_predicate",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-transforming_kg_with_type_predicate_for_experiment",
      "skos:broader",
      "Entity-experiment"
    ],
    [
      "Entity-kg_k_",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-inverse_open_path_support",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-e5",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-mcar",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-a_kg_(1)",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-subject",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-entity_that_satisfy_the_second_argument_of_the_body",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-car2",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-the_set_of_sampled_entity_for_a_target_predicate",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-iopsc_in_range_of__0.1__0.3_",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-horn",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-heuristic_pruning",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-a_specific_poker_hand",
      "skos:broader",
      "Entity-each_poker_hand"
    ],
    [
      "Entity-semi-automatic_manner",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-the_predicate_of_the_head",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-scope_of_knowledge",
      "skos:broader",
      "Entity-knowledge"
    ],
    [
      "Entity-tree",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-embedding-based_op_rule_learning",
      "skos:broader",
      "Entity-learning"
    ],
    [
      "Entity-this_lemma",
      "skos:broader",
      "Entity-lemma"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-p",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-candidate_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-subject_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_atomic_body",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-p1_1",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-step",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-k_",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-definition_3",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-pt",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-the_cardinality",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-e8",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-closed_path_rule",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-shacl",
      "skos:broader",
      "Entity-language"
    ],
    [
      "Entity-not-null_and_other_schema-based_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-place_of_birth",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-ideal_rule_learner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-min_cardinality",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-p1_1",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-shape_pattern"
    ],
    [
      "Entity-open_path_support",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-a_path",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_original_predicate_and_fact_in_the_kg",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-left-hand_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-the_specific_body_target_predicate__pt",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-support",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-sampling",
      "skos:broader",
      "Entity-sampling_process"
    ],
    [
      "Entity-interestingness",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-e4",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-frequent_pattern",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_learnt_embeddings",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-kg_rule_learning_system",
      "skos:broader",
      "Entity-rule_learning"
    ],
    [
      "Entity-iop_rule_pt__x__y__-__p1__y__z___p2__z__t_",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-hole",
      "skos:broader",
      "Entity-embedding_learning"
    ],
    [
      "Entity-section_5",
      "skos:broader",
      "Entity-section"
    ],
    [
      "Entity-car1",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-mintreesc",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-binary_predicate",
      "skos:broader",
      "Entity-type_predicate"
    ],
    [
      "Entity-functional_graph_dependency__fgd_",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-e3",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-t",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-z0",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-alternative_formalism",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-an_entity_of_type_song",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-experiment",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-certain_property_in_the_embedding_space",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-the_converse_of_op_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-fragment_of_the_kg_k_",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-yago2s",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-k_",
      "skos:broader",
      "Entity-subgraph_of_the_input_graph"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-an_extensive_representation_of_predicate_and_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-iop_rule_and_tree",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-pi__e__e___or_pi__e___e_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-knowledge_graph",
      "skos:broader",
      "Entity-graph_data"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "skos:broader",
      "Entity-learning_algorithm"
    ],
    [
      "Entity-learned_rule",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-_e2__e3__(1)",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-shaclearner__s_pruning_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-satisfying_entity_e2_and_e3",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-iopsc_value",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-variable_unification",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-definition_4",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-related_fact",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-hole",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-cardinality_of_a_path",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-any_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-subject_and_object_argument_embeddings",
      "skos:broader",
      "Entity-learnt_embeddings"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "skos:broader",
      "Entity-learning_method"
    ],
    [
      "Entity-e1__...__en",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-song",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-rule_and_constraint",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-l",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-kg_k",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-shacl_advanced_feature",
      "skos:broader",
      "Entity-extension"
    ],
    [
      "Entity-head",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-learnt_embeddings",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-shape_pattern",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-the_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-schema_information_for_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-object_argument",
      "skos:broader",
      "Entity-object"
    ],
    [
      "Entity-op",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-r_",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-this_phenomenon",
      "skos:broader",
      "Entity-phenomenon"
    ],
    [
      "Entity-quality_measure",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-path_of_entity_that_satisfy_a_chain_of_predicate_in_the_rule",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-trump",
      "skos:broader",
      "Entity-person"
    ],
    [
      "Entity-iop_standard_confidence",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-shape_of_varying_complexity_and_diversity",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-nativelanguage",
      "skos:broader",
      "Entity-language"
    ],
    [
      "Entity-human",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-canberra",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-open_path_rule_learner__oprl_",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-the_quality_of_a_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-rule_quality",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-e1__e2__e3",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-tree_shape_learning",
      "skos:broader",
      "Entity-learning_method"
    ],
    [
      "Entity-wikidata",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-mintreesc",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-the_body_of_r",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-tree__treesupp__treesc",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-miniophc",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-object_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-the_fact_in_the_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-constraint",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-inverse_open_path_rule",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-pair",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-human",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-path_over_connected_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-the_quality_of_performance",
      "skos:broader",
      "Entity-performance"
    ],
    [
      "Entity-fact_in_the_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-large_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-binary_predicate",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-knowledge_graph__kg_",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-open_path_rule_learner__oprl_",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-additional_head_predicate",
      "skos:broader",
      "Entity-the_predicate_of_the_head"
    ],
    [
      "Entity-learnt_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-x",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-op",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-million_of_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-each_entity_e_i",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-ek",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-a_fact",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-learning_partially_instantiated_shape",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-all_these_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-occupation",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-potential_rule_in_the_search_space",
      "skos:broader",
      "Entity-search_space_(1)"
    ],
    [
      "Entity-four_benchmark_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-a_tree_(1)",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-data_type_validation"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-genre",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-distance_l",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-evaluation_experiment",
      "skos:broader",
      "Entity-experiment"
    ],
    [
      "Entity-the_quality_performance_of_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-quantified_uncertainty",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-p1__e__e1___p2__e1__e2___...__pn__e__n-1___e__",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-iop",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-z0",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-close_neighbour",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-closed_rule",
      "skos:broader",
      "Entity-inference_rule"
    ],
    [
      "Entity-branch_cardinality",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-person",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-sampled_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-plain_predicate",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-e3",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-to_support_new_data_entry",
      "skos:broader",
      "Entity-data_entry"
    ],
    [
      "Entity-x_(1)",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-fact_in_the_kg",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-ev",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-role",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-wikidataup",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-more_complex_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-all_possible_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_original_predicate_and_fact_in_the_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-an_example_of_a_shape_from_wikidata",
      "skos:broader",
      "Entity-example"
    ],
    [
      "Entity-car3",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-the_body_in_the_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-kg_pattern",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-open_path__opsupp__opsc__ophc",
      "skos:broader",
      "Entity-open_path"
    ],
    [
      "Entity-the_count_of_non-zero_element_in_that_vector",
      "skos:broader",
      "Entity-non-zero_element"
    ],
    [
      "Entity-those_that_are_missed",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-small_poker_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-e7",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-extension"
    ],
    [
      "Entity-parameter",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-the_defined_threshold__treescmin_",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-connected_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-free_variable",
      "skos:broader",
      "Entity-quantifier"
    ],
    [
      "Entity-poor_quality_rule",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-ophc",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-functional_graph_dependency__fgd_",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-standard_confidence",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-shaclearner",
      "skos:broader",
      "Entity-learning_method"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-open_path_in_a_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-ev",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-shape_of_varying_complexity_and_diversity",
      "skos:broader",
      "Entity-complexity"
    ],
    [
      "Entity-heuristic_rule_learner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-a_satisfying_e",
      "skos:broader",
      "Entity-satisfaction"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-head_path",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-miniopsc",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-conjunction_of_iop_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-at_least_two_parent",
      "skos:broader",
      "Entity-parent"
    ],
    [
      "Entity-a_tree",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-convenient_syntactic_sugar",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_object_argument_of_the_target_predicate",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-sampled_knowledge_graph",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-many_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-benchmark_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-the_proportion_of_mined_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-name_of_an_album",
      "skos:broader",
      "Entity-name"
    ],
    [
      "Entity-subject_and_object_argument_embeddings",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-the_confidence_of_the_third_rule",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-cardinality_of_1",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-confidence",
      "skos:broader",
      "Entity-rule_mining"
    ],
    [
      "Entity-real-world_massive_knowledge_graph__kg_",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-closed_path_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-entity-instantiation_of_the_related_op_rule",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_shape",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-zn1",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-informative_and_intuitive_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-yago",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-oprl",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-an_entity_e",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-their_length",
      "skos:broader",
      "Entity-length"
    ],
    [
      "Entity-a_specific_poker_hand",
      "skos:broader",
      "Entity-hand"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-this_simple_approach",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_atomic_body",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-element_with_a_value___car",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-ej",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-subject",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-entity_that_satisfy_the_second_argument_of_the_body",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-minimum_cardinality_1",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-a__p1_",
      "skos:broader",
      "Entity-the_adjacency_matrix"
    ],
    [
      "Entity-opsc",
      "skos:broader",
      "Entity-type_of_entity"
    ],
    [
      "Entity-entity_and_predicate",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-these_two_pruning_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-an_extensive_representation_of_predicate_and_entity",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-learning_path",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-open_path_standard_confidence",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-comparative_work",
      "skos:broader",
      "Entity-work"
    ],
    [
      "Entity-singer",
      "skos:broader",
      "Entity-role"
    ],
    [
      "Entity-pattern_from_massive_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-embeddings__k__",
      "skos:broader",
      "Entity-embeddings"
    ],
    [
      "Entity-concept",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-rule_learning",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-tree__treesupp__treesc",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-kg_k_",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-number_of_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-iop_rule_learner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-the_class_with_few_instance",
      "skos:broader",
      "Entity-class"
    ],
    [
      "Entity-the_number_of_entity_that_satisfy_the_head_of_the_rule",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-directly_related_entity",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-the_subsequent_value",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-an_identifier_for_an_object",
      "skos:broader",
      "Entity-object"
    ],
    [
      "Entity-the_set_of_sampled_entity_for_a_target_predicate",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_body",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-a_fact_in_the_kg",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-shape_learning_system",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-citizenof",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-semantics"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-existential_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_head_(2)",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-kg_structure",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-learning_algorithm",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-initial_iop_mining_time",
      "skos:broader",
      "Entity-iop_mining_time"
    ],
    [
      "Entity-esample",
      "skos:broader",
      "Entity-sample"
    ],
    [
      "Entity-constraint",
      "skos:broader",
      "Entity-restriction"
    ],
    [
      "Entity-semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-semantics"
    ],
    [
      "Entity-kg_itself",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-it_component",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-74",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-all_predicate_in_the_sampled_k_",
      "skos:broader",
      "Entity-sample"
    ],
    [
      "Entity-subject_and_object_binding",
      "skos:broader",
      "Entity-object"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-p1___z0__z1_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-e8",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-the_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-iop_rule_learner",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-knowledge_graph",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_population_of_a_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-type_or_class_declaration",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-one_pair",
      "skos:broader",
      "Entity-hand"
    ],
    [
      "Entity-massive_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-length",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-the_quality_and_quantity_of_learnt_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-livesin__x__z_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-learning_each_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-e3",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-search_space",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_corresponding_number_of_mined_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-three_different_car_value_1__2__and_3",
      "skos:broader",
      "Entity-car"
    ],
    [
      "Entity-rdf_graph",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-path_of_entity_that_satisfy_a_chain_of_predicate_in_the_rule",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-two_open_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-australia",
      "skos:broader",
      "Entity-location"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl"
    ],
    [
      "Entity-these_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-tree_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-rule_of_low_quality",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-future_work",
      "skos:broader",
      "Entity-work"
    ],
    [
      "Entity-manual_kg_editing_task",
      "skos:broader",
      "Entity-task"
    ],
    [
      "Entity-synthetic_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-lemma_1",
      "skos:broader",
      "Entity-lemma"
    ],
    [
      "Entity-smart_kg_editor",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-search_space_(1)",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-open_path_head_coverage",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-kg_k_",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-country__z1__z1_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-unary_predicate",
      "skos:broader",
      "Entity-predicate_logic"
    ],
    [
      "Entity-car1",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-real-world_massive_knowledge_graph__kg_",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-rule_with_open_variable",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-human__x__x__-__citizenof__x__z1___country__z1__z1_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-shacl",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-the_first_method_to_learn_shape_from_massive_kg_automatically",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-an_extensive_representation_of_predicate_and_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-the__i__j__-th_element_a__pk___i__j_",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-album",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-e3",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-subject_argument",
      "skos:broader",
      "Entity-subject"
    ],
    [
      "Entity-op_rule",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-shacl_learning_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-a_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-constraint_on_graph_data",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-major_approach_to_rule_learning",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-path_over_connected_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-satisfying_entity_e2_and_e3",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-pruned",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-related_fact",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-an_entity_of_type_song",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-fact_set_k_",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-unifying_some_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-real_application",
      "skos:broader",
      "Entity-use_case"
    ],
    [
      "Entity-discovery_of_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-7___e2__e4__e5__e6__e7__e8__e9__",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-literature",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-ongoing_data_entry",
      "skos:broader",
      "Entity-data_entry"
    ],
    [
      "Entity-human_expert",
      "skos:broader",
      "Entity-person"
    ],
    [
      "Entity-good_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-all_binary_predicate_of_yago2s",
      "skos:broader",
      "Entity-yago2s"
    ],
    [
      "Entity-p1_1",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-public_knowledge_graph",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-y",
      "skos:broader",
      "Entity-entity_variable"
    ],
    [
      "Entity-iopsc_in_range_of__0.1__0.3_",
      "skos:broader",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-pop_star",
      "skos:broader",
      "Entity-type_of_entity"
    ],
    [
      "Entity-citizenof__x__z1_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-target_predicate_instance_in_the_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-method_to_aggregate_iop_rule",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-variant",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-open_path__opsupp__opsc__ophc",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-_e2__e3__(1)",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-maximum_number_of_predicate_of_the_rule",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-nativelanguage",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-specific_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-head",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-sampling__k__pt_",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-entity",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-opsc",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-canberra",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-k",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-a_specific_poker_hand",
      "skos:broader",
      "Entity-poker_hand"
    ],
    [
      "Entity-number_of_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-p2_t",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-this_feature",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-left-hand_chart",
      "skos:broader",
      "Entity-chart"
    ],
    [
      "Entity-data-first_approach",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-fact",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-generality",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-iop_standard_confidence",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-predicate_p_k",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-algorithm_1",
      "skos:broader",
      "Entity-procedure"
    ],
    [
      "Entity-entity_pair",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-all_predicate_in_the_sampled_k_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-shacl_learning_method",
      "skos:broader",
      "Entity-learning"
    ],
    [
      "Entity-genre",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-min_cardinality",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-a_key_feature_in_their_syntax",
      "skos:broader",
      "Entity-syntax"
    ],
    [
      "Entity-artist",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-a_fact_in_the_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-this_experiment",
      "skos:broader",
      "Entity-experiment"
    ],
    [
      "Entity-kg_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-op",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-p1_t",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-yago",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-all_these_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-a_kg_k",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-hole",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-head_coverage__hc_",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-path",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-entity_e_(1)",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_evolving_nature_of_human_knowledge",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-enterprise_knowledge_graph",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_head",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-car2",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-problem"
    ],
    [
      "Entity-pt__e___e_",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-quality_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-manual_mode",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_validity_of_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-one_pair",
      "skos:broader",
      "Entity-poker_hand"
    ],
    [
      "Entity-pattern_from_massive_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-the_sampled_kg_is_far_smaller_than_the_original_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-p1__z0__z1___p2__z1__z2___...__pn__zn1__y___x_pt__x__z0_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-mapreduce",
      "skos:broader",
      "Entity-computing"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-count_1",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-ev",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_minimum_iopsc",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_distribution_of_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl"
    ],
    [
      "Entity-predicate",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-tree_shape",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-predicate_argument",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-country",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-set_of_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-entity_and_predicate",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-a_person",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-x_(4)",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the__i__j__-th_element_a__pk___i__j_",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-heuristic_pruning",
      "skos:broader",
      "Entity-our_pruning_technique"
    ],
    [
      "Entity-a_method_to_aggregate_learnt_iop_rule",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-our_proposed_system",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-head_of_the_rule",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-an_album",
      "skos:broader",
      "Entity-album"
    ],
    [
      "Entity-dbpedia_3.8",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_body_of_the_rule",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-count",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-target_predicate_instance",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-headr__e_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-r3",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_same_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-cover",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-fact_related_to_them",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-trump",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-matrix-computation_of_the_quality_measure",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-new_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_number_of_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-sc_of_the_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-semantics"
    ],
    [
      "Entity-the_number_of_instance_of_the_head_in_the_kb",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-p2_t",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-previous_research",
      "skos:broader",
      "Entity-literature"
    ],
    [
      "Entity-unary_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-opsupp",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-pathfinding__k___pt__p__a__k_",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-car_value_1__2__and_3",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-cardinality_annotation",
      "skos:broader",
      "Entity-annotation"
    ],
    [
      "Entity-shacl",
      "skos:broader",
      "Entity-validation_framework"
    ],
    [
      "Entity-consistent",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-ej",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-initial_iop_mining_time",
      "skos:broader",
      "Entity-iop_mining"
    ],
    [
      "Entity-class",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-open_path_standard_confidence",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-pair_of_entity__e__e__",
      "skos:broader",
      "Entity-pair_of_entity_(1)"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-dealing_with_uncertainty_in_the_constraint_and_the_learning_process",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-no_benchmark",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-higher_confidence_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-real-world_massive_knowledge_graph__kg_",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-datatype_property",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-a_deck",
      "skos:broader",
      "Entity-deck"
    ],
    [
      "Entity-embeddings",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-smart_kg_editor",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-universal_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-depth",
      "skos:broader",
      "Entity-structural_feature"
    ],
    [
      "Entity-kg_k_",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-the_running_time_for_aggregating_iop_rule_into_tree",
      "skos:broader",
      "Entity-runtime"
    ],
    [
      "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-stricter_quality_threshold",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-logical_statement",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-kg_k",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-iop_version_of_the_same_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-schema_information_for_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-the_proportion_of_quality_rule",
      "skos:broader",
      "Entity-proportion"
    ],
    [
      "Entity-musical_artist",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-the_shape_(1)"
    ],
    [
      "Entity-right-hand_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-father__x__z2_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-mine_such_rule_from_a_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-high_card",
      "skos:broader",
      "Entity-hand"
    ],
    [
      "Entity-the_iop_rule_r",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_proportion_of_mined_rule",
      "skos:broader",
      "Entity-proportion"
    ],
    [
      "Entity-head",
      "skos:broader",
      "Entity-atom"
    ],
    [
      "Entity-highest_quality_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-z0",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-ophc",
      "skos:broader",
      "Entity-type_of_entity"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-kg_k_",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_iop_rule_r",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-min_cardinality",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-l",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-the_process_of_constructing_one_kind_of_more_complex_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-album",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-inferring_new_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-the_count_of_e_",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-cover",
      "skos:broader",
      "Entity-rule_learning"
    ],
    [
      "Entity-paper",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-line_8_of_algorithm_1",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-the_input_graph",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-pruning_variant",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-pattern",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-sequence_of_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_set_of_sampled_entity_for_a_target_predicate",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-complex_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-prior_sampling",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-2",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-the_fact_in_the_head_of_the_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-nested_sh__path_declaration",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-set_of_rule_and_shape",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-mintreesc",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-x_and_z_i",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-kg_fact",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-quality",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-r_",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-singer",
      "skos:broader",
      "Entity-person"
    ],
    [
      "Entity-input_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-a_method_to_learn_shacl_shape_from_kg",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-e8",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-set_of_rule_and_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-k",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-exists__z__s__y__s_",
      "skos:broader",
      "Entity-quantifier"
    ],
    [
      "Entity-algorithm_1",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-entity_that_satisfy_the_first_argument_of_the_head",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-predicate_logic_formalism"
    ],
    [
      "Entity-iop_mining_time",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-pt__e__e___or_pt__e___e_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-embeddings__k__",
      "skos:broader",
      "Entity-embedding_space"
    ],
    [
      "Entity-structural_feature",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-pathfinding",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-a_system_(1)",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-e5",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-this_paper_(1)",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-closed_path__cp__rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-the_literature",
      "skos:broader",
      "Entity-literature"
    ],
    [
      "Entity-our_novel_tree_shape",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-it_more_curated_development",
      "skos:broader",
      "Entity-development"
    ],
    [
      "Entity-other_predicate_related_to_the_target",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-constraint_on_graph_data",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-miniophc",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-million_of_entity",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-p1__x__z0__-__p2__z0__z1___p3__z1__z2_",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-large_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-the_most_recent_version_of_wikidata",
      "skos:broader",
      "Entity-wikidata"
    ],
    [
      "Entity-car1",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-kg_rule-learning_method",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-max_rule_length",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-kg_completion",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-one_process",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-synthetic_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_full_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-entity_e",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-embeddings__k__",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-p",
      "skos:broader",
      "Entity-class"
    ],
    [
      "Entity-rule_with_cardinality_car",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-quality_decrease",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-complexity_of_the_sampling_algorithm",
      "skos:broader",
      "Entity-complexity"
    ],
    [
      "Entity-z_i",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-treescmin_parameter",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-e9",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-depth-first",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-sampling",
      "skos:broader",
      "Entity-sampling_method"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-rule_learning"
    ],
    [
      "Entity-entity_e_i",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-ej",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-the_pair__e__e___satisfying_the_head",
      "skos:broader",
      "Entity-pair"
    ],
    [
      "Entity-validation_of_rdf_database",
      "skos:broader",
      "Entity-rdf_triple"
    ],
    [
      "Entity-element_a__pk___i__j_",
      "skos:broader",
      "Entity-binary_value"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-information_triggered_by_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-car3",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-39-branched_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-entity_x",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-fullhouse__x_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-standard_confidence__sc_",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_logical_statement_of_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-r2",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-two_parent",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-_a__pk___k_in_1_.._m_",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-fact",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-a_sequence_of_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-public_knowledge_graph",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-length",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-the_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-small_poker_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-5___e1__e2__e3__e4__e5__",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-x_(1)",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-the_subject_argument",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-entity",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-body",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-closed_intermediate_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-computing",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-path_of_entity_that_satisfy_a_chain_of_predicate_in_the_rule",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-strategy",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-related_work",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-the_predicate_of_the_head",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-large_data-first_graph_database",
      "skos:broader",
      "Entity-graph_data"
    ],
    [
      "Entity-mary",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-inverse_open_path_rule",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-breadth-first_manner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-extend_a_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-e1__e2__e3",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-maximum_number_of_predicate",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-canberra",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-ophc",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-entity_pair",
      "skos:broader",
      "Entity-pair"
    ],
    [
      "Entity-2_producer",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-embedding-based_method",
      "skos:broader",
      "Entity-learning_method"
    ],
    [
      "Entity-syntactic_sugar",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-this_strategy_for_human-kg-completion",
      "skos:broader",
      "Entity-kg_completion"
    ],
    [
      "Entity-simplicity_and_easier_interpretation",
      "skos:broader",
      "Entity-simplicity"
    ],
    [
      "Entity-object_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-learned_rule"
    ],
    [
      "Entity-shape_in_the_form_of_a_path",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-rlvlr",
      "skos:broader",
      "Entity-rule_language"
    ],
    [
      "Entity-alternative_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-triple_format",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-person",
      "skos:broader",
      "Entity-human"
    ],
    [
      "Entity-knowledge_graph",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-head_coverage",
      "skos:broader",
      "Entity-rule_learning"
    ],
    [
      "Entity-element",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-artist",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-path_over_connected_entity",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-___e__e____body_r__e__e____",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-definition_6",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-definition_1",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-rlvlr",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-all_variable_of_a_rule",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-the_pattern_of_existential_variable_in_the_head_and_universal_variable_in_the_body",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-_e2__e3_",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-learnt_embeddings",
      "skos:broader",
      "Entity-embedding_space"
    ],
    [
      "Entity-cr",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-procedural_method",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-the_path",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-path1__path2__...__pathq",
      "skos:broader",
      "Entity-branch"
    ],
    [
      "Entity-development",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-path",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-scoring_function",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-entity_e_(1)",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-size_2lfe",
      "skos:broader",
      "Entity-size"
    ],
    [
      "Entity-maximum_number_of_predicate_of_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-annotation"
    ],
    [
      "Entity-major_approach_to_rule_learning",
      "skos:broader",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-property_shape",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-open_path__op__rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-fact_about_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-set_of_shape",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-the_proportion_of_rule_consequent_instance",
      "skos:broader",
      "Entity-proportion"
    ],
    [
      "Entity-each_human",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-k_",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-minimum_cardinality_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-the_path_of_head_predicate",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-learning_a_novel_kind_of_rule",
      "skos:broader",
      "Entity-learning"
    ],
    [
      "Entity-partially_instantiated_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-the_count_of_e_",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-set_of_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-iop_rule_language",
      "skos:broader",
      "Entity-rule_language"
    ],
    [
      "Entity-language",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-the_same_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-the_running_time_for_aggregating_iop_rule_into_tree",
      "skos:broader",
      "Entity-running_time"
    ],
    [
      "Entity-a_person",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-data_entry",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-shape_quality_measure",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-unary_occupation_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-population",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-extended_validation_framework",
      "skos:broader",
      "Entity-validation_framework"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-conjunctive_atom",
      "skos:broader",
      "Entity-atom"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-each_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-annotated_iop_rule_(1)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-evaluating_kg_rule-learning_method",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-ideal_learner",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-the_path_p1__p2__...__pm",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-the_binary_fact_p__e__e_",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-property_shape",
      "skos:broader",
      "Entity-shacl_advanced_feature"
    ],
    [
      "Entity-closed_rule",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-language",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl"
    ],
    [
      "Entity-the_number_of_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-dbpedia_3.8",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-the_sampled_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-embedding_learning",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-type_song",
      "skos:broader",
      "Entity-song"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-a_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-the_relevance_of_the_rule",
      "skos:broader",
      "Entity-relevance"
    ],
    [
      "Entity-the_set_of_such_entity",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-annotation"
    ],
    [
      "Entity-frequent_pattern",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-the_running_time_for_aggregating_iop_rule_into_tree",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-potential_rule_in_the_search_space",
      "skos:broader",
      "Entity-search_space"
    ],
    [
      "Entity-fig_._2_(1)",
      "skos:broader",
      "Entity-figure"
    ],
    [
      "Entity-number_of_rule",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-cr",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l",
      "skos:broader",
      "Entity-proportion"
    ],
    [
      "Entity-car2",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-australia",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-annotated_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-the_quality_and_quantity_of_learnt_rule",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-the_pair__e___e_",
      "skos:broader",
      "Entity-pair"
    ],
    [
      "Entity-right-hand_tree",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-embedding-based_op_rule_learning",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-head_atom",
      "skos:broader",
      "Entity-atom"
    ],
    [
      "Entity-subject_argument",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-iop_head_coverage",
      "skos:broader",
      "Entity-rule_quality"
    ],
    [
      "Entity-v1__p1__p2_",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-higher_confidence_in_the_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-information",
      "skos:broader",
      "Entity-knowledge"
    ],
    [
      "Entity-livesin__x__z_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-a_formalisation_of_the_approach",
      "skos:broader",
      "Entity-formalisation"
    ],
    [
      "Entity-subgraph_of_the_input_graph",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-citizenof",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-inverse_open_path",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-embeddings",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-rule_of_low_quality",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-representation",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-ongoing_maintenance_and_extension",
      "skos:broader",
      "Entity-maintenance"
    ],
    [
      "Entity-musical_artist",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-kg_k",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-schema_information_for_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-extension",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-all_rule_that_bind_the_subject_argument",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-these_threshold",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-ideal_rule_learner__shaclearner__-s-h__",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-mine_such_rule_from_a_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-entity_e_i",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-closed_path__cp__rule",
      "skos:broader",
      "Entity-knowledge_graph_completion"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-the_count",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-shape_constraint_language",
      "skos:broader",
      "Entity-w3c_recommendation"
    ],
    [
      "Entity-kg_documentation",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-entity-instantiation",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-355",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-massive_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-performance",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-human-kg-completion",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-p1__x__z1_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-e9",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-entity_e",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-_031_",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-oprl",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-entity_e_i",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-pt",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-opsupp",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-iop",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-entity_that_satisfy_the_first_argument_of_the_head",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-resource_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-rule_quality_measure"
    ],
    [
      "Entity-p2_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-entity_x",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-inverse_open_path_support",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-fact_f",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-third_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-node_and_property_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-pop_star",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-open_path_support",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-unary_predicate",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-a_kg_k",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-pt",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-body_r",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-embeddings",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-p__i",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-p2_t",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-v2",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-formal_quality_measure",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-number_of_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-e5",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-good_op_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-cardinality_car",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-producer",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-predicate_p_k",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-entity_e",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-treescmin",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-class_with_few_instance",
      "skos:broader",
      "Entity-class"
    ],
    [
      "Entity-the_power_of_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-rdf__type",
      "skos:broader",
      "Entity-rdf"
    ],
    [
      "Entity-explanatory_power_of_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_number_of_entity_that_satisfy_the_body_of_the_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-entity-instantiation",
      "skos:broader",
      "Entity-closed_path__cp__rule"
    ],
    [
      "Entity-p1_t",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-the_kg",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-confidence",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-knowledge_graph_completion",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-p__1q__z0__z1q_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-the_shape_(1)"
    ],
    [
      "Entity-record_label_z",
      "skos:broader",
      "Entity-a_record_label"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-pt___x__z0__-__exists__z1__...__z__n-1___y__p1___z0__z1___p2___z1__z2___...__pn___z__n-1___y_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-information_triggered_by_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-wikidataup",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-four_benchmark_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-an_extensive_representation_of_predicate_and_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-dbpedia_3.8",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-l",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-their_second_argument",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-the_confidence_of_a_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-satisfying_entity_e2_and_e3",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-scalability",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-the_third_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-full_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-a_sample_of_data",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-oprl",
      "skos:broader",
      "Entity-active_knowledge_graph_completion"
    ],
    [
      "Entity-standard_confidence__sc_",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-74_target_predicate",
      "skos:broader",
      "Entity-target"
    ],
    [
      "Entity-subject_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-path_of_entity_that_satisfy_a_chain_of_predicate_in_the_rule",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-kg_verification",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-k-cliques",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-each_argument",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-zn1",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-unary_predicate_which_have_at_least_one_hundred_fact",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-sampled_knowledge_graph",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-quality_rule",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-k_",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-head_coverage__hc_",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-each_human",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-y_(1)",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-embeddings__k__",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-three_different_car_value_1__2__and_3",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-person",
      "skos:broader",
      "Entity-a_person_(1)"
    ],
    [
      "Entity-e1__e2__e3",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_kg_data",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-open_path_in_a_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-max_rule_length",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-potential_rule_in_the_search_space",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-kg_application",
      "skos:broader",
      "Entity-application"
    ],
    [
      "Entity-path_over_connected_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-human__x_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-two_vector",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-embeddings__k__",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-semi-automatic_manner",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-iop_standard_confidence",
      "skos:broader",
      "Entity-rule_quality"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-k_",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-fact_pk__ei__ej_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-tree_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-the_quantity_and_quality_of_distinct_rule_learnt",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-two_trick",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-ongoing_maintenance_and_extension",
      "skos:broader",
      "Entity-extension"
    ],
    [
      "Entity-predicate_embeddings",
      "skos:broader",
      "Entity-embedding_learning"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-musical_artist",
      "skos:broader",
      "Entity-artist"
    ],
    [
      "Entity-object_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-diverse_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-shape_in_the_form_of_a_path",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-alternative_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-_e2__e3_",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-association_rule_mining",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-fact",
      "skos:broader",
      "Entity-rdf_graph"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-standard_shacl_shape"
    ],
    [
      "Entity-the_sampled_kg",
      "skos:broader",
      "Entity-sampling_process"
    ],
    [
      "Entity-rule_quality",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-real-world_massive_knowledge_graph__kg_",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-sampling__",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-scalekb",
      "skos:broader",
      "Entity-rule_language"
    ],
    [
      "Entity-zi",
      "skos:broader",
      "Entity-entity_variable"
    ],
    [
      "Entity-directly_related_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-other_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-poker_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-the_size_of_the_problem",
      "skos:broader",
      "Entity-size"
    ],
    [
      "Entity-car3",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-pair__e___e_",
      "skos:broader",
      "Entity-pair"
    ],
    [
      "Entity-such_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-scalekb",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-oprl",
      "skos:broader",
      "Entity-knowledge_graph_completion"
    ],
    [
      "Entity-heuristic_rule_learning_module",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-kg_structure",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-p___x__t_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-universal_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-z0",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-entity__e__e__",
      "skos:broader",
      "Entity-entity_pair"
    ],
    [
      "Entity-dbpedia_3.8",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-ev__r___k__mcar__miniopsc__miniophc_",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-entity_e_(1)",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-australia",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-one_shared_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-the_two_type-like_predicate_from_dbpedia_3.8",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-input_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-entity_pair",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_population_of_a_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-massive_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-bounded_number_of_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-section_4",
      "skos:broader",
      "Entity-section"
    ],
    [
      "Entity-fig_._2",
      "skos:broader",
      "Entity-figure"
    ],
    [
      "Entity-miniopsc",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-inverse_open_path",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-threshold",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-the_validity_of_iop_rule",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-three_entity__e3__e4__e5_",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-active_knowledge_graph_completion",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-op_rule_p1__x__z0___-_p2__z0__z1___p3__z1__z2_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-kg",
      "skos:broader",
      "Entity-graph_database"
    ],
    [
      "Entity-human",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-maximum_number_of_predicate",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-the_shape_(1)"
    ],
    [
      "Entity-suppr",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-a_rule_(1)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-efficient_and_interpretable_human_validation",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-the_first_rule_in_the_list",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-a_larger_required_cardinality",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-p_(1)",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-nine_different_rank",
      "skos:broader",
      "Entity-rank"
    ],
    [
      "Entity-embedding-based_open_path_rule_learner",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-connected_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-future_work",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-fact_f",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-structural_feature",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-standard_confidence__sc_",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-existential_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-knowledge_panel",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-neighbour",
      "skos:broader",
      "Entity-object"
    ],
    [
      "Entity-only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-f",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-genre",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-more_complex_tree_shape",
      "skos:broader",
      "Entity-shape_tree"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-unifying_some_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-the_number_of_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-a_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-two_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-dealing_with_uncertainty_in_the_constraint_and_the_learning_process",
      "skos:broader",
      "Entity-challenge"
    ],
    [
      "Entity-semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-language"
    ],
    [
      "Entity-open_path_rule_learner",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-e__k-1_",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-an_entity_e",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-input_kg_(1)",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-greedysearch",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-parameter",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-topic",
      "skos:broader",
      "Entity-subject"
    ],
    [
      "Entity-p2__z__t_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-a__p1_",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-kg_completion",
      "skos:broader",
      "Entity-task"
    ],
    [
      "Entity-million_of_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-the_body_of_the_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-each_entity_e_i",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-entity_and_predicate",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-our_proposed_system",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-datatype_property",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-x_(4)",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-closed_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_",
      "skos:broader",
      "Entity-entity_pair"
    ],
    [
      "Entity-open_path_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-domain_and_range_of_predicate",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-comparison_purpose",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-the_defined_threshold__treescmin_",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-z2",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-entity_that_satisfy_the_second_argument_of_the_body",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-validation_framework"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-100__sc_and_hc",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-wikidataup",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-shape_constraint_language",
      "skos:broader",
      "Entity-language"
    ],
    [
      "Entity-37",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-thirty-five_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-multiple_branch",
      "skos:broader",
      "Entity-branch"
    ],
    [
      "Entity-trump",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-musical_artist",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-head",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-p1_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-high-scoring_candidate_op_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-at_least_one_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-z_i",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-rule_quality",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-algorithm_2",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-body_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-the_numerator",
      "skos:broader",
      "Entity-numerator"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-standard_shacl_shape"
    ],
    [
      "Entity-similarity",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-shaclearner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-australia",
      "skos:broader",
      "Entity-country"
    ],
    [
      "Entity-it_constituent_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-human-kg-completion",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-r2",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-sampled_knowledge_graph",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-the_least_constrained_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-28_unary_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-embeddings",
      "skos:broader",
      "Entity-embedding_space"
    ],
    [
      "Entity-node_and_property_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-related_work",
      "skos:broader",
      "Entity-work"
    ],
    [
      "Entity-predicate_that_occur_in_multiple_branch",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-head_coverage",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-head_instance",
      "skos:broader",
      "Entity-example"
    ],
    [
      "Entity-the_number_of_tree_for_each_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-google_search",
      "skos:broader",
      "Entity-product"
    ],
    [
      "Entity-k",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-subject_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_performance_of_our_system",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-the_experiment",
      "skos:broader",
      "Entity-experiment"
    ],
    [
      "Entity-formalism_of_constraint",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-closed_intermediate_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-an_instance_of_the_head_(1)",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-modern_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-the_original_predicate_and_fact_in_the_kg",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-inference_rule"
    ],
    [
      "Entity-sub-tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-a_kg_k",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-fact_about_those_predicate",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-op",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-node_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-shaclearner",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-number_of_quality_rule_mined",
      "skos:broader",
      "Entity-quality_rule"
    ],
    [
      "Entity-binary_predicate",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-embeddings",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-album",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-property",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-weakly-constraining_data_scheme",
      "skos:broader",
      "Entity-data_scheme"
    ],
    [
      "Entity-a_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-language__z3__z3_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-redundant_and_low_quality_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-motivating_use_case",
      "skos:broader",
      "Entity-use_case"
    ],
    [
      "Entity-standard_confidence__sc_",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-an_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-concept",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-error",
      "skos:broader",
      "Entity-problem"
    ],
    [
      "Entity-an_extensive_representation_of_predicate_and_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-cardinality_of_an_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_quality_of_performance",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-this_system",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-rule_mining"
    ],
    [
      "Entity-satisfying_entity_e2_and_e3",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-schema_information",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-dbpedia_3.8",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "skos:broader",
      "Entity-predicate_logic_formalism"
    ],
    [
      "Entity-the_sampled_kg_is_far_smaller_than_the_original_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-opsupp",
      "skos:broader",
      "Entity-type_of_entity"
    ],
    [
      "Entity-data_cleaning",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-pt",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-subject"
    ],
    [
      "Entity-shacl_learning_method",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-the_body_in_the_kg",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-maximum_number_of_predicate_of_the_rule",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-the_result",
      "skos:broader",
      "Entity-result"
    ],
    [
      "Entity-rule_learning",
      "skos:broader",
      "Entity-rule_mining"
    ],
    [
      "Entity-path_of_entity_that_satisfy_a_chain_of_predicate_in_the_rule",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-logical_formalism"
    ],
    [
      "Entity-type_or_class",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-result_of_an_experimental_evaluation",
      "skos:broader",
      "Entity-result"
    ],
    [
      "Entity-entity_x_(1)",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-predicate_calculus_formalism",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-depth",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-max_rule_length",
      "skos:broader",
      "Entity-length"
    ],
    [
      "Entity-the_head_of_the_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-high-quality_tree_shape",
      "skos:broader",
      "Entity-tree_shape"
    ],
    [
      "Entity-maximum_number_of_predicate_of_the_rule",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-mine_both_op_and_iop_rule",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-predicate_embeddings",
      "skos:broader",
      "Entity-learnt_embeddings"
    ],
    [
      "Entity-head_branch",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-small_sampled_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-pn_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-contextual_connection",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-rescal",
      "skos:broader",
      "Entity-embeddings"
    ],
    [
      "Entity-one_pair",
      "skos:broader",
      "Entity-each_poker_hand"
    ],
    [
      "Entity-the_largest_proportion_of_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-p1_t",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-path_over_connected_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-each_poker_hand",
      "skos:broader",
      "Entity-hand"
    ],
    [
      "Entity-human",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-this_strategy_for_human-kg-completion",
      "skos:broader",
      "Entity-strategy"
    ],
    [
      "Entity-e1__e2__e3",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-practice",
      "skos:broader",
      "Entity-application"
    ],
    [
      "Entity-directly_related_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-inverse_open_path_standard_confidence",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-an_instance_of_the_head",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-learnt_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-oprl_for_active_knowledge_graph_completion",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-path",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-single_unbroken_loop_of_link",
      "skos:broader",
      "Entity-loop"
    ],
    [
      "Entity-opsc",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-car2_(1)",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-sampling_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-object_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-language",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-max_rule_cardinality_mcar",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-ei",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-depth-first_questioning_strategy",
      "skos:broader",
      "Entity-strategy"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-specific_variable_binding_pattern",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-four_suit",
      "skos:broader",
      "Entity-suit"
    ],
    [
      "Entity-the_annotation_of_the_branch_at_the_terminating_node",
      "skos:broader",
      "Entity-node"
    ],
    [
      "Entity-argument",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-higher_confidence_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-rule_of_lower_quality",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-length_and_cardinality",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-trump",
      "skos:broader",
      "Entity-a_person_(1)"
    ],
    [
      "Entity-potential_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-rescal",
      "skos:broader",
      "Entity-embedding_learner"
    ],
    [
      "Entity-type_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_head",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-complex_shape_(1)",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-open_path_in_a_kg",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-lower-cardinality_version_of_that_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-bounded_number_of_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-prior_sampling",
      "skos:broader",
      "Entity-sampling_process"
    ],
    [
      "Entity-the_proportion_of_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-those_vector",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-potential_iop_rule",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-n",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-real-world_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-path_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-algorithm",
      "skos:broader",
      "Entity-procedure"
    ],
    [
      "Entity-similar_argument_embeddings",
      "skos:broader",
      "Entity-embeddings"
    ],
    [
      "Entity-each_entity_e_i",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-it_internal_knowledge_graph",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-three_entity__e3__e4__e5_",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-pruning_a_tree",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-a_tree_(1)",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-mine_such_rule_from_a_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-entity_pair",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-producer",
      "skos:broader",
      "Entity-role"
    ],
    [
      "Entity-birth_date",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-sampling",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-poker",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-conjunctive_path",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-performance_evaluation",
      "skos:broader",
      "Entity-performance"
    ],
    [
      "Entity-shape_in_the_form_of_a_path",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-property_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-input_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-additional_head_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-target_predicate_pt",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-embedding_learning",
      "skos:broader",
      "Entity-learnt_embeddings"
    ],
    [
      "Entity-conjunctive_path_of_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-these_kind_of_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-shape_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-heuristic_pruning",
      "skos:broader",
      "Entity-pruning_technique"
    ],
    [
      "Entity-entity_e_i",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-rlvlr",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-dealing_with_uncertainty_in_the_constraint_and_the_learning_process",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-the_pattern_of_existential_variable_in_the_head_and_universal_variable_in_the_body",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-annotation"
    ],
    [
      "Entity-an_explosion_in_the_space_of_possible_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-human_user",
      "skos:broader",
      "Entity-person"
    ],
    [
      "Entity-artist",
      "skos:broader",
      "Entity-an_artist"
    ],
    [
      "Entity-p1",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-the_head",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-x_(2)",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-confidence",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-active_knowledge_graph_completion",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-the_beginning_of_each_branch",
      "skos:broader",
      "Entity-branch"
    ],
    [
      "Entity-the_path_of_head_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-well-defined_semantics",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-op_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-car__r_",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-50_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-p2_t",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-fully_abstracted__entity-free__shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-opsupp",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-car_value_1__2__and_3",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-connected_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_",
      "skos:broader",
      "Entity-rule_learning"
    ],
    [
      "Entity-the_full_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-pt__x__z0_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-ev",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-size_2lfe",
      "skos:broader",
      "Entity-complexity"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-rdf"
    ],
    [
      "Entity-rdf_triple",
      "skos:broader",
      "Entity-rdf"
    ],
    [
      "Entity-open_path_standard_confidence",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-the_label_of_a_link_in_the_graph",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-the_shape_(1)"
    ],
    [
      "Entity-iop_mining",
      "skos:broader",
      "Entity-rule_learning"
    ],
    [
      "Entity-certain_property_in_the_embedding_space",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-inverse_open_path_standard_confidence",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-p2_t",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_label_of_a_link_in_the_graph",
      "skos:broader",
      "Entity-link"
    ],
    [
      "Entity-an_entity_e",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-body_r",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-space_of_possible_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_rule_(2)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-place_of_birth",
      "skos:broader",
      "Entity-location"
    ],
    [
      "Entity-knowledge_graph_completion",
      "skos:broader",
      "Entity-task"
    ],
    [
      "Entity-entity-instantiation",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_body_of_the_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-inefficient_yet_complete",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-predicate_embeddings",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-unary_predicate",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-entity_and_predicate",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-x_(4)",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-lower_quality_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-sub-tree",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-data_type_validation",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-kg_rule-learning_method",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-another_work",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-a_kg_(1)",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-the_performance_of_the_shaclearner__-sh_",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-five_playing_card",
      "skos:broader",
      "Entity-playing_card"
    ],
    [
      "Entity-kg_completion",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-a__pt_",
      "skos:broader",
      "Entity-adjacency_matrix"
    ],
    [
      "Entity-subject",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-learning"
    ],
    [
      "Entity-count_2",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-branch",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-_x__zi__y_",
      "skos:broader",
      "Entity-entity_variable"
    ],
    [
      "Entity-entity_(1)",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-fact_related_to_the_target_predicate",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-entity",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-subject",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-rule_learning",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-entity_that_satisfy_the_second_argument_of_the_body",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-trump",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-entity_instance",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-the_average_number_of_branch_in_the_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-generality",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-concept",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_count_of_distinct_e_s",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-place",
      "skos:broader",
      "Entity-location"
    ],
    [
      "Entity-extend_a_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-heuristic_mechanism",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-a_song__x_",
      "skos:broader",
      "Entity-song"
    ],
    [
      "Entity-song",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-embedding_learner",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-entity_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-target_predicate_(1)",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-shacl_learning_method",
      "skos:broader",
      "Entity-learning_method"
    ],
    [
      "Entity-all_variable_of_a_rule",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-x_pt__x__z0_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_least_constrained_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-miniophc",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-application"
    ],
    [
      "Entity-entity_that_satisfy_the_first_argument_of_the_head",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-k_",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-length",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-poker_hand",
      "skos:broader",
      "Entity-hand"
    ],
    [
      "Entity-iop_head_coverage",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-a_human_user",
      "skos:broader",
      "Entity-human_user"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-mary",
      "skos:broader",
      "Entity-person"
    ],
    [
      "Entity-the_example",
      "skos:broader",
      "Entity-example"
    ],
    [
      "Entity-p3__z1__z2_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-p0",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-iop",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-embedding_learning",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-inferred_head_instance",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-class_and_type_information",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-pt_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-triple_format",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-max_rule_length",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-album",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-entity_e",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-their_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-shaclearner",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-e9",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-entity_e_i",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_fact_in_the_head_of_the_iop_rule",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-chain_of_fact",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-occupation",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-annotation"
    ],
    [
      "Entity-rule_head",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-foundation",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-r1",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-the_same_variable_in_the_rule",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-the_learnt_embeddings",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-entity_x",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-entity_x_(1)",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-three_version_of_r",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-an_extensive_representation_of_predicate_and_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-learning",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-a_system_that_discovers_pattern_from_massive_kg",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-high_card",
      "skos:broader",
      "Entity-each_poker_hand"
    ],
    [
      "Entity-semantics",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-entity_e1__...__e__n-1_",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-the_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-person",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-the_practical_meaning_of_the_iopsc_and_iophc_quality",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-satisfying_entity_e2_and_e3",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-object"
    ],
    [
      "Entity-the_validity_of_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-embeddings__k__",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-large_scale_shape_mining",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-predicate_p1__p2__and_pt",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-fact_in_the_kg",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-one_shared_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-embeddings",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_system_without_sampling__but_with_the_heuristic_rule_learning_module",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-input_kg_(1)",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-wikidata",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-rescal",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-treesc",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-the_quality_of_op_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-standardised_measure",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-sampling_algorithm",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-information_needed_for_learning_such_rule",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-discovery_of_shape",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-the_fact_in_the_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-each_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-entity",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-learning_method",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-the_complexity_of_the_sampling_algorithm",
      "skos:broader",
      "Entity-complexity"
    ],
    [
      "Entity-fact_in_the_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-opera_singer",
      "skos:broader",
      "Entity-type_of_entity"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-large_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_next_step",
      "skos:broader",
      "Entity-step"
    ],
    [
      "Entity-this_work",
      "skos:broader",
      "Entity-work"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "skos:broader",
      "Entity-predicate_logic"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-human_expert",
      "skos:broader",
      "Entity-a_person_(1)"
    ],
    [
      "Entity-the_full_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-learning_a_novel_kind_of_rule",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-p__e_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_quantifier",
      "skos:broader",
      "Entity-quantifier"
    ],
    [
      "Entity-schema-based_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-modified_shaclearner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-the_count_of_non-zero_element_in_that_vector",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-_e2__e3_",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-p1_k",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-entity-instantiation_of_the_related_op_rule",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-composite_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-object",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-rule_with_the_same_head_and_the_same_body",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-rank",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-embeddings__",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-each_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-kg_verification",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-plausibility_of_the_fact",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-future_work_(1)",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_size_of_the_problem",
      "skos:broader",
      "Entity-problem"
    ],
    [
      "Entity-support",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-each_human",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_largest_proportion_of_rule",
      "skos:broader",
      "Entity-proportion"
    ],
    [
      "Entity-logical_formalism",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-existing_ontology_for_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-pt__e___e_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-y_(1)",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_body_in_the_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-kg_pattern",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-the_count_of_e_",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-shape_of_varying_complexity_and_diversity",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-small_poker_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-z2",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-small_complete_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-subsequent_data_cleaning",
      "skos:broader",
      "Entity-data_cleaning"
    ],
    [
      "Entity-embedding-based_scoring_function",
      "skos:broader",
      "Entity-the_scoring_function"
    ],
    [
      "Entity-yago2s",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-the_evolving_nature_of_human_knowledge",
      "skos:broader",
      "Entity-human_knowledge"
    ],
    [
      "Entity-iop_rule_and_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-the_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-new_unary_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-head_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-google",
      "skos:broader",
      "Entity-google_search_engine"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-r__(1)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-this_product",
      "skos:broader",
      "Entity-product"
    ],
    [
      "Entity-iop_rule_pt__x__y__-__p1__y__z___p2__z__t_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-human-kg-completion",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-e_s",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-an_explosion_in_the_space_of_possible_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-inverse_open_path_rule",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-this_paper",
      "skos:broader",
      "Entity-paper"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-poker",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-the_quality_and_quantity_of_learnt_rule",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-the_characteristic_of_discovered_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-rule_mining_for_kg_completion",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-association_rule_mining",
      "skos:broader",
      "Entity-rule_mining"
    ],
    [
      "Entity-predicate_embeddings",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-unary_predicate_human",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-mary",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-both_kind_of_error",
      "skos:broader",
      "Entity-error"
    ],
    [
      "Entity-the_fact_in_the_head_of_the_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-inverse_open_path_standard_confidence",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-every_path_from_the_target_predicate",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-type",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-fully_abstracted__entity-free__shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-heuristic_pruning",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-the_three_very_different_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-relationship_between_the_logical_statement_of_the_rule_and_certain_property_in_the_embedding_space",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-link_between_the_variable",
      "skos:broader",
      "Entity-link"
    ],
    [
      "Entity-rdf__type",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-nativelanguage__x__z3__(1)",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-australia",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-type_or_class_declaration",
      "skos:broader",
      "Entity-class"
    ],
    [
      "Entity-sequence_of_path_or_branch",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-argument",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-similar_argument_embeddings",
      "skos:broader",
      "Entity-embedding_space"
    ],
    [
      "Entity-the_power_of_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-real-world_kg_model",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-atom",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-e6",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-a_class",
      "skos:broader",
      "Entity-class"
    ],
    [
      "Entity-sequence_of_entity_e1__...__e__n-1___e1___...__e__m-1___e1q__e__q-1__",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-element_with_a_value___car",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-iopsc_in_range_of__0.1__0.3_",
      "skos:broader",
      "Entity-rule_learning"
    ],
    [
      "Entity-common_representation",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-a_consistent_decrease_in_the_proportion_of_quality_rule",
      "skos:broader",
      "Entity-quality_rule"
    ],
    [
      "Entity-open_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-knowledge_graph_completion",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-predicate_embeddings",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-more_complex_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-name",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-learning_a_novel_kind_of_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-fact_about_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-formal_quality_measure",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-e3",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-subject_and_object_argument_embeddings",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-_e2__e3__(1)",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-iop-shaped_constraint",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-similar_argument_embeddings",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-original_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-four_benchmark_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-candidate_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-human_validation",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-quality_measurement"
    ],
    [
      "Entity-z1",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-target_predicate_pt",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-close_neighbour",
      "skos:broader",
      "Entity-neighbour"
    ],
    [
      "Entity-one_approach",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-language",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-abstract_model",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-an_example_of_a_shape_from_wikidata",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-depth-first_manner",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-low_quality",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-closed_rule__cr_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-maintenance",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-parameter",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-greedy_search",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-sampled_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-embedding_learner",
      "skos:broader",
      "Entity-embeddings"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-a_tree",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-open_path_in_a_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-node_and_property_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-work",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-chain_of_conjunctive_atom",
      "skos:broader",
      "Entity-atom"
    ],
    [
      "Entity-complete_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-many_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-the_original_predicate_and_fact_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-the_path",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-oprl_for_active_knowledge_graph_completion",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-formal_human-expert_evaluation",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-_0.1__0.3_",
      "skos:broader",
      "Entity-range"
    ],
    [
      "Entity-iop",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-entity_that_satisfy_the_first_argument_of_the_head",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-additional_head_predicate",
      "skos:broader",
      "Entity-the_body_and_head_predicate"
    ],
    [
      "Entity-node_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-entity_that_satisfy_the_first_argument_of_the_head",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-_e2_",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-binary_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-distinct_e_s",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-treescmin",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-the_number_of_tree_for_each_kg",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-pair_of_entity",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-mined_rule",
      "skos:broader",
      "Entity-rule_mining"
    ],
    [
      "Entity-the_matrix_product_a__p1___a__p2___...__a__pm_",
      "skos:broader",
      "Entity-matrix_product"
    ],
    [
      "Entity-pi",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-data",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-standard_confidence",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-real-world_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-uncertainty",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-many_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-kg_pattern",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-ei",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-target_predicate_instance_in_the_kg",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-benchmark_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-the_experiment_(1)",
      "skos:broader",
      "Entity-experiment"
    ],
    [
      "Entity-mined_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-the_additional_tree-shaped_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-open_path_rule_learner__oprl_",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-rule_pattern",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-relationship_between_the_logical_statement_of_the_rule_and_certain_property_in_the_embedding_space",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-entity_e",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_additional_tree-shaped_constraint",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-rule_instance",
      "skos:broader",
      "Entity-example"
    ],
    [
      "Entity-poker",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-property_shape",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-p__1",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-e9",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-car2_(1)",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-r_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-entity_e_i",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-poker_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-suppr",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-entity_e1__...__e__n-1_",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-spouse__x__y_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-binary_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-specific_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-all_binary_predicate_of_yago2s",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-poor_quality_rule",
      "skos:broader",
      "Entity-quality_rule"
    ],
    [
      "Entity-the_sampling_process",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-the_learnt_embeddings",
      "skos:broader",
      "Entity-embeddings"
    ],
    [
      "Entity-embedding-based_op_rule_learning",
      "skos:broader",
      "Entity-rule_mining"
    ],
    [
      "Entity-all_benchmark",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-this_simple_approach",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-entity_x",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-opera_singer",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-singer",
      "skos:broader",
      "Entity-a_person_(1)"
    ],
    [
      "Entity-building_block_(1)",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-subject_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-entity-instantiation",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-embeddings__k__",
      "skos:broader",
      "Entity-embedding_learning"
    ],
    [
      "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-universal_quantification",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-kg_rule-learning_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-rule_of_the_highest_quality",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-rule_of_lower_quality",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-kg_completion",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-n",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-ev",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-cr",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-stricter_quality_threshold",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-three_massive_real-world_benchmark_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-the_proportion_of_rule_consequent_instance",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-a_node_in_the_tree",
      "skos:broader",
      "Entity-node"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-a_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-treescmin",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-iopsupp",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-active_knowledge_graph_completion",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-pop_star",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-pattern_from_massive_kg",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-entity",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-input_kg_(1)",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-44__of_iop_rule",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-these_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-completion_strategy",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-entity_(2)",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-property",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-not-null",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-the_pattern_of_existential_variable_in_the_head_and_universal_variable_in_the_body",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-four_suit",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-five_hundred_poker_hand",
      "skos:broader",
      "Entity-each_poker_hand"
    ],
    [
      "Entity-p1",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-thirteen_rank",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-a",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-high-quality_rule",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-non-increasing_with_length",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-entity-instantiation_of_the_related_op_rule",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-interestingness",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-_-sh_",
      "skos:broader",
      "Entity-variant"
    ],
    [
      "Entity-fact_related_to_them",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-producer",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-iopsupp",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-p2_2__z1__z2_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_other_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-livesin",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-human",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-these_uncertain_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-album_y",
      "skos:broader",
      "Entity-album"
    ],
    [
      "Entity-mary",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-entrepreneur",
      "skos:broader",
      "Entity-role"
    ],
    [
      "Entity-maximum_length",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-directly_related_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-157",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-enterprise_knowledge_graph",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-_e2__e3_",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-real-world_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-these_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-the_target",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-op_rule",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-section_2",
      "skos:broader",
      "Entity-section"
    ],
    [
      "Entity-body_of_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-entity-free_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-body_r__e__e__",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-ideal_rule_learner__shaclearner__-s-h__",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-p__i",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-novel_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-quality_measurement",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-node_shape",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-each_human",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-canberra",
      "skos:broader",
      "Entity-place"
    ],
    [
      "Entity-one_hundred_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-suppr",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-a__pt_",
      "skos:broader",
      "Entity-the_adjacency_matrix"
    ],
    [
      "Entity-y_(1)",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_count_of_e_",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-pruning",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-the_tree_(1)",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-subject",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-class_assertion",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-quality_measurement"
    ],
    [
      "Entity-the_percentage_difference_in_the_number_of_rule_found",
      "skos:broader",
      "Entity-percentage_difference"
    ],
    [
      "Entity-shacl_advanced_feature",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-lower_quality_rule",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-e_s",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-miniopsc",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-treescnew",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-simplicity",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-inverse_open_path_head_coverage",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-three_entity__e3__e4__e5_",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-threshold",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-human",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-an_entity_of_type_song",
      "skos:broader",
      "Entity-song"
    ],
    [
      "Entity-ongoing_maintenance_and_extension",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-k",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-shape_constraint",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-all_variable_of_a_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-an_entire_path_of_shape_predicate",
      "skos:broader",
      "Entity-shape_predicate"
    ],
    [
      "Entity-opsc",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-hole",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-pair_of_entity_(1)",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-open_path_head_coverage",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-unmodified_shaclearner_of_algorithm_1",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-object"
    ],
    [
      "Entity-high_card",
      "skos:broader",
      "Entity-poker_hand"
    ],
    [
      "Entity-shacl",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-pop_star",
      "skos:broader",
      "Entity-musical_artist"
    ],
    [
      "Entity-50",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-min_cardinality",
      "skos:broader",
      "Entity-minimum_cardinality_constraint"
    ],
    [
      "Entity-yago2s",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-input_ontology",
      "skos:broader",
      "Entity-ontology"
    ],
    [
      "Entity-the_complexity_of_the_sampling_algorithm",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-prior_sampling",
      "skos:broader",
      "Entity-sampling_method"
    ],
    [
      "Entity-language",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_same_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-nativelanguage",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_head_of_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-fragment_of_shacl",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-maximum_length_parameter",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-esample",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-l_atom",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-iop",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-e6",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-sequence_of_entity_e1__...__e__n-1___e1___...__e__m-1___e1q__e__q-1__",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-element_(1)",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-the_body_of_the_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-real-world_massive_knowledge_graph__kg_",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-learning_algorithm",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-a",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-australia",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-car1",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-million_of_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-each_entity_e_i",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-singer",
      "skos:broader",
      "Entity-occupation"
    ],
    [
      "Entity-iop_mining",
      "skos:broader",
      "Entity-rule_mining"
    ],
    [
      "Entity-modern_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-a_tree_(1)",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-iopsupp",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-inferring_new_fact",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-shared_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-e3",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-description_logic_ontology",
      "skos:broader",
      "Entity-ontology"
    ],
    [
      "Entity-experimental_evaluation",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-an_entity_of_type_song",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-miniopsc",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-pn__zn-1__y_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-learnt_embeddings",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-kg",
      "skos:broader",
      "Entity-graph_data"
    ],
    [
      "Entity-subject_and_object_argument_embeddings",
      "skos:broader",
      "Entity-embeddings"
    ],
    [
      "Entity-support",
      "skos:broader",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-distinct_e_s",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-automatic_and_semi-automatic_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-a__p1_",
      "skos:broader",
      "Entity-square_n_x_n_adjacency_matrix"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-the_body_of_r_(1)",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-r2",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-closed_path__cp__rule",
      "skos:broader",
      "Entity-active_knowledge_graph_completion"
    ],
    [
      "Entity-embedding_learner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-confidence",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-r1",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-subject_and_object_argument_embeddings",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-the_same_variable_in_the_rule",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-google_search",
      "skos:broader",
      "Entity-google_search_engine"
    ],
    [
      "Entity-connected_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-cardinality_of_an_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-head",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-an_example_of_a_shape_from_wikidata",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-manual_mode",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-the_sampled_kg_is_far_smaller_than_the_original_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-the_least_constrained_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_scoring_function_of_shaclearner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-shaclearner__-s-h_",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-four_benchmark_kg",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-the_general_form_of_a_tree",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-canberra",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-shape_constraint",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-name",
      "skos:broader",
      "Entity-string"
    ],
    [
      "Entity-explanatory_power",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-property_shape",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-the_number_of_entity_that_join_the_head_of_the_rule_to_it_body",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-entity-instantiation",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-distinct_e_s",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-completeness_of_our_algorithm",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-entity-instantiation",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-our_learning_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-pn___z__n-1___y_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-vector_e_i",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-oprl_for_active_knowledge_graph_completion",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-place_of_birth",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-designing_an_efficient_learning_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-predicate_that_occur_in_multiple_branch",
      "skos:broader",
      "Entity-branch"
    ],
    [
      "Entity-ei",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-tighter_restriction",
      "skos:broader",
      "Entity-restriction"
    ],
    [
      "Entity-rule_learner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-representation_formalism",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-the_process_of_constructing_one_kind_of_more_complex_shape",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-entity_that_satisfy_the_first_argument_of_the_head",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-small_sampled_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-major_approach_to_rule_learning",
      "skos:broader",
      "Entity-rule_learning"
    ],
    [
      "Entity-this_potential_post-processing_step",
      "skos:broader",
      "Entity-post-processing_step"
    ],
    [
      "Entity-functional_graph_dependency__fgd_",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-number_of_entity",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-depth-first_manner",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-synthetic_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-subject",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-entity_that_satisfy_the_second_argument_of_the_body",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-similar_argument_embeddings",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-kg_rule_learning_system",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-the_rule_(1)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-pop_star",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-op",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-the_number_of_tree_for_each_kg",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-quantified_uncertainty",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-max_rule_cardinality_mcar",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-fragment_of_the_kg_k_",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-real-world_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-yago2s",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-application_of_shacl_shape",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-new_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-concept",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-opera_singer",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-artist",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-x_(3)",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-good_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-at_least_one_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-embedding_learner",
      "skos:broader",
      "Entity-embedding_space"
    ],
    [
      "Entity-the_process_of_constructing_one_kind_of_more_complex_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-entity_e",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-numerical_confidence_measure",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-poker",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-object",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-embeddings__k__",
      "skos:broader",
      "Entity-learnt_embeddings"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-pt___x__z0_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_quality_of_the_rule",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-x_(2)",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-confidence",
      "skos:broader",
      "Entity-association_rule_mining"
    ],
    [
      "Entity-entity",
      "skos:broader",
      "Entity-object"
    ],
    [
      "Entity-rdf_database",
      "skos:broader",
      "Entity-rdf"
    ],
    [
      "Entity-body",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-child__x__z_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-l_atom",
      "skos:broader",
      "Entity-atom"
    ],
    [
      "Entity-ev",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-shex",
      "skos:broader",
      "Entity-language"
    ],
    [
      "Entity-subject_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-rule_pattern",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-iop_standard_confidence",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-information_triggered_by_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-entity_x_(1)",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-missing_fact_(1)",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-an_extra_dimension_of_challenge",
      "skos:broader",
      "Entity-challenge"
    ],
    [
      "Entity-the_body_(1)",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-object_argument",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-entity",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-embedding_learner",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-higher_confidence_in_the_kg",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-designing_an_efficient_learning_method",
      "skos:broader",
      "Entity-learning"
    ],
    [
      "Entity-five_hundred_poker_hand",
      "skos:broader",
      "Entity-hand"
    ],
    [
      "Entity-type_song",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-e_",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-country",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-evaluating_kg_rule-learning_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-deeper__more_complex_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-use_case",
      "skos:broader",
      "Entity-example"
    ],
    [
      "Entity-a_key_feature_in_their_syntax",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-each_variant",
      "skos:broader",
      "Entity-variant"
    ],
    [
      "Entity-binary_predicate",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-mined_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-shaclearner__s_pruning_method",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-k",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-average_treesc",
      "skos:broader",
      "Entity-treesc"
    ],
    [
      "Entity-difference_between_the_formalism",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-p1__e__e1___p2__e1__e2___...__pt__e__q-1____eq_",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-the_predicate_of_the_head",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-knowledge_graph__kg_",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-incomplete",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-the_embedding_representation",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-the_distribution_of_mined_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-kg_rule-learning_method",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-class_or_type_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-a_system_that_discovers_pattern_from_massive_kg",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-p2_2",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-weak_inference_rule",
      "skos:broader",
      "Entity-inference_rule"
    ],
    [
      "Entity-kg_completion",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_learnt_embeddings",
      "skos:broader",
      "Entity-embedding_space"
    ],
    [
      "Entity-open_path__op__rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-standard_confidence__sc_",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-matrix_product",
      "skos:broader",
      "Entity-matrix_and_vector_operation"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-off-the-shelf_graph_structure_learner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-cardinality_of_an_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-k",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-maximum_length_of_rule",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-standard_confidence",
      "skos:broader",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-the_other_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-directly_related_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-a_tree_(2)",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-11_million_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-greater_cardinality",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-an_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-a_formalisation_of_the_approach",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-embedding-based_open_path_rule_learner",
      "skos:broader",
      "Entity-learning_method"
    ],
    [
      "Entity-name",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-sampled_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-this_topic",
      "skos:broader",
      "Entity-topic"
    ],
    [
      "Entity-_e2__e3_",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_time_of_learning",
      "skos:broader",
      "Entity-learning"
    ],
    [
      "Entity-entity_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-ei",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-k_",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-yago2s",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-the_learnt_embeddings",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-the_core_of_shacl",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-p1__e__e1___p2__e1__e2___...__pn__e__n-1___e__",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-the_original_predicate_and_fact_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-previous_research",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-1",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-_e2__e3_",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-car__r_",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-certain_property_in_the_embedding_space",
      "skos:broader",
      "Entity-embeddings"
    ],
    [
      "Entity-property_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-pair_of_entity_(1)",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-pt",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-bounded_number_of_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_body_of_the_shape",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-shaclearner",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-instance_of_the_rule_head",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-card",
      "skos:broader",
      "Entity-playing_card"
    ],
    [
      "Entity-the_system_without_sampling",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-three_entity__e3__e4__e5_",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-p0",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-inverse_open_path_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_count_of_e_",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-human",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-37_binary_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-link",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-a_certain_cardinality_c1",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-fact_satisfying_the_head_of_the_rule",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-twenty-eight_out_of_thirty-five_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-dynamic_data_entry_form",
      "skos:broader",
      "Entity-data_entry"
    ],
    [
      "Entity-z1",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-kg",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-heuristic_pruning",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-person",
      "skos:broader",
      "Entity-type_of_entity"
    ],
    [
      "Entity-entrepreneur",
      "skos:broader",
      "Entity-person"
    ],
    [
      "Entity-many_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-benchmark_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-a_place",
      "skos:broader",
      "Entity-place"
    ],
    [
      "Entity-parameter",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-novel_method",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-tree",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-experiment",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-our_new_one",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-ophc",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-it_constituent_iop_rule",
      "skos:broader",
      "Entity-iop_rule"
    ],
    [
      "Entity-open_path__op__rule",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-each_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-record_label",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-closed_rule",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-the_performance_of_our_system",
      "skos:broader",
      "Entity-performance"
    ],
    [
      "Entity-object",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_distribution_of_mined_rule_(1)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-width",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-rule_quality_measure",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-nested_pattern",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-three_version_of_r",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-strategy",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-conjunction_of_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-candidate_op_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-contributor",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-million_of_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-each_entity_e_i",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_set",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-class",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-first_row",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-set_of_rule_and_shape",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-e2",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-an_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-higher_confidence_in_the_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-embedding-based_op_rule_learning",
      "skos:broader",
      "Entity-learning_method"
    ],
    [
      "Entity-hole",
      "skos:broader",
      "Entity-embedding_learner"
    ],
    [
      "Entity-a_tree_(1)",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-p2_2",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-more_complex_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-five_hundred_poker_hand",
      "skos:broader",
      "Entity-poker_hand"
    ],
    [
      "Entity-triple_format",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-pt__x__y_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-kg_k",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-an_iop_rule",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-human_interaction",
      "skos:broader",
      "Entity-human"
    ],
    [
      "Entity-easier_interpretation",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-schema_information_for_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-fact",
      "skos:broader",
      "Entity-knowledge"
    ],
    [
      "Entity-associated_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-pathfinding__",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-tree",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-intermediate_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-functional_graph_dependency__fgd_",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-mine_such_rule_from_a_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-target_predicate",
      "skos:broader",
      "Entity-predicate_logic_formalism"
    ],
    [
      "Entity-iop",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-our_novel_tree_shape",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-atomic_body",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-sampled_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-two_parent",
      "skos:broader",
      "Entity-parent"
    ],
    [
      "Entity-open_path_head_coverage",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-k_",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-the_ultimate_evaluation",
      "skos:broader",
      "Entity-evaluation"
    ],
    [
      "Entity-unary_predicate_which_have_at_least_one_hundred_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-standard_confidence__sc_",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-maximum_length_parameter",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-e4",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-p0",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-non-zero_element",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-the_population_of_a_kg",
      "skos:broader",
      "Entity-population"
    ],
    [
      "Entity-miniophc",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-l_atom",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-feature",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-major_approach_to_rule_learning",
      "skos:broader",
      "Entity-approach"
    ],
    [
      "Entity-fact",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-_0_1_2__t",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_predicate_argument",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-explanatory_power_of_the_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-depth-first",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_number_of_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-discovered_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-tree_shape",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-p1",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-our_new_one",
      "skos:broader",
      "Entity-new_predicate"
    ],
    [
      "Entity-these_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-type_information",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-rule_of_the_highest_quality",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-relationship_between_op_and_iop_rule",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-the_fact_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-input_graph",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-iop",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-more_complex_shape",
      "skos:broader",
      "Entity-complex_shape_(1)"
    ],
    [
      "Entity-property_shape",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-predicate_logic_formalism",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-each_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-the_sequence_of_predicate_p1__p2__...__pn",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-for_2___k___l",
      "skos:broader",
      "Entity-loop"
    ],
    [
      "Entity-learnt_embeddings",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-sampling",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-close_neighbour",
      "skos:broader",
      "Entity-relationship"
    ],
    [
      "Entity-subject_and_object_argument_embeddings",
      "skos:broader",
      "Entity-embedding_space"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-iop_rule_pt__x__y__-__p1__y__z___p2__z__t_",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_statistical_likelihood_of_poor_quality_rule",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-artist",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-d",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-p1",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-the_sampled_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-every_kg_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-subject",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-entity_that_satisfy_the_second_argument_of_the_body",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-head_r__e__e__",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-a",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-iopsupp",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-quality_measurement_(1)"
    ],
    [
      "Entity-dealing_with_uncertainty_in_the_constraint_and_the_learning_process",
      "skos:broader",
      "Entity-uncertainty"
    ],
    [
      "Entity-iop",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-concept",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-the_average_number_of_branch_in_the_mined_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-the_new_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-vector_v1",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-___e__e____body_r__e__e____",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-22",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-car_value_1__2__and_3",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-subject_and_object_argument_embeddings",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-the_head_of_the_rule_(1)",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-yago2s",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-song",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-embedding_learner",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-e1__...__en",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-kg_completion",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-entity_e1__...__e__n-1_",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-the_count_of_non-zero_element_in_that_vector",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-entity_pair",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-miniophc",
      "skos:broader",
      "Entity-threshold"
    ],
    [
      "Entity-country",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-annotation"
    ],
    [
      "Entity-poor_quality_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_body_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-kg_pattern",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-a_person",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-entity_instance",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-p",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-entity_x_(1)",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-an_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_second_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-open_path__op__rule",
      "skos:broader",
      "Entity-knowledge_graph_completion"
    ],
    [
      "Entity-learning_partially_instantiated_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-z0",
      "skos:broader",
      "Entity-an_identifier_for_an_object"
    ],
    [
      "Entity-the_relationship_between_an_op_rule_and_it_converse_iop_version",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-predicate",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-pt",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-small_complete_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-y_and_x",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-citizenof",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-a_good_learning_algorithm",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-kg_documentation",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-pair_of_entity__e__e__",
      "skos:broader",
      "Entity-entity_pair"
    ],
    [
      "Entity-country",
      "skos:broader",
      "Entity-type"
    ],
    [
      "Entity-confidence_treescorig",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-pt",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-existing_ontology_for_kg",
      "skos:broader",
      "Entity-ontology"
    ],
    [
      "Entity-opsc",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-open_variable",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-binary_fact",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-this_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-ongoing_data_entry",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-body_of_the_rule",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-fact_p0__e1__e2_",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-the_scoring_function_of_shaclearner",
      "skos:broader",
      "Entity-scoring_function"
    ],
    [
      "Entity-a_fact_in_the_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-a_method_to_aggregate_learnt_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-max_rule_cardinality_mcar",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-method_to_aggregate_iop_rule",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-occupation",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-property_shape",
      "skos:broader",
      "Entity-shacl_core_feature"
    ],
    [
      "Entity-yago",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-knowledge_graph_completion",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-length",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-knowledge_graph__kg_",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-unary_predicate_human",
      "skos:broader",
      "Entity-human"
    ],
    [
      "Entity-well-defined_semantics",
      "skos:broader",
      "Entity-semantics"
    ],
    [
      "Entity-the_three_very_different_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-a_set_of_shacl_shape",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-head_instance",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-body",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-citizenof__x__y_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-small_amount_of_data",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-the_number_of_entity_that_can_instantiate_z0_to_satisfy_the_head_part",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-person",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-four_benchmark_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-kg_rule_learning_system",
      "skos:broader",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-treesupp",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-variant_of_shaclearner",
      "skos:broader",
      "Entity-variant"
    ],
    [
      "Entity-related_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-this_procedure",
      "skos:broader",
      "Entity-procedure"
    ],
    [
      "Entity-kg_structure",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-pattern_from_massive_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-the_power_of_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-real-world_kg_model",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-maximum_length",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-directly_related_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-shape_quality_measure",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-learning_path",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-163_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-shared_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-embeddings__k__",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-ptq__z__q-1__q__yq_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-sampled_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_population_of_a_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-an_entire_path_of_shape_predicate",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-completion_strategy",
      "skos:broader",
      "Entity-strategy"
    ],
    [
      "Entity-e7",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-r1",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-standard_shacl_shape",
      "skos:broader",
      "Entity-semantics_of_the_shacl_language"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-massive_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-relationship_between_op_and_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-embedding",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-missing_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-2_producer",
      "skos:broader",
      "Entity-producer"
    ],
    [
      "Entity-quality_and_quantity_of_learnt_rule",
      "skos:broader",
      "Entity-quality"
    ],
    [
      "Entity-the_original_predicate_and_fact_in_the_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-uncertainty",
      "skos:broader",
      "Entity-challenge"
    ],
    [
      "Entity-canberra",
      "skos:broader",
      "Entity-location"
    ],
    [
      "Entity-hole",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-pn",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-original_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-a_system",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-object_argument",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-an_extensive_representation_of_predicate_and_entity",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-vector_v2__pt_",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-the_rule_(4)",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-e_s",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-bounded_number_of_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-existential_rule",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-validation_of_rdf_database",
      "skos:broader",
      "Entity-rdf_database"
    ],
    [
      "Entity-ei",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-full_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-set__a__pk___k_in_1_.._m_",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-sequence_of_predicate",
      "skos:broader",
      "Entity-syntax"
    ],
    [
      "Entity-three_entity__e3__e4__e5_",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-mary",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-record_label",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-inductive_logic_programming",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-varying_confidence",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-diverse_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-building_block_(2)",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-complete_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-aggregation_module",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-left-hand_tree",
      "skos:broader",
      "Entity-figure"
    ],
    [
      "Entity-many_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_path_(1)",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-contributor",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-tree",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-number_of_missing_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-benchmark_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-head_predicate",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_property",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-maximum_length_of_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-transforming_kg_with_type_predicate_for_experiment",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-r3",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-atomic_body",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-a_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-e5",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-object",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-only_a_very_small_proportion_of_entity_associated_with_any_predicate_within_distance_l",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-annotated_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-pn_1",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-suppr",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-smart_kg_editor",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-kg_k_",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-max_rule_length",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-unary_predicate",
      "skos:broader",
      "Entity-type_predicate"
    ],
    [
      "Entity-e6",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-annotated_iop_rule",
      "skos:broader",
      "Entity-iop"
    ],
    [
      "Entity-certain_property_in_the_embedding_space",
      "skos:broader",
      "Entity-embedding_space"
    ],
    [
      "Entity-sequence_of_entity_e1__...__e__n-1___e1___...__e__m-1___e1q__e__q-1__",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-iop_rule_r",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-tree",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-number_of_entity",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-sh__mincount",
      "skos:broader",
      "Entity-shacl-sparql"
    ],
    [
      "Entity-locatedin",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-evidence",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-head",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-closed_path_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-logical_foundation_for_the_semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-foundation"
    ],
    [
      "Entity-the_average_number_of_branch_in_the_tree",
      "skos:broader",
      "Entity-branch"
    ],
    [
      "Entity-million_of_entity",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-quality_measurement_(1)"
    ],
    [
      "Entity-sample_of_data",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-the_cardinality_(1)",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-17_or_10__fewer_rule",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-fact_about_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-scoring_function_heuristic_for_op_rule",
      "skos:broader",
      "Entity-op_rule"
    ],
    [
      "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_",
      "skos:broader",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-embedding_learning",
      "skos:broader",
      "Entity-learning_method"
    ],
    [
      "Entity-learning_each_target_predicate",
      "skos:broader",
      "Entity-learning"
    ],
    [
      "Entity-other_rule_pattern",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-quality_annotation",
      "skos:broader",
      "Entity-annotation"
    ],
    [
      "Entity-high-quality_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-formalism",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-discovery_of_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-poker_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-external_modelling_artefact",
      "skos:broader",
      "Entity-modelling_artefact"
    ],
    [
      "Entity-x_(3)",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-rule_learning_experiment",
      "skos:broader",
      "Entity-experiment"
    ],
    [
      "Entity-the_same_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-language",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-standard_confidence__sc_",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-e4",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-163_rule",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-capitalof",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-evaluation_method_of_shaclearner",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_system_without_sampling__but_with_the_heuristic_rule_learning_module",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-human-kg-completion",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-one_pair",
      "skos:broader",
      "Entity-a_specific_poker_hand"
    ],
    [
      "Entity-kg_fact",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-cover",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-all_rule_that_bind_the_subject_argument",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-the_quality_of_a_tree",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-candidate_rule",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-existential_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-basic_shacl",
      "skos:broader",
      "Entity-language"
    ],
    [
      "Entity-explanatory_power_of_the_rule",
      "skos:broader",
      "Entity-explanatory_power"
    ],
    [
      "Entity-three_massive_real-world_benchmark_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-confidence",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-iophc",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_shape_(1)",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-human-kg-completion",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-entity_instance",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-structural_feature"
    ],
    [
      "Entity-distinct_e_s",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-concept_or_class_membership",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-a_kg_k",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-iopsc",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-type_or_class",
      "skos:broader",
      "Entity-class"
    ],
    [
      "Entity-self-loop_link",
      "skos:broader",
      "Entity-link"
    ],
    [
      "Entity-error_of_omission_and_commission",
      "skos:broader",
      "Entity-error"
    ],
    [
      "Entity-f",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-matrix_p_k",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-iop",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-target_predicate",
      "skos:broader",
      "Entity-predicate_logic"
    ],
    [
      "Entity-predicate_p_k",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-fig_._1",
      "skos:broader",
      "Entity-figure"
    ],
    [
      "Entity-kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-these_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-the_confidence_of_a_rule",
      "skos:broader",
      "Entity-confidence"
    ],
    [
      "Entity-cardinality",
      "skos:broader",
      "Entity-rule_quality"
    ],
    [
      "Entity-car2_(1)",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-cardinality_of_an_iop_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-knowledge_that_can_be_acquired",
      "skos:broader",
      "Entity-knowledge"
    ],
    [
      "Entity-k",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-number_of_missing_rule",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-shape_that_can_be_trivially_expressed_in_a_fragment_of_shacl",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-smart_kg_editor",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-knowledge_graph_completion",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-modified_shaclearner__-s-h_",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-more_complex_tree_shape",
      "skos:broader",
      "Entity-tree_shape"
    ],
    [
      "Entity-the_specification_of_two_benchmark",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-integer_parameter_of_rescal",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-e1__...__en",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-song",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-the_other_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-embeddings",
      "skos:broader",
      "Entity-learnt_embeddings"
    ],
    [
      "Entity-p2_2",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-many_relevant_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-enterprise_knowledge_graph",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-pattern",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-candidate_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-the_latter_row",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-open_path_rule_learning_method",
      "skos:broader",
      "Entity-learning_method"
    ],
    [
      "Entity-new_one",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-algorithm_1",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-entity_in_the_sampled_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-dbpedia_3.8",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-path_shape",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-record_label_z",
      "skos:broader",
      "Entity-record_label"
    ],
    [
      "Entity-opera_singer",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-each_poker_hand",
      "skos:broader",
      "Entity-poker_hand"
    ],
    [
      "Entity-shape",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-_e2__e3__(1)",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-pathfinding",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-knowledge_graph_completion",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-shape_constraint"
    ],
    [
      "Entity-logical_foundation_(1)",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-entity_e1__...__e__n-1_",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-entity-instantiation",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-the_shape_we_can_discover",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-entity_and_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-ek",
      "skos:broader",
      "Entity-set"
    ],
    [
      "Entity-mary",
      "skos:broader",
      "Entity-a_person_(1)"
    ],
    [
      "Entity-entity_satisfying_the_subject_argument_of_the_body_predicate__pt",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-ontology_constraint_pattern",
      "skos:broader",
      "Entity-ontology"
    ],
    [
      "Entity-learning_partially_instantiated_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-sampling__",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-p1",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-entity_pair",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-sparql-like_constraint",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-entity_x_(1)",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_subject_argument_(1)",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-two_different_kind_of_knowledge",
      "skos:broader",
      "Entity-knowledge"
    ],
    [
      "Entity-pop_star",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-musical_artist",
      "skos:broader",
      "Entity-an_artist"
    ],
    [
      "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-logical_foundation",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-shape_predicate",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-occupation",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-entity_(2)",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-genre",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-the_number_of_distinct_instantiation_of_head_r__e__e__",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-modern_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-d",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-producer",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-inverse_open_path__iop__rule",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-atom",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-body_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-person",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-p3",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-inference_process",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-the_number_of_tree_for_each_kg",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-high_quality_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-a_fact_in_the_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-domain_and_range_of_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-heuristic_pruning",
      "skos:broader",
      "Entity-pruning"
    ],
    [
      "Entity-ophc",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-name_of_an_album",
      "skos:broader",
      "Entity-an_album"
    ],
    [
      "Entity-one_producer",
      "skos:broader",
      "Entity-producer"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-rule_mining"
    ],
    [
      "Entity-fact",
      "skos:broader",
      "Entity-link"
    ],
    [
      "Entity-each_human",
      "skos:broader",
      "Entity-human"
    ],
    [
      "Entity-information_triggered_by_entity",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-quality_measure_for_iop_rule",
      "skos:broader",
      "Entity-quality_measure"
    ],
    [
      "Entity-predicate",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-pathfinding__k___pt__p__a__k_",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-head_coverage",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-e7",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-the_goal_of_pruning",
      "skos:broader",
      "Entity-pruning"
    ],
    [
      "Entity-cognitive_load",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-neighbour",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-width",
      "skos:broader",
      "Entity-structural_feature"
    ],
    [
      "Entity-body_of_r",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-max_rule_cardinality",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-shacl_shape"
    ],
    [
      "Entity-x_(4)",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-the_rule_(3)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_relevance_of_the_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-a__pt_",
      "skos:broader",
      "Entity-representation"
    ],
    [
      "Entity-the_task",
      "skos:broader",
      "Entity-task"
    ],
    [
      "Entity-the_sampled_kg_is_far_smaller_than_the_original_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-head_of_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-a_simpler_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-suppr",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-a_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-p1_1",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-fast_matrix_and_vector_operation",
      "skos:broader",
      "Entity-matrix_and_vector_operation"
    ],
    [
      "Entity-shaclearner_algorithm",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-pi",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-intermediate_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-input_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-op_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-greedysearch",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-the_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-inverse_open_path_head_coverage",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-embeddings",
      "skos:broader",
      "Entity-embedding-based_method"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-element_with_a_value___car",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-the_number_of_learnt_rule_with_iopsc_in_range_of__0.1__0.3_",
      "skos:broader",
      "Entity-iopsc"
    ],
    [
      "Entity-pair_of_entity_(1)",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-trump",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-__e__there_exists_e__such_that_headr__e__and_pt__e___e___",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-the_output",
      "skos:broader",
      "Entity-result"
    ],
    [
      "Entity-unary_fact",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-active_knowledge_graph_completion",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-e_s",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-complex_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-scoring_function",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-iop_rule_r_(1)",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-the_one_from_wikidata",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-car",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-the_sampled_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-the_power_of_kg",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-mary",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-small_sampled_kg",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-measure_support",
      "skos:broader",
      "Entity-measure"
    ],
    [
      "Entity-space_of_possible_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-iop_head_coverage",
      "skos:broader",
      "Entity-rule_quality_measure"
    ],
    [
      "Entity-kg",
      "skos:broader",
      "Entity-data"
    ],
    [
      "Entity-shacl_core_feature",
      "skos:broader",
      "Entity-feature"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-the_quality_of_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-constraint_on_graph_data"
    ],
    [
      "Entity-a_target_predicate_pt",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-binary_predicate",
      "skos:broader",
      "Entity-predicate_logic"
    ],
    [
      "Entity-number_of_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-set_of_rule_and_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-which_shape_could_be_violated_by_applying_a_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-algorithm_2",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-head_of_r",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-problem",
      "skos:broader",
      "Entity-challenge"
    ],
    [
      "Entity-one_proposal",
      "skos:broader",
      "Entity-proposal"
    ],
    [
      "Entity-a",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-more_complex_tree",
      "skos:broader",
      "Entity-tree"
    ],
    [
      "Entity-the_target",
      "skos:broader",
      "Entity-target"
    ],
    [
      "Entity-kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-shaclearner",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-e6",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-iopsupp",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-sequence_of_entity_e1__...__e__n-1___e1___...__e__m-1___e1q__e__q-1__",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-rescal",
      "skos:broader",
      "Entity-embedding_learning"
    ],
    [
      "Entity-formalism_of_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-sparql-like_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-exists__z1__...__z__n-1___y_",
      "skos:broader",
      "Entity-quantifier"
    ],
    [
      "Entity-pm_2__z__m-1___y2_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-high_card",
      "skos:broader",
      "Entity-a_specific_poker_hand"
    ],
    [
      "Entity-inverse_open_path_support",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-shacl_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-our_work_(1)",
      "skos:broader",
      "Entity-research"
    ],
    [
      "Entity-r1",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-p1__y__z_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-ev__",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-fact_satisfying_the_head_of_the_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-kg_k_",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-post-processing_step",
      "skos:broader",
      "Entity-step"
    ],
    [
      "Entity-approach",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-fact_about_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-_e2_",
      "skos:broader",
      "Entity-element"
    ],
    [
      "Entity-fragment_of_the_kg_k_",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-sparse",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-74_target_predicate",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-atom",
      "skos:broader",
      "Entity-element_(1)"
    ],
    [
      "Entity-large_scale_shape_mining",
      "skos:broader",
      "Entity-rule_mining"
    ],
    [
      "Entity-it_constituent_iop_rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_set_of_sampled_entity_for_a_target_predicate",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-v2__pt____0_1_2__t",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-head_of_r",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-kg_documentation",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-property_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-r2",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-post-processing_step",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-sc_of_the_tree",
      "skos:broader",
      "Entity-standard_confidence__sc_"
    ],
    [
      "Entity-these_kind_of_shape",
      "skos:broader",
      "Entity-the_shape"
    ],
    [
      "Entity-binary_fact",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-language",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-the_same_entity",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-extend_a_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-rule_and_constraint",
      "skos:broader",
      "Entity-constraint"
    ],
    [
      "Entity-path_of_entity_that_satisfy_a_chain_of_predicate_in_the_rule",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-p1_k",
      "skos:broader",
      "Entity-vector"
    ],
    [
      "Entity-entity__e__e__",
      "skos:broader",
      "Entity-pair_of_entity_(1)"
    ],
    [
      "Entity-good_op_rule",
      "skos:broader",
      "Entity-op_rule"
    ],
    [
      "Entity-knowledge_graph",
      "skos:broader",
      "Entity-graph_database"
    ],
    [
      "Entity-rule_with_cardinality_car",
      "skos:broader",
      "Entity-cardinality"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-annotation"
    ],
    [
      "Entity-rescal",
      "skos:broader",
      "Entity-embedding"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-shacl_core"
    ],
    [
      "Entity-open_path_rule_learner__oprl_",
      "skos:broader",
      "Entity-learning_method"
    ],
    [
      "Entity-it_internal_knowledge_graph",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-e8",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-similar_argument_embeddings",
      "skos:broader",
      "Entity-embedding_learning"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-procedure"
    ],
    [
      "Entity-the_number_of_entity",
      "skos:broader",
      "Entity-quantity"
    ],
    [
      "Entity-p",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-p2__z1__z2_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-each_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-kg_fact",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-recursive_shacl_shape"
    ],
    [
      "Entity-3",
      "skos:broader",
      "Entity-value"
    ],
    [
      "Entity-pt",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-version_of_the_rule_extended_with_additional_head_atom",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-procedural_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-path_over_connected_entity",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-head",
      "skos:broader",
      "Entity-component"
    ],
    [
      "Entity-distinct_e_s",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-opsupp",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-y_and_x",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-the_one_from_wikidata",
      "skos:broader",
      "Entity-wikidata"
    ],
    [
      "Entity-p__1__z0__z1_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-proposed_system",
      "skos:broader",
      "Entity-system"
    ],
    [
      "Entity-modern_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-the_count_is_1",
      "skos:broader",
      "Entity-count"
    ],
    [
      "Entity-three_massive_real-world_benchmark_kg",
      "skos:broader",
      "Entity-benchmark"
    ],
    [
      "Entity-the_property_declaration",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-mintreesc",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-car1",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-new_one",
      "skos:broader",
      "Entity-information"
    ],
    [
      "Entity-two_producer",
      "skos:broader",
      "Entity-producer"
    ],
    [
      "Entity-shacl_learning_problem",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-schimatos",
      "skos:broader",
      "Entity-editor"
    ],
    [
      "Entity-oprl",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-iop",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-fig_._3",
      "skos:broader",
      "Entity-figure"
    ],
    [
      "Entity-closed_path_form",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-cover",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_rule_body",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-country",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-satisfactory_performance",
      "skos:broader",
      "Entity-performance"
    ],
    [
      "Entity-a_method",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-algorithm_1__shaclearner",
      "skos:broader",
      "Entity-algorithm"
    ],
    [
      "Entity-minimum_cardinality_constraint",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-locatedin__z__y_",
      "skos:broader",
      "Entity-predicate"
    ],
    [
      "Entity-closed_path__cp__rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-a_set_of_shacl_shape"
    ],
    [
      "Entity-semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-oprl_for_active_knowledge_graph_completion",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-designing_an_efficient_learning_method",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-an_entity_of_type_song",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-e1",
      "skos:broader",
      "Entity-entity_(1)"
    ],
    [
      "Entity-z",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-r",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-depth-first",
      "skos:broader",
      "Entity-strategy"
    ],
    [
      "Entity-opera_singer",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-mine_both_op_and_iop_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-full_kg",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-this_paper_(1)",
      "skos:broader",
      "Entity-paper"
    ],
    [
      "Entity-definition_2",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-k_",
      "skos:broader",
      "Entity-knowledge_graph"
    ],
    [
      "Entity-a_set_of_pair_of_entity__e__e1___...___e__eq_",
      "skos:broader",
      "Entity-pair_of_entity_(1)"
    ],
    [
      "Entity-rdf_triple",
      "skos:broader",
      "Entity-rdf_database"
    ],
    [
      "Entity-the_body_and_the_head",
      "skos:broader",
      "Entity-head"
    ],
    [
      "Entity-small_complete_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-k-cliques",
      "skos:broader",
      "Entity-pattern"
    ],
    [
      "Entity-embedding_learning",
      "skos:broader",
      "Entity-the_embedding_representation"
    ],
    [
      "Entity-y",
      "skos:broader",
      "Entity-a_variable"
    ],
    [
      "Entity-oprl",
      "skos:broader",
      "Entity-rule_learner"
    ],
    [
      "Entity-a_kg_(1)",
      "skos:broader",
      "Entity-knowledge_graph__kg_"
    ],
    [
      "Entity-entity-instantiation",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-sh__nodeshape",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-entity-instantiation_of_the_related_op_rule",
      "skos:broader",
      "Entity-op_rule"
    ],
    [
      "Entity-shacl_tree",
      "skos:broader",
      "Entity-application_of_shacl_shape"
    ],
    [
      "Entity-entity_pair",
      "skos:broader",
      "Entity-entity_(2)"
    ],
    [
      "Entity-e",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-fact_about_entity",
      "skos:broader",
      "Entity-fact"
    ],
    [
      "Entity-partially_instantiated_shape",
      "skos:broader",
      "Entity-shape"
    ],
    [
      "Entity-head",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-recursive_shacl_shape",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-object_and_datatype_property",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-iop_standard_confidence",
      "skos:broader",
      "Entity-rule_quality_measure"
    ],
    [
      "Entity-entity_e1__...__e__n-1_",
      "skos:broader",
      "Entity-an_entity_e"
    ],
    [
      "Entity-the_right_hand_chart",
      "skos:broader",
      "Entity-chart"
    ],
    [
      "Entity-existential_variable",
      "skos:broader",
      "Entity-variable"
    ],
    [
      "Entity-interaction_between_inference_rule_and_shacl_shape",
      "skos:broader",
      "Entity-shape_constraint_language"
    ],
    [
      "Entity-subject_and_object_argument_embeddings",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-canberra",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-semantics_of_the_shacl_language",
      "skos:broader",
      "Entity-basic_shacl"
    ],
    [
      "Entity-body_of_r",
      "skos:broader",
      "Entity-body"
    ],
    [
      "Entity-learning_process",
      "skos:broader",
      "Entity-process"
    ],
    [
      "Entity-path1__path2__...__pathq",
      "skos:broader",
      "Entity-path"
    ],
    [
      "Entity-entity-free_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-sh__property_declaration",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-yago2s",
      "skos:broader",
      "Entity-ontology"
    ],
    [
      "Entity-cover",
      "skos:broader",
      "Entity-rule_learning_experiment"
    ],
    [
      "Entity-pop_star",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-entity",
      "skos:broader",
      "Entity-an_identifier_for_an_object"
    ],
    [
      "Entity-learning_shacl_shape_from_kg",
      "skos:broader",
      "Entity-shacl"
    ],
    [
      "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-no_pruning",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-sh__property",
      "skos:broader",
      "Entity-rdf"
    ],
    [
      "Entity-entity_forming_the_object_argument_of_the_last_predicate__p2",
      "skos:broader",
      "Entity-argument"
    ],
    [
      "Entity-entity_(2)",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-breadth-first_manner",
      "skos:broader",
      "Entity-strategy"
    ],
    [
      "Entity-small_sampled_kg",
      "skos:broader",
      "Entity-public_knowledge_graph"
    ],
    [
      "Entity-iop_rule",
      "skos:broader",
      "Entity-formalism"
    ],
    [
      "Entity-cardinality_expression",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_three_very_different_kg",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-the_time_of_learning",
      "skos:broader",
      "Entity-learning_process"
    ],
    [
      "Entity-count",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-producer",
      "skos:broader",
      "Entity-entity_(3)"
    ],
    [
      "Entity-integer_parameter_of_rescal",
      "skos:broader",
      "Entity-parameter"
    ],
    [
      "Entity-the_annotation_of_the_branch_at_the_terminating_node",
      "skos:broader",
      "Entity-annotation"
    ],
    [
      "Entity-triple_format",
      "skos:broader",
      "Entity-graph"
    ],
    [
      "Entity-sampling",
      "skos:broader",
      "Entity-method"
    ],
    [
      "Entity-birthplace",
      "skos:broader",
      "Entity-property"
    ],
    [
      "Entity-real-world_kg_model",
      "skos:broader",
      "Entity-kg"
    ],
    [
      "Entity-rule",
      "skos:broader",
      "Entity-logical_statement"
    ],
    [
      "Entity-non-recursive_rule",
      "skos:broader",
      "Entity-rule"
    ],
    [
      "Entity-good_iop_rule",
      "skos:broader",
      "Entity-inverse_open_path__iop__rule"
    ],
    [
      "Entity-length",
      "skos:broader",
      "Entity-attribute"
    ],
    [
      "Entity-op",
      "skos:broader",
      "Entity-entity"
    ],
    [
      "Entity-open_path_support",
      "skos:broader",
      "Entity-concept"
    ],
    [
      "Entity-maximum_length_of_rule",
      "skos:broader",
      "Entity-parameter_(1)"
    ],
    [
      "Entity-sh__path",
      "skos:broader",
      "Entity-shape_constraint_language"
    ]
  ],
  "predicates": {
    "Predicate-have_proliferated_on": {
      "label": "have proliferated on",
      "description": "The predicate 'have proliferated on' indicates that the subject has experienced a significant increase in presence, usage, or development within the context of the object. It suggests a dynamic growth or expansion that is specifically associated with the environment or platform represented by the object, highlighting a trend or movement towards greater adoption or visibility in that particular area.",
      "disambiguation_index": 0
    },
    "Predicate-introduced_to": {
      "label": "introduced to",
      "description": "The predicate 'introduced to' signifies a relationship where the subject is presented or made familiar with the object, indicating a transfer of knowledge, awareness, or access. It implies that the subject has been brought into contact with the object, often for the purpose of learning, understanding, or utilizing the object in some capacity.",
      "disambiguation_index": 0
    },
    "Predicate-are": {
      "label": "are",
      "description": "The predicate 'are' serves as a linking verb that connects the subject to its complement, indicating a state of being or existence. It establishes an equivalence or classification between the subject and the object, suggesting that the subject possesses the characteristics or identity described by the object.",
      "disambiguation_index": 0
    },
    "Predicate-have": {
      "label": "have",
      "description": "The predicate 'have' indicates possession or ownership, establishing a relationship where the subject possesses or contains the object. In this context, it connects the subject to the object by asserting that the subject includes or is characterized by the object, thereby highlighting a defining feature or attribute of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-for_expressing": {
      "label": "for expressing",
      "description": "The predicate 'for expressing' indicates a purpose or function that connects the subject to the object, suggesting that the subject is utilized or designed to convey, represent, or articulate the concept or entity described by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is": {
      "label": "is",
      "description": "The predicate 'is' serves to establish an identity or equivalence relationship between the subject and the object, indicating that the subject can be defined or categorized as the object. It implies that the subject possesses the characteristics or properties that are associated with the object, thereby linking the two in a way that suggests they are fundamentally the same or that one is a specific instance or representation of the other.",
      "disambiguation_index": 0
    },
    "Predicate-serve_to_validate": {
      "label": "serve to validate",
      "description": "The predicate 'serve to validate' indicates a functional relationship where the subject is utilized or employed to confirm the correctness, integrity, or compliance of the object. In this context, the subject plays a role in assessing or ensuring that the object meets certain standards or criteria.",
      "disambiguation_index": 0
    },
    "Predicate-serve_to_underpin": {
      "label": "serve to underpin",
      "description": "The predicate 'serve to underpin' indicates that the subject provides foundational support or essential backing for the object, suggesting that the object relies on or is strengthened by the presence or characteristics of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-serve_to_offer_insight_into": {
      "label": "serve to offer insight into",
      "description": "The predicate 'serve to offer insight into' indicates that the subject provides valuable understanding or clarity regarding the object. It implies a relationship where the subject acts as a source of information or analysis that enhances comprehension of the object, facilitating a deeper awareness or interpretation of its characteristics, functions, or implications.",
      "disambiguation_index": 0
    },
    "Predicate-have_no_available": {
      "label": "have no available",
      "description": "The predicate 'have no available' indicates a lack of accessibility or presence of the object in relation to the subject. It signifies that the subject does not possess, provide, or offer the specified object, implying an absence or unavailability of that object in the context of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-cannot_obtain": {
      "label": "cannot obtain",
      "description": "The predicate 'cannot obtain' indicates an inability or lack of capability of the subject to acquire or achieve the object. It suggests that there are barriers, limitations, or constraints preventing the subject from successfully securing or accessing the object, which may involve resources, information, or outcomes.",
      "disambiguation_index": 0
    },
    "Predicate-introduce": {
      "label": "introduce",
      "description": "The predicate 'introduce' signifies the act of presenting or bringing forth a concept, idea, or entity (the object) to the attention of another entity (the subject). It establishes a relationship where the subject plays a role in making the object known or accessible, often implying a transition from unfamiliarity to familiarity regarding the object.",
      "disambiguation_index": 0
    },
    "Predicate-presents": {
      "label": "presents",
      "description": "The predicate 'presents' indicates an action or process in which the subject introduces, displays, or offers the object to an audience or context. It signifies a relationship where the subject actively brings forth the object, often highlighting its characteristics, significance, or relevance.",
      "disambiguation_index": 0
    },
    "Predicate-in_the_form_of": {
      "label": "in the form of",
      "description": "The predicate 'in the form of' establishes a relationship that indicates the manner or representation in which the subject is expressed or realized as the object. It suggests that the subject takes on a specific shape, structure, or configuration that corresponds to the characteristics or qualities of the object, thereby illustrating a transformation or manifestation of the subject into a recognizable or defined format.",
      "disambiguation_index": 0
    },
    "Predicate-over": {
      "label": "over",
      "description": "The predicate 'over' indicates a relationship where the subject is positioned above or across the object, often implying a sense of coverage, connection, or interaction that occurs in a spatial or conceptual manner. It suggests that the subject traverses or extends across the object, establishing a link or pathway that may involve movement, influence, or association.",
      "disambiguation_index": 0
    },
    "Predicate-is_a": {
      "label": "is a",
      "description": "The predicate 'is a' serves to establish a classification or categorization relationship between the subject and the object. It indicates that the subject belongs to the category or type defined by the object, effectively asserting that the subject is an instance or example of the broader concept represented by the object. This predicate is commonly used in definitions and taxonomies to convey the nature or identity of the subject in relation to a specific class or framework.",
      "disambiguation_index": 0
    },
    "Predicate-express": {
      "label": "express",
      "description": "The predicate 'express' denotes the action of conveying, representing, or articulating the characteristics, qualities, or features of the object in relation to the subject. It implies a relationship where the subject communicates or manifests the essence or nature of the object, often through various forms or mediums.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_augmented_with": {
      "label": "can be augmented with",
      "description": "The predicate 'can be augmented with' indicates that the subject has the potential to be enhanced or expanded by incorporating the object, thereby adding new features, properties, or requirements that complement or modify the original subject.",
      "disambiguation_index": 0
    },
    "Predicate-used_as_a_building_block_for": {
      "label": "used as a building block for",
      "description": "The predicate 'used as a building block for' indicates that the subject serves as a fundamental component or foundational element that contributes to the formation or construction of the object. It implies that the subject is essential in the process of creating or developing the object, which is typically more intricate or advanced than the subject itself.",
      "disambiguation_index": 0
    },
    "Predicate-include": {
      "label": "include",
      "description": "The predicate 'include' establishes a relationship where the subject encompasses or contains the object as part of a larger whole. It indicates that the object is one of the elements or components that are part of the subject, suggesting a subset or a specific instance within a broader category.",
      "disambiguation_index": 0
    },
    "Predicate-used_as_a": {
      "label": "used as a",
      "description": "The predicate 'used as a' indicates that the subject serves a specific function or role that is represented by the object. It establishes a relationship where the subject is employed or applied in a manner that aligns with the characteristics or purpose of the object, suggesting a practical or conceptual utility.",
      "disambiguation_index": 0
    },
    "Predicate-for": {
      "label": "for",
      "description": "The predicate 'for' indicates a purpose, function, or intended use of the subject in relation to the object. It establishes a connection where the subject serves as a means or resource that facilitates, supports, or contributes to the realization or achievement of the object.",
      "disambiguation_index": 0
    },
    "Predicate-define_for": {
      "label": "define for",
      "description": "The predicate 'define for' establishes a relationship where the subject provides a specific meaning, interpretation, or framework that is applicable to the object. It indicates that the subject serves to clarify, outline, or set parameters that are relevant to the object, thereby creating a contextual understanding or guideline that connects the two.",
      "disambiguation_index": 0
    },
    "Predicate-propose_to_learn": {
      "label": "propose to learn",
      "description": "The predicate 'propose to learn' indicates a suggestion or intention to acquire knowledge or skills related to the object. It connects the subject, which represents an entity or concept, with the object, which signifies the specific knowledge or skills that are intended to be learned. This relationship implies a forward-looking action where the subject is advocating for the exploration or understanding of the object.",
      "disambiguation_index": 0
    },
    "Predicate-learn_from": {
      "label": "learn from",
      "description": "The predicate 'learn from' indicates a relationship where the subject acquires knowledge, skills, or insights by engaging with or studying the object. It implies a process of gaining understanding or proficiency through observation, experience, or instruction provided by the object.",
      "disambiguation_index": 0
    },
    "Predicate-to_learn": {
      "label": "to learn",
      "description": "The predicate 'to learn' signifies the process by which the subject acquires knowledge, skills, or understanding related to the object. It indicates an active engagement in absorbing information or developing competencies that pertain to the object, which can be concepts, techniques, or principles.",
      "disambiguation_index": 0
    },
    "Predicate-builds": {
      "label": "builds",
      "description": "The predicate 'builds' indicates an action performed by the subject that results in the creation or construction of the object. It implies a process of development or assembly where the subject actively contributes to the formation or establishment of the object, which is typically a tangible or conceptual entity that is being formed or enhanced.",
      "disambiguation_index": 0
    },
    "Predicate-is_adapted_from": {
      "label": "is adapted from",
      "description": "The predicate 'is adapted from' indicates that the subject has been modified or developed based on the principles, concepts, or methodologies of the object. It suggests a relationship where the subject takes inspiration or foundational elements from the object, resulting in a new or altered form that retains some characteristics of the original source.",
      "disambiguation_index": 0
    },
    "Predicate-evaluates_on": {
      "label": "evaluates on",
      "description": "The predicate 'evaluates on' indicates a relationship where the subject assesses, analyzes, or measures the performance, effectiveness, or quality of the object. In this context, the subject applies certain criteria or methods to the object to derive insights, conclusions, or judgments about it.",
      "disambiguation_index": 0
    },
    "Predicate-show_that": {
      "label": "show that",
      "description": "The predicate 'show that' indicates a relationship where the subject provides evidence, results, or findings that support or demonstrate the truth or validity of the object. It implies a conclusion drawn from observations or analyses, suggesting that the subject's content leads to the assertion or recognition of the object.",
      "disambiguation_index": 0
    },
    "Predicate-can_learn": {
      "label": "can learn",
      "description": "The predicate 'can learn' indicates the ability of the subject to acquire knowledge, skills, or understanding related to the object. It suggests a process of assimilation where the subject engages with the object, resulting in a transformation or enhancement of the subject's capabilities or comprehension. This predicate emphasizes the potential for growth and adaptation in relation to the specified object.",
      "disambiguation_index": 0
    },
    "Predicate-can_learn_from": {
      "label": "can learn from",
      "description": "The predicate 'can learn from' indicates a relationship where the subject has the capability or potential to acquire knowledge, skills, or insights by utilizing the information or data provided by the object. In this context, the subject is able to process, analyze, or derive understanding from the resources represented by the object, which can include various forms of knowledge bases, datasets, or informational structures.",
      "disambiguation_index": 0
    },
    "Predicate-can_effectively_learn": {
      "label": "can effectively learn",
      "description": "The predicate 'can effectively learn' indicates the ability of the subject to acquire knowledge or skills regarding the object in a proficient manner. It suggests that the subject possesses the capacity to understand, assimilate, and apply information or concepts represented by the object, leading to a meaningful and practical grasp of the material.",
      "disambiguation_index": 0
    },
    "Predicate-learns": {
      "label": "learns",
      "description": "The predicate 'learns' indicates an action where the subject acquires knowledge, skills, or understanding about the object. It signifies a process of cognitive development or information assimilation, where the subject engages with the object to enhance their comprehension or proficiency in a particular area.",
      "disambiguation_index": 0
    },
    "Predicate-are_diverse_in": {
      "label": "are diverse in",
      "description": "The predicate 'are diverse in' indicates that the subject possesses a variety of characteristics, qualities, or elements related to the object. It suggests a range of differences or variations within the subject concerning the specified aspect represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-indicate": {
      "label": "indicate",
      "description": "The predicate 'indicate' serves to establish a relationship where the subject provides evidence, signals, or suggests the presence or degree of the object. In this context, the subject conveys information that points to or reveals the characteristics or state represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-became_popular_with": {
      "label": "became popular with",
      "description": "The predicate 'became popular with' indicates a growing acceptance, recognition, or favorability of the subject among a specific group or entity represented by the object. It suggests a shift in perception or usage, where the subject gains prominence or widespread appeal within the context of the object.",
      "disambiguation_index": 0
    },
    "Predicate-on": {
      "label": "on",
      "description": "The predicate 'on' indicates a relationship of presence or association between the subject and the object, suggesting that the subject exists, operates, or is relevant within the context or framework defined by the object.",
      "disambiguation_index": 0
    },
    "Predicate-driven_by": {
      "label": "driven by",
      "description": "The predicate 'driven by' indicates that the subject is influenced, motivated, or guided by the object, suggesting a relationship where the object serves as a foundational or operational force that shapes the behavior, functionality, or performance of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-are_typically": {
      "label": "are typically",
      "description": "The predicate 'are typically' serves to indicate a common or general characteristic or quality of the subject, suggesting that the object is a frequent or usual state associated with the subject. It implies that while there may be exceptions, the subject is often found to possess the attribute described by the object.",
      "disambiguation_index": 0
    },
    "Predicate-will_be": {
      "label": "will be",
      "description": "The predicate 'will be' indicates a future state or condition of the subject, suggesting that the subject is expected to undergo a change or transition that results in the state or quality described by the object. It connects the subject and object by projecting the subject's future characteristics or status.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_reason_for": {
      "label": "is a reason for",
      "description": "The predicate 'is a reason for' establishes a causal or explanatory relationship between the subject and the object, indicating that the subject provides justification or motivation for the state or condition represented by the object. In this context, the subject is seen as a contributing factor that leads to or explains the existence of the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_more_complete_information_for": {
      "label": "has more complete information for",
      "description": "The predicate 'has more complete information for' indicates that the subject possesses a greater depth or breadth of data, details, or knowledge regarding the object compared to other sources or entities. It suggests a comparative assessment where the subject is recognized as a more comprehensive resource for understanding or learning about the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_less_complete_information_for": {
      "label": "has less complete information for",
      "description": "The predicate 'has less complete information for' indicates a comparative relationship between the subject and the object, where the subject possesses a level of information about the object that is deemed to be less comprehensive or detailed than that available from other sources or contexts. This suggests that while the subject may contain some information regarding the object, it lacks the depth or breadth found elsewhere.",
      "disambiguation_index": 0
    },
    "Predicate-depend_on": {
      "label": "depend on",
      "description": "The predicate 'depend on' indicates a relationship where the subject relies or is contingent upon the object for support, resources, or conditions necessary for their functioning, existence, or success. This implies that changes or characteristics of the object can significantly influence or determine the state or actions of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-comes_from": {
      "label": "comes from",
      "description": "The predicate 'comes from' indicates a source or origin relationship between the subject and the object. It suggests that the subject is derived, influenced, or generated by the object, establishing a directional connection where the object serves as the foundational basis or contributing factor for the subject.",
      "disambiguation_index": 0
    },
    "Predicate-extend": {
      "label": "extend",
      "description": "The predicate 'extend' indicates an action where the subject is actively increasing, enhancing, or adding to the scope, capacity, or content of the object. In this context, it signifies that the subject contributes additional elements, features, or information to the object, thereby broadening its overall structure or functionality.",
      "disambiguation_index": 0
    },
    "Predicate-employs": {
      "label": "employs",
      "description": "The predicate 'employs' indicates that the subject utilizes or applies the object as a means to achieve a specific function or purpose. It suggests a relationship where the subject actively incorporates the object into its operations or processes, thereby leveraging the object's characteristics or capabilities to enhance its own effectiveness or performance.",
      "disambiguation_index": 0
    },
    "Predicate-requires": {
      "label": "requires",
      "description": "The predicate 'requires' establishes a relationship between a subject and an object, indicating that the subject has a necessity or dependency on the object for its functionality, existence, or operation. It implies that without the object, the subject cannot effectively perform its intended role or achieve its purpose.",
      "disambiguation_index": 0
    },
    "Predicate-populated_by": {
      "label": "populated by",
      "description": "The predicate 'populated by' indicates the means or methods through which the subject is filled or enriched with content, typically referring to the processes or techniques that contribute to the formation or development of the subject. It establishes a relationship where the subject is the entity being enhanced or supplied, and the object represents the sources or methods responsible for this enhancement.",
      "disambiguation_index": 0
    },
    "Predicate-using": {
      "label": "using",
      "description": "The predicate 'using' indicates the action or process by which the subject employs or utilizes the object to achieve a specific purpose or outcome. It establishes a functional relationship where the subject actively engages with the object, often implying a method or technique that facilitates the interaction between the two.",
      "disambiguation_index": 0
    },
    "Predicate-such_as": {
      "label": "such as",
      "description": "The predicate 'such as' is used to introduce examples or specific instances that illustrate or clarify the subject. It connects the subject to the object by indicating that the object is a representative example of the broader category or concept denoted by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-prone_to": {
      "label": "prone to",
      "description": "The predicate 'prone to' indicates a tendency or susceptibility of the subject to experience or exhibit the characteristics or phenomena described by the object. It suggests that the subject is likely to encounter or be affected by the object, often implying a negative or undesirable outcome.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_highlighted_for_correction_by": {
      "label": "can be highlighted for correction by",
      "description": "The predicate 'can be highlighted for correction by' indicates a relationship where the subject is identified or marked for the purpose of correction through the intervention or application of the object. This suggests that the object serves as a mechanism, tool, or method that facilitates the recognition and rectification of issues present in the subject.",
      "disambiguation_index": 0
    },
    "Predicate-are_commonly_unavailable": {
      "label": "are commonly unavailable",
      "description": "The predicate 'are commonly unavailable' indicates that the subject typically lacks accessibility or presence in relation to the object. It suggests a frequent or general state of absence, implying that the subject does not have the object readily available or accessible in most situations.",
      "disambiguation_index": 0
    },
    "Predicate-recommended_by": {
      "label": "recommended by",
      "description": "The predicate 'recommended by' establishes a relationship where the subject is endorsed or suggested for use by the object. It indicates that the object, typically an authoritative body or expert group, advocates for the subject, implying that the subject is considered valuable, effective, or beneficial in its context.",
      "disambiguation_index": 0
    },
    "Predicate-recommended": {
      "label": "recommended",
      "description": "The predicate 'recommended' indicates a formal suggestion or endorsement made by the subject towards the object, implying that the object is advised for use or consideration based on the subject's authority or expertise in the relevant field.",
      "disambiguation_index": 0
    },
    "Predicate-recommended_in": {
      "label": "recommended in",
      "description": "The predicate 'recommended in' establishes a relationship where the subject endorses or suggests a particular course of action, guideline, or standard during a specified time frame or in a specific context represented by the object. It indicates that the subject has formally acknowledged the object as a recommendation, often implying that the object is relevant to the subject's domain or area of expertise.",
      "disambiguation_index": 0
    },
    "Predicate-expresses_constraints_on": {
      "label": "expresses constraints on",
      "description": "The predicate 'expresses constraints on' indicates a relationship where the subject defines or imposes specific limitations, rules, or requirements that apply to the object. This connection suggests that the subject provides a framework or set of guidelines that govern the characteristics, behavior, or structure of the object, ensuring that it adheres to certain standards or conditions.",
      "disambiguation_index": 0
    },
    "Predicate-expresses": {
      "label": "expresses",
      "description": "The predicate 'expresses' indicates a relationship where the subject conveys, represents, or communicates the essence, characteristics, or content of the object. It suggests that the subject embodies or manifests the qualities or ideas associated with the object, establishing a connection that highlights the subject's role in articulating or revealing the nature of the object.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_used_to_express": {
      "label": "can be used to express",
      "description": "The predicate 'can be used to express' indicates a functional relationship where the subject has the capability or utility to convey, represent, or articulate the concept or entity denoted by the object. It suggests that the subject serves as a medium or tool through which the object can be communicated or understood.",
      "disambiguation_index": 0
    },
    "Predicate-characterize": {
      "label": "characterize",
      "description": "The predicate 'characterize' establishes a relationship where the subject provides defining attributes, qualities, or features that describe or identify the object. It indicates that the subject plays a role in shaping the understanding or perception of the object by highlighting its essential characteristics.",
      "disambiguation_index": 0
    },
    "Predicate-needs_to_have": {
      "label": "needs to have",
      "description": "The predicate 'needs to have' indicates a requirement or necessity that connects the subject to the object, suggesting that the subject must possess or obtain the object in order to fulfill a certain condition, achieve a goal, or meet a standard. This relationship implies that the object is essential for the subject's identity, function, or well-being.",
      "disambiguation_index": 0
    },
    "Predicate-has_particular_type": {
      "label": "has particular type",
      "description": "The predicate 'has particular type' establishes a relationship between the subject and the object by indicating that the subject possesses a specific classification or category represented by the object. This connection implies that the subject can be identified or characterized by the type denoted by the object, thereby providing a way to understand the nature or properties of the subject in relation to the defined type.",
      "disambiguation_index": 0
    },
    "Predicate-are_used_to_guide": {
      "label": "are used to guide",
      "description": "The predicate 'are used to guide' indicates that the subject serves a purpose or function in directing, influencing, or providing direction to the object. It implies a relationship where the subject plays a role in shaping the understanding, behavior, or organization of the object, often suggesting a supportive or advisory role.",
      "disambiguation_index": 0
    },
    "Predicate-could_be_inferred_from": {
      "label": "could be inferred from",
      "description": "The predicate 'could be inferred from' establishes a relationship where the subject is understood or deduced based on the information or context provided by the object. It implies that the object contains relevant data or insights that allow for conclusions or interpretations about the subject.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_used_for": {
      "label": "can be used for",
      "description": "The predicate 'can be used for' establishes a functional relationship between the subject and the object, indicating that the subject serves a purpose or is applicable in the context of the object. It suggests that the subject has utility or relevance in achieving, facilitating, or enhancing the object.",
      "disambiguation_index": 0
    },
    "Predicate-has": {
      "label": "has",
      "description": "The predicate 'has' indicates a relationship of possession or association between the subject and the object. It signifies that the subject possesses, contains, or is characterized by the qualities or attributes represented by the object. In this context, it establishes a connection where the subject is linked to the object in a way that implies ownership or existence of the object in relation to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-are_expressed_by": {
      "label": "are expressed by",
      "description": "The predicate 'are expressed by' indicates a relationship where the subject is represented, conveyed, or articulated through the means or methods denoted by the object. It suggests that the subject's characteristics, properties, or concepts are communicated or illustrated using the frameworks, systems, or languages specified in the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_common_underlying_form": {
      "label": "has common underlying form",
      "description": "The predicate 'has common underlying form' indicates that the subject possesses a shared foundational structure or characteristic that is also represented by the object. This relationship suggests that despite potential differences in appearance or function, the subject and object are connected through a fundamental similarity that defines their essence or nature.",
      "disambiguation_index": 0
    },
    "Predicate-induce": {
      "label": "induce",
      "description": "The predicate 'induce' signifies a causal or influential relationship where the subject brings about, stimulates, or leads to the occurrence or formation of the object. In this context, the subject is an entity or condition that exerts an effect, while the object represents the result or outcome that is generated as a consequence of that influence.",
      "disambiguation_index": 0
    },
    "Predicate-is_in": {
      "label": "is in",
      "description": "The predicate 'is in' establishes a relationship of inclusion or membership between the subject and the object, indicating that the subject (entity x) exists within or is part of the context defined by the object (album y). This implies that the subject is associated with, contained by, or located within the boundaries or framework of the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_a": {
      "label": "has a",
      "description": "The predicate 'has a' indicates a possessive relationship between the subject and the object, where the subject is associated with or contains the object as a defining characteristic or component. In the context of the example, it signifies that the subject, which is an album, is linked to a record label, implying that the album is produced, distributed, or represented by that record label.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_necessary_condition_for": {
      "label": "is a necessary condition for",
      "description": "The predicate 'is a necessary condition for' establishes a relationship where the subject must be fulfilled or achieved in order for the object to be possible or realized. It indicates that the existence or occurrence of the subject is essential for the occurrence of the object, implying that without the subject, the object cannot occur.",
      "disambiguation_index": 0
    },
    "Predicate-focuses_on": {
      "label": "focuses on",
      "description": "The predicate 'focuses on' indicates that the subject is directing attention, analysis, or discussion towards the object, highlighting its importance or relevance within a particular context. It suggests a concentration of effort or interest that aims to explore, explain, or elaborate on the object in question.",
      "disambiguation_index": 0
    },
    "Predicate-investigates": {
      "label": "investigates",
      "description": "The predicate 'investigates' denotes an action where the subject actively seeks to understand, explore, or analyze the object. It implies a systematic examination or inquiry into the characteristics, properties, or behaviors of the object, often with the goal of gaining knowledge or insights. In this context, the subject is engaged in a process of inquiry that focuses on the object, which can be a concept, phenomenon, or entity.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_process_of_constructing": {
      "label": "is a process of constructing",
      "description": "The predicate 'is a process of constructing' indicates that the subject represents a specific method or activity involved in the creation or assembly of the object. It establishes a relationship where the subject is characterized as a systematic approach or series of actions aimed at building or forming the object, which is typically a tangible or conceptual entity. This connection emphasizes the procedural nature of the subject in relation to the object being constructed.",
      "disambiguation_index": 0
    },
    "Predicate-has_type": {
      "label": "has type",
      "description": "The predicate 'has type' establishes a classification or categorization relationship between the subject and the object, indicating that the subject belongs to or is characterized by the type represented by the object. It connects entities by defining the nature or category of the subject in relation to the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_about": {
      "label": "is about",
      "description": "The predicate 'is about' establishes a relationship where the subject serves as a focal point or topic of discussion, consideration, or representation concerning the object. It indicates that the subject contains, relates to, or conveys information regarding the object, suggesting a thematic or contextual connection between the two.",
      "disambiguation_index": 0
    },
    "Predicate-is_expected_to_have": {
      "label": "is expected to have",
      "description": "The predicate 'is expected to have' indicates a relationship where the subject is anticipated or believed to possess certain characteristics, attributes, or elements represented by the object. This implies a level of expectation or assumption about the subject's qualities or the information that can be associated with it, suggesting that the object is a typical or likely feature of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-suggests": {
      "label": "suggests",
      "description": "The predicate 'suggests' indicates a relationship where the subject provides an indication, recommendation, or implication regarding the object. It conveys that the subject offers insights or hints that lead to the consideration or acknowledgment of the object, which may include ideas, conclusions, or related information.",
      "disambiguation_index": 0
    },
    "Predicate-mines": {
      "label": "mines",
      "description": "The predicate 'mines' indicates an action performed by the subject that involves the extraction or retrieval of resources, information, or elements represented by the object. In this context, it suggests that the subject is actively searching for, collecting, or utilizing the object in a manner akin to mining, which typically involves digging or uncovering valuable materials.",
      "disambiguation_index": 0
    },
    "Predicate-mines_from": {
      "label": "mines from",
      "description": "The predicate 'mines from' indicates a relationship where the subject extracts or derives information, resources, or data from the object. It suggests a process of obtaining valuable elements or insights from a source, which is represented by the object. This relationship often implies a systematic approach to gathering or utilizing the contents of the object for the purpose of analysis, development, or enhancement of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-are_an_inverse_version_of": {
      "label": "are an inverse version of",
      "description": "The predicate 'are an inverse version of' establishes a relationship between two concepts where the subject represents a modified or opposite form of the object. This indicates that the subject retains some foundational characteristics of the object but alters them in a way that reverses or negates their original properties or functions.",
      "disambiguation_index": 0
    },
    "Predicate-are_called": {
      "label": "are called",
      "description": "The predicate 'are called' serves to establish a naming or identification relationship between the subject and the object in a triple. It indicates that the subject is referred to by the term or phrase represented by the object, thereby linking the two in a way that conveys that they are synonymous or that the object is a label for the subject.",
      "disambiguation_index": 0
    },
    "Predicate-are_adapted_by": {
      "label": "are adapted by",
      "description": "The predicate 'are adapted by' indicates a relationship where the subject undergoes modifications or adjustments as a result of the influence or application of the object. This suggests that the object plays a role in transforming or tailoring the subject to better fit certain criteria, contexts, or functionalities.",
      "disambiguation_index": 0
    },
    "Predicate-uses": {
      "label": "uses",
      "description": "The predicate 'uses' indicates that the subject actively employs or utilizes the object in some capacity. It signifies a functional relationship where the subject applies the object to achieve a specific purpose or outcome. In this context, the subject is leveraging the object as a tool, resource, or method to facilitate an action or process.",
      "disambiguation_index": 0
    },
    "Predicate-discover": {
      "label": "discover",
      "description": "The predicate 'discover' indicates the action of finding or uncovering something that was previously unknown or unrecognized. It connects the subject, which represents the entity or concept that is performing the act of discovery, with the object, which represents the new knowledge, insight, or entity that is being revealed or identified as a result of this action.",
      "disambiguation_index": 0
    },
    "Predicate-are_used_to_discover": {
      "label": "are used to discover",
      "description": "The predicate 'are used to discover' indicates a functional relationship where the subject serves as a tool, method, or resource that facilitates the identification or understanding of the object. It implies that the subject has a purpose or application in uncovering, revealing, or learning about the object, which represents a concept, phenomenon, or entity that is being explored or analyzed.",
      "disambiguation_index": 0
    },
    "Predicate-are_augmented_with": {
      "label": "are augmented with",
      "description": "The predicate 'are augmented with' indicates that the subject is enhanced or supplemented by the object, suggesting an addition that improves or enriches the subject in some way. This relationship implies that the object provides additional value, information, or functionality to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-contains": {
      "label": "contains",
      "description": "The predicate 'contains' indicates that the subject has within it or includes the object as a part or component. It establishes a relationship where the subject is seen as a whole that encompasses or holds the object, suggesting that the object is an integral element of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-extends": {
      "label": "extends",
      "description": "The predicate 'extends' indicates a relationship where the subject enhances, builds upon, or incorporates elements of the object, suggesting that the subject is a more developed or specialized version of the object, or that it includes additional features or capabilities derived from the object.",
      "disambiguation_index": 0
    },
    "Predicate-annotated_with": {
      "label": "annotated with",
      "description": "The predicate 'annotated with' establishes a relationship where the subject is associated with specific information, characteristics, or metadata represented by the object. This connection implies that the subject has been enhanced or clarified by the inclusion of the object, which provides additional context, constraints, or details relevant to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-act_as": {
      "label": "act as",
      "description": "The predicate 'act as' establishes a functional relationship between the subject and the object, indicating that the subject performs a role or fulfills a purpose that is defined by the object. In this context, the subject is characterized by its ability to embody or represent the qualities, characteristics, or constraints associated with the object, thereby linking the two in a way that highlights the subject's role within a broader framework or system.",
      "disambiguation_index": 0
    },
    "Predicate-produces": {
      "label": "produces",
      "description": "The predicate 'produces' indicates a causal or generative relationship between the subject and the object, where the subject is responsible for creating, generating, or resulting in the object. In this context, the subject is an entity or process that leads to the formation or emergence of the object, which is the outcome or product of that subject's action or function.",
      "disambiguation_index": 0
    },
    "Predicate-describes": {
      "label": "describes",
      "description": "The predicate 'describes' establishes a relationship where the subject provides an explanation, account, or representation of the object. It indicates that the subject conveys information about the characteristics, features, or functions of the object, thereby enhancing the understanding of the object through the context provided by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-discovers": {
      "label": "discovers",
      "description": "The predicate 'discovers' indicates an action or process by which the subject identifies, uncovers, or reveals the object, which typically represents knowledge, patterns, or insights that were previously unknown or unrecognized. This connection implies a transition from a state of ignorance to one of awareness or understanding regarding the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_organized_as_follows": {
      "label": "is organized as follows",
      "description": "The predicate 'is organized as follows' establishes a relationship between the subject and the object by indicating the structure or arrangement of the subject in a systematic manner. It suggests that the subject will be detailed or outlined in a specific way, with the object representing the components or sections that make up this organization.",
      "disambiguation_index": 0
    },
    "Predicate-is_part_of": {
      "label": "is part of",
      "description": "The predicate 'is part of' indicates a relationship where the subject is a component, element, or constituent of the object. This relationship signifies that the subject contributes to the overall structure, function, or concept represented by the object, suggesting a hierarchical or integrative connection between the two.",
      "disambiguation_index": 0
    },
    "Predicate-discusses": {
      "label": "discusses",
      "description": "The predicate 'discusses' indicates that the subject provides an examination, analysis, or commentary on the object, which typically involves presenting information, insights, or arguments related to the topic represented by the object. This relationship suggests an informative or explanatory interaction where the subject elaborates on the details, implications, or significance of the object.",
      "disambiguation_index": 0
    },
    "Predicate-concludes": {
      "label": "concludes",
      "description": "The predicate 'concludes' indicates that the subject presents a final statement or summary that encapsulates or draws upon the information or findings represented by the object. It signifies the act of reaching a decision or judgment based on the preceding content, thereby linking the subject's discourse to the conclusions derived from the object.",
      "disambiguation_index": 0
    },
    "Predicate-concludes_in": {
      "label": "concludes in",
      "description": "The predicate 'concludes in' indicates that the subject reaches a final point, resolution, or summary within the context of the object. It signifies that the subject culminates its discussion, findings, or arguments in the specified object, which often represents a section, chapter, or part of a larger work.",
      "disambiguation_index": 0
    },
    "Predicate-is_presented_in": {
      "label": "is presented in",
      "description": "The predicate 'is presented in' indicates that the subject is discussed, described, or explained within the context of the object. It establishes a relationship where the subject is the topic or content that is being conveyed, while the object serves as the medium, location, or context in which this information is made available or communicated.",
      "disambiguation_index": 0
    },
    "Predicate-are_a_type_of": {
      "label": "are a type of",
      "description": "The predicate 'are a type of' establishes a hierarchical relationship between the subject and the object, indicating that the subject is a specific category or classification within the broader category represented by the object. It signifies that the subject shares common characteristics or properties with the object, thus allowing for the organization of concepts into a taxonomy.",
      "disambiguation_index": 0
    },
    "Predicate-can_represent": {
      "label": "can represent",
      "description": "The predicate 'can represent' indicates a capability or potential of the subject to embody, symbolize, or convey the characteristics, essence, or significance of the object. In this context, the subject, which can be an entity, individual, or concept, has the ability to serve as a representation or stand-in for the object, which is typically a place, idea, or another entity. This relationship suggests that the subject can evoke or illustrate the qualities associated with the object, thereby facilitating understanding or recognition.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_set_of": {
      "label": "is a set of",
      "description": "The predicate 'is a set of' establishes a relationship where the subject is identified as a collection or grouping that includes the object as one of its members or components. This indicates that the object is part of a larger whole represented by the subject, suggesting a categorization or classification of the object within the context of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_known_as": {
      "label": "is known as",
      "description": "The predicate 'is known as' establishes a relationship of identification or equivalence between the subject and the object, indicating that the subject is recognized or referred to by the name or term represented by the object. This connection implies that the object serves as a label, title, or synonym for the subject, facilitating understanding or recognition of the subject in a specific context.",
      "disambiguation_index": 0
    },
    "Predicate-is_related_to": {
      "label": "is related to",
      "description": "The predicate 'is related to' establishes a connection or association between the subject entity and the object entity. This relationship can encompass various forms of connections, such as familial ties, conceptual links, causal relationships, or contextual associations, indicating that the two entities share some form of relevance or significance to each other.",
      "disambiguation_index": 0
    },
    "Predicate-is_written_as": {
      "label": "is written as",
      "description": "The predicate 'is written as' establishes a relationship of representation or expression between the subject and the object, indicating that the subject can be articulated, denoted, or symbolized in the form of the object. It implies that the object serves as a textual or formal representation of the subject, capturing its meaning or essence in a specific format.",
      "disambiguation_index": 0
    },
    "Predicate-allow": {
      "label": "allow",
      "description": "The predicate 'allow' signifies a relationship in which the subject grants permission or enables the object to perform an action or exist in a certain state. It indicates that the subject's stance or authority permits the object to undertake a specific behavior or condition, thereby facilitating the object's agency or potential.",
      "disambiguation_index": 0
    },
    "Predicate-equivalently_written_as": {
      "label": "equivalently written as",
      "description": "The predicate 'equivalently written as' establishes a relationship of equivalence between the subject and the object, indicating that they represent the same concept or entity in different forms or notations. It suggests that the two expressions can be used interchangeably in a given context without loss of meaning, thereby highlighting their semantic similarity.",
      "disambiguation_index": 0
    },
    "Predicate-model_as": {
      "label": "model as",
      "description": "The predicate 'model as' establishes a relationship where the subject is represented or conceptualized in terms of the object, indicating that the subject can be understood or interpreted through the characteristics or properties of the object.",
      "disambiguation_index": 0
    },
    "Predicate-similar_to": {
      "label": "similar to",
      "description": "The predicate 'similar to' establishes a comparative relationship between the subject and the object, indicating that they share common characteristics or qualities. It suggests a degree of likeness or resemblance, allowing for the identification of parallels or analogies between the two entities involved.",
      "disambiguation_index": 0
    },
    "Predicate-represent": {
      "label": "represent",
      "description": "The predicate 'represent' establishes a relationship in which the subject serves as a symbol, embodiment, or expression of the object, indicating that the subject conveys or signifies the characteristics, properties, or essence of the object in a meaningful way.",
      "disambiguation_index": 0
    },
    "Predicate-expressed_as": {
      "label": "expressed as",
      "description": "The predicate 'expressed as' serves to indicate a representation or formulation of the subject in terms of the object. It establishes a relationship where the subject is articulated or defined through the structure or content of the object, often implying that the object provides a specific context, interpretation, or framework for understanding the subject.",
      "disambiguation_index": 0
    },
    "Predicate-may_represent": {
      "label": "may represent",
      "description": "The predicate 'may represent' indicates a potential or possible relationship between the subject and the object, suggesting that the subject has the capacity to symbolize, denote, or embody the characteristics or properties associated with the object. This relationship is not definitive but implies that under certain conditions or interpretations, the subject could be understood as reflecting or standing for the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_pair": {
      "label": "is a pair",
      "description": "The predicate 'is a pair' establishes a relationship between the subject and the object by indicating that the object consists of two elements that are considered together as a single unit. In the context of the example triple, it signifies that the subject (the KG) contains or represents a specific pairing of two entities (E and F) that are related or associated in some meaningful way.",
      "disambiguation_index": 0
    },
    "Predicate-occur_in": {
      "label": "occur in",
      "description": "The predicate 'occur in' establishes a relationship where the subject, typically an entity, is associated with or takes place within the context or framework of the object, which can be an event, location, situation, or category. This indicates that the subject is present or happening as part of the object.",
      "disambiguation_index": 0
    },
    "Predicate-employ": {
      "label": "employ",
      "description": "The predicate 'employ' indicates that the subject utilizes or makes use of the object in some capacity. It suggests an active engagement where the subject applies the object as a tool, method, or resource to achieve a specific purpose or function.",
      "disambiguation_index": 0
    },
    "Predicate-consists_of": {
      "label": "consists of",
      "description": "The predicate 'consists of' indicates a relationship where the subject is composed of or includes the object as a fundamental part or component. It signifies that the object is an essential element that contributes to the overall structure or nature of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-forms": {
      "label": "forms",
      "description": "The predicate 'forms' indicates a relationship where the subject is responsible for creating, establishing, or constituting the object. It suggests that the subject serves as a foundational or generative element that leads to the existence or definition of the object, often implying a process of development or transformation.",
      "disambiguation_index": 0
    },
    "Predicate--": {
      "label": "<-",
      "description": "The predicate '<-' indicates a directional or causal relationship where the subject is influenced by or derives from the object. In the context of the given triple, it suggests that the state or condition represented by Pt(x, y) is a result of or is linked to the property or action represented by P1(x, z1). This implies a flow of information or influence from the object to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-interpreted_with": {
      "label": "interpreted with",
      "description": "The predicate 'interpreted with' establishes a relationship where the subject is understood or analyzed through the lens of the object. It indicates that the subject is being given meaning, context, or significance by employing the concepts, methods, or frameworks represented by the object. This connection suggests that the interpretation of the subject is contingent upon the principles or criteria defined by the object.",
      "disambiguation_index": 0
    },
    "Predicate-instantiates": {
      "label": "instantiates",
      "description": "The predicate 'instantiates' denotes a relationship where the subject serves as a concrete example or realization of the concept represented by the object. In this context, the subject embodies or brings into existence the characteristics or properties defined by the object, effectively translating abstract ideas into specific instances or applications.",
      "disambiguation_index": 0
    },
    "Predicate-found_in": {
      "label": "found in",
      "description": "The predicate 'found in' establishes a relationship indicating that the subject is located within or is a component of the object. It signifies that the subject exists as part of the broader context or framework represented by the object, suggesting a containment or inclusion relationship.",
      "disambiguation_index": 0
    },
    "Predicate-quantified_by": {
      "label": "quantified by",
      "description": "The predicate 'quantified by' establishes a relationship between a subject and an object, indicating that the subject is subject to a specific quantification method or process represented by the object. This connection implies that the subject is being defined or constrained in terms of its quantity or scope by the object, which typically refers to a type of quantifier, such as universal or existential quantification.",
      "disambiguation_index": 0
    },
    "Predicate-interpret_with": {
      "label": "interpret with",
      "description": "The predicate 'interpret with' denotes a relationship where the subject provides a framework, method, or set of guidelines that is utilized to understand, analyze, or derive meaning from the object. It implies that the subject serves as a tool or lens through which the object is examined or understood, facilitating a specific interpretation or understanding.",
      "disambiguation_index": 0
    },
    "Predicate-livesIn": {
      "label": "livesIn",
      "description": "The predicate 'livesIn' establishes a relationship between a subject, typically a person or an entity, and an object, which is a location or place. It indicates that the subject resides or has their home in the specified location, thereby connecting the individual to their geographical context.",
      "disambiguation_index": 0
    },
    "Predicate-locatedIn": {
      "label": "locatedIn",
      "description": "The predicate 'locatedIn' establishes a spatial relationship between the subject and the object, indicating that the subject is situated within the geographical boundaries or jurisdiction of the object. It connects a specific entity, such as a city or landmark, to a larger region, country, or area, signifying where the subject can be found.",
      "disambiguation_index": 0
    },
    "Predicate-citizenOf": {
      "label": "citizenOf",
      "description": "The predicate 'citizenOf' establishes a relationship between a subject, typically a person, and an object, which is a country or nation. It indicates that the subject holds legal citizenship status in the specified country, implying rights, responsibilities, and a recognized identity within that nation.",
      "disambiguation_index": 0
    },
    "Predicate-are_considered_more_use_if_they_generalise_well": {
      "label": "are considered more use if they generalise well",
      "description": "The predicate 'are considered more use if they generalise well' indicates that the subject is evaluated based on its ability to apply broadly to various instances or scenarios, thereby enhancing its utility or effectiveness. This suggests that the more a subject can be generalized to encompass a wider range of objects or situations, the more valuable or beneficial it is perceived to be.",
      "disambiguation_index": 0
    },
    "Predicate-explain": {
      "label": "explain",
      "description": "The predicate 'explain' denotes the action of clarifying or making something understandable. It connects the subject, which represents the entity providing the explanation, to the object, which represents the information or concept being clarified. In this relationship, the subject imparts knowledge or insight about the object, thereby enhancing comprehension.",
      "disambiguation_index": 0
    },
    "Predicate-are_used_in": {
      "label": "are used in",
      "description": "The predicate 'are used in' indicates a functional relationship where the subject serves a purpose or is applied within the context of the object. It suggests that the subject is a tool, method, or concept that contributes to, facilitates, or is integrated into the practices, theories, or frameworks represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-satisfies": {
      "label": "satisfies",
      "description": "The predicate 'satisfies' indicates a relationship in which the subject meets the criteria, requirements, or conditions set forth by the object. It implies that the subject fulfills or addresses the needs or expectations represented by the object, establishing a connection where the subject is deemed adequate or appropriate in relation to the object.",
      "disambiguation_index": 0
    },
    "Predicate-of_the_form": {
      "label": "of the form",
      "description": "The predicate 'of the form' establishes a relationship that specifies the structure, type, or representation of the subject in relation to the object. It indicates that the subject can be characterized or defined by the particular format or configuration described by the object, thereby providing clarity on how the subject is organized or conceptualized.",
      "disambiguation_index": 0
    },
    "Predicate-denoted_by": {
      "label": "denoted by",
      "description": "The predicate 'denoted by' establishes a relationship of representation or identification between the subject and the object. In this context, it indicates that the subject, which can be a concept, entity, or structure, is represented or characterized by the object, which typically provides a specific definition, expression, or formalization of the subject's meaning or properties.",
      "disambiguation_index": 0
    },
    "Predicate-exist_in": {
      "label": "exist in",
      "description": "The predicate 'exist in' establishes a relationship between the subject and the object, indicating that the subject (which can be a set of entities or a specific entity) is present or located within the context or framework defined by the object. In this case, the subject is linked to the object, which represents a knowledge graph (KG), suggesting that the entities are part of or associated with the information contained within that knowledge graph.",
      "disambiguation_index": 0
    },
    "Predicate-are_facts_in": {
      "label": "are facts in",
      "description": "The predicate 'are facts in' establishes a relationship where the subject is identified as a source or entity that contains or is associated with a collection of factual information represented by the object. It indicates that the subject provides or contributes to the factual content found within the context of the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_fact_in": {
      "label": "is a fact in",
      "description": "The predicate 'is a fact in' establishes a relationship between a subject and an object, indicating that the subject is recognized or validated as a factual statement within the context of the object, which typically represents a knowledge graph or a similar structured information repository. This implies that the subject is accepted as true or factual within the framework provided by the object.",
      "disambiguation_index": 0
    },
    "Predicate-counts": {
      "label": "counts",
      "description": "The predicate 'counts' establishes a quantitative relationship between the subject and the object, indicating that the subject quantifies or enumerates the instances represented by the object. It implies that the subject is assessing or measuring the number of occurrences, instances, or elements associated with the object, thereby providing a numerical value or total that reflects the relationship between them.",
      "disambiguation_index": 0
    },
    "Predicate-are_satisfied_in": {
      "label": "are satisfied in",
      "description": "The predicate 'are satisfied in' indicates a state of contentment or fulfillment experienced by the subject in relation to the object. It suggests that the subject finds a sense of completeness, agreement, or pleasure within the context or framework provided by the object. This connection implies that the subject's needs, desires, or expectations are met or aligned with the characteristics or offerings of the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_defined_as": {
      "label": "is defined as",
      "description": "The predicate 'is defined as' establishes a relationship where the subject is characterized or specified by the object, indicating that the object provides a clear and precise meaning or identity for the subject. This connection implies that the object serves as a definition or explanation that encapsulates the essence or nature of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-offers": {
      "label": "offers",
      "description": "The predicate 'offers' indicates a relationship in which the subject provides, presents, or makes available the object to others. It implies an action of supplying or granting access to something that can be utilized, experienced, or benefited from by the recipient.",
      "disambiguation_index": 0
    },
    "Predicate-compares": {
      "label": "compares",
      "description": "The predicate 'compares' indicates a relationship where the subject evaluates or assesses the characteristics, attributes, or performance of the object in relation to another entity or standard. This involves analyzing similarities, differences, or relative merits between the subject and the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_satisfied_by": {
      "label": "are satisfied by",
      "description": "The predicate 'are satisfied by' indicates a relationship where the subject, typically representing a set of inferred or derived instances, meets the criteria or conditions established by the object, which consists of specific entity pairs. This suggests that the subject is in a state of fulfillment or agreement with the characteristics or requirements defined by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_closely_related_to": {
      "label": "is closely related to",
      "description": "The predicate 'is closely related to' indicates a strong connection or association between the subject and the object, suggesting that they share significant similarities, influences, or interdependencies. This relationship implies that understanding one element can provide insights into the other, highlighting their relevance in a particular context or field.",
      "disambiguation_index": 0
    },
    "Predicate-measures": {
      "label": "measures",
      "description": "The predicate 'measures' indicates a quantitative or qualitative assessment of the relationship between the subject and the object. It signifies that the subject provides a means to evaluate, gauge, or determine the extent, degree, or effectiveness of the object in a specific context.",
      "disambiguation_index": 0
    },
    "Predicate-is_used_for": {
      "label": "is used for",
      "description": "The predicate 'is used for' establishes a functional relationship between the subject and the object, indicating that the subject serves a specific purpose or function that facilitates, supports, or contributes to the achievement of the object. It implies that the subject is a tool, method, or resource that enables or aids in the realization of the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_redundant_with_respect_to": {
      "label": "is redundant with respect to",
      "description": "The predicate 'is redundant with respect to' indicates that the subject provides information or functionality that is already sufficiently covered or represented by the object, implying that the subject does not add any new value or necessity in the context of the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_an_instance_of": {
      "label": "is an instance of",
      "description": "The predicate 'is an instance of' establishes a relationship where the subject is identified as a specific example or occurrence that falls under the broader category or type represented by the object. This connection implies that the subject shares characteristics or properties with the object, thereby linking individual cases to their respective classifications or definitions.",
      "disambiguation_index": 0
    },
    "Predicate-calculated_using": {
      "label": "calculated using",
      "description": "The predicate 'calculated using' indicates a method or process by which the subject is derived or determined from the object. It establishes a relationship where the subject represents a result or value that is obtained through the application of a specific technique, formula, or data represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_used_by": {
      "label": "are used by",
      "description": "The predicate 'are used by' indicates a relationship where the subject is utilized or employed by the object in a specific context or application. It signifies that the object relies on or implements the subject for its functioning, processes, or operations.",
      "disambiguation_index": 0
    },
    "Predicate-defines": {
      "label": "defines",
      "description": "The predicate 'defines' establishes a relationship in which the subject provides a clear and specific explanation or characterization of the object. It indicates that the subject outlines the essential attributes, principles, or rules that constitute the object, thereby clarifying its meaning or function within a particular context.",
      "disambiguation_index": 0
    },
    "Predicate-is_unlike": {
      "label": "is unlike",
      "description": "The predicate 'is unlike' establishes a comparative relationship between the subject and the object, indicating that the two entities differ in certain characteristics, qualities, or attributes. It suggests that while both entities may belong to a similar category or context, they possess distinct features that set them apart from one another.",
      "disambiguation_index": 0
    },
    "Predicate-is_for": {
      "label": "is for",
      "description": "The predicate 'is for' establishes a relationship of purpose or intended use between the subject and the object. It indicates that the subject is associated with, designed for, or serves the function of the object, suggesting that the object represents a goal, application, or benefit that the subject aims to achieve or support.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_predicate_in": {
      "label": "is a predicate in",
      "description": "The predicate 'is a predicate in' establishes a relationship between a subject and an object, indicating that the subject serves as a specific type of predicate within the context or framework defined by the object. This implies that the subject has a role or function as a predicate that contributes to the structure or semantics of the object, which is typically a knowledge graph or similar system.",
      "disambiguation_index": 0
    },
    "Predicate-make_the_rule": {
      "label": "make the rule",
      "description": "The predicate 'make the rule' signifies the process of establishing or defining a specific guideline or principle based on the elements represented by the subject. It indicates that the subject, which can encompass various components or variables, is actively involved in the formulation or creation of a rule that is characterized by the attributes or conditions described in the object. This connection highlights the transformation of the subject's components into a coherent rule that governs or dictates certain behaviors or outcomes.",
      "disambiguation_index": 0
    },
    "Predicate-are_used_since_they_imply": {
      "label": "are used since they imply",
      "description": "The predicate 'are used since they imply' establishes a relationship where the subject is employed or applied due to its inherent suggestion or indication of the object. This implies that the subject possesses qualities or characteristics that lead to the understanding or acknowledgment of the object, thereby justifying its usage in a particular context.",
      "disambiguation_index": 0
    },
    "Predicate-implies": {
      "label": "implies",
      "description": "The predicate 'implies' establishes a logical relationship between the subject and the object, indicating that if the subject condition holds true, then the object condition must also hold true. In this context, it suggests that the existence of a relationship or property represented by the subject leads to the conclusion or necessity of the property represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-transforms": {
      "label": "transforms",
      "description": "The predicate 'transforms' indicates a process or action in which the subject undergoes a change or modification that results in the object. It signifies a relationship where the subject is altered in some way to produce or convert into the object, often implying a systematic or rule-based transition from one state or form to another.",
      "disambiguation_index": 0
    },
    "Predicate-is_also_an": {
      "label": "is also an",
      "description": "The predicate 'is also an' establishes a relationship of inclusion or categorization between the subject and the object, indicating that the subject can be classified as a member of the category or type represented by the object. This suggests that the subject shares characteristics or properties with the object, thereby expanding the understanding of the subject's identity or role within a broader context.",
      "disambiguation_index": 0
    },
    "Predicate-is_an_entity-instantiation_of": {
      "label": "is an entity-instantiation of",
      "description": "The predicate 'is an entity-instantiation of' establishes a relationship between a specific instance of an entity and its corresponding abstract concept or category. It indicates that the subject represents a concrete realization or manifestation of the object, which is typically a broader or more general classification. This relationship highlights how the subject exemplifies or fulfills the characteristics defined by the object, thereby linking the specific to the general within a conceptual framework.",
      "disambiguation_index": 0
    },
    "Predicate-derived_from": {
      "label": "derived from",
      "description": "The predicate 'derived from' indicates a relationship where the subject is a result or outcome that has been developed or evolved from the object. It signifies that the subject has its origins in the object, suggesting a process of transformation, adaptation, or influence that connects the two entities.",
      "disambiguation_index": 0
    },
    "Predicate-assess_the_quality_of": {
      "label": "assess the quality of",
      "description": "The predicate 'assess the quality of' indicates an evaluative action where the subject is engaged in determining or measuring the standard, effectiveness, or overall merit of the object. In this context, the subject performs an analysis or judgment regarding the characteristics or performance of the object, which is typically a concept, item, or set of criteria. This predicate establishes a relationship where the subject's role is to provide an assessment that reflects the value or condition of the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_derived_from": {
      "label": "is derived from",
      "description": "The predicate 'is derived from' indicates a relationship where the subject originates or is based on the object. It suggests that the subject has evolved, been created, or developed as a result of the influence, principles, or components represented by the object. This connection implies a foundational or causal link, where the object serves as a source or reference point for the subject.",
      "disambiguation_index": 0
    },
    "Predicate-denoted_as": {
      "label": "denoted as",
      "description": "The predicate 'denoted as' establishes a relationship of identification or representation between the subject and the object. It indicates that the subject is referred to or labeled by the object, suggesting that the object serves as a name, term, or expression that corresponds to the subject in a specific context. This connection implies that the subject and object are interchangeable in terms of meaning or reference within the given framework.",
      "disambiguation_index": 0
    },
    "Predicate-are_part_of": {
      "label": "are part of",
      "description": "The predicate 'are part of' indicates a relationship where the subject, which consists of one or more entities, is included within or contributes to a larger whole represented by the object, which is a pair of entities. This relationship implies that the subject entities collectively or individually form a component or segment of the object entities, highlighting a connection of inclusion or membership.",
      "disambiguation_index": 0
    },
    "Predicate-denotes": {
      "label": "denotes",
      "description": "The predicate 'denotes' establishes a relationship between the subject and the object, indicating that the subject represents, signifies, or refers to the object in some meaningful way. It implies that the subject carries a specific meaning or concept that is directly associated with the object, thereby creating a link that conveys information about the identity or characteristics of the object as understood through the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_given_by": {
      "label": "is given by",
      "description": "The predicate 'is given by' establishes a relationship where the subject is defined, characterized, or provided by the object. It indicates that the object serves as a source, explanation, or specification for the subject, suggesting that the subject's existence, nature, or properties are derived from or attributed to the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_given_by_(1)": {
      "label": "is given by",
      "description": "The predicate 'is given by' establishes a relationship where the subject is defined, characterized, or quantified through the object. It indicates that the object provides a specific value, measure, or representation that corresponds to the subject, thereby clarifying or elucidating its nature or properties.",
      "disambiguation_index": 1
    },
    "Predicate-given_by": {
      "label": "given by",
      "description": "The predicate 'given by' establishes a relationship where the subject is provided or supplied by the object, indicating that the object is the source or origin of the subject's existence or characteristics.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_used_to_understand_and_validate": {
      "label": "can be used to understand and validate",
      "description": "The predicate 'can be used to understand and validate' indicates a functional relationship where the subject provides a means or method for comprehending and confirming the accuracy or relevance of the object. It suggests that the subject serves as a tool or framework that aids in the interpretation and verification of the object, enhancing clarity and ensuring correctness.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_very_helpful_for": {
      "label": "can be very helpful for",
      "description": "The predicate 'can be very helpful for' indicates a supportive or beneficial relationship between the subject and the object, suggesting that the subject provides assistance, guidance, or valuable resources that enhance the effectiveness or efficiency of the processes or activities represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-validated_against": {
      "label": "validated against",
      "description": "The predicate 'validated against' indicates a relationship where the subject is assessed or confirmed in relation to the criteria, standards, or characteristics represented by the object. This implies that the subject undergoes a process of verification or evaluation to ensure its accuracy, reliability, or conformity with the specified object.",
      "disambiguation_index": 0
    },
    "Predicate-can_then_be_validated_against": {
      "label": "can then be validated against",
      "description": "The predicate 'can then be validated against' indicates a process in which the subject is subjected to a verification or assessment procedure using the criteria or standards represented by the object. It implies that the subject is evaluated for its accuracy, consistency, or conformity in relation to the object, which serves as a benchmark or reference point.",
      "disambiguation_index": 0
    },
    "Predicate-serve": {
      "label": "serve",
      "description": "The predicate 'serve' indicates a functional relationship where the subject provides a specific utility, purpose, or role that contributes to the achievement or realization of the object. In this context, it implies that the subject is actively involved in facilitating or enabling the process or action described by the object.",
      "disambiguation_index": 0
    },
    "Predicate-can_serve": {
      "label": "can serve",
      "description": "The predicate 'can serve' indicates a functional relationship where the subject has the capability or potential to fulfill a role or purpose represented by the object. It suggests that the subject is able to contribute to, assist in, or facilitate the action or process described by the object.",
      "disambiguation_index": 0
    },
    "Predicate-illustrates": {
      "label": "illustrates",
      "description": "The predicate 'illustrates' serves to establish a relationship where the subject provides a representation, demonstration, or clarification of the object. It indicates that the subject exemplifies or showcases the characteristics, features, or concepts embodied in the object, thereby enhancing understanding or providing a visual or conceptual reference.",
      "disambiguation_index": 0
    },
    "Predicate-are_instantiated_by": {
      "label": "are instantiated by",
      "description": "The predicate 'are instantiated by' establishes a relationship where the subject, which may consist of multiple components or entities, is represented or realized through the object, referred to as 'entity'. This indicates that the subject is a manifestation or specific occurrence of the broader concept or category defined by the object.",
      "disambiguation_index": 0
    },
    "Predicate-illustrate": {
      "label": "illustrate",
      "description": "The predicate 'illustrate' connects a subject, which typically represents a concept, idea, or entity, with an object that serves as a visual representation or example of that subject. This relationship indicates that the object provides clarity, explanation, or demonstration of the subject's characteristics or properties, enhancing understanding through visual means.",
      "disambiguation_index": 0
    },
    "Predicate-is_expressed_in": {
      "label": "is expressed in",
      "description": "The predicate 'is expressed in' indicates a relationship where the subject is represented, conveyed, or articulated through the object. It suggests that the subject's characteristics, properties, or concepts are captured or manifested in the form of the object, which serves as a medium or framework for that expression.",
      "disambiguation_index": 0
    },
    "Predicate-is_translated_to": {
      "label": "is translated to",
      "description": "The predicate 'is translated to' indicates a relationship where the subject is converted or expressed in a different form, language, or representation that is denoted by the object. This transformation implies that the essence or meaning of the subject is preserved while being reformulated into the context or structure represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-together_with": {
      "label": "together with",
      "description": "The predicate 'together with' indicates a relationship of conjunction or association between the subject and the object, suggesting that both elements are considered collectively or in conjunction with one another. It implies that the subject and object are linked in a way that highlights their combined relevance or functionality, often indicating that they complement or enhance each other.",
      "disambiguation_index": 0
    },
    "Predicate-is_extensive_with": {
      "label": "is extensive with",
      "description": "The predicate 'is extensive with' indicates a significant and comprehensive relationship between the subject and the object, suggesting that the subject encompasses a wide range of elements, characteristics, or aspects that are represented by the object. This relationship implies that the subject provides a thorough or detailed connection to the object, highlighting the depth and breadth of the subject's relevance or applicability to the object.",
      "disambiguation_index": 0
    },
    "Predicate-constrain": {
      "label": "constrain",
      "description": "The predicate 'constrain' indicates a relationship where the subject imposes limitations or restrictions on the object, thereby defining the boundaries or conditions under which the object operates or is applicable. In this context, the subject serves as a governing entity that influences the behavior, characteristics, or possibilities of the object.",
      "disambiguation_index": 0
    },
    "Predicate-act_to_constrain": {
      "label": "act to constrain",
      "description": "The predicate 'act to constrain' indicates a relationship where the subject exerts influence or control over the object, limiting or restricting its potential actions, characteristics, or outcomes. This implies that the subject plays a role in shaping the behavior or properties of the object, thereby establishing boundaries or conditions that the object must operate within.",
      "disambiguation_index": 0
    },
    "Predicate-proposed_to_express": {
      "label": "proposed to express",
      "description": "The predicate 'proposed to express' indicates a suggestion or intention to convey or represent a particular concept, idea, or set of characteristics (the object) through a specific means or framework (the subject). It implies that the subject is being put forward as a suitable method or system for articulating the nuances or details of the object.",
      "disambiguation_index": 0
    },
    "Predicate-exhibited_in": {
      "label": "exhibited in",
      "description": "The predicate 'exhibited in' indicates a relationship where the subject demonstrates or displays certain characteristics, features, or qualities that are present within the object. It suggests that the subject is manifested or can be observed within the context or framework provided by the object.",
      "disambiguation_index": 0
    },
    "Predicate-corresponding_to": {
      "label": "corresponding to",
      "description": "The predicate 'corresponding to' indicates a relationship of equivalence or association between the subject and the object, suggesting that the subject is related to or matched with the object in a meaningful way. This connection often implies that the subject can be understood, represented, or interpreted in terms of the object, highlighting a correspondence in characteristics, functions, or roles.",
      "disambiguation_index": 0
    },
    "Predicate-are_used_for": {
      "label": "are used for",
      "description": "The predicate 'are used for' indicates a functional relationship between the subject and the object, where the subject serves a specific purpose or role that is fulfilled by the object. It implies that the subject is employed or utilized in a manner that relates to the object, suggesting a practical application or utility.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_related_by": {
      "label": "can be related by",
      "description": "The predicate 'can be related by' indicates a potential connection or association between the subject and the object, suggesting that there exists a specific relationship or link that can be established or identified. This relationship may encompass various forms of connections, such as causal, associative, or functional ties, and highlights the ability of the subject to be connected to the object through the specified predicate.",
      "disambiguation_index": 0
    },
    "Predicate-are_deployed_to_make": {
      "label": "are deployed to make",
      "description": "The predicate 'are deployed to make' indicates the action of utilizing or applying certain elements, resources, or strategies (the subject) in order to create, construct, or produce a specific outcome or entity (the object). It implies a purposeful and strategic use of the subject to achieve the desired result represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-share": {
      "label": "share",
      "description": "The predicate 'share' indicates a relationship in which the subject possesses or exhibits a common characteristic, attribute, or resource that is also present in the object. This connection implies a mutuality or overlap between the subject and the object, suggesting that both entities are linked through the shared feature or quality.",
      "disambiguation_index": 0
    },
    "Predicate-exist": {
      "label": "exist",
      "description": "The predicate 'exist' indicates the presence or occurrence of the subject in relation to the object. It establishes that the subject, which can be an abstract concept, entity, or phenomenon, has a reality or manifestation that is connected to the object, which typically represents a broader category or context. In this way, 'exist' serves to affirm that the subject is not merely theoretical but has a tangible or definable presence within the scope of the object.",
      "disambiguation_index": 0
    },
    "Predicate-connected_by": {
      "label": "connected by",
      "description": "The predicate 'connected by' indicates a relationship of linkage or association between the subject and the object, suggesting that the subject is unified or related to the object through a specific mechanism, process, or intermediary. This connection implies that the subject and object are not independent but rather interact or function together in a cohesive manner.",
      "disambiguation_index": 0
    },
    "Predicate-terminating_with": {
      "label": "terminating with",
      "description": "The predicate 'terminating with' indicates a relationship where the subject concludes or ends with the specified object. It implies that the subject is a sequence or series that reaches its final element or state represented by the object, suggesting a directional flow from the subject to the object that signifies completion or resolution.",
      "disambiguation_index": 0
    },
    "Predicate-are_a_more_general_template_for": {
      "label": "are a more general template for",
      "description": "The predicate 'are a more general template for' indicates that the subject serves as a foundational or overarching framework that can encompass or give rise to the object. It suggests that the subject represents a broader category or concept from which the object can be derived or classified, highlighting a relationship of generalization where the subject provides a basis for understanding or creating the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_also": {
      "label": "are also",
      "description": "The predicate 'are also' serves to establish a relationship of equivalence or inclusion between the subject and the object, indicating that the subject possesses characteristics or qualities that align with or extend to the object. It suggests that the subject can be understood or categorized in a manner that is similar to the object, thereby highlighting a connection or similarity between the two.",
      "disambiguation_index": 0
    },
    "Predicate-induced_from": {
      "label": "induced from",
      "description": "The predicate 'induced from' establishes a relationship where the subject is derived or generated based on the characteristics, properties, or elements of the object. It implies that the subject is a result of processes, influences, or transformations that originate from the object, suggesting a foundational or causal connection between the two.",
      "disambiguation_index": 0
    },
    "Predicate-have_a_straightforward_interpretation_as": {
      "label": "have a straightforward interpretation as",
      "description": "The predicate 'have a straightforward interpretation as' indicates that the subject can be clearly understood or defined in terms of the object. It suggests a direct and uncomplicated relationship where the subject is equated or identified with the object, allowing for an easy comprehension of the subject's meaning or function through the lens of the object.",
      "disambiguation_index": 0
    },
    "Predicate-serve_as": {
      "label": "serve as",
      "description": "The predicate 'serve as' indicates a functional relationship where the subject fulfills a role or purpose that is represented by the object. It suggests that the subject can be utilized or is applicable in a way that aligns with the characteristics or functions of the object.",
      "disambiguation_index": 0
    },
    "Predicate-discuss_the_application_of": {
      "label": "discuss the application of",
      "description": "The predicate 'discuss the application of' serves to establish a relationship where the subject is engaged in a conversation or analysis regarding the practical use or relevance of the object. It implies an exploration of how the object can be utilized or implemented in various contexts, highlighting its significance or potential impact.",
      "disambiguation_index": 0
    },
    "Predicate-apply_to": {
      "label": "apply to",
      "description": "The predicate 'apply to' indicates a relationship where the subject is relevant or pertinent to the object, suggesting that the subject can be utilized, considered, or is applicable in the context of the object. It establishes a connection that implies the subject's characteristics, properties, or functions are suitable for or can be used in relation to the object.",
      "disambiguation_index": 0
    },
    "Predicate-correspond_to": {
      "label": "correspond to",
      "description": "The predicate 'correspond to' indicates a relationship of equivalence or alignment between the subject and the object, suggesting that they share a meaningful connection or that one can be mapped to the other in a relevant context. This relationship often implies that the properties, functions, or characteristics of the subject are reflected or represented in the object.",
      "disambiguation_index": 0
    },
    "Predicate-corresponds_to": {
      "label": "corresponds to",
      "description": "The predicate 'corresponds to' indicates a relationship of equivalence or alignment between the subject and the object, suggesting that they share a relevant connection or that one can be mapped to the other in a meaningful way. This relationship often implies that the characteristics or properties of the subject are reflected or represented in the object, establishing a correspondence that can be utilized for comparison, analysis, or transformation.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_derived_from": {
      "label": "can be derived from",
      "description": "The predicate 'can be derived from' indicates a relationship where the subject is a result or outcome that originates from the principles, rules, or elements represented by the object. It suggests that the subject is not independent but rather is formed or influenced by the object, highlighting a foundational or causal connection between the two.",
      "disambiguation_index": 0
    },
    "Predicate-leads_to": {
      "label": "leads to",
      "description": "The predicate 'leads to' indicates a causal or consequential relationship between the subject and the object. It suggests that the subject, represented by the first component of the triple, has an influence or effect that results in the existence or occurrence of the object, which is expressed in the second component. In this context, the subject is a condition or state that initiates or contributes to the realization of the object, which is a quantified expression involving one or more variables. Overall, 'leads to' signifies a directional flow from the subject to the object, implying that the former is a precursor or a necessary condition for the latter.",
      "disambiguation_index": 0
    },
    "Predicate-are_swapped": {
      "label": "are swapped",
      "description": "The predicate 'are swapped' indicates a mutual exchange or interchange between the subject and object, signifying that their roles, positions, or values are reversed or traded in relation to each other.",
      "disambiguation_index": 0
    },
    "Predicate-omit": {
      "label": "omit",
      "description": "The predicate 'omit' indicates an action where the subject intentionally excludes or leaves out the object from consideration, representation, or inclusion in a particular context or framework.",
      "disambiguation_index": 0
    },
    "Predicate-has_body": {
      "label": "has body",
      "description": "The predicate 'has body' establishes a relationship between a subject and an object, indicating that the subject possesses or contains a physical or conceptual entity referred to as the 'body'. This body can represent the essential components, structure, or content that make up the subject, thereby providing a deeper understanding of its nature or function.",
      "disambiguation_index": 0
    },
    "Predicate-has_head": {
      "label": "has head",
      "description": "The predicate 'has head' establishes a relationship between a subject and an object by indicating that the subject is the governing or leading element of the object. In this context, the subject is typically a set of rules or a framework, while the object represents a sequence or collection of components that are organized or defined by the subject. This relationship implies that the object is subordinate to or derived from the subject, highlighting the hierarchical structure where the subject provides direction or authority over the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_been_investigated_in": {
      "label": "has been investigated in",
      "description": "The predicate 'has been investigated in' establishes a relationship where the subject, typically a concept, phenomenon, or theory, has undergone examination or analysis within the context of the object, which is often a body of work, such as academic literature, studies, or research. This indicates that the subject has been the focus of inquiry and that findings or discussions related to it can be found in the specified object.",
      "disambiguation_index": 0
    },
    "Predicate-is_instantiated_to_predict": {
      "label": "is instantiated to predict",
      "description": "The predicate 'is instantiated to predict' establishes a relationship where the subject serves as a foundational or operational component that generates or informs the prediction of the object. In this context, the subject typically contains rules, parameters, or conditions that, when applied, lead to the identification or generation of specific instances represented by the object. This indicates a functional dependency where the subject's characteristics or structure directly influence the predictive outcome associated with the object.",
      "disambiguation_index": 0
    },
    "Predicate-similar_to_those_used_for": {
      "label": "similar to those used for",
      "description": "The predicate 'similar to those used for' establishes a comparative relationship between the subject and the object, indicating that the subject shares characteristics, functions, or purposes with the examples or instances represented by the object. It suggests that the subject can be understood or evaluated in the context of the methodologies, principles, or frameworks that are exemplified by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_the_same_as": {
      "label": "is the same as",
      "description": "The predicate 'is the same as' establishes an equivalence relationship between the subject and the object, indicating that they are identical in some relevant aspect or context. This connection implies that both entities can be considered interchangeable or equivalent, sharing the same properties or characteristics that define them.",
      "disambiguation_index": 0
    },
    "Predicate-mined_in": {
      "label": "mined in",
      "description": "The predicate 'mined in' indicates the context or environment in which a particular entity or concept is extracted or derived from. It establishes a connection between the subject, which represents a specific entity or concept, and the object, which denotes the process or method through which the subject is obtained. This relationship highlights the source or origin of the subject's characteristics or data, emphasizing the process involved in its acquisition.",
      "disambiguation_index": 0
    },
    "Predicate-helps": {
      "label": "helps",
      "description": "The predicate 'helps' indicates a supportive or beneficial connection between the subject and the object, where the subject provides assistance, guidance, or facilitation to the object in achieving a goal or fulfilling a need.",
      "disambiguation_index": 0
    },
    "Predicate-is_close": {
      "label": "is close",
      "description": "The predicate 'is close' indicates a strong degree of proximity or affinity between the subject and the object. It suggests that the subject and object share a significant connection, similarity, or relevance, implying that they are not only related but also closely linked in terms of characteristics, context, or function.",
      "disambiguation_index": 0
    },
    "Predicate-has_a_relationship_with": {
      "label": "has a relationship with",
      "description": "The predicate 'has a relationship with' denotes a connection or association between the subject and the object, indicating that they are linked in some meaningful way. This relationship can encompass various forms of interaction, influence, or correlation, suggesting that the subject and object are not independent but rather exist in a context where one may affect or relate to the other. In the context of the provided example, it illustrates how an operational rule (OP rule) is connected to its converse version in an inverse operational perspective (IOP version), highlighting the interdependence of these concepts.",
      "disambiguation_index": 0
    },
    "Predicate-is_shown_in": {
      "label": "is shown in",
      "description": "The predicate 'is shown in' indicates a demonstrative relationship where the subject provides evidence, illustration, or representation of the object. It suggests that the object serves as a specific instance, example, or case that clarifies or exemplifies the concept or relationship expressed by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-shows": {
      "label": "shows",
      "description": "The predicate 'shows' indicates a demonstration or presentation of a connection, characteristic, or property between the subject and the object. It implies that the subject provides evidence or clarity regarding the nature or significance of the object, effectively revealing or illustrating how they are related.",
      "disambiguation_index": 0
    },
    "Predicate-instantiate": {
      "label": "instantiate",
      "description": "The predicate 'instantiate' denotes the action of realizing or embodying a concept, idea, or set of entities in a specific form or instance. In the context of the triple, it connects a collection of entities (e3, e4, e5) to a particular instance or representation (z0), indicating that the entities collectively give rise to or manifest the specified instance.",
      "disambiguation_index": 0
    },
    "Predicate-satisfy": {
      "label": "satisfy",
      "description": "The predicate 'satisfy' denotes a relationship where the subject fulfills or meets the requirements, desires, or expectations of the object. In the context of the given triple, it implies that the three entities (e3, e4, e5) collectively provide a level of contentment or meet the conditions represented by the object P1(x, z0). This connection suggests that the subject's actions or characteristics are aligned with the needs or criteria established by the object.",
      "disambiguation_index": 0
    },
    "Predicate-related_to": {
      "label": "related to",
      "description": "The predicate 'related to' establishes a connection or association between the subject (z0) and the object (z1). This relationship can encompass various forms of linkage, such as similarity, relevance, causation, or contextual association, indicating that the two entities share some form of significance or interdependence in a broader context.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_instantiated_by": {
      "label": "can be instantiated by",
      "description": "The predicate 'can be instantiated by' indicates a relationship where the subject has the potential or capability to be represented or realized through the specific elements or instances listed in the object. In this context, the subject is associated with a set of instances or examples that exemplify or fulfill its characteristics, thereby allowing for its practical application or manifestation.",
      "disambiguation_index": 0
    },
    "Predicate-giving": {
      "label": "giving",
      "description": "The predicate 'giving' denotes a relationship where the subject provides or allocates something to the object. In this context, it implies that the subject is transferring a certain quality, quantity, or characteristic to the object, establishing a connection that signifies the act of provision or distribution.",
      "disambiguation_index": 0
    },
    "Predicate-is_of_the_form": {
      "label": "is of the form",
      "description": "The predicate 'is of the form' establishes a relationship between the subject and the object by indicating that the subject exemplifies or conforms to a specific structure, pattern, or type represented by the object. It suggests that the subject can be categorized or understood in terms of the characteristics defined by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_the_cardinality_annotation_for": {
      "label": "is the cardinality annotation for",
      "description": "The predicate 'is the cardinality annotation for' establishes a relationship between a subject, which represents a specific entity or concept, and an object, which denotes a cardinality value or specification. This relationship indicates that the subject is associated with a particular quantity or count that is defined by the object, thereby providing a formal annotation of how many instances or occurrences of the subject are relevant or permissible in a given context.",
      "disambiguation_index": 0
    },
    "Predicate-holds": {
      "label": "holds",
      "description": "The predicate 'holds' establishes a relationship between the subject and the object, indicating that the subject possesses, maintains, or exhibits a certain state, condition, or property represented by the object. In the context of the triple, it signifies that the entity 'e' is in a state or condition denoted by 'Pt(e', e)', which could represent a specific attribute, quality, or relation pertaining to 'e'.",
      "disambiguation_index": 0
    },
    "Predicate-is_at_least": {
      "label": "is at least",
      "description": "The predicate 'is at least' establishes a comparative relationship between the subject and the object, indicating that the subject possesses a quantity, value, or characteristic that meets or exceeds the minimum threshold represented by the object. In this context, it suggests that the subject has a value that is equal to or greater than the specified amount or type denoted by the object.",
      "disambiguation_index": 0
    },
    "Predicate-such_that": {
      "label": "such that",
      "description": "The predicate 'such that' serves to establish a specific condition or characteristic that relates the subject to the object. In the context of the triple, it indicates that the subject (entity) is defined or qualified by the condition or property represented by the object (Pt(e', e)). This relationship implies that the entity possesses certain attributes or fulfills particular criteria that are encapsulated in the object, thereby providing a meaningful connection between the two.",
      "disambiguation_index": 0
    },
    "Predicate-links_to": {
      "label": "links to",
      "description": "The predicate 'links to' establishes a connection or relationship between the subject and the object, indicating that the subject is associated with, refers to, or points towards the object in some meaningful way. This connection can imply various forms of relationships, such as a reference, a pathway, or a relational mapping, depending on the context in which the subject and object are situated.",
      "disambiguation_index": 0
    },
    "Predicate-may_have": {
      "label": "may have",
      "description": "The predicate 'may have' indicates a possibility or potential relationship between the subject and the object, suggesting that the subject can possess or exhibit the characteristics or qualities described by the object under certain conditions or contexts.",
      "disambiguation_index": 0
    },
    "Predicate-places": {
      "label": "places",
      "description": "The predicate 'places' establishes a relationship between the subject and the object by indicating the context or setting in which the subject is situated or the role it fulfills. In this case, it connects a specified cardinality requirement to the quantitative representation of instances related to the subject within a knowledge base, thereby illustrating how the subject's characteristics or constraints are manifested in terms of its occurrences.",
      "disambiguation_index": 0
    },
    "Predicate-is_the_same_rule_as": {
      "label": "is the same rule as",
      "description": "The predicate 'is the same rule as' establishes an equivalence relationship between the subject and the object, indicating that both refer to or represent identical principles, guidelines, or regulations. It suggests that the two entities share the same foundational criteria or governing standards, thereby allowing them to be considered interchangeable in the context of their application or interpretation.",
      "disambiguation_index": 0
    },
    "Predicate-is_shortened_by_removing": {
      "label": "is shortened by removing",
      "description": "The predicate 'is shortened by removing' indicates a transformation process where the subject undergoes a reduction in length or complexity through the elimination of a specific component, represented by the object. This relationship highlights how the removal of the object leads to a more concise or simplified version of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-_is_less_than_or_equal_to": {
      "label": "<= (is less than or equal to)",
      "description": "The predicate '<= (is less than or equal to)' establishes a comparative relationship between the subject and the object, indicating that the value or quantity represented by the subject is either less than or equal to the value or quantity represented by the object. This relationship is fundamental in various mathematical and logical contexts, where it is used to express constraints, comparisons, and orderings between numerical or abstract entities.",
      "disambiguation_index": 0
    },
    "Predicate-": {
      "label": "<=",
      "description": "The predicate '<=' denotes a relationship of comparison between the subject and the object, indicating that the value or quantity represented by the subject is less than or equal to the value or quantity represented by the object. This relationship establishes a form of ordering or hierarchy, where the subject is constrained by the object in terms of magnitude or extent.",
      "disambiguation_index": 0
    },
    "Predicate-is_not_affected_by": {
      "label": "is not affected by",
      "description": "The predicate 'is not affected by' indicates a relationship where the subject remains unchanged or uninfluenced by the object. It suggests that regardless of the presence or characteristics of the object, the subject retains its properties or state, implying a lack of interaction or impact between the two entities.",
      "disambiguation_index": 0
    },
    "Predicate-can_only_decrease_when": {
      "label": "can only decrease when",
      "description": "The predicate 'can only decrease when' establishes a conditional relationship between the subject and the object, indicating that the subject's value or state is restricted to a decrease under specific circumstances or conditions described by the object. It implies that the subject will not decrease unless the conditions outlined in the object are met, thus linking the two elements through a dependency on the occurrence of the specified situation.",
      "disambiguation_index": 0
    },
    "Predicate-is_useful_for": {
      "label": "is useful for",
      "description": "The predicate 'is useful for' establishes a relationship where the subject provides beneficial support, assistance, or value to the object, indicating that the subject contributes positively to the understanding, implementation, or effectiveness of the object in a particular context.",
      "disambiguation_index": 0
    },
    "Predicate-has_low": {
      "label": "has low",
      "description": "The predicate 'has low' indicates a qualitative relationship where the subject possesses a characteristic or attribute that is considered to be at a minimal or reduced level in comparison to a standard or expectation. This relationship suggests that the subject exhibits a deficiency or a lesser degree of the quality represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-would_have_at_most_as_low": {
      "label": "would have at most as low",
      "description": "The predicate 'would have at most as low' establishes a comparative relationship between the subject and the object, indicating that the subject possesses a value, characteristic, or quality that does not exceed the level or degree represented by the object. This suggests a limitation or boundary on the extent to which the subject can exhibit the specified attribute, ensuring that it remains equal to or lower than that of the object.",
      "disambiguation_index": 0
    },
    "Predicate-outputs": {
      "label": "outputs",
      "description": "The predicate 'outputs' indicates a relationship where the subject produces or generates the object as a result of its function or operation. It signifies that the subject is responsible for delivering or providing the object, which can be seen as the outcome or result of the subject's processes or actions.",
      "disambiguation_index": 0
    },
    "Predicate-is_assigned_by": {
      "label": "is assigned by",
      "description": "The predicate 'is assigned by' indicates a relationship where the subject is the recipient of an assignment or allocation that originates from the object. In this context, the object represents the entity or process that designates or allocates the subject, establishing a directional flow of responsibility or action from the object to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_obtained_by": {
      "label": "is obtained by",
      "description": "The predicate 'is obtained by' indicates a relationship where the subject is the result or outcome of a process or method represented by the object. It signifies that the subject has been derived or produced through the specified action or operation described in the object, establishing a causal or procedural link between them.",
      "disambiguation_index": 0
    },
    "Predicate-is_assigned_to": {
      "label": "is assigned to",
      "description": "The predicate 'is assigned to' establishes a relationship where the subject is designated or allocated to the object, indicating that the subject has a specific role, function, or responsibility associated with the object. This connection implies a form of ownership, responsibility, or categorization, where the subject is linked to the object in a way that signifies that the subject is intended to operate within the context or framework defined by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_function_of": {
      "label": "is a function of",
      "description": "The predicate 'is a function of' establishes a relationship where the subject is dependent on or determined by the object. It indicates that the value or state of the subject can be expressed or calculated based on the parameters or characteristics represented by the object. This relationship often implies a mathematical or conceptual dependency, where changes in the object will directly influence the subject.",
      "disambiguation_index": 0
    },
    "Predicate-added_to": {
      "label": "added to",
      "description": "The predicate 'added to' indicates a relationship where the subject is being incorporated or included into the object, suggesting an enhancement or expansion of the object's scope or functionality through the addition of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_updated_by": {
      "label": "is updated by",
      "description": "The predicate 'is updated by' indicates a relationship where the subject, typically representing a state, entity, or system, undergoes a modification or enhancement as a result of the action or process described by the object. In this context, the object represents a specific operation or method that alters the subject, thereby reflecting a change in its properties, data, or functionality.",
      "disambiguation_index": 0
    },
    "Predicate-returned_with": {
      "label": "returned with",
      "description": "The predicate 'returned with' indicates that the subject has come back or arrived again while bringing along the object. It implies a connection where the subject, upon returning, is accompanied by or has brought the object, suggesting a relationship of possession or accompaniment during the act of returning.",
      "disambiguation_index": 0
    },
    "Predicate-takes_input_from": {
      "label": "takes input from",
      "description": "The predicate 'takes input from' establishes a relationship where the subject, typically an entity such as an algorithm or process, receives or utilizes data, information, or resources from the object, which is often a source or repository of knowledge, such as a knowledge graph or database. This indicates a dependency or interaction where the subject relies on the object to perform its function or achieve its objectives.",
      "disambiguation_index": 0
    },
    "Predicate-has_parameters": {
      "label": "has parameters",
      "description": "The predicate 'has parameters' establishes a relationship between a subject, typically an algorithm or model, and an object, which represents specific configurable attributes or settings that influence the behavior or performance of the subject. This relationship indicates that the subject can be adjusted or fine-tuned through the specified parameters, allowing for customization and optimization in various contexts.",
      "disambiguation_index": 0
    },
    "Predicate-adapts": {
      "label": "adapts",
      "description": "The predicate 'adapts' signifies a process in which the subject modifies or adjusts its methods, strategies, or approaches in response to new information, conditions, or requirements represented by the object. This relationship indicates that the subject is capable of change and improvement, aligning its actions or functionalities with the characteristics or demands of the object.",
      "disambiguation_index": 0
    },
    "Predicate-called": {
      "label": "called",
      "description": "The predicate 'called' serves to establish a naming or identification relationship between the subject and the object. It indicates that the subject is referred to or known by the name or term specified in the object. This connection often implies that the object represents a label, title, or designation that is associated with the subject.",
      "disambiguation_index": 0
    },
    "Predicate-shown_in": {
      "label": "shown in",
      "description": "The predicate 'shown in' indicates that the subject is represented, illustrated, or detailed within the context of the object. It establishes a relationship where the subject is either exemplified or explained through the object, suggesting that the object contains information or a depiction relevant to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-to_prune": {
      "label": "to prune",
      "description": "The predicate 'to prune' indicates an action performed by the subject that involves selectively removing or reducing certain elements from the object. In this context, it suggests that the subject is actively refining or optimizing the object by eliminating unnecessary or less relevant components, thereby enhancing clarity, efficiency, or focus.",
      "disambiguation_index": 0
    },
    "Predicate-are_less_relevant_to": {
      "label": "are less relevant to",
      "description": "The predicate 'are less relevant to' indicates a comparative relationship between the subject and the object, suggesting that the subject holds a diminished significance or importance in relation to the object. It implies that the subject's connection or applicability to the object is weaker or less impactful than other potential subjects or predicates. This phrase is often used to express a hierarchy of relevance, where the subject is positioned as having a lower degree of pertinence or association with the object.",
      "disambiguation_index": 0
    },
    "Predicate-obtains": {
      "label": "obtains",
      "description": "The predicate 'obtains' indicates that the subject is acquiring or receiving something, which is represented by the object. It implies a transfer of possession or access, where the subject gains the object as a result of an action or process.",
      "disambiguation_index": 0
    },
    "Predicate-prunes": {
      "label": "prunes",
      "description": "The predicate 'prunes' indicates an action where the subject selectively removes or reduces certain elements from the object, which can be a collection of items, data, or entities. This action typically aims to enhance clarity, efficiency, or relevance by eliminating unnecessary or less important components.",
      "disambiguation_index": 0
    },
    "Predicate-is_fed_to": {
      "label": "is fed to",
      "description": "The predicate 'is fed to' indicates a directional relationship where the subject is provided as input or nourishment to the object, which typically represents a system, process, or entity that utilizes or processes the subject for a specific purpose or outcome.",
      "disambiguation_index": 0
    },
    "Predicate-in": {
      "label": "in",
      "description": "The predicate 'in' indicates a relationship of inclusion or containment, where the subject is situated within or is a part of the object. It suggests that the subject exists within the boundaries or context defined by the object, highlighting a spatial, conceptual, or categorical connection.",
      "disambiguation_index": 0
    },
    "Predicate-are_evaluated_in": {
      "label": "are evaluated in",
      "description": "The predicate 'are evaluated in' indicates a process in which the subject undergoes assessment or analysis within the context or framework represented by the object. It implies that the subject is being examined or judged based on certain criteria or standards that are defined by the object, suggesting a relationship where the object serves as the setting or basis for the evaluation.",
      "disambiguation_index": 0
    },
    "Predicate-are_annotated_in": {
      "label": "are annotated in",
      "description": "The predicate 'are annotated in' indicates that the subject is marked or described within the context of the object, suggesting a relationship where the subject is provided with additional information, clarification, or categorization that is contained or represented in the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_filtered_in": {
      "label": "are filtered in",
      "description": "The predicate 'are filtered in' indicates a process in which the subject undergoes a selection or refinement process to be included or integrated into the object. This suggests that the subject is being evaluated or processed to determine its relevance or suitability for the object, which represents a system, context, or framework where the subject is ultimately incorporated.",
      "disambiguation_index": 0
    },
    "Predicate-aggregating_mined": {
      "label": "aggregating mined",
      "description": "The predicate 'aggregating mined' indicates a process in which the subject is involved in the collection and synthesis of extracted data or resources, resulting in the formation of a cohesive structure or entity represented by the object. This process implies that the subject systematically gathers and organizes the mined elements to create a unified whole, which in this case is exemplified by 'a tree'.",
      "disambiguation_index": 0
    },
    "Predicate-is_discovered_for": {
      "label": "is discovered for",
      "description": "The predicate 'is discovered for' indicates a relationship where the subject is identified or found to have a particular relevance, purpose, or significance in relation to the object. It suggests that the subject serves as a source of insight or information that is pertinent to the object, often implying a process of exploration or revelation that leads to the recognition of this connection.",
      "disambiguation_index": 0
    },
    "Predicate-are_aggregated_in": {
      "label": "are aggregated in",
      "description": "The predicate 'are aggregated in' indicates a relationship where the subject is combined or collected within the context or framework of the object. It suggests that multiple elements represented by the subject are brought together to form a cohesive unit or are organized under the category defined by the object.",
      "disambiguation_index": 0
    },
    "Predicate-cannot_handle": {
      "label": "cannot handle",
      "description": "The predicate 'cannot handle' indicates a limitation or inability of the subject to manage, cope with, or effectively deal with the object. In this context, it suggests that the subject lacks the necessary capacity, resources, or skills to address or respond to the characteristics or demands represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-admits": {
      "label": "admits",
      "description": "The predicate 'admits' establishes a relationship where the subject acknowledges or allows the existence, validity, or acceptance of the object. In this context, it indicates that the subject recognizes the object as a permissible or relevant entity within a certain framework or system.",
      "disambiguation_index": 0
    },
    "Predicate-can_discover_and_evaluate": {
      "label": "can discover and evaluate",
      "description": "The predicate 'can discover and evaluate' indicates the ability of the subject to identify, analyze, and assess the characteristics or effectiveness of the object. In this context, it suggests that the subject possesses the capability to not only find or recognize the object but also to critically examine its properties, implications, or performance, leading to informed conclusions or decisions regarding the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_limited_to_learning": {
      "label": "is limited to learning",
      "description": "The predicate 'is limited to learning' establishes a relationship between the subject and the object by indicating that the subject's activities or capabilities are confined to the process of learning, with a specified minimum requirement of engagement in this process. This implies that the subject must participate in learning to at least the minimum cardinality indicated, suggesting a necessary condition for the subject's existence or function.",
      "disambiguation_index": 0
    },
    "Predicate-differs_from": {
      "label": "differs from",
      "description": "The predicate 'differs from' establishes a comparative relationship between the subject and the object, indicating that the two entities possess distinct characteristics, features, or functionalities. It highlights the divergence in aspects such as methodology, approach, or performance, suggesting that while both entities may serve similar purposes or functions, they are not identical and exhibit notable differences.",
      "disambiguation_index": 0
    },
    "Predicate-is_novel_in": {
      "label": "is novel in",
      "description": "The predicate 'is novel in' indicates that the subject possesses unique or innovative characteristics or features within the context of the object. It suggests that the subject introduces new ideas, methods, or technologies that distinguish it from existing entities or concepts represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-ready_for_translation_to": {
      "label": "ready for translation to",
      "description": "The predicate 'ready for translation to' indicates that the subject is prepared or suitable for being converted or transformed into the format or representation specified by the object. This implies that the subject possesses the necessary characteristics or structure that allows it to be effectively translated into the form denoted by the object.",
      "disambiguation_index": 0
    },
    "Predicate-computes": {
      "label": "computes",
      "description": "The predicate 'computes' indicates a relationship where the subject performs a calculation, analysis, or processing operation that results in the generation or determination of the object. In this context, it signifies that the subject is actively engaged in deriving or producing the specified output, which is a fragment of knowledge or data, often from a larger dataset or knowledge graph.",
      "disambiguation_index": 0
    },
    "Predicate-is_essential_since": {
      "label": "is essential since",
      "description": "The predicate 'is essential since' establishes a crucial relationship between the subject and the object, indicating that the subject is necessary or fundamental for the realization, effectiveness, or functioning of the object. It implies that the object cannot be fully understood, achieved, or utilized without the presence or consideration of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-contain": {
      "label": "contain",
      "description": "The predicate 'contain' indicates that the subject has within it or includes the object, suggesting a relationship where the subject encompasses or holds the object as part of its entirety or within its boundaries.",
      "disambiguation_index": 0
    },
    "Predicate-search_for": {
      "label": "search for",
      "description": "The predicate 'search for' indicates an action where the subject is actively seeking or attempting to locate the object. It implies a process of exploration or inquiry directed towards finding specific information, items, or entities represented by the object. This action often involves investigation, analysis, or examination to uncover or identify the presence of the object in question.",
      "disambiguation_index": 0
    },
    "Predicate-are_pruned_in": {
      "label": "are pruned in",
      "description": "The predicate 'are pruned in' indicates a process of elimination or reduction, where certain elements (the subject) are removed or disregarded within a specific context or framework (the object). This suggests a selective filtering mechanism aimed at enhancing relevance or efficiency by focusing only on the most pertinent components.",
      "disambiguation_index": 0
    },
    "Predicate-remain_in": {
      "label": "remain in",
      "description": "The predicate 'remain in' indicates a state of continued existence or presence of the subject within the confines or boundaries of the object. It suggests that the subject does not leave or change its position relative to the object, implying a sense of stability or persistence in that particular context.",
      "disambiguation_index": 0
    },
    "Predicate-reduces": {
      "label": "reduces",
      "description": "The predicate 'reduces' indicates a relationship where the subject actively diminishes, lessens, or decreases the extent, quantity, or magnitude of the object. It implies a transformation where the object is made smaller or simpler as a result of the action performed by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-will_be_of_size": {
      "label": "will be of size",
      "description": "The predicate 'will be of size' establishes a quantitative relationship between the subject and the object, indicating that the subject, which is typically a collection or set, is expected to contain a specific number of elements as defined by the object. This relationship conveys an expectation or prediction about the cardinality of the subject, providing a clear metric for understanding its scale or extent.",
      "disambiguation_index": 0
    },
    "Predicate-will_be_in_the_worst_case": {
      "label": "will be in the worst case",
      "description": "The predicate 'will be in the worst case' indicates a relationship where the subject is assessed or evaluated under the most unfavorable or extreme conditions, leading to the conclusion or implication represented by the object, which is the worst case scenario. This suggests that the subject's performance, outcome, or state is being considered in terms of its potential limitations or negative outcomes.",
      "disambiguation_index": 0
    },
    "Predicate-associated_with": {
      "label": "associated with",
      "description": "The predicate 'associated with' indicates a relationship or connection between the subject and the object, suggesting that they share a relevant link, characteristic, or context. This connection can imply various forms of association, such as causal, functional, or contextual relationships, and it highlights the relevance of the object in relation to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_far_smaller_than": {
      "label": "is far smaller than",
      "description": "The predicate 'is far smaller than' establishes a comparative relationship between the subject and the object, indicating that the subject possesses significantly lesser size, quantity, or extent in relation to the object. This implies a notable disparity in scale, where the subject is quantitatively or qualitatively diminished when compared to the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_subgraph_of": {
      "label": "is a subgraph of",
      "description": "The predicate 'is a subgraph of' establishes a relationship between two graphs, where the subject graph is a subset of the object graph. This means that the subject graph contains some of the vertices and edges of the object graph, preserving the connectivity and structure of the original graph. In essence, it indicates that the subject graph can be derived from the object graph by selecting a subset of its components.",
      "disambiguation_index": 0
    },
    "Predicate-exists_in": {
      "label": "exists in",
      "description": "The predicate 'exists in' establishes a relationship between the subject and the object, indicating that the subject is present or located within the context or boundaries defined by the object. It implies a spatial, conceptual, or categorical inclusion, suggesting that the subject is a part of or is contained within the entity represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_the_union_of": {
      "label": "is the union of",
      "description": "The predicate 'is the union of' indicates that the subject represents a set that is formed by combining all elements from the object set and potentially other sets. It signifies that the subject encompasses every element that is present in the object, thereby creating a collective whole that includes all distinct elements from the specified sets.",
      "disambiguation_index": 0
    },
    "Predicate-samples": {
      "label": "samples",
      "description": "The predicate 'samples' indicates that the subject, which is typically an algorithm or method, is extracting or selecting a subset of data or instances from the object, which is often a dataset or knowledge graph. This relationship highlights the process of obtaining representative or relevant examples from a larger collection for analysis, testing, or further processing.",
      "disambiguation_index": 0
    },
    "Predicate-computed_as": {
      "label": "computed as",
      "description": "The predicate 'computed as' indicates a relationship where the subject is defined or quantified in terms of the object. It suggests that the subject is derived from, or can be represented by, the object through a specific calculation or transformation process. This relationship emphasizes the process of obtaining the object as a result of applying a certain method or formula to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-obtained_from": {
      "label": "obtained from",
      "description": "The predicate 'obtained from' indicates a relationship where the subject is derived or produced as a result of the object. It signifies that the subject is a result of a process, method, or source represented by the object, highlighting a dependency or origin connection between the two.",
      "disambiguation_index": 0
    },
    "Predicate-can_provide": {
      "label": "can provide",
      "description": "The predicate 'can provide' indicates the ability or capacity of the subject to supply, furnish, or make available the object. It establishes a relationship where the subject is capable of delivering a certain resource, service, or information represented by the object, suggesting a potential or actual provision that enhances understanding or functionality.",
      "disambiguation_index": 0
    },
    "Predicate-provides": {
      "label": "provides",
      "description": "The predicate 'provides' indicates a relationship in which the subject offers, supplies, or makes available the object, which typically represents a resource, service, or information. This connection implies that the subject is the source or provider of the object, facilitating access or utilization of the object by others.",
      "disambiguation_index": 0
    },
    "Predicate-embeds": {
      "label": "embeds",
      "description": "The predicate 'embeds' indicates a relationship where the subject incorporates or integrates the object into a structured representation or framework. In this context, it suggests that the subject provides a mechanism or method for representing the object, which can be an entity or a set of entities, in a way that captures its essential features or characteristics within a specific model or system.",
      "disambiguation_index": 0
    },
    "Predicate-to_a_vector": {
      "label": "to a vector",
      "description": "The predicate 'to a vector' indicates a transformation or mapping process where the subject, typically an entity or a set of entities, is converted into a vector representation. This transformation captures the essential features or characteristics of the subject in a numerical format, allowing for mathematical operations and analyses to be performed on the resulting vector. The object, which is the entity itself, signifies that the vector representation retains the identity of the original subject while enabling its use in various computational contexts.",
      "disambiguation_index": 0
    },
    "Predicate-to_a_matrix": {
      "label": "to a matrix",
      "description": "The predicate 'to a matrix' indicates a transformation or mapping process where the subject is being converted, represented, or organized into a matrix format, which is a structured arrangement of elements in rows and columns. This predicate connects the subject and object by implying that the subject's properties or data are being systematically arranged or interpreted in a matrix form, facilitating analysis, computation, or visualization.",
      "disambiguation_index": 0
    },
    "Predicate-is_embedded_to": {
      "label": "is embedded to",
      "description": "The predicate 'is embedded to' establishes a relationship between a subject, typically an entity, and an object, which is a vector representation. This indicates that the subject has been transformed or represented in a mathematical or computational form as the object, allowing for the entity to be utilized in various applications such as machine learning, data analysis, or information retrieval. The embedding process captures the essential features or characteristics of the entity in a structured format, facilitating further processing or analysis.",
      "disambiguation_index": 0
    },
    "Predicate-is_represented_by": {
      "label": "is represented by",
      "description": "The predicate 'is represented by' establishes a relationship where the subject is depicted, illustrated, or symbolized by the object. It indicates that the object serves as a representation or expression of the subject, conveying its meaning, characteristics, or essence in a particular context.",
      "disambiguation_index": 0
    },
    "Predicate-is_computed_for": {
      "label": "is computed for",
      "description": "The predicate 'is computed for' establishes a relationship where the subject represents a computational entity or function that generates a result or value specifically related to the object, which typically denotes a particular fact, condition, or set of parameters. This indicates that the subject is utilized to derive or calculate outcomes pertinent to the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_computed_by": {
      "label": "is computed by",
      "description": "The predicate 'is computed by' establishes a relationship where the subject, typically representing a specific fact or entity, is determined or evaluated through the application of the object, which is usually a method, algorithm, or function. This indicates that the object provides the necessary calculations or assessments that lead to the understanding or quantification of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-indicates": {
      "label": "indicates",
      "description": "The predicate 'indicates' serves to establish a relationship where the subject provides evidence, signals, or suggests the existence or truth of the object. It implies that the subject conveys information or a conclusion that is relevant to understanding or interpreting the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_relation": {
      "label": "has relation",
      "description": "The predicate 'has relation' indicates a connection or association between the subject and the object, where the subject (e1) is linked to a specific type of relationship or connection represented by the object (relation P0). This predicate serves to express that the subject possesses a certain relational attribute or characteristic that defines how it interacts or is related to the object.",
      "disambiguation_index": 0
    },
    "Predicate-compute": {
      "label": "compute",
      "description": "The predicate 'compute' signifies a process in which the subject performs a calculation or evaluation that results in the generation or transformation of the object. In the context of the provided triple, it indicates that the subject, which is an instance of 'Embeddings', is engaged in the operation of deriving or producing the embeddings for both the subject and object arguments, thereby establishing a relationship between the input data and the resulting output.",
      "disambiguation_index": 0
    },
    "Predicate-occur_as_the_subject_of": {
      "label": "occur as the subject of",
      "description": "The predicate 'occur as the subject of' establishes a relationship where the subject (entity) is the primary focus or agent in the context of the action or state described by the object (predicate P_k). This indicates that the entity is the one performing, experiencing, or being associated with the action or condition represented by the predicate, thereby linking the entity to the specific context or scenario defined by the predicate.",
      "disambiguation_index": 0
    },
    "Predicate-occur_as_the_object_of": {
      "label": "occur as the object of",
      "description": "The predicate 'occur as the object of' establishes a relationship where the subject is identified as the recipient or target of an action or state described by the object, which is typically a predicate. This indicates that the subject is involved in a context where it is affected by or related to the action or condition denoted by the object, thereby providing a framework for understanding the role of the subject within a specific relational or functional context.",
      "disambiguation_index": 0
    },
    "Predicate-occur_as": {
      "label": "occur as",
      "description": "The predicate 'occur as' establishes a relationship between a subject and an object by indicating that the subject is manifested or represented in a particular form or role as specified by the object. It suggests that the subject can be identified or categorized in a certain way, highlighting the nature or identity of the subject in relation to the object.",
      "disambiguation_index": 0
    },
    "Predicate-based_on": {
      "label": "based on",
      "description": "The predicate 'based on' indicates that the subject is derived from, influenced by, or relies upon the object as a foundational element or source of information. It establishes a relationship where the subject's characteristics, decisions, or outcomes are contingent upon the principles, data, or concepts represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-have_a_close_relationship_with": {
      "label": "have a close relationship with",
      "description": "The predicate 'have a close relationship with' indicates a strong and significant connection between the subject and the object. This relationship often implies mutual understanding, support, and interaction, suggesting that the two entities influence each other in meaningful ways. It highlights the depth of their association, which can encompass emotional, social, or functional dimensions.",
      "disambiguation_index": 0
    },
    "Predicate-acts_to_connect": {
      "label": "acts to connect",
      "description": "The predicate 'acts to connect' signifies an action or function performed by the subject that establishes a relationship or linkage with the object. In this context, it indicates that the subject is facilitating a connection to a set of entities that meet specific criteria defined by the subject argument of a related body predicate. This connection can imply various forms of interaction, association, or relevance between the subject and the object, thereby enabling a meaningful relationship within the framework of the given context.",
      "disambiguation_index": 0
    },
    "Predicate-connects_to": {
      "label": "connects to",
      "description": "The predicate 'connects to' establishes a relationship between two sets of entities, where the first set (subject) is linked to the second set (object) through a defined interaction or association. This connection implies that the entities in the subject set have some form of relevance, influence, or direct relationship with the entities in the object set, facilitating a pathway for communication, interaction, or transfer of information between them.",
      "disambiguation_index": 0
    },
    "Predicate-exists_between": {
      "label": "exists between",
      "description": "The predicate 'exists between' indicates a relational connection or association that is established between the subject and the object. It signifies that the subject and object are linked in a way that is defined or characterized by the context of the relationship, often implying a condition, rule, or logical framework that governs their interaction or relevance to one another.",
      "disambiguation_index": 0
    },
    "Predicate-has_similarity_with": {
      "label": "has similarity with",
      "description": "The predicate 'has similarity with' establishes a relationship between two entities, indicating that they share common characteristics, features, or qualities. This connection suggests a degree of likeness or resemblance between the subject and the object, allowing for comparisons or associations based on their similarities.",
      "disambiguation_index": 0
    },
    "Predicate-is_computed_from": {
      "label": "is computed from",
      "description": "The predicate 'is computed from' indicates a relationship where the subject represents a result or outcome that is derived through a calculation or processing involving the object. In this context, the object serves as the foundational data, parameters, or inputs that are utilized in the computation to produce the subject. This relationship emphasizes the dependency of the subject on the object for its value or existence.",
      "disambiguation_index": 0
    },
    "Predicate-is_of": {
      "label": "is of",
      "description": "The predicate 'is of' establishes a relationship of belonging or association between the subject and the object, indicating that the subject is a specific instance, type, or category that falls under the broader classification or concept represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_computed_based_on": {
      "label": "is computed based on",
      "description": "The predicate 'is computed based on' indicates a relationship where the subject is derived or calculated through the utilization of the object, which serves as the foundational elements or factors influencing the computation. This implies that the object provides essential information or parameters that are necessary for determining the value or outcome represented by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-checked_for": {
      "label": "checked for",
      "description": "The predicate 'checked for' indicates an action where the subject conducts an examination or verification process to determine the presence, validity, or relationship of the specified object, which in this case is a pair of entities. This implies that the subject is actively seeking to confirm or identify specific characteristics or connections between the entities involved.",
      "disambiguation_index": 0
    },
    "Predicate-used_for": {
      "label": "used for",
      "description": "The predicate 'used for' indicates a functional relationship where the subject serves a specific purpose or application related to the object. It implies that the subject is employed or utilized in a manner that directly pertains to achieving, facilitating, or addressing the needs associated with the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_used_in_(1)": {
      "label": "are used in",
      "description": "The predicate 'are used in' indicates a functional relationship where the subject is employed or applied within the context of the object. It suggests that the subject plays a role or serves a purpose in the processes, operations, or mechanisms represented by the object.",
      "disambiguation_index": 1
    },
    "Predicate-is_checked_using": {
      "label": "is checked using",
      "description": "The predicate 'is checked using' establishes a relationship where the subject, typically a pair of entities, undergoes an evaluation or verification process facilitated by the object, which is a scoring function. This indicates that the scoring function serves as a method or tool employed to assess the characteristics, compatibility, or relationship between the entities in the subject.",
      "disambiguation_index": 0
    },
    "Predicate-will_hold_for": {
      "label": "will hold for",
      "description": "The predicate 'will hold for' establishes a relationship between the subject and the object, indicating that the truth or applicability of the subject is guaranteed or valid under the conditions or framework defined by the object. It suggests a consistent or reliable connection where the subject's properties or characteristics are affirmed in relation to the object, regardless of specific instances or entities.",
      "disambiguation_index": 0
    },
    "Predicate-are_defined_to_help": {
      "label": "are defined to help",
      "description": "The predicate 'are defined to help' indicates that the subject is established or formulated with the intention of providing assistance, support, or facilitation towards the object. It suggests a purposeful relationship where the subject serves a specific function or role that aims to enhance, clarify, or improve the understanding or application of the object.",
      "disambiguation_index": 0
    },
    "Predicate-producing": {
      "label": "producing",
      "description": "The predicate 'producing' indicates a relationship where the subject generates, creates, or brings forth the object. In this context, it signifies that the subject is responsible for the formulation or development of the object, resulting in the object being a direct outcome or product of the subject's actions or processes.",
      "disambiguation_index": 0
    },
    "Predicate-will_be_done_in": {
      "label": "will be done in",
      "description": "The predicate 'will be done in' indicates a future action or process that is expected to occur within a specified context or timeframe, connecting the subject, which represents the entity or action being discussed, to the object, which denotes the specific context, phase, or timeframe in which that action will take place.",
      "disambiguation_index": 0
    },
    "Predicate-novel_for": {
      "label": "novel for",
      "description": "The predicate 'novel for' indicates that the subject introduces or presents a new or innovative approach, concept, or method that is specifically applicable to the object. It suggests a relationship where the subject contributes a unique perspective or solution that enhances understanding or application of the object in question.",
      "disambiguation_index": 0
    },
    "Predicate-of": {
      "label": "of",
      "description": "The predicate 'of' indicates a relationship of belonging or association between the subject and the object, suggesting that the object is a characteristic, component, or aspect that pertains to or is derived from the subject.",
      "disambiguation_index": 0
    },
    "Predicate-evaluates": {
      "label": "evaluates",
      "description": "The predicate 'evaluates' signifies an action or process in which the subject assesses, analyzes, or judges the object, which in this case refers to a set of candidate rules. This relationship implies that the subject is engaged in a critical examination of the object to determine its effectiveness, validity, or suitability for a particular purpose.",
      "disambiguation_index": 0
    },
    "Predicate-selects": {
      "label": "selects",
      "description": "The predicate 'selects' indicates an action or process in which the subject identifies, chooses, or picks out specific items, options, or elements from a broader set or category represented by the object. This action implies a decision-making process where the subject exercises judgment or criteria to determine which particular items are to be included or highlighted from the available options.",
      "disambiguation_index": 0
    },
    "Predicate-with": {
      "label": "with",
      "description": "The predicate 'with' indicates a relationship of association or accompaniment between the subject and the object. It suggests that the subject is connected to or involves the object in some manner, often implying that the object is a component, tool, or condition that enhances or modifies the subject's action or state.",
      "disambiguation_index": 0
    },
    "Predicate-greater_than_or_equal_to": {
      "label": "greater than or equal to",
      "description": "The predicate 'greater than or equal to' establishes a comparative relationship between the subject and the object, indicating that the value represented by the subject is either greater than or equal to the value represented by the object. This predicate is used to express a non-strict inequality, allowing for the possibility that the two values may be equal, while also encompassing cases where the subject's value exceeds that of the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_selected_based_on": {
      "label": "are selected based on",
      "description": "The predicate 'are selected based on' indicates a relationship where the subject is chosen or determined by certain criteria or factors represented by the object. It implies a decision-making process where the selection of the subject is influenced or guided by the characteristics, conditions, or requirements specified in the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_downselected_based_on": {
      "label": "are downselected based on",
      "description": "The predicate 'are downselected based on' indicates a process in which the subject is evaluated and filtered according to specific criteria or standards represented by the object. This implies that the subject undergoes a selection process where only those elements that meet the defined criteria are retained, while others are excluded.",
      "disambiguation_index": 0
    },
    "Predicate-may_include": {
      "label": "may include",
      "description": "The predicate 'may include' indicates that the subject has the potential to encompass or consist of the elements specified in the object. It suggests a possibility rather than certainty, implying that while the subject can contain the object, it is not guaranteed to do so in every instance. This predicate is often used to express that the object represents a subset or category of items that could be part of the broader subject.",
      "disambiguation_index": 0
    },
    "Predicate-compute_measures_over": {
      "label": "compute measures over",
      "description": "The predicate 'compute measures over' indicates an action where the subject performs calculations or evaluations on the object, which is typically a dataset or a collection of information. This action involves analyzing the object to derive quantitative or qualitative metrics, insights, or statistics that provide a deeper understanding of the object's characteristics or properties.",
      "disambiguation_index": 0
    },
    "Predicate-computed_over": {
      "label": "computed over",
      "description": "The predicate 'computed over' indicates a relationship where the subject is derived or calculated based on the data or elements represented by the object. It implies that the subject's values, metrics, or results are generated through analysis, processing, or evaluation of the information contained within the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_defined_by": {
      "label": "is defined by",
      "description": "The predicate 'is defined by' establishes a relationship where the subject is characterized or specified through the object, indicating that the object provides the criteria, rules, or functions that determine the nature or properties of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-illustrates_the_computation_of": {
      "label": "illustrates the computation of",
      "description": "The predicate 'illustrates the computation of' serves to establish a relationship where the subject provides a demonstration or representation of a specific computational process or method, as indicated by the object. This connection implies that the subject offers insights, examples, or visualizations that clarify how the computation is performed, thereby enhancing understanding of the underlying principles or operations involved.",
      "disambiguation_index": 0
    },
    "Predicate-is_defined_as_(1)": {
      "label": "is defined as",
      "description": "The predicate 'is defined as' establishes an equivalence or identity relationship between the subject and the object, indicating that the subject can be understood or characterized by the properties, elements, or conditions specified in the object. In this context, it signifies that the subject is synonymous with the set of elements or relationships described in the object, thereby providing a formal or conceptual definition.",
      "disambiguation_index": 1
    },
    "Predicate-are_for": {
      "label": "are for",
      "description": "The predicate 'are for' indicates a relationship of purpose or association between the subject and the object, suggesting that the subject serves a specific function or is intended to be used in relation to the object. It implies that the subject is relevant or applicable to the object in a meaningful way.",
      "disambiguation_index": 0
    },
    "Predicate-relates_to": {
      "label": "relates to",
      "description": "The predicate 'relates to' establishes a connection or association between the subject and the object, indicating that there is a relevant link, correlation, or relationship between them. This relationship can encompass various forms of connections, such as thematic, contextual, or functional ties, suggesting that the subject and object share some commonality or relevance in a broader context.",
      "disambiguation_index": 0
    },
    "Predicate-join": {
      "label": "join",
      "description": "The predicate 'join' indicates a connection or association between the subject and the object, suggesting that the subject is becoming part of, or is linking with, the object in a meaningful way. In the context of the example, it implies that the entity is integrating or aligning itself with the head of the rule, thereby establishing a relationship that enhances or modifies the nature of both the subject and the object.",
      "disambiguation_index": 0
    },
    "Predicate-sum_to_obtain": {
      "label": "sum to obtain",
      "description": "The predicate 'sum to obtain' indicates a mathematical operation where the subject, typically a collection of elements or quantities, is combined through addition to produce a resultant entity, which is represented as the object. This operation signifies the aggregation of values to derive a new value or vector that encapsulates the cumulative effect of the individual components.",
      "disambiguation_index": 0
    },
    "Predicate-is_summed_to_obtain": {
      "label": "is summed to obtain",
      "description": "The predicate 'is summed to obtain' indicates a mathematical or computational operation where the subject is processed through a summation process to produce the object. This implies that the subject consists of multiple components or values that, when added together, yield a resultant entity represented by the object. The relationship emphasizes the transformation of the subject into a new form through the act of summation.",
      "disambiguation_index": 0
    },
    "Predicate-is_the_count_of": {
      "label": "is the count of",
      "description": "The predicate 'is the count of' establishes a quantitative relationship between the subject and the object, indicating that the subject represents a numerical value that quantifies the instances or occurrences of the object within a defined context. In this relationship, the subject serves as a measure or total, while the object denotes the specific category or type of entities being counted.",
      "disambiguation_index": 0
    },
    "Predicate-equals": {
      "label": "equals",
      "description": "The predicate 'equals' establishes a relationship of equivalence between the subject and the object, indicating that they represent the same value or state. In the context of the triple, it asserts that the subject, which is a vector denoted as V^2(Pt), is identical to the object, which is expressed as V^2(Pt) = [0 1 2]^T. This means that both sides of the equation convey the same mathematical entity or concept, affirming their equality.",
      "disambiguation_index": 0
    },
    "Predicate-satisfying": {
      "label": "satisfying",
      "description": "The predicate 'satisfying' indicates a relationship where the subject fulfills or meets the requirements, expectations, or desires associated with the object. In this context, it suggests that the subject provides a sense of contentment or completeness in relation to the object.",
      "disambiguation_index": 0
    },
    "Predicate-taking": {
      "label": "taking",
      "description": "The predicate 'taking' indicates a relationship where the subject is actively selecting or considering a subset of items or elements that meet specific criteria or conditions defined by the object. It implies a process of extraction or identification based on the attributes or values specified in the object, thereby establishing a connection between the subject and the relevant elements.",
      "disambiguation_index": 0
    },
    "Predicate-results_in": {
      "label": "results in",
      "description": "The predicate 'results in' indicates a causal or consequential relationship between the subject and the object, where the subject's state, action, or condition leads to the occurrence or existence of the object. In this context, the subject is a factor or entity that influences or determines the outcome represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_versions": {
      "label": "has versions",
      "description": "The predicate 'has versions' indicates that the subject possesses multiple distinct forms, variations, or iterations that are related to it. This relationship highlights the existence of alternative representations or models of the subject, which may differ in features, specifications, or characteristics, thereby providing a broader understanding of the subject's diversity.",
      "disambiguation_index": 0
    },
    "Predicate-has_values": {
      "label": "has values",
      "description": "The predicate 'has values' establishes a relationship between a subject and a set of attributes or characteristics that the subject possesses. It indicates that the subject is associated with specific values, which can represent various qualities, features, or numerical data relevant to the subject. This connection highlights the nature of the subject in terms of its defining properties or measurable aspects.",
      "disambiguation_index": 0
    },
    "Predicate-is_equal_to": {
      "label": "is equal to",
      "description": "The predicate 'is equal to' establishes a relationship of equivalence between the subject and the object, indicating that they represent the same value, concept, or entity within a given context. In this case, the subject is being compared to a set of elements represented by the object, suggesting that the subject shares identical properties or characteristics with the elements in the object set.",
      "disambiguation_index": 0
    },
    "Predicate-calculates_for": {
      "label": "calculates for",
      "description": "The predicate 'calculates for' indicates a relationship where the subject performs a calculation or computation that is relevant or beneficial to the object. It suggests that the subject is engaged in a process of deriving numerical or analytical results that serve the needs or requirements of the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_calculated_as": {
      "label": "is calculated as",
      "description": "The predicate 'is calculated as' establishes a relationship where the subject is associated with a specific value or result that is derived through a calculation or formula. It indicates that the object represents the outcome or numerical representation that results from applying a certain method or process to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-has_the_same_values_as": {
      "label": "has the same values as",
      "description": "The predicate 'has the same values as' establishes a relationship of equivalence between two subjects, indicating that they share identical attributes or characteristics in the context of the specified values. This predicate implies that despite potentially differing identifiers or contexts, the underlying values represented by the subjects are equal or comparable.",
      "disambiguation_index": 0
    },
    "Predicate-is_calculated_over": {
      "label": "is calculated over",
      "description": "The predicate 'is calculated over' indicates a relationship where the subject is derived from or determined by the data or elements contained within the object. It implies that the subject's value or state is dependent on the comprehensive information or resources represented by the object, suggesting a process of computation or analysis that utilizes the entirety of the object as a basis for its calculation.",
      "disambiguation_index": 0
    },
    "Predicate-is_illustrated_through": {
      "label": "is illustrated through",
      "description": "The predicate 'is illustrated through' establishes a relationship where the subject is clarified or exemplified by the object, indicating that the object serves as a demonstration or representation that helps to explain or visualize the concept or idea presented by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_determined_by": {
      "label": "is determined by",
      "description": "The predicate 'is determined by' establishes a relationship where the subject is influenced or governed by the object, indicating that the characteristics, values, or outcomes of the subject are contingent upon the properties or conditions represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_used_to_find": {
      "label": "is used to find",
      "description": "The predicate 'is used to find' establishes a functional relationship between the subject and the object, indicating that the subject serves as a means or method for discovering, identifying, or determining the object. In this context, the subject typically represents a process, calculation, or tool, while the object refers to the entities, values, or results that are sought after or revealed through the application of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-are_counted_as": {
      "label": "are counted as",
      "description": "The predicate 'are counted as' establishes a relationship where the subject is classified or categorized in a specific way that aligns it with the characteristics or criteria defined by the object. It implies a process of enumeration or recognition, indicating that the subject is being acknowledged or regarded in terms of the qualities or attributes represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-derives": {
      "label": "derives",
      "description": "The predicate 'derives' indicates a relationship where the subject produces, generates, or results in the object as a consequence of its operation or function. It signifies that the subject, often a process, method, or algorithm, leads to the creation or formulation of the object, which can be a concept, structure, or outcome that is logically or functionally connected to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-illustrated_in": {
      "label": "illustrated in",
      "description": "The predicate 'illustrated in' serves to indicate that the subject is represented or depicted within the context of the object. It establishes a relationship where the subject is visually or conceptually explained through the object, often in the form of a figure, diagram, or illustration. This connection implies that the object provides a visual reference or example that enhances the understanding of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_used_in": {
      "label": "is used in",
      "description": "The predicate 'is used in' establishes a functional relationship between the subject and the object, indicating that the subject serves a purpose or is applied within the context or framework represented by the object. It suggests that the subject is relevant or instrumental in the processes, operations, or activities associated with the object.",
      "disambiguation_index": 0
    },
    "Predicate-use": {
      "label": "use",
      "description": "The predicate 'use' indicates an action or process in which the subject actively employs or utilizes the object for a specific purpose or function. It establishes a relationship where the subject is the agent that applies the object, which serves as a tool, method, or resource in achieving a goal or performing a task.",
      "disambiguation_index": 0
    },
    "Predicate-aggregate": {
      "label": "aggregate",
      "description": "The predicate 'aggregate' denotes the action of combining or collecting multiple elements or components into a single, unified whole. In the context of the subject and object, it indicates that the subject performs the action of gathering or summing up the characteristics, values, or data represented by the object, resulting in a comprehensive or collective representation.",
      "disambiguation_index": 0
    },
    "Predicate-binds": {
      "label": "binds",
      "description": "The predicate 'binds' indicates a relationship where the subject argument establishes a connection or association with each target predicate, often implying a form of control, attachment, or obligation that the subject has over the target predicates.",
      "disambiguation_index": 0
    },
    "Predicate-aggregates": {
      "label": "aggregates",
      "description": "The predicate 'aggregates' indicates a relationship where the subject combines or collects various elements, components, or data points represented by the object into a cohesive whole. This process often involves synthesizing information or resources to form a unified entity that reflects the collective characteristics or functionalities of the individual parts.",
      "disambiguation_index": 0
    },
    "Predicate-has_the_following_tree": {
      "label": "has the following tree",
      "description": "The predicate 'has the following tree' establishes a relationship between the subject and the object by indicating that the subject is associated with a specific structured representation or logical framework, which is detailed in the object. This framework typically consists of a set of logical expressions or rules that describe relationships and properties relevant to the subject, thereby providing a formalized understanding of the subject's characteristics or behaviors.",
      "disambiguation_index": 0
    },
    "Predicate-are_quantified_at": {
      "label": "are quantified at",
      "description": "The predicate 'are quantified at' establishes a relationship where the subject is defined or constrained by the conditions or parameters specified in the object. It indicates that the subject's characteristics or behaviors are determined or influenced by the context or location described by the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_a_head": {
      "label": "has a head",
      "description": "The predicate 'has a head' indicates a relationship where the subject possesses a head, which is typically a distinct part or feature of the subject. This relationship highlights the existence of a head as an integral component of the subject, often implying that the head serves a specific function or role within the context of the subject's overall structure or identity.",
      "disambiguation_index": 0
    },
    "Predicate-includes": {
      "label": "includes",
      "description": "The predicate 'includes' establishes a relationship between the subject and the object by indicating that the subject contains or encompasses the elements represented by the object. In this context, the subject, which is a collection or set (such as a sequence of paths or branches), is defined to contain specific components or instances (represented by the object) that are part of that collection. This relationship signifies that the elements in the object are integral to the overall structure or concept represented by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-predicts": {
      "label": "predicts",
      "description": "The predicate 'predicts' establishes a relationship where the subject provides an assertion or estimation about a future occurrence or state of the object. It implies that the subject has the capacity or basis to foresee or anticipate the characteristics or behavior of the object, which is often based on prior knowledge, data, or patterns.",
      "disambiguation_index": 0
    },
    "Predicate-join_in": {
      "label": "join in",
      "description": "The predicate 'join in' indicates an action where the subject becomes involved or participates in a collective process or activity that is associated with the object. It suggests a merging or integration of the subject with the object, often implying collaboration or contribution towards a common goal or shared element.",
      "disambiguation_index": 0
    },
    "Predicate-assessed_by": {
      "label": "assessed by",
      "description": "The predicate 'assessed by' indicates a relationship where the subject is evaluated or judged in terms of the criteria or standards represented by the object. It implies that the object provides a framework or set of measures that are used to determine the characteristics, performance, or value of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-sort": {
      "label": "sort",
      "description": "The predicate 'sort' establishes a relationship where the subject argument is organized or classified into a specific category or order based on certain criteria. It implies a process of arrangement that results in the subject being grouped or sequenced in a manner that reflects its characteristics or properties.",
      "disambiguation_index": 0
    },
    "Predicate-drops_below": {
      "label": "drops below",
      "description": "The predicate 'drops below' indicates a relationship where the subject experiences a decrease in value or level, resulting in it falling beneath a specified limit or standard represented by the object. This connection implies a comparative assessment, where the subject's state is evaluated against the threshold defined by the object, highlighting a transition from a higher to a lower state.",
      "disambiguation_index": 0
    },
    "Predicate-bind": {
      "label": "bind",
      "description": "The predicate 'bind' establishes a connection between the subject and the object by indicating that the subject imposes a constraint or a relationship on the object, often defining how the object is to be interpreted or utilized within a given context.",
      "disambiguation_index": 0
    },
    "Predicate-is_bounded_above_by": {
      "label": "is bounded above by",
      "description": "The predicate 'is bounded above by' establishes a relationship where the subject is constrained or limited in value or extent by the object. It indicates that the subject cannot exceed the value or condition represented by the object, thereby defining an upper limit or threshold that the subject must adhere to.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_presented_as": {
      "label": "can be presented as",
      "description": "The predicate 'can be presented as' indicates a relationship where the subject is capable of being represented, interpreted, or understood in the form of the object. It suggests that there is a potential or possibility for the subject to be categorized, illustrated, or defined using the characteristics or framework of the object, thereby establishing a connection between the two entities.",
      "disambiguation_index": 0
    },
    "Predicate-delete": {
      "label": "delete",
      "description": "The predicate 'delete' signifies the action of removing or eliminating the object from the context or scope defined by the subject. It indicates a process where the subject, which represents a set of entities or concepts, actively removes the specified object, thereby affecting its presence or relevance within the subject's domain.",
      "disambiguation_index": 0
    },
    "Predicate-interpreted_as": {
      "label": "interpreted as",
      "description": "The predicate 'interpreted as' establishes a relationship where the subject is understood or represented in a specific way, as indicated by the object. It signifies that the subject can be viewed or conceptualized through the lens of the object, suggesting a transformation of meaning or perspective that allows for a different interpretation or understanding of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-terminating_at": {
      "label": "terminating at",
      "description": "The predicate 'terminating at' establishes a relationship where the subject indicates a process, sequence, or journey that concludes or reaches a specific endpoint represented by the object. It signifies that the subject's progression or movement comes to a halt or completion at the designated object, thereby linking the two elements through the concept of an endpoint or final destination.",
      "disambiguation_index": 0
    },
    "Predicate-may_be_interpreted_as": {
      "label": "may be interpreted as",
      "description": "The predicate 'may be interpreted as' indicates a potential or suggested understanding of the subject in relation to the object. It implies that the subject can be viewed or understood in a certain way that aligns with the characteristics or properties of the object, allowing for multiple interpretations or meanings based on context.",
      "disambiguation_index": 0
    },
    "Predicate-is_declared_as": {
      "label": "is declared as",
      "description": "The predicate 'is declared as' establishes a formal relationship between the subject and the object, indicating that the subject is officially recognized or identified in a specific capacity or role represented by the object. This predicate is often used to denote classifications, definitions, or designations within a particular context, suggesting that the subject embodies the characteristics or functions associated with the object.",
      "disambiguation_index": 0
    },
    "Predicate-as": {
      "label": "as",
      "description": "The predicate 'as' serves to establish a relationship of equivalence or representation between the subject and the object, indicating that the subject can be understood, interpreted, or categorized in the same manner as the object. It often implies a comparison or a role that the subject plays in relation to the object, suggesting that the subject embodies or functions in a way that is analogous to the object.",
      "disambiguation_index": 0
    },
    "Predicate-within": {
      "label": "within",
      "description": "The predicate 'within' indicates a relationship of inclusion or containment, where the subject is considered to be part of or located inside the object. It suggests that the subject exists in a context or framework defined by the object, highlighting a hierarchical or structural connection between the two entities.",
      "disambiguation_index": 0
    },
    "Predicate-is_read_from": {
      "label": "is read from",
      "description": "The predicate 'is read from' establishes a relationship where the subject is the source or origin of information, data, or content that is being extracted or interpreted from the object. It indicates that the object contains the relevant details or annotations that are utilized or referenced by the subject, thereby facilitating a flow of information from the object to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-declared_by": {
      "label": "declared by",
      "description": "The predicate 'declared by' establishes a relationship where the subject is identified or defined by the object, indicating that the object serves as the authoritative source or formal statement that specifies the characteristics or constraints of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-supports": {
      "label": "supports",
      "description": "The predicate 'supports' indicates a relationship in which the subject provides assistance, endorsement, or facilitation to the object, suggesting that the subject plays a role in enabling, promoting, or enhancing the capabilities or functionalities of the object.",
      "disambiguation_index": 0
    },
    "Predicate-treats": {
      "label": "treats",
      "description": "The predicate 'treats' indicates a relationship in which the subject engages with or manages the object in a specific manner. It implies an action or behavior where the subject applies a certain approach, method, or attitude towards the object, which can be a concept, entity, or characteristic. This relationship often suggests a level of care, consideration, or interaction that the subject has with the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_limitations_with_respect_to": {
      "label": "has limitations with respect to",
      "description": "The predicate 'has limitations with respect to' indicates that the subject possesses certain constraints, restrictions, or shortcomings in relation to the object. It establishes a relationship where the subject is acknowledged to be insufficient or inadequate in some aspects when compared to or in the context of the object. This predicate is often used to highlight the boundaries of the subject's capabilities or applicability concerning the specified object.",
      "disambiguation_index": 0
    },
    "Predicate-does_not_perform": {
      "label": "does not perform",
      "description": "The predicate 'does not perform' indicates a lack of action or execution by the subject in relation to the object. It signifies that the subject is expected to carry out a certain task or function represented by the object, but in this case, it explicitly states that the subject fails to undertake that task. This can imply either an inability, a choice, or a condition under which the action is not executed.",
      "disambiguation_index": 0
    },
    "Predicate-handles": {
      "label": "handles",
      "description": "The predicate 'handles' indicates a relationship where the subject is responsible for managing, processing, or dealing with the object. It suggests that the subject has the capability or function to interact with the object in a meaningful way, often implying a level of control or oversight over the object.",
      "disambiguation_index": 0
    },
    "Predicate-does_not_mine": {
      "label": "does not mine",
      "description": "The predicate 'does not mine' indicates a negation of the action of mining, suggesting that the subject is not engaged in the process of extracting or obtaining information, resources, or data represented by the object. In this context, it implies that the subject, while potentially capable of mining, is explicitly not performing this action in relation to the specified object.",
      "disambiguation_index": 0
    },
    "Predicate-proposed_to_complete": {
      "label": "proposed to complete",
      "description": "The predicate 'proposed to complete' indicates a suggestion or recommendation made by the subject regarding the fulfillment or achievement of the object. It implies that the subject has put forward a plan, strategy, or approach that aims to bring the object to a state of completion or resolution.",
      "disambiguation_index": 0
    },
    "Predicate-traverse": {
      "label": "traverse",
      "description": "The predicate 'traverse' indicates an action or process where the subject engages in moving through or across the object, which represents a structure or space. In this context, it implies that the subject (method) systematically navigates or explores the object (KG), suggesting a relationship where the subject actively interacts with the object to access, analyze, or utilize its components or information.",
      "disambiguation_index": 0
    },
    "Predicate-predicting": {
      "label": "predicting",
      "description": "The predicate 'predicting' establishes a relationship where the subject is an entity or process that generates forecasts or estimations about the future state or occurrence of the object, which represents the information or events that are anticipated to be absent or uncertain.",
      "disambiguation_index": 0
    },
    "Predicate-is_followed_by": {
      "label": "is followed by",
      "description": "The predicate 'is followed by' indicates a sequential or consequential relationship between two entities, where the first entity (subject) leads to or is succeeded by the second entity (object). In the context of the example, it suggests that the information or concept represented by the subject is directly related to or precedes the information or concept represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_an_answer_for": {
      "label": "has an answer for",
      "description": "The predicate 'has an answer for' establishes a relationship between a subject, which typically represents a query or problem, and an object, which signifies a response or solution. This connection implies that the subject is addressed or resolved by the object, indicating that the object provides the necessary information or clarification related to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-gives_us_confidence_to_proceed_to": {
      "label": "gives us confidence to proceed to",
      "description": "The predicate 'gives us confidence to proceed to' indicates that the subject provides a sense of assurance or certainty that enables or encourages the subject's audience to move forward towards the object. It implies a positive influence that fosters readiness or willingness to tackle the next step or challenge, suggesting a progression in thought or action.",
      "disambiguation_index": 0
    },
    "Predicate-is_along": {
      "label": "is along",
      "description": "The predicate 'is along' indicates a spatial or conceptual relationship where the subject is positioned in proximity to or in alignment with the object, suggesting that the subject follows or is situated within the context or direction defined by the object.",
      "disambiguation_index": 0
    },
    "Predicate-gives_us": {
      "label": "gives us",
      "description": "The predicate 'gives us' indicates a relationship where the subject provides or delivers something of value, insight, or information to the recipient represented by the object. It implies a transfer of knowledge, understanding, or a tangible item from the subject to the object, suggesting that the object is a result or outcome derived from the subject's action.",
      "disambiguation_index": 0
    },
    "Predicate-allows_us_to_proceed_to": {
      "label": "allows us to proceed to",
      "description": "The predicate 'allows us to proceed to' indicates a facilitative relationship where the subject enables or permits movement, transition, or advancement towards the object. It suggests that the subject provides the necessary conditions or information that make it possible to continue or advance to the next stage, topic, or inquiry represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-works_through": {
      "label": "works through",
      "description": "The predicate 'works through' indicates a process or method by which the subject engages with or utilizes the object to achieve a particular outcome or goal. It suggests a functional relationship where the subject employs the object as a means to navigate, address, or resolve a specific task or challenge.",
      "disambiguation_index": 0
    },
    "Predicate-is_applied_in": {
      "label": "is applied in",
      "description": "The predicate 'is applied in' indicates that the subject is utilized or implemented within the context of the object, suggesting a functional relationship where the subject serves a purpose or contributes to the operation or effectiveness of the object.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_generated_by": {
      "label": "can be generated by",
      "description": "The predicate 'can be generated by' indicates a relationship where the subject is produced or created through the actions or processes of the object. It implies that the object has the capability or function to generate the subject, suggesting a causal or functional connection between the two entities.",
      "disambiguation_index": 0
    },
    "Predicate-extracts": {
      "label": "extracts",
      "description": "The predicate 'extracts' indicates an action where the subject performs the process of obtaining or removing a specific part or element from a larger whole, resulting in the object being identified as the extracted component. This action implies a transformation or selection process where the subject actively engages in isolating the object from its original context.",
      "disambiguation_index": 0
    },
    "Predicate-is_desired_for": {
      "label": "is desired for",
      "description": "The predicate 'is desired for' establishes a relationship where the subject is sought after or valued in relation to the object, indicating that the object represents a quality, characteristic, or outcome that is considered beneficial or necessary in the context of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_extracted_out_of": {
      "label": "is extracted out of",
      "description": "The predicate 'is extracted out of' indicates a relationship where the subject is derived or taken from the object, suggesting that the subject is a component or subset that originates from a larger or more complex entity represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-remains": {
      "label": "remains",
      "description": "The predicate 'remains' indicates a state of continuity or persistence, suggesting that the subject continues to exist in a particular condition or form represented by the object. It implies that despite any changes or circumstances, the subject retains its identity or characteristics as defined by the object.",
      "disambiguation_index": 0
    },
    "Predicate-address": {
      "label": "address",
      "description": "The predicate 'address' signifies a relationship where the subject is focused on or dealing with the object, indicating an intention to engage with, resolve, or consider the aspects related to the object in question.",
      "disambiguation_index": 0
    },
    "Predicate-involves": {
      "label": "involves",
      "description": "The predicate 'involves' indicates a relationship where the subject is engaged in or requires the object as a necessary component or aspect of its process or activity. It suggests that the object is an integral part of what the subject entails or encompasses.",
      "disambiguation_index": 0
    },
    "Predicate-are_without": {
      "label": "are without",
      "description": "The predicate 'are without' indicates a lack or absence of something in relation to the subject. It connects the subject to the object by asserting that the subject does not possess or is not accompanied by the object, highlighting a deficiency or void in the subject's characteristics or attributes.",
      "disambiguation_index": 0
    },
    "Predicate-are_not_shown_to_be_scalable_to_handle": {
      "label": "are not shown to be scalable to handle",
      "description": "The predicate 'are not shown to be scalable to handle' indicates that the subject lacks evidence or demonstration of its ability to effectively manage or accommodate the complexities, size, or demands of the object. This suggests a limitation or inadequacy in the subject's performance or applicability in relation to the object, particularly in scenarios that require scalability.",
      "disambiguation_index": 0
    },
    "Predicate-is_difficult_to_compare_with": {
      "label": "is difficult to compare with",
      "description": "The predicate 'is difficult to compare with' indicates a challenge or complexity in establishing a direct comparison between the subject and the object. It suggests that the characteristics, metrics, or criteria used for comparison are not easily aligned or that the differences between the two entities are significant enough to hinder a straightforward evaluation. This predicate implies that while a comparison may be possible, it requires careful consideration and may not yield clear or meaningful results.",
      "disambiguation_index": 0
    },
    "Predicate-work_with": {
      "label": "work with",
      "description": "The predicate 'work with' indicates a collaborative or interactive relationship between the subject and the object, where the subject engages in activities, processes, or operations that involve the object. This relationship suggests that the subject utilizes, manipulates, or interacts with the object in a manner that contributes to a specific goal or outcome.",
      "disambiguation_index": 0
    },
    "Predicate-is_provided_in": {
      "label": "is provided in",
      "description": "The predicate 'is provided in' indicates that the subject is made available or presented within the context or medium specified by the object. It establishes a relationship where the subject exists or can be accessed through the framework or environment described by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_used_by": {
      "label": "is used by",
      "description": "The predicate 'is used by' establishes a relationship where the subject is an entity or object that serves a purpose or function, and the object represents an agent or actor that engages with or utilizes the subject for a specific task or activity. This connection highlights the interaction between the two, indicating that the object relies on the subject to achieve a goal or fulfill a need.",
      "disambiguation_index": 0
    },
    "Predicate-is_given": {
      "label": "is given",
      "description": "The predicate 'is given' indicates that the subject is presented or provided in relation to the object. It establishes a connection where the subject serves as a source or context for the information, concept, or item represented by the object, suggesting that the object is a result, outcome, or specification derived from the subject.",
      "disambiguation_index": 0
    },
    "Predicate-are_essential_for": {
      "label": "are essential for",
      "description": "The predicate 'are essential for' indicates that the subject is a necessary component or fundamental element that contributes significantly to the achievement or realization of the object. It implies that without the subject, the object cannot be effectively accomplished or would be severely hindered.",
      "disambiguation_index": 0
    },
    "Predicate-does_not_provide": {
      "label": "does not provide",
      "description": "The predicate 'does not provide' indicates a lack of availability or absence of a certain resource, information, or capability that is expected or sought after. In the context of a subject and an object, it signifies that the subject fails to deliver, supply, or offer the specific object, which may be a service, solution, or piece of information. This predicate highlights a deficiency or shortcoming in the subject's contributions or offerings.",
      "disambiguation_index": 0
    },
    "Predicate-cannot_deploy": {
      "label": "cannot deploy",
      "description": "The predicate 'cannot deploy' indicates an inability or restriction of the subject to utilize or implement the object in a specific context or for a particular purpose. It suggests that the subject is unable to execute or apply the object effectively, often due to limitations, constraints, or incompatibilities.",
      "disambiguation_index": 0
    },
    "Predicate-generate": {
      "label": "generate",
      "description": "The predicate 'generate' indicates a process or action where the subject produces, creates, or brings forth the object as a result of its inherent properties, functions, or operations. In this context, it signifies that the subject is capable of yielding or forming the object through a systematic or creative mechanism.",
      "disambiguation_index": 0
    },
    "Predicate-investigate": {
      "label": "investigate",
      "description": "The predicate 'investigate' denotes the action of examining, exploring, or analyzing a subject in order to gain a deeper understanding or to uncover information about an object. In the context of the triple, it implies that the subject is actively engaging in a process to study or assess the object, which may involve research, inquiry, or experimentation.",
      "disambiguation_index": 0
    },
    "Predicate-contributes_to": {
      "label": "contributes to",
      "description": "The predicate 'contributes to' indicates a relationship where the subject plays a significant role in facilitating, enhancing, or supporting the outcome or process represented by the object. It suggests that the subject provides valuable input, resources, or influence that aids in achieving or realizing the object.",
      "disambiguation_index": 0
    },
    "Predicate-proposes": {
      "label": "proposes",
      "description": "The predicate 'proposes' indicates an action where the subject puts forward a suggestion, idea, or plan for consideration, typically aimed at addressing a particular issue or achieving a specific goal. It establishes a relationship where the subject actively presents or recommends the object, which is often a concept, strategy, or course of action, inviting evaluation or acceptance from others.",
      "disambiguation_index": 0
    },
    "Predicate-detects": {
      "label": "detects",
      "description": "The predicate 'detects' indicates the action of identifying or discovering the presence of something within a given context. In the context of a subject and an object, it signifies that the subject has the capability or function to recognize or ascertain the characteristics, conditions, or elements represented by the object. This relationship implies an active process of observation or analysis where the subject is engaged in uncovering specific information or insights related to the object.",
      "disambiguation_index": 0
    },
    "Predicate-could_violate": {
      "label": "could violate",
      "description": "The predicate 'could violate' indicates a potential or hypothetical scenario in which the subject has the capacity or possibility to breach, contravene, or disregard the principles, standards, or guidelines represented by the object. It suggests that there is a risk or likelihood of non-compliance or infringement occurring between the subject and the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_provided": {
      "label": "are provided",
      "description": "The predicate 'are provided' indicates that the subject is made available or supplied in some form to fulfill a need or purpose represented by the object. It establishes a relationship where the subject serves as a resource or tool that aids in the implementation or understanding of the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_proposed_to_detect": {
      "label": "is proposed to detect",
      "description": "The predicate 'is proposed to detect' establishes a relationship where the subject is a method or approach that is suggested or recommended for identifying or recognizing specific conditions, phenomena, or instances represented by the object. This implies that the subject has the capability or intention to uncover or reveal the characteristics or occurrences described in the object.",
      "disambiguation_index": 0
    },
    "Predicate-provides_logical_foundations_for": {
      "label": "provides logical foundations for",
      "description": "The predicate 'provides logical foundations for' indicates that the subject offers essential principles, theories, or frameworks that underpin and support the understanding or development of the object. It signifies a foundational relationship where the subject contributes to the conceptual or theoretical basis necessary for the object to be defined, interpreted, or utilized effectively.",
      "disambiguation_index": 0
    },
    "Predicate-approaches": {
      "label": "approaches",
      "description": "The predicate 'approaches' indicates a method, strategy, or perspective that the subject employs in relation to the object. It suggests a way of engaging with, analyzing, or interpreting the object, highlighting the subject's intention to explore or address the characteristics, principles, or implications of the object in question.",
      "disambiguation_index": 0
    },
    "Predicate-start_with": {
      "label": "start with",
      "description": "The predicate 'start with' indicates the initial point or foundational element from which a subject begins its development, process, or structure, leading to the subsequent elements or concepts represented by the object. It establishes a relationship where the subject is characterized or defined by the object as its starting basis.",
      "disambiguation_index": 0
    },
    "Predicate-derive": {
      "label": "derive",
      "description": "The predicate 'derive' indicates a relationship where the subject provides a basis or foundation from which the object can be obtained or inferred. It suggests a process of reasoning or transformation, where the characteristics or properties of the subject lead to the emergence or formulation of the object, often through logical or systematic means.",
      "disambiguation_index": 0
    },
    "Predicate-are_derived_from": {
      "label": "are derived from",
      "description": "The predicate 'are derived from' indicates a relationship where the subject is a result or product that originates from the object. It implies that the subject has been influenced, shaped, or created based on the principles, concepts, or structures represented by the object. This connection often suggests a foundational or source-based relationship, where the object serves as a basis or reference point for the characteristics or properties of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-implemented_based_on": {
      "label": "implemented based on",
      "description": "The predicate 'implemented based on' indicates that the subject has been developed or constructed using the principles, methods, or guidelines provided by the object. It signifies a foundational relationship where the object serves as a basis or reference for the implementation of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-conducted_experiments_to_assess": {
      "label": "conducted experiments to assess",
      "description": "The predicate 'conducted experiments to assess' indicates that the subject is actively engaging in a systematic investigation or experimentation process with the aim of evaluating, measuring, or understanding certain characteristics, effects, or outcomes related to the object, which is typically a set of experiments or a specific phenomenon.",
      "disambiguation_index": 0
    },
    "Predicate-are_designed_to_prove": {
      "label": "are designed to prove",
      "description": "The predicate 'are designed to prove' indicates that the subject is intentionally created or structured with the purpose of demonstrating or establishing the validity, truth, or effectiveness of the object. It implies a deliberate effort to provide evidence or support for the claims made about the object.",
      "disambiguation_index": 0
    },
    "Predicate-captures": {
      "label": "captures",
      "description": "The predicate 'captures' indicates an action where the subject successfully seizes, records, or represents the object in some form. This can involve physically taking hold of something, or metaphorically encompassing its essence, characteristics, or features, thereby making it available for observation, analysis, or use.",
      "disambiguation_index": 0
    },
    "Predicate-captures_from": {
      "label": "captures from",
      "description": "The predicate 'captures from' indicates a relationship where the subject extracts, gathers, or derives information, data, or insights from the object. This implies a process of obtaining or sourcing knowledge or content from the specified entity, which serves as a resource or reference point for the subject's activities or functions.",
      "disambiguation_index": 0
    },
    "Predicate-assess": {
      "label": "assess",
      "description": "The predicate 'assess' indicates an evaluative action where the subject is subjected to a process of examination or judgment in relation to the object. In this context, the subject, which can be any entity such as a study, experiment, or performance, is being analyzed or appraised by the object, which represents a method, tool, or framework used for evaluation. The relationship signifies that the subject is being measured or evaluated based on criteria or standards associated with the object.",
      "disambiguation_index": 0
    },
    "Predicate-conducted_to_assess": {
      "label": "conducted to assess",
      "description": "The predicate 'conducted to assess' indicates that the subject undertakes a systematic process or series of actions with the purpose of evaluating, measuring, or analyzing the characteristics, performance, or effectiveness of the object. This connection implies that the subject is actively engaged in a methodical investigation or experimentation aimed at gaining insights or understanding related to the object.",
      "disambiguation_index": 0
    },
    "Predicate-with_varying": {
      "label": "with varying",
      "description": "The predicate 'with varying' indicates a relationship where the subject exhibits a range of differences or fluctuations in relation to the object. It suggests that the subject possesses characteristics or qualities that change or differ in degree, intensity, or type when associated with the object, highlighting the variability or diversity present in the connection.",
      "disambiguation_index": 0
    },
    "Predicate-is_the_first_method_to_learn": {
      "label": "is the first method to learn",
      "description": "The predicate 'is the first method to learn' establishes a relationship where the subject is identified as the initial or primary approach for acquiring knowledge or skills related to the object. It implies that the subject serves as a foundational or pioneering technique in the context of learning about the object, suggesting that it is the most effective or recommended starting point for understanding or mastering the object.",
      "disambiguation_index": 0
    },
    "Predicate-has_no": {
      "label": "has no",
      "description": "The predicate 'has no' indicates the absence or lack of a particular object in relation to the subject. It establishes a negative relationship, signifying that the subject does not possess, contain, or include the specified object, thereby highlighting a deficiency or void in the subject's attributes or capabilities.",
      "disambiguation_index": 0
    },
    "Predicate-shows_that_it_can_handle": {
      "label": "shows that it can handle",
      "description": "The predicate 'shows that it can handle' indicates a demonstration or evidence provided by the subject regarding its capability or effectiveness in managing or executing the object. It implies a relationship where the subject's attributes or results serve as proof of its ability to deal with the challenges or requirements represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_applied_in": {
      "label": "can be applied in",
      "description": "The predicate 'can be applied in' indicates that the subject has practical relevance or utility in the context of the object. It suggests that the subject's characteristics, findings, or capabilities can be utilized or implemented within the specified area or field represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_scalable_so_it_can_handle": {
      "label": "is scalable so it can handle",
      "description": "The predicate 'is scalable so it can handle' indicates that the subject possesses the capability to expand or adapt its resources and functionalities in order to effectively manage or process the object, which typically represents a large or complex system or dataset. This suggests that the subject is designed to accommodate growth or increased demand without compromising performance.",
      "disambiguation_index": 0
    },
    "Predicate-is_compared_with": {
      "label": "is compared with",
      "description": "The predicate 'is compared with' establishes a relationship between the subject and the object by indicating that the subject is being evaluated or analyzed in relation to the object. This comparison often involves assessing similarities, differences, or performance metrics, allowing for a deeper understanding of the subject's characteristics or effectiveness in contrast to the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_described_in": {
      "label": "are described in",
      "description": "The predicate 'are described in' indicates that the subject is detailed or explained within the context of the object, typically referring to a specific source or document where information about the subject can be found. This connection implies that the object serves as a reference point for understanding the characteristics, features, or context of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-have_been_used_in": {
      "label": "have been used in",
      "description": "The predicate 'have been used in' indicates that the subject has been employed or utilized within the context of the object. It signifies a relationship where the subject plays a role or contributes to the activities, processes, or contexts described by the object, suggesting a practical application or involvement in a specific domain or field.",
      "disambiguation_index": 0
    },
    "Predicate-are_common_KGs_and_have_been_used_in": {
      "label": "are common KGs and have been used in",
      "description": "The predicate 'are common KGs and have been used in' indicates that the subject is recognized as a widely utilized knowledge graph (KG) and highlights its application in specific contexts or fields, represented by the object. This suggests that the subject not only holds significance in the realm of knowledge representation but also plays a practical role in various analytical or experimental endeavors.",
      "disambiguation_index": 0
    },
    "Predicate-is_for_analyzing": {
      "label": "is for analyzing",
      "description": "The predicate 'is for analyzing' establishes a purpose or function relationship between the subject and the object, indicating that the subject serves as a tool, method, or framework intended to examine, evaluate, or interpret the characteristics, qualities, or performance of the object.",
      "disambiguation_index": 0
    },
    "Predicate-comprises": {
      "label": "comprises",
      "description": "The predicate 'comprises' indicates that the subject is made up of or consists of the elements represented by the object. It establishes a relationship where the subject is a whole that includes the specified parts or components denoted by the object.",
      "disambiguation_index": 0
    },
    "Predicate-drawn_from": {
      "label": "drawn from",
      "description": "The predicate 'drawn from' indicates a relationship where the subject is selected or extracted from a larger set or source represented by the object. It implies a process of selection that connects the two entities, with the subject being a subset or a specific instance taken out of the broader context provided by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_described_using": {
      "label": "is described using",
      "description": "The predicate 'is described using' establishes a relationship where the subject is characterized or defined by the object, indicating that the object provides the necessary details, features, or qualities that convey information about the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_necessary_since": {
      "label": "is necessary since",
      "description": "The predicate 'is necessary since' establishes a causal or justificatory relationship between the subject and the object, indicating that the subject is essential or required due to the conditions or characteristics represented by the object. It implies that the existence, implementation, or consideration of the subject is fundamentally linked to the necessity arising from the object.",
      "disambiguation_index": 0
    },
    "Predicate-distinguishes": {
      "label": "distinguishes",
      "description": "The predicate 'distinguishes' indicates a relationship where the subject identifies or differentiates the object from other entities or concepts. It implies a process of recognition or categorization that highlights the unique characteristics or qualities of the object in relation to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-are_named": {
      "label": "are named",
      "description": "The predicate 'are named' establishes a relationship between the subject and the object by indicating that the subject is assigned a specific designation or label represented by the object. This connection implies that the subject is identified or categorized using the terminology provided by the object, thereby facilitating understanding and communication about the subject.",
      "disambiguation_index": 0
    },
    "Predicate-also_called": {
      "label": "also called",
      "description": "The predicate 'also called' serves to indicate an alternative name or designation for the subject, linking it to the object. It suggests that the object is another term or phrase that can be used interchangeably with the subject, thereby providing additional context or clarification about the subject's identity or characteristics.",
      "disambiguation_index": 0
    },
    "Predicate-allows": {
      "label": "allows",
      "description": "The predicate 'allows' indicates a permissive relationship between the subject and the object, suggesting that the subject enables, facilitates, or permits the existence, creation, or utilization of the object. In this context, it implies that the subject provides the necessary conditions or framework for the object to be realized or to function effectively.",
      "disambiguation_index": 0
    },
    "Predicate-is_important_since": {
      "label": "is important since",
      "description": "The predicate 'is important since' establishes a causal or explanatory relationship between the subject and the object, indicating that the subject holds significance or value due to the reasons or implications presented by the object. It suggests that the subject's importance is derived from, or justified by, the characteristics, benefits, or consequences associated with the object.",
      "disambiguation_index": 0
    },
    "Predicate-can_cause": {
      "label": "can cause",
      "description": "The predicate 'can cause' indicates a potential relationship where the subject has the ability or capacity to bring about a change, effect, or outcome represented by the object. It suggests a causal link where the action or state of the subject may lead to the occurrence of the object, implying that the subject's influence can initiate or contribute to the realization of the object.",
      "disambiguation_index": 0
    },
    "Predicate-keeps": {
      "label": "keeps",
      "description": "The predicate 'keeps' indicates a relationship where the subject maintains, preserves, or continues the state or condition of the object. It suggests that the subject has an active role in ensuring that the object remains in a particular form or state over time.",
      "disambiguation_index": 0
    },
    "Predicate-modeled_as": {
      "label": "modeled as",
      "description": "The predicate 'modeled as' indicates a relationship where the subject is represented or conceptualized in a specific form or structure that corresponds to the object. It suggests that the subject is being interpreted or constructed in a way that aligns with the characteristics or properties of the object, thereby establishing a framework for understanding or analyzing the subject through the lens of the object.",
      "disambiguation_index": 0
    },
    "Predicate-may_be_modeled_as": {
      "label": "may be modeled as",
      "description": "The predicate 'may be modeled as' indicates a relationship where the subject can be represented or conceptualized in terms of the object. It suggests that the subject possesses characteristics or structures that allow it to be understood, analyzed, or interpreted through the lens of the object, thereby establishing a framework for comparison or abstraction.",
      "disambiguation_index": 0
    },
    "Predicate-modeled_with": {
      "label": "modeled with",
      "description": "The predicate 'modeled with' indicates a relationship where the subject is represented or constructed using the object. It suggests that the subject is defined, characterized, or analyzed through the application or use of the object, which serves as a framework, method, or tool for modeling. This relationship highlights how the subject and object interact in a conceptual or practical manner, with the object providing a means to understand or depict the subject.",
      "disambiguation_index": 0
    },
    "Predicate-make_from": {
      "label": "make from",
      "description": "The predicate 'make from' indicates a transformation or creation process where the subject is derived or constructed using the materials, components, or elements represented by the object. It implies that the object serves as the foundational basis or source from which the subject is formed, highlighting a relationship of origin and composition.",
      "disambiguation_index": 0
    },
    "Predicate-are_produced_from": {
      "label": "are produced from",
      "description": "The predicate 'are produced from' indicates a relationship where the subject is generated or created as a result of the influence, transformation, or processing of the object. It implies a directional flow of causation or derivation, suggesting that the object serves as a source or foundational element from which the subject emerges.",
      "disambiguation_index": 0
    },
    "Predicate-are_based_on": {
      "label": "are based on",
      "description": "The predicate 'are based on' indicates a foundational relationship where the subject is derived from, influenced by, or constructed upon the principles, concepts, or elements represented by the object. It suggests that the existence, validity, or characteristics of the subject are contingent upon or supported by the object.",
      "disambiguation_index": 0
    },
    "Predicate-generates": {
      "label": "generates",
      "description": "The predicate 'generates' indicates a relationship where the subject produces, creates, or leads to the existence of the object. It signifies a causal or productive connection, suggesting that the subject is responsible for the formation or emergence of the object in some context.",
      "disambiguation_index": 0
    },
    "Predicate-consider": {
      "label": "consider",
      "description": "The predicate 'consider' establishes a relationship where the subject evaluates or reflects upon the object, leading to a judgment or opinion about it. In this context, it implies that the subject is taking into account the characteristics or significance of the object, which is defined by certain criteria or attributes.",
      "disambiguation_index": 0
    },
    "Predicate-prune": {
      "label": "prune",
      "description": "The predicate 'prune' indicates the action of selectively removing or reducing certain elements from a larger set, typically to enhance efficiency, clarity, or performance. In the context of the subject and object, it suggests that the subject is undergoing a process where specific components are eliminated or diminished, resulting in a refined or optimized version represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-retains": {
      "label": "retains",
      "description": "The predicate 'retains' indicates a relationship where the subject maintains possession or continuity of the object, suggesting that the subject preserves or keeps the object intact over time. This implies that the subject has the capacity to hold onto the object, ensuring that its characteristics or information remain unchanged or available.",
      "disambiguation_index": 0
    },
    "Predicate-extending_with": {
      "label": "extending with",
      "description": "The predicate 'extending with' indicates a relationship where the subject is being enhanced, supplemented, or broadened by the addition of the object. It implies that the subject is incorporating new elements or features represented by the object, thereby increasing its scope, functionality, or complexity.",
      "disambiguation_index": 0
    },
    "Predicate-reports": {
      "label": "reports",
      "description": "The predicate 'reports' indicates that the subject provides information or data regarding the object. It establishes a relationship where the subject conveys specific details, findings, or observations about the object, often in a formal or structured manner.",
      "disambiguation_index": 0
    },
    "Predicate-have_added": {
      "label": "have added",
      "description": "The predicate 'have added' indicates a relationship where the subject has included or incorporated the object into its existing set or collection. This implies an action of enhancement or expansion, suggesting that the subject has taken steps to increase its resources, capabilities, or attributes by integrating the specified object.",
      "disambiguation_index": 0
    },
    "Predicate-is_for_evaluating": {
      "label": "is for evaluating",
      "description": "The predicate 'is for evaluating' indicates that the subject serves a purpose or function related to the assessment, analysis, or judgment of the object. It establishes a relationship where the subject is designed, intended, or utilized to measure, appraise, or determine the effectiveness, quality, or performance of the object.",
      "disambiguation_index": 0
    },
    "Predicate-involves_measuring": {
      "label": "involves measuring",
      "description": "The predicate 'involves measuring' indicates a relationship where the subject is engaged in the process of quantifying or assessing specific attributes or characteristics represented by the object. This connection highlights the action of evaluating or determining the extent, degree, or value of the object in relation to the subject's activities or outcomes.",
      "disambiguation_index": 0
    },
    "Predicate-evaluating": {
      "label": "evaluating",
      "description": "The predicate 'evaluating' signifies the process by which the subject assesses, analyzes, or judges the effectiveness, performance, or validity of the object. In this context, it implies a critical examination of the object in relation to the subject, often involving comparison, measurement, or testing to determine the quality or success of the object based on certain criteria or standards.",
      "disambiguation_index": 0
    },
    "Predicate-is_measured_by": {
      "label": "is measured by",
      "description": "The predicate 'is measured by' establishes a relationship where the subject is evaluated or quantified through the lens of the object. It indicates that the object serves as a standard, metric, or criterion that provides a means to assess the quality, performance, or effectiveness of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-select_from": {
      "label": "select from",
      "description": "The predicate 'select from' indicates a process of choosing or identifying specific items or elements from a larger set or collection. In this context, the subject represents a subset or criteria for selection, while the object denotes the source or pool from which the selection is made. This relationship highlights the act of filtering or narrowing down options based on defined parameters.",
      "disambiguation_index": 0
    },
    "Predicate-serves_as": {
      "label": "serves as",
      "description": "The predicate 'serves as' indicates a functional or role-based relationship between the subject and the object, where the subject is positioned to fulfill the role or function described by the object. In the context of the provided triple, it suggests that the binary target predicate is acting in a capacity that aligns with or embodies the characteristics of the two target predicates.",
      "disambiguation_index": 0
    },
    "Predicate-serves_in": {
      "label": "serves in",
      "description": "The predicate 'serves in' indicates a functional or operational role that the subject fulfills within the context of the object. It suggests that the subject is actively involved in or contributes to the activities, purposes, or operations associated with the object, highlighting a relationship of service or participation.",
      "disambiguation_index": 0
    },
    "Predicate-connects": {
      "label": "connects",
      "description": "The predicate 'connects' indicates a relationship or link between the subject and the object, suggesting that the subject serves to establish, facilitate, or maintain a connection with the object. This connection can be physical, conceptual, or relational, depending on the context, and implies an interaction or association that binds the two entities together.",
      "disambiguation_index": 0
    },
    "Predicate-is_where": {
      "label": "is where",
      "description": "The predicate 'is where' establishes a locational or contextual relationship between the subject and the object, indicating that the subject exists in, or is associated with, the location or context represented by the object. It serves to define the position or situation of the subject in relation to the object, often implying a sense of belonging or presence.",
      "disambiguation_index": 0
    },
    "Predicate-results_on": {
      "label": "results on",
      "description": "The predicate 'results on' indicates a relationship where the subject produces or generates outcomes, findings, or conclusions that are specifically associated with the object. It implies that the subject's activities, processes, or analyses lead to the results that pertain to the object, suggesting a direct connection between the actions of the subject and the context or framework represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_set_for": {
      "label": "is set for",
      "description": "The predicate 'is set for' indicates a predetermined arrangement or specification regarding the subject, establishing a clear purpose or intended outcome associated with the object. It conveys that the subject is designated or allocated for the particular activity or goal represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-meet": {
      "label": "meet",
      "description": "The predicate 'meet' indicates a relationship where the subject fulfills, satisfies, or aligns with the criteria or requirements represented by the object. It suggests that the subject successfully corresponds to or achieves the standards set by the object.",
      "disambiguation_index": 0
    },
    "Predicate-established_in": {
      "label": "established in",
      "description": "The predicate 'established in' indicates that the subject has been created, set up, or recognized within the context of the object. It signifies a foundational relationship where the subject is linked to the object as a source, framework, or basis for its existence or development.",
      "disambiguation_index": 0
    },
    "Predicate-are_included": {
      "label": "are included",
      "description": "The predicate 'are included' indicates that the subject is part of or encompassed within the object, suggesting a relationship where the subject is recognized as a component or element of the broader context represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_pruned_by_applying": {
      "label": "can be pruned by applying",
      "description": "The predicate 'can be pruned by applying' indicates a process in which the subject undergoes a reduction or simplification through the implementation of the object. This suggests that the subject, which may represent a set of items, concepts, or processes, can be made more efficient or focused by utilizing the criteria or methods specified in the object. The relationship implies that the application of the object leads to a refinement of the subject, enhancing its quality or relevance.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_safe_choice_since": {
      "label": "is a safe choice since",
      "description": "The predicate 'is a safe choice since' establishes a relationship where the subject is presented as a reliable or prudent option based on the reasoning or justification provided by the object. It implies that the subject's characteristics or context make it a favorable decision, with the object serving as the rationale that supports this assertion.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_choice_at_the_time_of": {
      "label": "is a choice at the time of",
      "description": "The predicate 'is a choice at the time of' indicates that the subject represents an option or decision that can be made during a specific event or process denoted by the object. It suggests that the subject is relevant and available for consideration when the action or situation described by the object occurs.",
      "disambiguation_index": 0
    },
    "Predicate-with_respect_to": {
      "label": "with respect to",
      "description": "The predicate 'with respect to' establishes a relationship of relevance or consideration between the subject and the object, indicating that the subject is being analyzed, discussed, or evaluated in relation to the object. It signifies a focus on a particular aspect or dimension of the subject, thereby contextualizing the subject's characteristics, behaviors, or properties in terms of the object.",
      "disambiguation_index": 0
    },
    "Predicate-vs": {
      "label": "vs",
      "description": "The predicate 'vs' denotes a comparative relationship between the subject and the object, indicating that the subject is being evaluated or contrasted in relation to the object. It suggests a comparison of characteristics, attributes, or metrics, where the subject is assessed against the criteria or standard represented by the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_presented": {
      "label": "is presented",
      "description": "The predicate 'is presented' indicates that the subject is being introduced, displayed, or made known in relation to the object. It signifies a communicative act where the subject is the focus of attention, and the object represents the information, data, or context that is being conveyed or illustrated. This connection implies that the subject serves as a point of reference for understanding or interpreting the object.",
      "disambiguation_index": 0
    },
    "Predicate-demonstrates": {
      "label": "demonstrates",
      "description": "The predicate 'demonstrates' indicates a relationship where the subject provides evidence or illustrates a particular characteristic, quality, or outcome represented by the object. It suggests that the subject serves as a manifestation or indicator of the object, showing how the two are connected in terms of evidence or representation.",
      "disambiguation_index": 0
    },
    "Predicate-is_over": {
      "label": "is over",
      "description": "The predicate 'is over' indicates a relationship where the subject is considered to have surpassed, concluded, or exceeded the object in some manner. It suggests a comparison or evaluation where the subject is positioned as being greater than or having completed a state or condition relative to the object.",
      "disambiguation_index": 0
    },
    "Predicate-present": {
      "label": "present",
      "description": "The predicate 'present' indicates that the subject is being made available or is being shown in relation to the object. It signifies the act of displaying, revealing, or indicating the existence or state of the object as it pertains to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-increases": {
      "label": "increases",
      "description": "The predicate 'increases' denotes a relationship where the subject causes a growth or enhancement in the quantity, level, or degree of the object. It implies a positive change, suggesting that the subject has a direct or indirect influence that results in a higher state of the object compared to a previous condition.",
      "disambiguation_index": 0
    },
    "Predicate-observes": {
      "label": "observes",
      "description": "The predicate 'observes' indicates that the subject is actively noticing, monitoring, or perceiving the object, which typically represents a phenomenon, trend, or pattern. This connection implies that the subject is engaged in a process of observation that allows it to recognize or identify specific characteristics or changes in the object.",
      "disambiguation_index": 0
    },
    "Predicate-shows_a_similar_pattern_for": {
      "label": "shows a similar pattern for",
      "description": "The predicate 'shows a similar pattern for' indicates that the subject exhibits characteristics, trends, or behaviors that are comparable or analogous to those represented in the object. This connection suggests a relationship where the subject's data or findings can be aligned with or reflected in the object, highlighting similarities in structure, behavior, or outcomes.",
      "disambiguation_index": 0
    },
    "Predicate-have_lower": {
      "label": "have lower",
      "description": "The predicate 'have lower' indicates a comparative relationship where the subject possesses a lesser degree, amount, or value in relation to the object. It suggests that the subject is evaluated as being inferior or reduced in some aspect when compared to the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_higher_than": {
      "label": "is higher than",
      "description": "The predicate 'is higher than' establishes a comparative relationship between the subject and the object, indicating that the value, quality, or quantity represented by the subject exceeds that of the object. This comparison can apply to various contexts, such as numerical values, levels of performance, or degrees of effectiveness, and suggests a hierarchy or superiority of the subject in relation to the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_necessary_for": {
      "label": "are necessary for",
      "description": "The predicate 'are necessary for' establishes a relationship where the subject is essential or required to achieve, support, or enable the object. It indicates that without the subject, the object cannot be realized or effectively attained, highlighting the importance of the subject in the context of the object.",
      "disambiguation_index": 0
    },
    "Predicate-prune_away": {
      "label": "prune away",
      "description": "The predicate 'prune away' indicates the action of removing or eliminating elements that are considered unnecessary, undesirable, or of lower quality from a larger set or system. In this context, the subject represents a method or approach that actively seeks to reduce complexity or improve efficiency by discarding the object, which consists of the specific elements being targeted for removal.",
      "disambiguation_index": 0
    },
    "Predicate-learnts_from": {
      "label": "learnts from",
      "description": "The predicate 'learnts from' indicates a relationship where the subject acquires knowledge, skills, or information from the object. This connection implies a process of learning or gaining insights, where the subject is the entity that is receiving or absorbing the content provided by the object, which serves as the source of that knowledge or information.",
      "disambiguation_index": 0
    },
    "Predicate-has_more_quality_rules_than": {
      "label": "has more quality rules than",
      "description": "The predicate 'has more quality rules than' establishes a comparative relationship between two entities, indicating that the subject possesses a greater number of quality rules in relation to the object. This suggests a measure of superiority or enhanced standards in quality assurance, where the subject is evaluated against the object based on the quantity of defined quality rules.",
      "disambiguation_index": 0
    },
    "Predicate-comes_second_ahead_of": {
      "label": "comes second ahead of",
      "description": "The predicate 'comes second ahead of' indicates a ranking or ordering relationship between the subject and the object, where the subject is positioned in a higher rank than the object, specifically in the second place. This implies that the subject is recognized or classified as being superior to the object in a certain context or criteria, but not the highest, which would be first.",
      "disambiguation_index": 0
    },
    "Predicate-might_be_a_result_of": {
      "label": "might be a result of",
      "description": "The predicate 'might be a result of' indicates a potential causal relationship between the subject and the object, suggesting that the subject could be influenced or caused by the object. It implies uncertainty or possibility rather than certainty, indicating that while the object may contribute to or explain the subject, it is not definitively the sole cause.",
      "disambiguation_index": 0
    },
    "Predicate-targets": {
      "label": "targets",
      "description": "The predicate 'targets' establishes a relationship where the subject is directed towards or aims at the object, indicating a focus or intended outcome. In this context, it signifies that the subject is associated with or seeks to engage with the object, which can represent a category, goal, or specific type of entity.",
      "disambiguation_index": 0
    },
    "Predicate-use_every_one_of": {
      "label": "use every one of",
      "description": "The predicate 'use every one of' indicates that the subject actively employs or utilizes each individual item or element within a specified collection or group represented by the object. This implies a comprehensive engagement with all components of the object, suggesting that none are excluded from the action performed by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-demand": {
      "label": "demand",
      "description": "The predicate 'demand' indicates a relationship where the subject requires or insists upon the object, suggesting that the presence or characteristics of the subject create a necessity or expectation for the object to be present or to be fulfilled.",
      "disambiguation_index": 0
    },
    "Predicate-demonstrates_a_tendency_towards": {
      "label": "demonstrates a tendency towards",
      "description": "The predicate 'demonstrates a tendency towards' indicates that the subject exhibits a consistent pattern or inclination in relation to the object. It suggests that there is a notable predisposition or trend associated with the subject that aligns with the characteristics or qualities represented by the object. This relationship implies that the subject is not merely associated with the object, but rather shows a significant and observable preference or direction towards it.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_result_of": {
      "label": "is a result of",
      "description": "The predicate 'is a result of' establishes a causal or consequential relationship between the subject and the object, indicating that the subject exists or occurs as a direct outcome of the processes, actions, or conditions represented by the object. It implies that the object serves as a contributing factor or influence that leads to the existence or state of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-would_increase_since": {
      "label": "would increase since",
      "description": "The predicate 'would increase since' indicates a causal relationship where the subject is expected to grow or expand as a direct result of the conditions or factors represented by the object. It implies that the subject's increase is contingent upon the existence or enhancement of the object, suggesting a dependency where the state or quantity of the subject is positively influenced by the characteristics or extent of the object.",
      "disambiguation_index": 0
    },
    "Predicate-grows": {
      "label": "grows",
      "description": "The predicate 'grows' indicates an increase or expansion in the quantity, size, or extent of the object as a result of the influence or characteristics of the subject. It suggests a dynamic relationship where the subject contributes to or facilitates the enhancement of the object over time.",
      "disambiguation_index": 0
    },
    "Predicate-mined_from": {
      "label": "mined from",
      "description": "The predicate 'mined from' indicates a source relationship where the subject is derived or extracted from the object. It implies that the subject has been obtained through a process of extraction or collection from the object, which serves as the origin or source material.",
      "disambiguation_index": 0
    },
    "Predicate-prefixes": {
      "label": "prefixes",
      "description": "The predicate 'prefixes' indicates a relationship where the subject is associated with or provides a set of initial elements or components that precede and modify the characteristics of the object. In this context, it suggests that the subject introduces or establishes foundational aspects that influence or define the nature of the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_distinguished_by": {
      "label": "are distinguished by",
      "description": "The predicate 'are distinguished by' indicates a relationship where the subject is characterized or identified through specific features, attributes, or criteria represented by the object. It implies that the object provides a basis for differentiating the subject from others, highlighting unique qualities or distinctions.",
      "disambiguation_index": 0
    },
    "Predicate-is_more_constraining_than": {
      "label": "is more constraining than",
      "description": "The predicate 'is more constraining than' establishes a comparative relationship between two entities, indicating that the subject imposes stricter limitations, requirements, or conditions than the object. This suggests that the subject allows for fewer possibilities or options in a given context compared to the object, thereby highlighting a hierarchy of constraints between the two.",
      "disambiguation_index": 0
    },
    "Predicate-is_lower_than": {
      "label": "is lower than",
      "description": "The predicate 'is lower than' establishes a comparative relationship between the subject and the object, indicating that the value or quantity represented by the subject is less than that represented by the object. This relationship implies a ranking or ordering where the subject is positioned at a lower level in comparison to the object.",
      "disambiguation_index": 0
    },
    "Predicate-illustrates_the_practical_meaning_of": {
      "label": "illustrates the practical meaning of",
      "description": "The predicate 'illustrates the practical meaning of' serves to establish a connection between a subject and an object by clarifying or exemplifying the significance or implications of the object in relation to the subject. It indicates that the subject provides insights, explanations, or representations that help to understand the practical applications or interpretations of the object, thereby enhancing comprehension of the concepts involved.",
      "disambiguation_index": 0
    },
    "Predicate-determines": {
      "label": "determines",
      "description": "The predicate 'determines' indicates a relationship where the subject exerts influence or control over the object, resulting in the establishment or specification of a particular state, value, or condition associated with the object. In this context, the subject is responsible for defining or influencing the characteristics or outcomes related to the object.",
      "disambiguation_index": 0
    },
    "Predicate-justified_by": {
      "label": "justified by",
      "description": "The predicate 'justified by' establishes a relationship where the subject is supported or validated by the object, indicating that the existence, significance, or value of the subject is derived from or confirmed through the object. This connection implies that the object provides a rationale or evidence that underpins the subject's status or characteristics.",
      "disambiguation_index": 0
    },
    "Predicate-turn_out_to_be": {
      "label": "turn out to be",
      "description": "The predicate 'turn out to be' indicates a revelation or conclusion about the subject that contrasts with prior assumptions or expectations. It connects the subject to the object by suggesting that, after consideration or investigation, the subject is identified or recognized as the object, often implying a change in understanding or perspective.",
      "disambiguation_index": 0
    },
    "Predicate-uses_(1)": {
      "label": "uses",
      "description": "The predicate 'uses' indicates an action or process in which the subject actively employs or utilizes the object in order to achieve a specific purpose or outcome. It establishes a functional relationship where the subject applies the object as a tool, method, or resource in a given context.",
      "disambiguation_index": 1
    },
    "Predicate-reduce": {
      "label": "reduce",
      "description": "The predicate 'reduce' indicates a relationship where the subject is involved in the process of making the object smaller, lesser, or more concise in some way. It implies a transformation or alteration that diminishes the quantity, size, or complexity of the object as a result of the action performed by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-used_inside": {
      "label": "used inside",
      "description": "The predicate 'used inside' indicates that the subject is an integral component or method that is implemented or applied within the context of the object. It suggests a functional relationship where the subject contributes to the processes, operations, or mechanisms of the object, enhancing its capabilities or performance.",
      "disambiguation_index": 0
    },
    "Predicate-affect": {
      "label": "affect",
      "description": "The predicate 'affect' denotes a relationship in which the subject has an influence or impact on the object. It implies that the subject causes a change, modification, or effect in the state, behavior, or characteristics of the object. This relationship can be direct or indirect, and it encompasses various forms of influence, whether positive, negative, or neutral.",
      "disambiguation_index": 0
    },
    "Predicate-affects": {
      "label": "affects",
      "description": "The predicate 'affects' denotes a relationship in which the subject exerts an influence or impact on the object, resulting in a change or modification in its state, condition, or characteristics. This connection implies that the subject has the capacity to alter, enhance, or diminish aspects of the object, thereby establishing a dynamic interaction between the two entities.",
      "disambiguation_index": 0
    },
    "Predicate-regard_to": {
      "label": "regard to",
      "description": "The predicate 'regard to' establishes a relationship between the subject and the object by indicating that the subject is considering, focusing on, or relating to the specific aspects or characteristics represented by the object. It implies a connection where the subject's actions, thoughts, or evaluations are influenced by or directed towards the object in question.",
      "disambiguation_index": 0
    },
    "Predicate-creates": {
      "label": "creates",
      "description": "The predicate 'creates' indicates an action performed by the subject that results in the formation or generation of the object. In this context, it signifies that the subject is responsible for bringing into existence or producing the object, which can be a new entity, concept, or variation derived from the subject.",
      "disambiguation_index": 0
    },
    "Predicate-evaluated_on": {
      "label": "evaluated on",
      "description": "The predicate 'evaluated on' signifies a relationship where the subject is assessed or analyzed in relation to the object. It indicates that the subject undergoes a process of evaluation, judgment, or measurement based on the criteria, standards, or context provided by the object. This connection implies that the subject's effectiveness, performance, or validity is being determined through the lens of the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_evaluated_on": {
      "label": "are evaluated on",
      "description": "The predicate 'are evaluated on' indicates a relationship where the subject is assessed or judged based on the criteria or standards represented by the object. It implies a process of measurement or analysis where the qualities, effectiveness, or performance of the subject are determined in relation to the object.",
      "disambiguation_index": 0
    },
    "Predicate-used_in": {
      "label": "used in",
      "description": "The predicate 'used in' indicates a functional relationship where the subject serves as a resource, tool, or context that facilitates or contributes to the process, activity, or concept represented by the object. It implies that the subject is actively involved in or plays a significant role in the execution or realization of the object.",
      "disambiguation_index": 0
    },
    "Predicate-can_handle": {
      "label": "can handle",
      "description": "The predicate 'can handle' indicates the capability or capacity of the subject to manage, process, or deal with the object effectively. It suggests that the subject possesses the necessary resources, skills, or attributes to engage with the object in a meaningful way.",
      "disambiguation_index": 0
    },
    "Predicate-use_as": {
      "label": "use as",
      "description": "The predicate 'use as' establishes a functional relationship between the subject and the object, indicating that the subject is employed or applied in a manner that serves the purpose or role defined by the object. In this context, the subject can be seen as a tool, method, or entity that is utilized to achieve the objectives or characteristics associated with the object.",
      "disambiguation_index": 0
    },
    "Predicate-learnt_by": {
      "label": "learnt by",
      "description": "The predicate 'learnt by' indicates a relationship where the subject has acquired knowledge, skills, or information through the influence or application of the object. In this context, the subject represents an entity that undergoes a learning process, while the object signifies the source or method through which this learning occurs.",
      "disambiguation_index": 0
    },
    "Predicate-applies_to": {
      "label": "applies to",
      "description": "The predicate 'applies to' establishes a relationship where the subject is relevant or pertinent to the object, indicating that the subject has a specific function, effect, or relevance in relation to the object. It suggests that the subject can be utilized, interpreted, or understood in the context of the object, thereby linking the two in a meaningful way.",
      "disambiguation_index": 0
    },
    "Predicate-is_relative_to": {
      "label": "is relative to",
      "description": "The predicate 'is relative to' establishes a contextual or comparative relationship between the subject and the object, indicating that the subject's value, characteristic, or significance is dependent on or associated with the object. It suggests that understanding the subject requires considering the object as a reference point or basis for comparison.",
      "disambiguation_index": 0
    },
    "Predicate-learnt": {
      "label": "learnt",
      "description": "The predicate 'learnt' indicates the process by which the subject acquires knowledge, skills, or information, resulting in the understanding or mastery of the object. In this context, it signifies that the subject has successfully processed and internalized a certain number of rules, demonstrating a learning outcome.",
      "disambiguation_index": 0
    },
    "Predicate-has_performance_of": {
      "label": "has performance of",
      "description": "The predicate 'has performance of' establishes a relationship between a subject and an object by indicating the level or quality of performance associated with the subject. In this context, the subject represents an entity or agent, while the object quantifies or qualifies the performance, often expressed as a percentage or a similar metric. This relationship allows for the assessment or comparison of the subject's effectiveness or efficiency in a given context.",
      "disambiguation_index": 0
    },
    "Predicate-fewer_than": {
      "label": "fewer than",
      "description": "The predicate 'fewer than' establishes a comparative relationship between the subject and the object, indicating that the quantity represented by the subject is less than the quantity represented by the object. It implies a numerical or measurable comparison where the subject is quantitatively inferior to the object in terms of count or amount.",
      "disambiguation_index": 0
    },
    "Predicate-does_not_miss": {
      "label": "does not miss",
      "description": "The predicate 'does not miss' indicates that the subject consistently achieves or retains the object without failure or oversight. It implies a level of attentiveness or capability that ensures the subject successfully engages with or adheres to the object, which can represent standards, opportunities, or specific elements of importance.",
      "disambiguation_index": 0
    },
    "Predicate-increases_as": {
      "label": "increases as",
      "description": "The predicate 'increases as' indicates a positive correlation between the subject and the object, suggesting that as the subject experiences an increase, the object simultaneously experiences a corresponding change, typically in the opposite direction. This relationship implies that the two elements are interconnected, where the rise in the subject's value leads to a decrease or worsening in the object's condition.",
      "disambiguation_index": 0
    },
    "Predicate-fails_to_discover": {
      "label": "fails to discover",
      "description": "The predicate 'fails to discover' indicates a lack of success or inability of the subject to identify, recognize, or uncover the object. In this context, it suggests that the subject, which can be an entity or agent, is expected to find or realize something specific, represented by the object, but does not achieve this outcome. This failure can imply various reasons such as limitations in capability, lack of information, or ineffective methods.",
      "disambiguation_index": 0
    },
    "Predicate-aims_to_improve": {
      "label": "aims to improve",
      "description": "The predicate 'aims to improve' indicates a goal or intention associated with the subject, suggesting that the subject is actively seeking to enhance or elevate the quality, efficiency, or effectiveness of the object. It establishes a directional relationship where the subject's actions or strategies are focused on achieving a better state or outcome for the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_to_improve": {
      "label": "is to improve",
      "description": "The predicate 'is to improve' establishes a purpose or intention between the subject and the object, indicating that the subject is aimed at enhancing or increasing the quality, efficiency, or effectiveness of the object. It suggests a directional relationship where the subject's action or goal is focused on achieving a better state or condition for the object.",
      "disambiguation_index": 0
    },
    "Predicate-does_not_uniformly_increase_in_effectiveness_with": {
      "label": "does not uniformly increase in effectiveness with",
      "description": "The predicate 'does not uniformly increase in effectiveness with' indicates that the relationship between the subject and the object is non-linear or inconsistent. Specifically, it suggests that as the object (e.g., rule quality) changes, the effectiveness of the subject (e.g., heuristic pruning) does not consistently improve or degrade in a predictable manner. Instead, the effectiveness may vary at different levels of the object, implying that there are thresholds, diminishing returns, or other factors that influence the effectiveness in a complex way.",
      "disambiguation_index": 0
    },
    "Predicate-does_not_increase_in_effectiveness_with": {
      "label": "does not increase in effectiveness with",
      "description": "The predicate 'does not increase in effectiveness with' indicates a relationship where the subject's performance, utility, or impact remains unchanged or unaffected when considering the object. It suggests that there is no positive correlation or enhancement in the subject's effectiveness as the object varies or is introduced, implying that the object does not contribute to improving the subject's outcomes.",
      "disambiguation_index": 0
    },
    "Predicate-is_used_for_learning_rules_about": {
      "label": "is used for learning rules about",
      "description": "The predicate 'is used for learning rules about' establishes a relationship where the subject serves as a resource or tool that facilitates the acquisition of knowledge or understanding regarding the object. In this context, the subject provides the necessary information or framework that enables the identification, formulation, or comprehension of rules related to the object, which is typically a specific concept, category, or principle.",
      "disambiguation_index": 0
    },
    "Predicate-could_harm_the_quality_of": {
      "label": "could harm the quality of",
      "description": "The predicate 'could harm the quality of' indicates a potential negative impact or detrimental effect that the subject may have on the object. It suggests that the subject possesses characteristics, actions, or conditions that could lead to a decrease in the effectiveness, reliability, or overall standard of the object, thereby implying a relationship where the subject's influence is harmful or adverse.",
      "disambiguation_index": 0
    },
    "Predicate-arises_from": {
      "label": "arises from",
      "description": "The predicate 'arises from' indicates a causal or foundational relationship between the subject and the object, suggesting that the subject is a result or product of the processes, influences, or conditions represented by the object. It implies that the existence or characteristics of the subject can be traced back to the object, establishing a link where the object serves as a source or origin for the subject.",
      "disambiguation_index": 0
    },
    "Predicate-extracted_from": {
      "label": "extracted from",
      "description": "The predicate 'extracted from' indicates a relationship where the subject is derived or obtained from the object. It signifies that the subject is a result of a process that takes information, data, or features from the object, which serves as the source or origin. This connection implies a transformation or selection process that leads to the formation of the subject based on the characteristics or elements present in the object.",
      "disambiguation_index": 0
    },
    "Predicate-customised_for": {
      "label": "customised for",
      "description": "The predicate 'customised for' indicates that the subject has been specifically tailored or modified to meet the needs, preferences, or requirements of the object. It implies a deliberate adaptation or personalization process that aligns the subject with the characteristics or expectations associated with the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_related_to": {
      "label": "are related to",
      "description": "The predicate 'are related to' establishes a connection or association between the subject and the object, indicating that there is a relevant link or relationship that exists between the two entities. This relationship can encompass various forms of connections, such as causal, functional, or contextual ties, and serves to highlight how the subject is connected to the object within the context of the knowledge graph.",
      "disambiguation_index": 0
    },
    "Predicate-are_neighbours_of": {
      "label": "are neighbours of",
      "description": "The predicate 'are neighbours of' establishes a relationship between two entities, indicating that they are in close proximity or directly connected within a given context, such as a knowledge graph. This connection suggests that the entities share a relevant association or interaction, making them significant to one another in terms of their attributes, characteristics, or roles.",
      "disambiguation_index": 0
    },
    "Predicate-are_close_neighbours_of": {
      "label": "are close neighbours of",
      "description": "The predicate 'are close neighbours of' indicates a spatial or relational proximity between the subject and the object, suggesting that the entities in the subject share a direct or immediate connection with the entities in the object. This connection may imply physical closeness, similar characteristics, or a direct relationship within a given context, highlighting the significance of their association in a network or a knowledge graph.",
      "disambiguation_index": 0
    },
    "Predicate-are_built_based_on": {
      "label": "are built based on",
      "description": "The predicate 'are built based on' indicates that the subject is constructed or developed with reference to the object, suggesting that the object serves as a foundational element, guideline, or source of inspiration for the creation or formulation of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-presenting_for": {
      "label": "presenting for",
      "description": "The predicate 'presenting for' indicates a relationship where the subject is showcasing, demonstrating, or providing information about the object. It implies that the subject is actively involved in the act of presenting, and the object represents the focus or topic of that presentation. This connection suggests a communicative or illustrative action where the subject aims to convey knowledge, findings, or insights related to the object.",
      "disambiguation_index": 0
    },
    "Predicate-discovered_in": {
      "label": "discovered in",
      "description": "The predicate 'discovered in' indicates that the subject was found or identified within the context or setting of the object. It implies a relationship where the subject's existence, characteristics, or significance was revealed or made known through the processes, observations, or activities associated with the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_discovered_in": {
      "label": "are discovered in",
      "description": "The predicate 'are discovered in' indicates a relationship where the subject is found or identified within the context or setting of the object. It suggests that the subject exists or becomes known through the processes, observations, or analyses that take place in the object, highlighting a connection between the two entities where the subject's presence or characteristics are revealed through the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_shown_along_with": {
      "label": "is shown along with",
      "description": "The predicate 'is shown along with' indicates a relationship where the subject is presented in conjunction with the object, suggesting that both elements are being displayed or considered together, often to provide context, comparison, or additional information relevant to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-for_which_we_have": {
      "label": "for which we have",
      "description": "The predicate 'for which we have' establishes a relationship between the subject and the object by indicating that the subject possesses or is associated with the object in some capacity. It implies that there exists a certain quantity or quality of the subject that corresponds to the presence or existence of the object, suggesting a connection or relevance between them.",
      "disambiguation_index": 0
    },
    "Predicate-are_reported": {
      "label": "are reported",
      "description": "The predicate 'are reported' indicates that the subject is being communicated or conveyed in some form, typically through a statement, document, or study, to an audience or a body of knowledge represented by the object. It suggests that the information about the subject has been formally presented or documented, often implying a level of authority or credibility in the reporting process.",
      "disambiguation_index": 0
    },
    "Predicate-sensitivity_to": {
      "label": "sensitivity to",
      "description": "The predicate 'sensitivity to' indicates a relationship where the subject exhibits a degree of awareness, responsiveness, or reaction to the characteristics or properties represented by the object. It suggests that the subject is influenced by, or takes into account, the specific aspects denoted by the object in its processes, behaviors, or decision-making.",
      "disambiguation_index": 0
    },
    "Predicate-discovered_by": {
      "label": "discovered by",
      "description": "The predicate 'discovered by' indicates a relationship where the subject is an entity or concept that has been identified, recognized, or brought to attention through the actions or efforts of the object. In this context, the object represents the agents or entities responsible for the discovery, highlighting their role in the process of uncovering or revealing the subject.",
      "disambiguation_index": 0
    },
    "Predicate-grows_exponentially_with": {
      "label": "grows exponentially with",
      "description": "The predicate 'grows exponentially with' indicates a relationship where the subject increases at an exponential rate in response to changes in the object. This suggests that as the value or quantity of the object increases, the subject's value escalates rapidly, often doubling or increasing by a constant factor over equal intervals. This relationship highlights a significant and accelerating growth pattern, emphasizing the impact of the object on the subject's expansion.",
      "disambiguation_index": 0
    },
    "Predicate-imposes_over": {
      "label": "imposes over",
      "description": "The predicate 'imposes over' indicates a relationship where the subject exerts a controlling or governing influence on the object, suggesting that the object is subject to the conditions, limitations, or requirements established by the subject. This relationship often implies a hierarchical or regulatory dynamic, where the subject's characteristics or rules affect the nature or behavior of the object.",
      "disambiguation_index": 0
    },
    "Predicate-imposes": {
      "label": "imposes",
      "description": "The predicate 'imposes' indicates a relationship where the subject exerts a requirement, influence, or obligation on the object, resulting in the object being affected or constrained by the subject's characteristics or conditions.",
      "disambiguation_index": 0
    },
    "Predicate-aggregating": {
      "label": "aggregating",
      "description": "The predicate 'aggregating' denotes the action of combining or collecting multiple elements, components, or data points into a single cohesive entity or set. In the context of the subject and object, it signifies that the subject is involved in the process of bringing together various aspects, rules, or items represented by the object, thereby creating a unified whole that reflects the characteristics or properties of the individual components.",
      "disambiguation_index": 0
    },
    "Predicate-remains_for": {
      "label": "remains for",
      "description": "The predicate 'remains for' indicates a continued existence or availability of the subject in relation to the object. It suggests that the subject is still relevant, applicable, or accessible concerning the object, implying a potential or ongoing connection between the two.",
      "disambiguation_index": 0
    },
    "Predicate-improves": {
      "label": "improves",
      "description": "The predicate 'improves' indicates a positive enhancement or advancement of the qualities or characteristics represented by the object, as influenced by the subject. It suggests that the subject contributes to making the object better, more effective, or more beneficial in some way.",
      "disambiguation_index": 0
    },
    "Predicate-to_investigate_in": {
      "label": "to investigate in",
      "description": "The predicate 'to investigate in' denotes the action of examining, exploring, or analyzing a particular subject or area of interest, which is represented by the object. It implies a systematic approach to understanding or gaining insights into the object, often with the intention of uncovering new information, validating hypotheses, or identifying potential applications. The subject is the entity or concept that is undertaking this examination, indicating a proactive engagement with the object.",
      "disambiguation_index": 0
    },
    "Predicate-validates": {
      "label": "validates",
      "description": "The predicate 'validates' indicates that the subject performs a function or action that confirms the correctness, accuracy, or compliance of the object with certain standards or criteria. In this context, it suggests that the subject is assessing or verifying the object to ensure it meets predefined requirements or specifications.",
      "disambiguation_index": 0
    },
    "Predicate-describe": {
      "label": "describe",
      "description": "The predicate 'describe' serves to establish a relationship where the subject provides an explanation, representation, or characterization of the object. In this context, the subject conveys information or details that illuminate the nature, properties, or significance of the object, thereby enhancing understanding or clarity regarding the object in question.",
      "disambiguation_index": 0
    },
    "Predicate-enhanced_with": {
      "label": "enhanced with",
      "description": "The predicate 'enhanced with' indicates that the subject is improved or augmented by the addition of the object, suggesting a relationship where the object provides additional features, qualities, or specifications that contribute to the overall functionality or characteristics of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-reduces_to": {
      "label": "reduces to",
      "description": "The predicate 'reduces to' indicates a relationship where the subject can be simplified, transformed, or analyzed in terms of the object. It suggests that the complexities or challenges represented by the subject can be addressed or understood through the framework or concepts represented by the object. This implies a hierarchical or foundational connection, where the object serves as a more fundamental or manageable aspect of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_reduced_to": {
      "label": "is reduced to",
      "description": "The predicate 'is reduced to' indicates a relationship where the subject is simplified or transformed into the object, suggesting that the complexities or components of the subject can be understood or represented in terms of the object. This implies that the object encapsulates the essential aspects or core principles of the subject, allowing for a more straightforward interpretation or analysis.",
      "disambiguation_index": 0
    },
    "Predicate-introduce_(1)": {
      "label": "introduce",
      "description": "The predicate 'introduce' signifies the action of presenting or bringing something new into a context or discussion. In the context of the subject and object, it indicates that the subject is actively making the object known or available, often for the first time or in a new capacity. This can involve explaining, demonstrating, or integrating the object into a broader framework or system.",
      "disambiguation_index": 1
    },
    "Predicate-augment": {
      "label": "augment",
      "description": "The predicate 'augment' indicates an action where the subject enhances, increases, or improves the object, suggesting a relationship in which the subject contributes additional value, features, or qualities to the object.",
      "disambiguation_index": 0
    },
    "Predicate-introduces": {
      "label": "introduces",
      "description": "The predicate 'introduces' signifies a relationship where the subject presents, brings forth, or makes known the object. It indicates that the subject is the source or initiator of the object, which is typically a concept, idea, or set of criteria that is being established or highlighted. This connection implies a transition from a state of non-awareness to awareness regarding the object, often aiming to enhance understanding or application within a specific context.",
      "disambiguation_index": 0
    },
    "Predicate-selected_for": {
      "label": "selected for",
      "description": "The predicate 'selected for' indicates a relationship where the subject is chosen or identified based on specific criteria or attributes represented by the object. It implies a process of evaluation or preference, where the subject is deemed suitable or desirable in relation to the qualities or characteristics denoted by the object.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_used_to_complete": {
      "label": "can be used to complete",
      "description": "The predicate 'can be used to complete' indicates a functional relationship where the subject possesses the capability or utility to enhance, finalize, or fulfill the requirements of the object. It suggests that the subject serves a supportive or contributory role in achieving a more comprehensive understanding or representation of the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_triggered_by": {
      "label": "is triggered by",
      "description": "The predicate 'is triggered by' establishes a causal or initiating relationship between the subject and the object, indicating that the subject's occurrence, state, or action is a direct result of the influence or action of the object. In this context, the subject is affected or activated in some way by the object, suggesting a dependency where the presence or behavior of the object leads to the manifestation of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-generate_(1)": {
      "label": "generate",
      "description": "The predicate 'generate' indicates the action of producing or creating something as a result of a process or transformation. In the context of the subject and object, it signifies that the subject is responsible for the creation or formulation of the object, leading to the emergence of new entities, concepts, or outputs.",
      "disambiguation_index": 1
    },
    "Predicate-enables_the_acquisition_of": {
      "label": "enables the acquisition of",
      "description": "The predicate 'enables the acquisition of' indicates that the subject provides the means, tools, or conditions necessary for the object to be obtained or learned. It suggests a facilitative relationship where the subject plays a crucial role in allowing the object to be gathered, understood, or accessed.",
      "disambiguation_index": 0
    },
    "Predicate-computed_using": {
      "label": "computed using",
      "description": "The predicate 'computed using' indicates a relationship where the subject is derived or calculated through the application of the methods, techniques, or processes specified in the object. It implies that the object provides the necessary means or tools to achieve the computation of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-allows_us_to_mine": {
      "label": "allows us to mine",
      "description": "The predicate 'allows us to mine' indicates that the subject provides the capability or means to extract or derive valuable information, insights, or patterns from the object. In this context, it suggests that the subject facilitates the process of analyzing or processing the object in a way that enables the discovery of useful elements or data.",
      "disambiguation_index": 0
    },
    "Predicate-are_computed_using": {
      "label": "are computed using",
      "description": "The predicate 'are computed using' establishes a relationship where the subject is the entity or concept that is being calculated or derived, while the object represents the methods, tools, or processes employed to perform that computation. This indicates that the subject relies on the object for its calculation, highlighting the dependency of the subject on the specified computational techniques.",
      "disambiguation_index": 0
    },
    "Predicate-can_mine": {
      "label": "can mine",
      "description": "The predicate 'can mine' indicates the ability or capacity of the subject to extract or obtain information, resources, or insights from the object. In this context, it suggests that the subject possesses the necessary skills, tools, or permissions to engage in the process of mining, which typically involves analyzing, processing, or retrieving data or rules from the specified object.",
      "disambiguation_index": 0
    },
    "Predicate-are_mined_from": {
      "label": "are mined from",
      "description": "The predicate 'are mined from' indicates a relationship where the subject derives or extracts information, data, or resources from the object. It suggests a process of obtaining valuable insights or components from a source, which is typically characterized by its richness or relevance to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-determine": {
      "label": "determine",
      "description": "The predicate 'determine' signifies a relationship in which the subject exerts influence or control over the object, establishing or defining its characteristics, boundaries, or conditions. In this context, the subject plays a crucial role in shaping the nature or extent of the object, indicating that the object is a result or outcome of the factors or principles represented by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-acquired_by": {
      "label": "acquired by",
      "description": "The predicate 'acquired by' indicates a relationship where the subject is the recipient or beneficiary of the process of obtaining or gaining something represented by the object. It implies that the subject undergoes a transformation or enhancement through the acquisition of the object, which is typically a form of knowledge, skill, or resource that can be obtained or learned.",
      "disambiguation_index": 0
    },
    "Predicate-can_be_acquired_from": {
      "label": "can be acquired from",
      "description": "The predicate 'can be acquired from' indicates a relationship where the subject is capable of being obtained or learned through the means or source specified by the object. It implies a transfer of information, skills, or understanding from the object to the subject, suggesting that the subject relies on the object as a resource or foundation for its development or existence.",
      "disambiguation_index": 0
    },
    "Predicate-is_designed_for": {
      "label": "is designed for",
      "description": "The predicate 'is designed for' establishes a relationship between a subject and an object, indicating that the subject has been specifically created, developed, or tailored to fulfill a particular purpose or to address a specific need represented by the object. This connection implies that the subject's features, functionalities, or characteristics are aligned with the requirements or challenges posed by the object.",
      "disambiguation_index": 0
    },
    "Predicate-adds": {
      "label": "adds",
      "description": "The predicate 'adds' signifies the action of introducing or incorporating something new into a situation or context, thereby enhancing or augmenting the existing elements. It establishes a relationship where the subject contributes additional qualities, features, or complexities to the object, resulting in a transformation or expansion of the overall scenario.",
      "disambiguation_index": 0
    },
    "Predicate-should_scale": {
      "label": "should scale",
      "description": "The predicate 'should scale' indicates that the subject possesses the capability or quality to effectively adapt or perform under varying conditions or sizes, as defined by the object. It implies that the subject is expected to maintain or improve its performance when faced with increased demands or constraints, ensuring that it remains effective regardless of the scale of the situation.",
      "disambiguation_index": 0
    },
    "Predicate-are_more_certain_than": {
      "label": "are more certain than",
      "description": "The predicate 'are more certain than' establishes a comparative relationship between the subject and the object, indicating that the subject possesses a higher degree of certainty or confidence in its validity, reliability, or correctness compared to the object. This comparison implies a qualitative assessment where the subject is viewed as more definitive or assured in its characteristics or outcomes relative to the object.",
      "disambiguation_index": 0
    },
    "Predicate-establishes": {
      "label": "establishes",
      "description": "The predicate 'establishes' indicates that the subject is creating, initiating, or formalizing a connection, framework, or understanding regarding the object. It implies a process of setting up or confirming the existence or validity of the object in relation to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-will_validate": {
      "label": "will validate",
      "description": "The predicate 'will validate' indicates a future action or process in which the subject is expected to confirm, support, or establish the truth, accuracy, or legitimacy of the object. It suggests a forthcoming assessment or verification that will affirm the qualities or characteristics of the object in question.",
      "disambiguation_index": 0
    },
    "Predicate-learn_with": {
      "label": "learn with",
      "description": "The predicate 'learn with' indicates a collaborative or interactive process where the subject engages in acquiring knowledge or skills alongside the object. It suggests a relationship where the subject utilizes the object as a resource, tool, or partner in the learning experience, facilitating understanding and mastery of concepts or tasks.",
      "disambiguation_index": 0
    },
    "Predicate-extend_the_expressivity_of": {
      "label": "extend the expressivity of",
      "description": "The predicate 'extend the expressivity of' indicates a relationship where the subject enhances or broadens the range of meanings, interpretations, or representations associated with the object. It suggests that the subject contributes to a greater depth or variety in the ways the object can be understood or utilized, thereby enriching the overall expressive potential of the object.",
      "disambiguation_index": 0
    },
    "Predicate-validated_via": {
      "label": "validated via",
      "description": "The predicate 'validated via' indicates a process or method through which the subject is confirmed, verified, or assessed in relation to the object. It establishes a connection where the subject undergoes scrutiny or examination by the means specified in the object, ensuring that the subject meets certain standards or criteria.",
      "disambiguation_index": 0
    },
    "Predicate-will_be_validated_via": {
      "label": "will be validated via",
      "description": "The predicate 'will be validated via' indicates a process or method through which the subject is confirmed, assessed, or substantiated by the object. It establishes a relationship where the subject undergoes a validation process that is facilitated or conducted through the means specified by the object, suggesting a reliance on that object for verification or approval.",
      "disambiguation_index": 0
    },
    "Predicate-redesign_for": {
      "label": "redesign for",
      "description": "The predicate 'redesign for' indicates a process in which a subject is modified or restructured to better suit or accommodate the requirements, functionalities, or characteristics of an object. This implies that the subject undergoes changes to enhance its compatibility, efficiency, or performance in relation to the object it is being redesigned for.",
      "disambiguation_index": 0
    },
    "Predicate-is_proposed_to_redesign_for": {
      "label": "is proposed to redesign for",
      "description": "The predicate 'is proposed to redesign for' indicates a suggestion or recommendation to modify or improve the subject in order to better align it with the requirements or characteristics of the object. This implies that the subject, which can be a system, algorithm, or process, is being considered for a redesign that aims to enhance its functionality, efficiency, or compatibility with the specified object.",
      "disambiguation_index": 0
    },
    "Predicate-utilizes": {
      "label": "utilizes",
      "description": "The predicate 'utilizes' indicates that the subject employs or makes use of the object as a means to achieve a specific purpose or function. It establishes a relationship where the subject actively incorporates the object into its process or operation, highlighting the object's role as a resource or tool that enhances the subject's capabilities.",
      "disambiguation_index": 0
    },
    "Predicate-is_implemented_by": {
      "label": "is implemented by",
      "description": "The predicate 'is implemented by' establishes a relationship where the subject represents a system, concept, or framework that is realized or executed through the means described by the object. It indicates that the object provides the methodology, technique, or approach that enables the functioning or operation of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-enables": {
      "label": "enables",
      "description": "The predicate 'enables' indicates a facilitative relationship where the subject provides the means, capability, or opportunity for the action or process described by the object to occur. It suggests that the subject is instrumental in making the object possible or more achievable.",
      "disambiguation_index": 0
    },
    "Predicate-evaluate": {
      "label": "evaluate",
      "description": "The predicate 'evaluate' signifies an assessment or analysis process where the subject examines, judges, or appraises the object, which typically represents a concept, method, or system. This relationship indicates that the subject is actively engaged in determining the effectiveness, validity, or quality of the object in a specific context.",
      "disambiguation_index": 0
    },
    "Predicate-serves_as_input_for_learning_inverse_open_path_rules": {
      "label": "serves as input for learning inverse open path rules",
      "description": "The predicate 'serves as input for learning inverse open path rules' indicates that the subject, which is an open path within a knowledge graph (KG), provides essential data or information that is utilized in the process of deriving or understanding the rules that govern the inverse relationships of such paths within the specified knowledge graph, denoted as KG K.",
      "disambiguation_index": 0
    },
    "Predicate-serves_as_input_for": {
      "label": "serves as input for",
      "description": "The predicate 'serves as input for' indicates a relationship where the subject provides data, information, or resources that are utilized by the object in a process, analysis, or operation. This connection implies that the object relies on the subject to function effectively, often in contexts such as computational methods, algorithms, or decision-making processes.",
      "disambiguation_index": 0
    },
    "Predicate-serves_as_the_input_data_structure_for": {
      "label": "serves as the input data structure for",
      "description": "The predicate 'serves as the input data structure for' indicates that the subject provides the necessary framework or organization of data that is utilized by the object. This relationship implies that the subject is structured in a way that is compatible with the requirements of the object, enabling the object to process or analyze the data effectively.",
      "disambiguation_index": 0
    },
    "Predicate-serves_as_the_input_data_source_for_learning": {
      "label": "serves as the input data source for learning",
      "description": "This predicate indicates that the subject provides the necessary data or information that is utilized in a learning process, with the object representing the specific type of data or information being sourced. It establishes a functional relationship where the subject acts as a foundational element that supports or enables learning through the specified data.",
      "disambiguation_index": 0
    },
    "Predicate-serves_as_the_input_data_source_for": {
      "label": "serves as the input data source for",
      "description": "The predicate 'serves as the input data source for' indicates that the subject provides the necessary data or information that is utilized by the object. This relationship highlights the role of the subject as a foundational element that supplies input, which is essential for the functioning, analysis, or processing of the object. In this context, the subject is positioned as a source of data that feeds into the object, enabling it to operate or fulfill its purpose.",
      "disambiguation_index": 0
    },
    "Predicate-describes_the_learning_process_of_inverse_open_path_rules_from_a_KG_K": {
      "label": "describes the learning process of inverse open path rules from a KG K",
      "description": "The predicate 'describes the learning process of inverse open path rules from a KG K' establishes a relationship where the subject provides an explanation or account of how inverse open path rules are learned specifically from a knowledge graph denoted as K. This indicates that the subject contains information or analysis relevant to the methodologies or techniques involved in acquiring these rules, which are derived from the structure and content of the knowledge graph K.",
      "disambiguation_index": 0
    },
    "Predicate-serves_as_input_for_learning": {
      "label": "serves as input for learning",
      "description": "The predicate 'serves as input for learning' indicates that the subject provides essential data or information that is utilized in the process of acquiring knowledge or skills, resulting in the formation of the object, which represents the outcomes or conclusions derived from that learning process.",
      "disambiguation_index": 0
    },
    "Predicate-is_used_to_discover_and_learn_rules_from": {
      "label": "is used to discover and learn rules from",
      "description": "The predicate 'is used to discover and learn rules from' indicates a functional relationship where the subject employs a method, technique, or process to extract, identify, or formulate rules based on the information or data represented by the object. This implies that the subject is actively engaged in a learning or analytical process that utilizes the object as a source or basis for deriving rules, patterns, or insights.",
      "disambiguation_index": 0
    },
    "Predicate-details": {
      "label": "details",
      "description": "The predicate 'details' serves to establish a relationship where the subject provides specific information, explanations, or elaborations about the object. It indicates that the subject contains or presents a thorough account or description of the object, enhancing the reader's understanding of the latter.",
      "disambiguation_index": 0
    },
    "Predicate-is_a_method_for_learning_rules_from_knowledge_graphs": {
      "label": "is a method for learning rules from knowledge graphs",
      "description": "This predicate establishes a relationship where the subject, which represents a category or type of methods related to knowledge graphs, is defined as a specific approach or technique for deriving or extracting rules from knowledge graphs, with the object serving as an example or instance of such a method.",
      "disambiguation_index": 0
    },
    "Predicate-is_implemented_in": {
      "label": "is implemented in",
      "description": "The predicate 'is implemented in' establishes a relationship where the subject, typically a method, algorithm, or model, is realized or executed within the context of the object, which is usually a system, framework, or platform. This indicates that the functionality or logic of the subject is integrated into the object, allowing the object to utilize or perform the operations defined by the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_an_adaptation_of": {
      "label": "is an adaptation of",
      "description": "The predicate 'is an adaptation of' establishes a relationship between a subject and an object where the subject represents a modified or evolved version of the object. This indicates that the subject has been derived from the object through changes, improvements, or alterations, while still retaining some core principles or functionalities of the original object.",
      "disambiguation_index": 0
    },
    "Predicate-solves": {
      "label": "solves",
      "description": "The predicate 'solves' indicates a relationship where the subject, typically an algorithm, method, or system, successfully addresses or resolves the challenges or requirements posed by the object, which is a specific problem or task. This connection implies that the subject provides a solution or effective approach to achieving the objectives defined by the object.",
      "disambiguation_index": 0
    },
    "Predicate-enhances": {
      "label": "enhances",
      "description": "The predicate 'enhances' indicates a relationship where the subject contributes positively to the improvement, development, or effectiveness of the object. It suggests that the subject provides additional value, capabilities, or quality that elevates the state or performance of the object in some way.",
      "disambiguation_index": 0
    },
    "Predicate-facilitates_the_extraction_and_evaluation_of_rules": {
      "label": "facilitates the extraction and evaluation of rules",
      "description": "The predicate 'facilitates the extraction and evaluation of rules' indicates a supportive role played by the subject in enabling the process of identifying and assessing rules within the context of the object. It suggests that the subject provides mechanisms, tools, or methodologies that aid in both the discovery of rules and the subsequent analysis of their effectiveness or validity, thereby enhancing the overall understanding and application of the object.",
      "disambiguation_index": 0
    },
    "Predicate-facilitates": {
      "label": "facilitates",
      "description": "The predicate 'facilitates' indicates that the subject provides support, assistance, or a conducive environment for the process or activity described by the object. It implies that the subject plays a role in making the object easier to achieve or more effective, thereby enhancing the overall experience or outcome related to the object.",
      "disambiguation_index": 0
    },
    "Predicate-is_generated_from": {
      "label": "is generated from",
      "description": "The predicate 'is generated from' indicates a causal or foundational relationship between the subject and the object, where the subject is produced, created, or derived as a result of the processes, principles, or elements represented by the object. It implies that the object serves as a source or basis that contributes to the formation or existence of the subject.",
      "disambiguation_index": 0
    },
    "Predicate-are_generated_by": {
      "label": "are generated by",
      "description": "The predicate 'are generated by' indicates a causal or productive relationship where the subject is the result of a process or mechanism initiated or executed by the object. It implies that the object plays a crucial role in the creation or formulation of the subject, suggesting a directional flow of influence from the object to the subject.",
      "disambiguation_index": 0
    },
    "Predicate-is_generated_by": {
      "label": "is generated by",
      "description": "The predicate 'is generated by' establishes a causal or functional relationship between the subject and the object, indicating that the subject is the result or outcome of a process or mechanism represented by the object. In this context, the subject is produced or created through the application or influence of the object.",
      "disambiguation_index": 0
    },
    "Predicate-analyzes": {
      "label": "analyzes",
      "description": "The predicate 'analyzes' denotes an action where the subject systematically examines or studies the object in order to understand its structure, components, or underlying principles. In this context, it implies a detailed investigation or assessment of the object, which is often aimed at deriving insights, conclusions, or knowledge from the analysis.",
      "disambiguation_index": 0
    },
    "Predicate-analyze_and_evaluate": {
      "label": "analyze and evaluate",
      "description": "The predicate 'analyze and evaluate' signifies a process in which the subject systematically examines and assesses the characteristics, performance, or effectiveness of the object. This involves breaking down the object into its components to understand its structure and function, followed by a judgment or appraisal based on specific criteria or standards. In the context of the example, it implies that the KG rule-learning methods are engaged in a critical examination and assessment of each knowledge graph (KG) to derive insights or conclusions.",
      "disambiguation_index": 0
    },
    "Predicate-learns_shapes_from": {
      "label": "learns shapes from",
      "description": "The predicate 'learns shapes from' indicates a process in which the subject acquires knowledge or understanding of various forms, structures, or patterns represented by the object. In this context, the subject engages with the object to extract or derive information that helps in recognizing, categorizing, or interpreting shapes, suggesting a relationship where the object serves as a source of learning or information.",
      "disambiguation_index": 0
    },
    "Predicate-is_used_to_discover_rules_from": {
      "label": "is used to discover rules from",
      "description": "This predicate indicates that the subject is a method, tool, or process that facilitates the extraction or identification of rules or patterns from the object, which is typically a dataset, knowledge graph, or similar structured information source. The relationship highlights the functionality of the subject in analyzing the object to derive meaningful insights or guidelines.",
      "disambiguation_index": 0
    },
    "Predicate-are_evaluated_using": {
      "label": "are evaluated using",
      "description": "The predicate 'are evaluated using' indicates a process in which the subject undergoes assessment or analysis through the application of the methods, criteria, or tools represented by the object. It establishes a relationship where the subject is subjected to a form of scrutiny or measurement, facilitated by the object, which serves as the means or framework for this evaluation.",
      "disambiguation_index": 0
    },
    "Predicate-are_analyzed_using": {
      "label": "are analyzed using",
      "description": "The predicate 'are analyzed using' indicates a process in which the subject undergoes examination or evaluation through the application of the methods, tools, or frameworks represented by the object. It suggests that the subject is being scrutinized or interpreted with the aid of the object, which serves as a means or technique for gaining insights or understanding.",
      "disambiguation_index": 0
    },
    "Predicate-are_extracted_from": {
      "label": "are extracted from",
      "description": "The predicate 'are extracted from' indicates a relationship where the subject is derived or obtained from the object. It implies a process of retrieval or derivation, suggesting that the subject is a result of analyzing, processing, or utilizing the information or elements contained within the object.",
      "disambiguation_index": 0
    },
    "Predicate-utilize": {
      "label": "utilize",
      "description": "The predicate 'utilize' indicates that the subject employs or makes use of the object in a practical or effective manner. It signifies an active engagement where the subject applies the object to achieve a specific purpose or outcome.",
      "disambiguation_index": 0
    },
    "Predicate-is_utilized_to_address": {
      "label": "is utilized to address",
      "description": "The predicate 'is utilized to address' indicates that the subject serves a purpose or function in relation to the object, suggesting that the subject is employed or applied in order to tackle, solve, or manage issues, challenges, or requirements associated with the object.",
      "disambiguation_index": 0
    },
    "Predicate-are_used_to_generate": {
      "label": "are used to generate",
      "description": "The predicate 'are used to generate' indicates a functional relationship where the subject serves as a source or input that facilitates the creation or production of the object. It implies that the subject provides the necessary components, data, or context that enables the formation or derivation of the object, which is typically a result, output, or outcome of a process.",
      "disambiguation_index": 0
    },
    "Predicate-addresses": {
      "label": "addresses",
      "description": "The predicate 'addresses' indicates that the subject is concerned with, tackles, or provides a solution to the issue or topic represented by the object. It implies a relationship where the subject engages with the object in a meaningful way, often aiming to resolve, clarify, or discuss the challenges or questions posed by the object.",
      "disambiguation_index": 0
    },
    "skos:broader": {
      "label": "has a broader term",
      "description": "The predicate 'has a broader term' establishes a hierarchical relationship between the subject and the object, indicating that the subject encompasses a wider category or concept that includes the object. This relationship is often used in categorization and classification systems, where the subject represents a more general or inclusive term, while the object represents a more specific or narrower term within that broader category.",
      "disambiguation_index": 0
    }
  }
}