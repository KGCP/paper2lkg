{
  "iri": "Paper-Building_An_Open_Source_Linux_Computing_System_On_RISC-V",
  "title": "Building An Open Source Linux Computing System On RISC-V",
  "authors": [
    "M. Numan Ince",
    "Joseph Ledet",
    "Melih Gunay"
  ],
  "keywords": [
    "Open Instruction Set Architecture",
    "RISC-V",
    "Linux from Scratch",
    "Hardware",
    "QEMU"
  ],
  "sections": [
    {
      "iri": "Section-1",
      "subtitle": "Abstract",
      "paragraphs": [
        {
          "iri": "Section-1-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-1-Paragraph-1-Sentence-1",
              "text": "Abstract\u2014As is commonly known, hardware in a computer system requires a processor to run the operating system."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-2",
              "text": "The primary architectures that form the basis of most processors are CISC and RISC."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-3",
              "text": "CISC includes long sub-level commands for effective memory management and simple compiler implementations to be developed."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-4",
              "text": "Thus CISC has a complex set of commands; hence the name Complex Instruction Set Computer."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-5",
              "text": "On the other hand, CISC has had backward compatibility since the 1970s."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-6",
              "text": "Reduced Instruction Set Computer (RISC), the other popular architecture, simplifies command sets and handles access to memory with load-store commands."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-7",
              "text": "Since the instruction set is simplified, the hardware runs faster."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-8",
              "text": "In addition, RISC-based processors contain less chip-sets and may be designed faster."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-9",
              "text": "Currently, with the prevalence of the Internet of Things (IoT), the demand for RISC architectures has increased and its usage in embedded devices has become widespread."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-10",
              "text": "The ARM processor is a successful example of the RISC architecture adaptation."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-11",
              "text": "However, ARM processor production has certain license term limitations and contains a few design flaws in its architecture [1]."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-12",
              "text": "In 2010, the RISC-V processor architecture, which was developed as an open source instruction set at Berkeley University, paves the way for open source hardware in terms of its BSD license and design professionalism."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-13",
              "text": "As a result, it will be possible to produce their own processors for communities and organizations without license restrictions."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-14",
              "text": "In this paper, we discuss the building blocks of the development life-cycle of an open source operating system on the RISC-V architecture."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-15",
              "text": "As an operating system base, we implement MILIS Linux, an open source operating system development project."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-16",
              "text": "It has an independent user space and its own package manager."
            },
            {
              "iri": "Section-1-Paragraph-1-Sentence-17",
              "text": "For a completely independent open source computing system, open source RISC-V hardware architecture provides the freedom that is needed."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-2",
      "subtitle": "Introduction",
      "paragraphs": [
        {
          "iri": "Section-2-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-1-Sentence-1",
              "text": "A. RISC-V"
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-2",
              "text": "In order to understand the RISC-V architectures that are used by current processor families, first it is essential to understand RISC."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-3",
              "text": "These processors have a general set of instructions that are more homogeneous in length and execution time than CISC, which corresponds to more basic computational operations."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-4",
              "text": "The implementation of the instructions is optimized and cluster command processing is used to increase the operating speed."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-5",
              "text": "More register areas to minimize memory usage is included."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-6",
              "text": "In order to achieve less memory and processing power, methods such as compression of the instruction set are utilized [2]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-7",
              "text": "The disclosure of the Meltdown and Spectre vulnerabilities [1] shows that if we apply high security at software level, still weakness of computing resumes if we don't ensure at hardware level."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-8",
              "text": "Processors are executing instructions in the computer with high-level access rights."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-9",
              "text": "Some of the runtime conditions of the system are not visible, such as the Intel management engine [3]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-10",
              "text": "In order to overcome this vulnerability, we have to make use of the open source synergy that Linux creates in the kernel on the hardware side."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-11",
              "text": "Because the opening of ISA (Instruction Set Architecture), it can be discovered and improved by industry experts, commercial innovators and top academics."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-12",
              "text": "The ability to add extensions to basic ISA makes it suitable for applications that require special configuration."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-13",
              "text": "Although the processor market has been running for a long time, it has not been able to make great improvements, due to closed and license problems [4]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-14",
              "text": "Although open source hardware studies have historically been conducted on Sparc [5] architectures or Power ISA [6] as open concepts, these projects have been insufficient and will not be able to create a large enough open source ecosystem."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-15",
              "text": "Similarly, OpenRISC [7] is based on the open-source processor architecture OpenRISC1000."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-16",
              "text": "Although Linux kernel 3.1 is supported, kernel-based improvements have slowed down over time."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-17",
              "text": "Currently, though there is insufficient attention paid to these types of advances, Debian produced a port in 2014."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-18",
              "text": "However, it closed the project due to copyright reasons in 2016."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-19",
              "text": "But since UC-Berkeley started designing the RISC-V command set architecture, there has been new mobilization in academia and industry [8]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-20",
              "text": "First of all, RISC-V is free and open source."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-21",
              "text": "The usage license is licensed under the BSD license."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-22",
              "text": "RISC-V primarily focuses on defining the command set architecture rather than specific implementations."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-23",
              "text": "Still, there are also free open source core hardware designs [9]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-24",
              "text": "RISC-V which is a nice leap for the processor sector has started to support many companies."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-25",
              "text": "Technology relevant companies from many countries participated to RISC-V foundation."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-26",
              "text": "Some major companies and institutes that contribute this foundation include; IIT Madras(India) [10], ETH Zurich(Swiss) [11], ASTC(Australia) [12], Barcelona Supercomputing Center(Spain) [13], ASELSAN(Turkey) [14]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-27",
              "text": "By the way Western Digital also started to develop and use RISC-V architecture based processors in storage devices [15]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-28",
              "text": "Unlike OpenRISC, RISC-V is aimed at a wider range of applications."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-29",
              "text": "The Linux kernel's support for RISC-V is fairly new, starting with version 4.15 and 5.0 provides more extensive support, as well as RISC-V / Linux support for the kernel porting."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-30",
              "text": "One of the outputs of RISC-V for hardware is to offer a more secure architecture and processor capabilities [12]."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-31",
              "text": "Due to the lack of speculative memory access in the RISC-V processor, there is no hardware weakness such as the Meltdown-Spectre vulnerability."
            },
            {
              "iri": "Section-2-Paragraph-1-Sentence-32",
              "text": "The most important advantage of RISC-V is that it is easy to apply qualified security ideas because the work is carried out as open source."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-2-Sentence-1",
              "text": "B. MILIS Linux"
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-2",
              "text": "MILIS (Milli Isletim Sistemi in Turkish) [16] project is a Linux distribution project that started voluntarily in 2016 and implemented using LFS (Linux from Scratch) [17] techniques."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-3",
              "text": "Since 2019, the project is supported by Akdeniz University BAP unit [18]."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-4",
              "text": "MILIS Linux differs from other GNU/Linux projects with its independent base and own package manager."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-5",
              "text": "For the time being, a desktop-targeted operating system is being developed for x86-64 systems."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-6",
              "text": "Target users of MILIS are, primarily government agencies, commercial organizations and private users."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-7",
              "text": "It has the goal of being a free and easy to use operating system for individual and organizational use."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-8",
              "text": "Unlike the other distributions, which is commonly forked from Debian, MILIS is not based on any existing Linux distribution."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-9",
              "text": "It has its own package production collection and independent root file-system production."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-10",
              "text": "It has open development platform for developers by providing pure Linux usage and development experience."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-11",
              "text": "Secure network structure may easily be configured via a web browser."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-12",
              "text": "Although the project has been initiated voluntarily, it has the ultimate goal of being an open source software ecosystem for the academic environment."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-13",
              "text": "MILIS Linux project now aims to completely work on open source hardware and be one of the first in among Linux distributions."
            },
            {
              "iri": "Section-2-Paragraph-2-Sentence-14",
              "text": "Such open source hardware and operating system will have the benefit of being immune to world trade disputes such as the recent developments of Huawei product bans."
            }
          ]
        },
        {
          "iri": "Section-2-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-2-Paragraph-3-Sentence-1",
              "text": "C. MILIS Linux and RISC-V"
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-2",
              "text": "In order to achieve a completely open and secure system, related studies were followed and concluded that the RISC-V ISA study seem to be the most promising."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-3",
              "text": "The members of the RISC-V foundation include some reputable companies including ASELSAN as a silver member."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-4",
              "text": "ASELSAN and Bilkent University are collaborating to produce chips using RISC-V architecture [19]."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-5",
              "text": "Although R&D for chip production is ongoing, to our knowledge, we are not aware of any operating system work locally to support such architecture."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-6",
              "text": "Globally, such work is also limited to few distributions."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-7",
              "text": "To remedy this gap, we are developing a fork of the MILIS project to support RISC-V architecture."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-8",
              "text": "In addition, it is desired to work as a separate branch for embedded devices."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-9",
              "text": "It is expected that with an increasing interest in IoT and Industry 4.0, such software will likely have high interest."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-10",
              "text": "Currently, Genpro from Israel [20] and Shakti [21] from India are working on new generation processors based on RISC-V architecture."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-11",
              "text": "Recent interest in open processor architecture are likely to promote the open source operating systems."
            },
            {
              "iri": "Section-2-Paragraph-3-Sentence-12",
              "text": "The MILIS project is now planned to be one of the first open source Linux based OS targeting RISC-V."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-3",
      "subtitle": "Related Work",
      "paragraphs": [
        {
          "iri": "Section-3-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-3-Paragraph-1-Sentence-1",
              "text": "With the RISC-V processor productions, Si-five has produced a number of development motherboards for developers [22]."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-2",
              "text": "Linux distributions on motherboards with these processors started to gain momentum."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-3",
              "text": "Legacy distributions such as Debian have created a project group on the RISC-V and started porting as infrastructure transfer work [23]."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-4",
              "text": "Fedora develops a native OS by compiling packages targeting RISC-V."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-5",
              "text": "It has also established a web-based compilation tracking system [24]."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-6",
              "text": "Apart from these, it can also produce minimal custom Linux images with Yocto [25] and Buildroot [26] Linux Kit."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-7",
              "text": "Buildroot currently ported for 64-bit RISC-V architecture."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-8",
              "text": "Buildroot supports RISC-V with native and original implementation."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-9",
              "text": "In this paper, we will focus on increasing kernel support and reducing porting times by a proposed reference implementation based on MILIS."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-10",
              "text": "We endeavored to build a Linux from Scratch from the root file system."
            },
            {
              "iri": "Section-3-Paragraph-1-Sentence-11",
              "text": "Also with the rapid integration of Linux distro developers, we can improve our user-space application level."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-4",
      "subtitle": "Implementation",
      "paragraphs": [
        {
          "iri": "Section-4-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-1-Sentence-1",
              "text": "Currently, MILIS Linux is running smoothly with 64-bit systems."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-2",
              "text": "Our RISC-V architecture-oriented work can be called a port in the Linux community."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-3",
              "text": "Port aims to produce kernel and userspace packages available in MILIS and a hardware based 64-bit little-endian RISC-V compatible base system."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-4",
              "text": "RISC-V also allows 32-bit and 128-bit ISA configurations, however the development of other variants will be considered as future work."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-5",
              "text": "\u2022 32-bit architectures, except for specific purposes;"
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-6",
              "text": "\u2022 32-bit ports in MILIS have never been done, it is not necessary."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-7",
              "text": "\u2022 128-bit operation is not realistic at this time."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-8",
              "text": "Since MILIS is a Linux system that applies the Linux from Scratch directives, similar methods can be used to build the basis of the RISC-V architecture."
            },
            {
              "iri": "Section-4-Paragraph-1-Sentence-9",
              "text": "In this section, we detail the work packages that are typically included in porting."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-2-Sentence-1",
              "text": "A. System Emulation"
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-2",
              "text": "RISC-V system emulator may be used during the development and testing of the OS without real hardware."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-3",
              "text": "Low cost easy setup QEMU virtual machine [27] supports RISC-V since 2.12."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-4",
              "text": "This is opposite of QEMU's full system emulation mode, which ensures emulation devices and requires you to boot an operating system natively."
            },
            {
              "iri": "Section-4-Paragraph-2-Sentence-5",
              "text": "We use QEMU 4.0.0 version."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-3",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-3-Sentence-1",
              "text": "B. Toolchain"
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-2",
              "text": "Toolchain is a cross-compiler for GNU."
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-3",
              "text": "RISC-V requires Binutils 2.30 or above versions to build a kernel with GCC 7.1 or above."
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-4",
              "text": "Currently, we choose GCC 9.1 and Binutils 2.32 versions."
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-5",
              "text": "There are 3 common C libraries; Glibc, Uclibc and Musl."
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-6",
              "text": "Only Glibc has upstream RISC-V support for 64-bit only architecture."
            },
            {
              "iri": "Section-4-Paragraph-3-Sentence-7",
              "text": "We choose Glibc version 2.29 to build packages [28]."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-4",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-4-Sentence-1",
              "text": "C. Bootloader"
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-2",
              "text": "A bootloader is a piece of code that executes before an operating system runs."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-3",
              "text": "Bootloaders usually provide several options to boot the OS kernel and also contain commands for debugging and/or modifying the kernel environment before booting."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-4",
              "text": "RISC-V specific Berkley Bootloader(BBL) may be used in this project [29]."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-5",
              "text": "U-boot may be another alternative, but requires more work for porting to RISC-V."
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-6",
              "text": "BBL will support;"
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-7",
              "text": "\u2022 Starting and response tasks to timer interrupts,"
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-8",
              "text": "\u2022 Boot chain loading for Linux and default boot loading process,"
            },
            {
              "iri": "Section-4-Paragraph-4-Sentence-9",
              "text": "\u2022 RISC-V processor is not equipped to handle some instructions directly in hardware so BBL handles them as well."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-5",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-5-Sentence-1",
              "text": "BBL is somewhat special in that it cannot chainload a Linux kernel like GRUB or U-Boot, but instead the BBL compile scripts links the kernel binary directly into the BBL ELF file."
            },
            {
              "iri": "Section-4-Paragraph-5-Sentence-2",
              "text": "Therefore BBL must always be rebuilt within kernel."
            },
            {
              "iri": "Section-4-Paragraph-5-Sentence-3",
              "text": "Creating a proper separation between BBL and the kernel is planned but not yet implemented."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-6",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-6-Sentence-1",
              "text": "RISC-V Linux port has been accepted into Linux tree and is slated to release as part of 4.15 since 2017."
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-2",
              "text": "While this is a major milestone, still much work remains related to the Linux kernel and the userspace."
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-3",
              "text": "Additionally, much research and many tasks remain in the following areas:"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-4",
              "text": "\u2022 Init and Halt Code"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-5",
              "text": "\u2022 Atomic and Locking Code"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-6",
              "text": "\u2022 Generic library routines and assembly"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-7",
              "text": "\u2022 ELF and module implementation"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-8",
              "text": "\u2022 Task implementation"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-9",
              "text": "\u2022 Device, timer, IRQs, and the SBI"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-10",
              "text": "\u2022 Paging and MMU"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-11",
              "text": "\u2022 User-facing API"
            },
            {
              "iri": "Section-4-Paragraph-6-Sentence-12",
              "text": "\u2022 Build Infrastructure"
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-7",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-7-Sentence-1",
              "text": "For building the kernel, we used the 5.0 stable version from the kernel git repository [30] using the following compilation parameters; CROSSCOMPILE=riscv64-linuxgnu- ARCH=riscv."
            },
            {
              "iri": "Section-4-Paragraph-7-Sentence-2",
              "text": "And BBL will compile with -withpayload config parameter to reference compiled kernel."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-8",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-8-Sentence-1",
              "text": "E. Pre-Root File System and Package Production"
            },
            {
              "iri": "Section-4-Paragraph-8-Sentence-2",
              "text": "We cross-compile packages from x86-64 host to riscv64 target file system."
            },
            {
              "iri": "Section-4-Paragraph-8-Sentence-3",
              "text": "At the conclusion of this process, we were able to achieve a bootable operating system for RISC-V hardware or an emulator."
            },
            {
              "iri": "Section-4-Paragraph-8-Sentence-4",
              "text": "This root filesystem, named prerootfs, will be used at package production."
            },
            {
              "iri": "Section-4-Paragraph-8-Sentence-5",
              "text": "After producing the necessary packages, we will re-construct the base file system of RISC-V using these packages."
            }
          ]
        },
        {
          "iri": "Section-4-Paragraph-9",
          "sentences": [
            {
              "iri": "Section-4-Paragraph-9-Sentence-1",
              "text": "F. Bootable Image"
            },
            {
              "iri": "Section-4-Paragraph-9-Sentence-2",
              "text": "Recreation of Rootfs using MILIS enables us to distribute an initial bootable binary disk image that is completely built from MILIS packages for kernel and user space software."
            },
            {
              "iri": "Section-4-Paragraph-9-Sentence-3",
              "text": "With adding live system packages, we will get a live image to run a virtual board."
            },
            {
              "iri": "Section-4-Paragraph-9-Sentence-4",
              "text": "Fig. 1 shows the general workflow that is applied during the building of the RISC-V computing environment."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-5",
      "subtitle": "Conclusion",
      "paragraphs": [
        {
          "iri": "Section-5-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-5-Paragraph-1-Sentence-1",
              "text": "In this paper, the RISC-V processor has been compared to other architectures and its bright future was implied."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-2",
              "text": "Being opensource and its community driven design through open source hardware initiative, it may be used in mission critical projects."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-3",
              "text": "Especially with the advances in the Internet of Things, the use of RISC-V processor boards may likely become popular in the market with the exciting features it provides."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-4",
              "text": "Because many companies have started R&D studies for RISC-V and become members of the RISC-V foundation."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-5",
              "text": "In addition to hardware information, this open source hardware that we have emphasized in this paper is the necessity of developing an open source and reliable operating system."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-6",
              "text": "In this case, Linux is the best candidate on the basis of this work as the kernel."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-7",
              "text": "Even though port migration of different Linux distributions has already begun, we are stressing the need to create an open source and reliable user ecosystem directly on the Linux kernel by enabling the MILIS Linux project to be ported to a different architecture."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-8",
              "text": "Any development and optimization in this process will add experience to our IT process."
            },
            {
              "iri": "Section-5-Paragraph-1-Sentence-9",
              "text": "This study will gain momentum with the open computing proposal and will gain more."
            }
          ]
        }
      ]
    },
    {
      "iri": "Section-6",
      "subtitle": "Future Work",
      "paragraphs": [
        {
          "iri": "Section-6-Paragraph-1",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-1-Sentence-1",
              "text": "A. Physical Implementation and Optimizations"
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-2",
              "text": "The work outline performed on the QEMU virtual machine discussed in this study will be applied on a real board based on RISC-V processor."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-3",
              "text": "Compilation and testing will give more accurate results using physical hardware."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-4",
              "text": "Thus, we will have a better understanding of the components that will need to be optimized."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-5",
              "text": "The compilation tools that we use in the bootstrap process will offer more RISC-V support over time and will be optimized."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-6",
              "text": "In addition, alternative libraries instead of Glibc, which we currently use as C libraries, will be evaluated."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-7",
              "text": "Also, with the RISC-V support in the LLVM Compiler Infrastructure [31], native compile support will be increased at the level of programming languages which use LLVM as back-end compiler."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-8",
              "text": "RISC-V porting will be further explored for the kernel level difficulties encountered while providing the necessary solutions."
            },
            {
              "iri": "Section-6-Paragraph-1-Sentence-9",
              "text": "The necessary sponsors and research project funding supports will be provided for the R&D studies and RISC-V processors with different features will be obtained and the studies will be performed on real equipment."
            }
          ]
        },
        {
          "iri": "Section-6-Paragraph-2",
          "sentences": [
            {
              "iri": "Section-6-Paragraph-2-Sentence-1",
              "text": "B. The Future: Open Hardware and Open Source Operating System"
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-2",
              "text": "Open hardware means license-free; namely with RISC-V virtually anyone can produce potentially better evaluations and much more accurate comparisons with existing works."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-3",
              "text": "There is a range of high quality, open-source RISC-V implementations to modify, rather than just based on estimating or simulations."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-4",
              "text": "Also opening standard will bring about a more active development community so that when sharing patches or ideas, projects will get contributions more quickly."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-5",
              "text": "As of now one aspect of the RISC-V Foundation is responding to proposals and discussing them."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-6",
              "text": "The other aspect is producing proposed changes either in a future specification revision or in hardware."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-7",
              "text": "On the other hand, opening the standards and having a commercially open license would certainly make the processor design and production race more fair."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-8",
              "text": "Also RISC-V will bring a new synergy of open source computer architecture research areas, such as universities started to establish research groups on RISC-V, such as OpenCelerity [32] and SCARV [33]."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-9",
              "text": "Research is expected to be carried out on real hardware with the increase of RISC-V processor manufacturers."
            },
            {
              "iri": "Section-6-Paragraph-2-Sentence-10",
              "text": "As a result, Linux kernel and userspace seems the best candidate software stack for RISC-V."
            }
          ]
        }
      ]
    }
  ],
  "summary": "Abstract\u2014As is commonly known, hardware in a computer system requires a processor to run the operating system. The primary architectures that form the basis of most processors are CISC and RISC. CISC includes long sub-level commands for effective memory management and simple compiler implementations to be developed. Thus CISC has a complex set of commands; hence the name Complex Instruction Set Computer. On the other hand, CISC has had backward compatibility since the 1970s. Reduced Instruction Set Computer (RISC), the other popular architecture, simplifies command sets and handles access to memory with load-store commands. Since the instruction set is simplified, the hardware runs faster. In addition, RISC-based processors contain less chip-sets and may be designed faster. Currently, with the prevalence of the Internet of Things (IoT), the demand for RISC architectures has increased and its usage in embedded devices has become widespread. The ARM processor is a successful example of the RISC architecture adaptation. However, ARM processor production has certain license term limitations and contains a few design flaws in its architecture [1]. In 2010, the RISC-V processor architecture, which was developed as an open source instruction set at Berkeley University, paves the way for open source hardware in terms of its BSD license and design professionalism. As a result, it will be possible to produce their own processors for communities and organizations without license restrictions. In this paper, we discuss the building blocks of the development life-cycle of an open source operating system on the RISC-V architecture. As an operating system base, we implement MILIS Linux, an open source operating system development project. It has an independent user space and its own package manager. For a completely independent open source computing system, open source RISC-V hardware architecture provides the freedom that is needed.\n\nRISC-V is an open-source instruction set architecture (ISA) designed to be more secure and efficient than traditional ISAs like CISC. It's free, open-source, and has gained support from many companies and institutions worldwide. The RISC-V ISA aims to provide a more secure architecture by eliminating speculative memory access, making it immune to vulnerabilities like Meltdown-Spectre. To achieve this goal, the MILIS Linux project is being developed as a fork of the original MILIS project to support RISC-V architecture.\n\nSi-five has produced development motherboards for RISC-V processors, leading to momentum with Linux distributions like Debian and Fedora. These distros have ported their infrastructure to RISC-V, while Buildroot supports both native and original implementations on this architecture.\n\nThe MILIS Linux project aims to port a 64-bit little-endian RISC-V compatible base system, with plans for future work on 32- and 128-bit ISA configurations. The process involves using QEMU as an emulator during development and testing, building a toolchain with GCC 9.1 and Binutils 2.32, and creating a bootloader (Berkley Bootloader) that supports RISC-V specific instructions. The project has been accepted into the Linux tree and is slated for release in version 4.15 since 2017.\n\nThe RISC-V processor has been compared to other architectures, highlighting its potential for use in mission-critical projects due to its open-source and community-driven design. The paper emphasizes the need for an open-source operating system, with Linux being a suitable candidate as the kernel.\n\nA. Physical Implementation and Optimizations The work outline performed on the QEMU virtual machine discussed in this study will be applied on a real board based on RISC-V processor. Compilation and testing will give more accurate results using physical hardware. Thus, we will have a better understanding of the components that will need to be optimized. The compilation tools that we use in the bootstrap process will offer more RISC-V support over time and will be optimized. In addition, alternative libraries instead of Glibc, which we currently use as C libraries, will be evaluated. Also, with the RISC-V support in the LLVM Compiler Infrastructure [31], native compile support will be increased at the level of programming languages which use LLVM as back-end compiler. RISC-V porting will be further explored for the kernel level difficulties encountered while providing the necessary solutions. The necessary sponsors and research project funding supports will be provided for the R&D studies and RISC-V processors with different features will be obtained and the studies will be performed on real equipment.\n\nB. The Future: Open Hardware and Open Source Operating System Open hardware means license-free; namely with RISC-V virtually anyone can produce potentially better evaluations and much more accurate comparisons with existing works. There is a range of high quality, open-source RISC-V implementations to modify, rather than just based on estimating or simulations. Also opening standard will bring about a more active development community so that when sharing patches or ideas, projects will get contributions more quickly. As of now one aspect of the RISC-V Foundation is responding to proposals and discussing them. The other aspect is producing proposed changes either in a future specification revision or in hardware. On the other hand, opening the standards and having a commercially open license would certainly make the processor design and production race more fair. Also RISC-V will bring a new synergy of open source computer architecture research areas, such as universities started to establish research groups on RISC-V, such as OpenCelerity [32] and SCARV [33]. Research is expected to be carried out on real hardware with the increase of RISC-V processor manufacturers. As a result, Linux kernel and userspace seems the best candidate software stack for RISC-V.",
  "kg2text": [
    "The RISC-V instruction set architecture, designed by UC-Berkeley, simplifies command sets and handles memory access with load-store commands. It provides freedom to produce custom processors without license restrictions. The RISC-V processor architecture is an open-source alternative to proprietary architectures like ARM. Additionally, the RISC-V has a broader term as it refers to both the instruction set architecture and the processor itself. Furthermore, the RISC-V command set architecture defines the commands used to execute instructions in this simplified architecture. Moreover, the RISC-V forms the basis of The primary architectures, which include CISC (Complex Instruction Set Computer) and RISC (Reduced Instruction Set Computer).",
    "The RISC-V, a reduced instruction set computing (RISC) microprocessor architecture designed for efficiency and flexibility. It was developed as an open-source instruction set at Berkeley University in 2010. The primary architectures form the basis of most processors, with CISC and RISC being two fundamental types. The RISC-V processor is an open-source instruction set architecture that simplifies command sets and handles memory access with load-store commands, providing freedom from license restrictions and allowing for customization of hardware designs. It has a broader term as 'the RISC-V' which refers to the same thing. Additionally, it was designed specifically for hardware, offering a more secure and open-source alternative for processor capabilities.",
    "The RISC-V architecture, a reduced instruction set computing (RISC) microprocessor design, has gained popularity for its efficiency and flexibility. The RISC-V processor boards use this open-source hardware technology to simplify command sets and handle memory access with load-store commands. Based on the RISC-V processor architecture, new generation processors offer an alternative to traditional CISC-based architectures like ARM. The primary architectures of CISC and RISC pave the way for custom processors without license restrictions.",
    "CISC and RISC, two fundamental processor architecture types, paved the way for the development of the RISC-V command set architecture. The primary architectures, CISC and RISC, form the basis of most processors, including the RISC-V processor. RISC-IV processor boards use the RISC-V processor architecture to provide a more secure and open-source alternative for processor capabilities. The RISC-V command set architecture defines the commands used to execute instructions in RISC-V architectures, which simplify command sets compared to CISC. New generation processors uses the RISC-V processor architecture designed specifically for hardware development, providing freedom from licensing restrictions.",
    "New generation processors, which use the RISC-V architecture, offer a more secure and efficient alternative to traditional CISC-based processors. The RISC-V processor architecture has been designed as an open-source instruction set, allowing for freedom from licensing restrictions and customization of hardware designs. This reduced instruction set computing (RISC) microprocessor architecture is characterized by its ability to simplify command sets and improve processing speed. In fact, the ARM processor exemplifies this concept, providing a type of microprocessor that simplifies command sets and improves processing speed. The RISC-V architecture has been designed specifically for hardware, offering a more secure and open-source alternative for processor capabilities.",
    "The RISC-V processor, an open-source instruction set architecture developed at Berkeley University, simplifies command sets and handles memory access with load-store commands. It uses Reduced Instruction Set Computing (RISC) architecture to provide freedom from licensing restrictions. The primary architectures of CISC and RISC form the basis for this new generation processors that use the RISC-V processor boards. These open-source hardware technologies are designed specifically for hardware, offering a more secure alternative for processor capabilities.",
    "RISC-V for hardware, exemplified by The ARM processor, offers a more secure and open-source alternative to traditional CISC-based processors. New generation processors use RISC-V command set architecture, which simplifies instruction sets and improves processing speed. In comparison, RISC-IV hardware architecture is designed specifically for the RISC-V processor, providing freedom from licensing restrictions. The primary architectures of CISC and RISC form the basis of most processors, including new generation processors that are designed to be more secure and efficient than traditional CISC-based processors.",
    "The RISC-V hardware architecture paves the way for open-source hardware, providing a simplified command set and freedom from licensing restrictions. This open-architecture design exemplifies the Reduced Instruction Set Computer (RISC) principle, which simplifies instruction sets to improve processing speed. The ARM processor is an example of this approach, using load-store commands to handle memory access efficiently. RISC-based processors simplify complex architectures like CISC, allowing for customization and freedom in hardware development. New generation processors use the primary architectures, such as CISC and RISC, which define the basis of most processors.",
    "The Reduced Instruction Set Computing (RISC)-V architectures simplify command sets and handle memory access with load-store commands, providing freedom to produce custom processors without license restrictions. New generation processors use this architecture, which was developed at Berkeley University in 2010 as an open-source instruction set. The RISC-architecture adaptation is a successful instance of the Reduced Instruction Set Computer (RISC) architecture, characterized by its simplified command sets and efficient memory management. This open-source hardware technology uses the RISC-V instruction set architecture, designed for use in various applications and devices.",
    "The Reduced Instruction Set Computer (RISC) architecture adaptation, such as the RISC-V processor, allows for open-source hardware development and provides freedom from licensing restrictions. The RISC-architecture-based processors, including new generation processors, use the RISC-V instruction set to simplify command sets and improve processing speed. Additionally, the RISC-V ISA study has shown that this architecture is designed to support various applications and devices. Furthermore, the open-source nature of RISC-V processor boards allows for customization of hardware designs.",
    "The development of open-source hardware technology, such as RISC-V processor boards and new generation processors, has led to a successful instance or implementation of the Reduced Instruction Set Computer (RISC) architecture. This adaptation uses RISC-based processors that exemplify the ARM processor's ability to simplify command sets and improve processing speed. The RISC-architecture adaptation provides RISC-V hardware architecture, which allows for open-source instruction set architectures like RISC-V ISA. Furthermore, a range of high-quality, open-source RISC-V implementations has been developed, providing freedom from licensing restrictions.",
    "The Reduced Instruction Set Computing (RISC)-V architecture, designed specifically for hardware, offers a more secure and open-source alternative. A range of high-quality, open-source RISC-V implementations has been developed, allowing for customization of processor designs without license restrictions. The RISC-V ISA study focused on the instruction set and potential applications. On the RISC-V architecture, various operating systems have been successfully implemented, including a bootable Linux-based system that can run on both actual hardware and emulators. Additionally, the RISC-architecture adaptation has allowed for efficient memory management and simplified command sets. The open-source nature of RISC-V is aimed at supporting a wider range of applications.",
    "The ARM processor serves as an example of RISC architecture adaptation. The Reduced Instruction Set Computing-V (RISC-V) instruction set architecture has a broader term, ISA. The RISC-V foundation has a broader term, RISC-V for hardware. We support the development life-cycle on the RISC-V architecture, which is aimed at a wider range of applications and shows Fig. 1. This open-source instruction set architecture simplifies command sets, handles memory access with load-store commands, and provides freedom to produce custom processors without license restrictions. The processor sector has seen significant advancements with the introduction of RISC- V, particularly in terms of kernel level difficulties. A range of high-quality, open-source RISC-V implementations have been developed through initiatives such as A. RISC-V.",
    "The RISC-V processor, designed by UC-Berkeley, provides freedom from license restrictions and allows for customization of hardware designs. The Reduced Instruction Set Computing (RISC)-V architecture has been developed as an open-source instruction set at Berkeley University in 2010. This ISA is aimed at a wider range of applications and supports various devices. Legacy distributions have created a project group on the RISC-V, while A. RISC-V defines the command set architecture for the RISC-VE ISA study. The Linux kernel supports RISC-V, allowing for bootable operating systems to be achieved for both actual hardware or emulators.",
    "The development of RISC-V architecture-based processor support and operating system integration with Linux, enabling the creation of an open-source computing ecosystem. The Reduced Instruction Set Computing (RISC)-V instruction set architecture has been compared to other architectures in terms of its efficiency and flexibility. A range of high-quality, open-source RISC-V implementations have been developed, allowing for modification and further development. Recent interest in open-processor architectures is likely to promote the creation of more open-source operating systems. The Reduced Instruction Set Computing (RISC)-V instruction set architecture has a broader term that includes other processor architectures.",
    "The current processor families use RISC-V architectures, which are based on open-source instruction set architecture that simplifies command sets and handles memory access with load-store commands. The development life-cycle of an operating system, specifically MILIS Linux, takes place on the RISC-V architecture, which is supported by the RISC-V foundation. This reduced instruction set computing (RISC) microprocessor architecture was designed for efficiency and flexibility. New generation processors use this open-source processor architecture to improve processing efficiency. The RISC-V processor boards refer to a type of open-ource hardware technology that uses the RISC-V instruction set architecture, designed for use in various applications and devices.",
    "The Reduced Instruction Set Computing (RISC-V) processor architecture, developed at Berkeley University, simplifies command sets and handles memory access with load-store commands. We are developing a fork of the MILIS project to create an open-source operating system on RISC-V architecture. The Linux community has accepted our work into their tree. Our RISC-V architecture-oriented work can be called a port in this community. New generation processors, such as those based on ARM and RISC-architecture, have been designed for use in various applications and devices. Future work includes developing 32-bit and 128-bit ISA configurations for the RISC-V instruction set.",
    "The RISC-V processor architecture, designed by UC-Berkeley, provides freedom from license restrictions and allows for customization of hardware designs. This open-source instruction set architecture simplifies command sets, handles memory access with load-store commands, and offers the flexibility needed to produce custom processors without licensing constraints. In contrast, CISC architectures are characterized by complex instruction sets that allow for more efficient execution of instructions. The ARM processor is an example of a RISC-based processor that exemplifies this simplified approach. Meanwhile, OpenRISC1000 is another open-source processor architecture based on the same principles. We will have a better understanding of the components that need to be optimized once we build our Linux computing system using GCC 7.1 or above and Binutils version 2.30 or higher.",
    "The QEMU emulator supports RISC-V, which has been compared to other architectures. U-Boot may be another alternative for porting to RISC-V, but it requires more work. CISC includes long sub-level commands for effective memory management. The open processor architecture promotes the open source operating systems. RISC-V is a broader term that encompasses physical hardware and chip-sets. It also requires GCC 7.1 or above. Genpro are working on new generation processors based on the RISC-V architecture, which has been compared to other architectures as well. MILIS Linux is an example of free and easy-to-use operating systems for individual and organizational use. The RISC-V foundation promotes open-source instruction set architectures, including the RISC-IV hardware architecture.",
    "Buildroot, a software development tool and project, has been ported for RISC-V architecture. The development of other variants will be considered as future work. CISC architectures have existed since the 1970s and are characterized by complex instruction sets. In contrast, RISC-IV processor productions provide freedom to produce custom processors without licensing restrictions. A real board based on RISC-V processor supports Linux distributions. The most important advantage of RISC-V is its ease in applying qualified security ideas due to its open-source nature. Such work is limited to a few Linux operating system projects that support the RISC-IV architecture.",
    "The RISC-V architecture, a reduced instruction set computing microprocessor design, has gained popularity due to its open-source nature and flexibility. This led to the development of MILIS Linux, an operating system that can run on both actual RISC-V hardware and emulators. The success of this project is attributed to the BBL bootloader, which compiles and links Linux kernels, allowing direct integration of kernel binaries. Furthermore, the Also opening standard has brought about a more active development community for the RISC-V processor architecture. In contrast, ARM processors are restricted by certain license term limitations. Additionally, MILIS Linux can be seen as an extension of C. MILIS's research project on computer science and operating systems like Linux.",
    "The MILIS project, which aims to create an open-source Linux operating system on RISC-V architecture, has gained momentum with the open computing proposal. Shakti are working on new generation processors that minimize memory usage by increasing register areas. The RISC-V hardware architecture requires Binutils 2.30 or above versions and is designed for a broader term of architectures. A native OS can be considered as an operating system, which has its own package manager. OpenRISC1000 is an open-source processor architecture with different features from the traditional processors. We are developing a fork of the MILIS project to create a completely independent and secure open-source computing system on RISC-V architecture.",
    "The RISC-V architecture, developed as an open-source instruction set at Berkeley University in 2010, has a broader term of 'standards'. This root filesystem will be used as prerootfs. The implementation optimizes cluster command processing and can be called a port in the Linux community. Our RISC-V architecture-oriented work is a self-built, minimalistic Linux operating system installation process that starts from scratch and builds the entire system from the root filesystem. To offer a more secure architecture and processor capabilities, it has its own package manager. We endeavored to build a Linux from Scratch on this hardware-based 64-bit little-endian RISC-V compatible base system.",
    "MILIS Linux, an open-source operating system development project, has been designed to run smoothly on 64-bit systems. Its architecture is based on RISC-V command set architecture and standards. The hardware-based 64-bit little-endian RISC-V compatible base system provides a foundation for running MILIS Linux. This study discussed the use of QEMU virtual machine in building an open-source computing system using RISC-V architecture, which differs from other GNU/Linux projects. The RISC-V Foundation includes some reputable companies that promote and develop open-source instruction set architectures. Open source hardware studies have been conducted on Power ISA. MILIS is a Linux distribution project that started voluntarily in 2016 and implemented using LFS techniques with its own package manager and independent root file-system production.",
    "Western Digital, a well-known technology company that manufactures storage devices, started to develop and use the RISC-V processor architecture. Open-source RISC-V implementations have been developed for various tasks on this architecture. The MILIS project aimed to be one of the first open source Linux-based operating systems for desktop-targeted x86-64 systems. These processors execute instructions in the computer with high-level access rights, which is a key feature of the RISC-V architecture. Many companies have started research and development studies for RISC-V technology, leading to a range of high-quality, open-source implementations. An open source and reliable operating system was developed using this architecture, providing an independent user space with its own package manager. Fedora develops native OSs on various architectures, including the RISC-V architecture. At the conclusion of this process, we were able to achieve a bootable operating system for RISC-V hardware or emulator at the end of the described process.",
    "The development boards designed by Si-five, specifically for use with RISC-V processors, are intended to help software developers build, test, and deploy Linux-based applications. These custom development boards or main circuit boards support various components of a computer system, including devices that handle interrupts, timers, and the SBI. The implementation aimed at optimizing instruction commands in RISC-architecture processors has led to the creation of MILIS, an open-source operating system project that started voluntarily in 2016. This Linux distribution project implemented using LFS (Linux from Scratch) techniques provides its own package manager and independent root file-system production. With Glibc providing upstream support for 64-bit only architecture, it is now possible to run the operating system on RISC-V hardware or emulators. The open processor architecture allows communities and organizations without license restrictions to produce their own processors.",
    "The development of customizable processor solutions for open-source projects and community-driven initiatives without license restrictions is an exciting area. These processors, designed specifically for RISC-V architecture-based systems, can be implemented in hardware to create custom motherboards with these processors. The work outline performed on QEMU virtual machines highlights the importance of compilation tools that will offer more RISC-V support over time. In this context, Linux and default boot loading process are crucial components of operating system development. Furthermore, research into RISC-V architecture-oriented projects has led to a better understanding of how Linux is the best candidate for kernel implementation based on this work.",
    "The development of MILIS Linux, an open-source operating system for RISC-V processor architecture, involves customizing motherboards with these processors to run physical hardware. The OS kernel and userspace packages available in MILIS are designed to work seamlessly on this platform. Real equipment is being studied and tested to optimize the performance of OpenRISC architectures. Port aims to produce kernel and userspace packages that can be used on RISC-V processor-based systems, while Buildroot provides a flexible way to build embedded systems like Linux distributions. The ISA instruction set architecture governs how instructions are executed in hardware, with ARM being one type of microarchitecture or processor technology. A desktop-targeted operating system is currently under development for x86-64 systems. RISC-V foundation supports the development of open-source operating systems like MILIS and Fedora. Our RISC-V architecture-oriented work involves research on optimizing instruction commands to increase processing speed.",
    "The Power ISA has a broader scope, encompassing various architectures. RISC-V support for 64-bit only architecture falls under this umbrella as well. The Linux kernel, being an operating system, has its own broader term in 'Linux'. Similarly, Linux-based OS is also categorized under the same label. Reduced Instruction Set Computer and A. RISC-V are both research initiatives focused on developing open-source instruction set architectures. MILIS aims to work completely on open source hardware, utilizing compression of the instruction set methods to minimize memory usage. The kernel in this context refers to the core operating system component, specifically the Linux kernel, which is being ported and developed for RISC-V architecture.",
    "The MILIS project, a Linux operating system development project that aims to create a completely independent and secure open-source computing system on RISC-V architecture. The project has a broader term of 'project', which involves planned or ongoing efforts aimed at achieving specific goals. To modify the existing software components is crucial for this project's success. Few distributions support the RISC-V architecture, with global efforts being limited to these few initiatives. ELF and module implementation are essential components that need optimization. The study on building an open source Linux computing system on RISC-V architecture remains related to userspace, which provides services and functionality to applications. This study applies Linux from Scratch techniques for its development life-cycle.",
    "The MILIS project, an open-source and independent user space with its own package manager, has made significant strides in developing a Linux operating system. This study focuses on building an open-source Linux computing system using the RISC-V architecture, specifically focusing on physical implementation and optimizations. The desktop-targeted operating system is designed to be more efficient than traditional operating systems, requiring less chip-sets and utilizing x86-64 hosts as hardware platforms. Hardware in a computer system requires processors, which are devices that execute instructions and perform calculations. MILIS project has been one of the first among Linux distributions to implement its own package manager and independent root file-system production. The live system packages provide software necessary for creating bootable operating systems on RISC-V hardware or emulators. GRUB or U-Boot serves as a bootloader, specifically designed for use with RISC-V architecture. Other architectures have been explored in open-source hardware studies, including Sparc. In this paper, we discuss the development life-cycle of an open-source operating system on the RISC-V architecture, focusing on increasing kernel support and reducing porting times by proposing a reference implementation based on MILIS.",
    "The Berkley Bootloader (BBL) serves as an implementation for RISC-V architecture. It provides a method to boot Linux, which has its own kernel and components such as devices, timers, IRQs, and SBI. Debian, a popular open-source operating system, forked from MILIS, another Linux distribution project that started voluntarily in 2016. The prerootfs is part of the root filesystem for RISC-V architecture. An x86-64 host can be used to run this setup on physical hardware. Also opening standard allows anyone to produce and modify hardware without restrictions. Legacy distributions like Debian have been adapted to run on RISC-V, making it suitable for mission-critical projects. Processors are part of the physical hardware that enables computing systems. A bootloader provides several options to boot an OS kernel, which contains commands for debugging and modifying the environment before booting. Generic library routines can be written in assembly language or other programming languages. The open computing proposal is a set of proposals for developing an open-source operating system on RISC-V architecture.",
    "The MILIS Linux project, which has its own package manager and independent root file-system production, recreates Rootfs. The kernel and user space software are included in MILIS packages. Current processor families have a broader term of physical hardware. The MILIS project has a broader term of operating system work. Berkley Bootloader (BBL) has a broader term of C. Bootloader. Buildroot has a broader term of the operating system, with version 4.15 and 5.0 having a broader term of 4.0.0 version. The MILIS project is supported by Akdeniz University BAP unit. Related studies have a broader term of research. GRUB or U-Boot has a broader term of A bootloader. x86-64 host has a broader term of physical hardware. Simple compiler implementations to be developed have a broader term of the project. An initial bootable binary disk image is built from MILIS packages, requiring enabling the MILIS Linux project to be ported to a different architecture. Processors have a broader term of computer. The SBI has a broader term of standards.",
    "The Berkley Bootloader (BBL) serves as a bootloader, specifically designed for use with RISC-V architecture. This open-source hardware project aims to create software that utilizes this instruction set and target embedded devices, such as those in IoT applications. The MILIS project is an implementation of the ELF and module system on RISC-V, allowing for the creation and management of software components. Research projects like the RISC-V ISA study focus on creating software that uses this architecture. In addition to these efforts, companies involved with technology have participated in initiatives such as the RISC-V foundation. The development process involves methods like adding live system packages and compiling kernels.",
    "The MILIS Linux project aims to be ported to different architectures, including RISC-V. The RISC-V foundation responds to proposals and discusses them, showcasing its commitment to open-source hardware development. This effort aligns with the goals of companies like Debian, which has developed a Linux distribution that can run on various platforms. Furthermore, organizations such as GNU have created operating systems that cater to different architectures. In addition, chip-sets and motherboards are essential components in building physical hardware for these systems. The LLVM Compiler Infrastructure provides native compile support, allowing developers to create software packages from x86-64 hosts to RISC-V 64-bit little-endian compatible file systems. Overall, this work contributes to the development of open-source Linux-based operating systems targeting the RISC-V architecture.",
    "The Debian port of MILIS Linux, which was initiated voluntarily and later closed due to copyright reasons in 2016. This project aimed at providing a free and open-source operating system for academia. Open Hardware advocates for the design, development, and sharing of hardware components. The Linux operating system provides pure Linux usage and development experience. C Bootloader is a piece of code that loads an operating system into memory. Porting the Linux kernel to RISC-V architecture poses kernel-level difficulties. Research projects like Buildroot provide flexible ways to build embedded systems. Top academics can discover and improve Instruction Set Architectures (ISA). Open source operating systems are built on top of the Linux kernel, offering a collection of software with its own set of features. Much research is required for porting the Linux kernel to RISC-V architecture. Toolchain enables compilation across different platforms or architectures. Physical hardware components make up computer systems and networks.",
    "The open-source hardware community has made significant strides with the development of physical hardware, such as motherboards and architectures like x86-64. The RISC-V foundation, an organization dedicated to promoting open-source instruction set architectures, has also contributed to this progress. In addition, projects like Yocto and Fedora have enabled the creation of customized Linux distributions for various computing environments. Furthermore, advancements in memory management through MMU and 32-bit ports have improved system performance. The development of BBL, a bootloader that compiles and links Linux kernels, has also facilitated kernel integration. Moreover, organizations like RISC-V foundation and Build Infrastructure have enabled the creation of toolchains and package production systems. Overall, these developments demonstrate the power of open-source collaboration in advancing computing technology.",
    "The R&D studies conducted by researchers aimed at developing and optimizing open source RISC-V processors with different features, which will be tested on physical hardware. The research involved a general set of instructions for processing information by computer processor. Linux, an operating system developed using open-source principles, was used as the foundation for this project. MILIS, another Linux distribution project, implemented its own package manager and independent user space. Si-five produced development motherboards for RISC-V processor productions, enabling the creation and porting of Linux distributions. The disclosure revealed vulnerabilities in computer systems, specifically highlighting the importance of ensuring security at both software and hardware levels. Future specification revisions were proposed to refine the RISC-V architecture. A kernel with GCC 7.1 or above was used as a cross-compiler for GNU. ASELSAN is a member of the RISC-V foundation.",
    "The open source hardware community has been driving innovation, with projects like Fedora and Debian providing Linux-based operating systems. The MILIS project aims to port its Linux distribution onto RISC-V architecture, which requires compiler implementations from GCC and toolchain support. Physical hardware components are also crucial for this effort. In the future work outline, we can see that 32-bit ports will be essential for compatibility with older devices. Virtual boards provide a digital interface for remote management. Binutils is another important component of the toolchain. Research studies like R&D for RISC-V have been conducted to optimize the architecture's performance. With increasing interest in IoT and vulnerabilities, it's crucial to ensure that our systems are secure. Si-five companies play a vital role in developing motherboards for RISC-V processor productions.",
    "The MILIS project, an open-source and independent user space with its own package manager, relies on U-Boot as a software component or bootloader that initializes and configures computer hardware. This process involves loading operating systems from storage devices using bootloaders like GRUB. The RISC-V processor architecture can be discovered and improved by commercial innovators, who may use cluster command processing to increase its operating speed. Open Hardware advocates for the open-source design of physical components or devices that make up a computer system. In this context, 32-bit ports are a type of hardware interface capable of transmitting data in 32-bit chunks. The SCARV research group focuses on open source computer architecture and may conduct studies to develop and optimize RISC-V processors with different features.",
    "The Meltdown and Spectre vulnerabilities, a pair of critical computer chip flaws allowing unauthorized access to sensitive information. The Init code serves as an starting point for various programs or processes. Open source hardware projects like Fedora enable collaborative development platforms. Bootloaders such as U-Boot initialize the operating system on physical hardware devices. QEMU virtual machines simulate computing environments using system emulators, while RISC-V foundations promote open-source instruction set architectures. Secure network structures can be configured via web browsers and rely on secure infrastructure for data processing. The MILIS Linux project compiles and tests software systems to ensure accuracy. Embedded devices like it operate independently with separate branches of the MILIS Linux project. Organizations such as Si-ive support RISC-V processor productions, enabling porting of Linux distributions.",
    "The concept of open hardware, where anyone can produce RISC-V processors without license restrictions, enables a more active development community and fair competition. This future holds great promise for innovation and progress. To achieve this vision, many tasks remain in areas such as kernel implementation, proper separation between BBL and the Linux kernel, and system emulation testing. The Linux community plays a crucial role in driving open-source software development forward. QEMU is used to simulate various architectures during OS development. GRUB serves as a popular boot loader that loads operating systems from storage devices. Atomic locking code ensures synchronization of system resources. MILIS packages provide a package manager for the Linux tree, which represents a project with its own implementation and community support.",
    "The BBL bootloader plays a crucial role in compiling and linking Linux kernels, enabling direct integration of kernel binaries. This work as the kernel has been made possible by the open source hardware initiative, which aims to develop and share hardware designs under an open-source license. The RISC-V Foundation, comprising many companies that have started research and development studies for RISC-V and joined the organization, is one aspect of this effort. To achieve this goal, a more active development community has been established, with organizations like Debian contributing their expertise to the project. Furthermore, GCC 7.1 or above compiler implementations are used in building infrastructure, which includes physical hardware such as embedded devices that run on open source operating systems developed through research and implementation.",
    "The MILIS project, an open-source operating system development initiative, has its own package manager and independent root file-system production. Other GNU/Linux projects refer to various initiatives based on the Linux kernel that share similarities with MILIS in terms of their independent nature and own package management systems. The implementation is optimized for operating speed, which involves grouping commands together and processing them in clusters to increase efficiency. Communities produce their own Processors, while organizations like Akdeniz University BAP unit support projects like MILIS. Fedora, a Linux-based operating system and development platform, has its own project with similar goals. Hardware components are part of the larger infrastructure that supports various activities and operations. The open computing proposal aims to promote open-source computing by enabling communities and organizations to develop their own processors without license restrictions. Meltdown is a critical vulnerability in computer systems that allows unauthorized access to sensitive information. OpenCelerity, an Israeli company Genpro, works on developing new-generation processors based on the RISC-V architecture. Physical Implementation refers to bringing concepts or designs into tangible existence.",
    "The MILIS Linux project, an open-source and independent user space with its own package manager, has made significant progress. The necessary sponsors have supported this work, which aims to develop new technologies, particularly computer processing architectures. We cross-compile our code to a riscv64 target file system, making it compatible for use on RISC-V hardware or emulators. This effort is part of the broader development process, which involves implementing modules and tasks. The project has received support from reputable companies like Genpro, Intel, and some organizations such as SCARV and universities like Akdeniz University's BAP unit. In addition to this work, other projects like GNU and Linux have also contributed to the advancement of computer architecture.",
    "The kernel level difficulties faced by IoT devices are just one of many problems that need to be overcome. The Internet of Things, a network of interconnected physical objects, has its own set of challenges when it comes to security and vulnerability. To address these issues, organizations like Shakti have started R&D studies for RISC-V and become members of the foundation. Meanwhile, companies are working on developing new technologies, such as chip production, which requires Physical Implementation and Optimizations. In addition, there is ongoing research into opening standards and methods to improve security ideas. With these efforts, we can move forward with confidence.",
    "The process of designing, developing, and refining physical systems or technologies to achieve optimal performance involves research. This can be seen through various projects such as LFS (Linux from Scratch), which uses methods like compilation and testing. The resulting bootable image can then be used for work packages. Organizations like OpenCelerity and Shakti are involved in this process, along with others like BAP unit and the members of RISC-V foundation. System emulation is also a crucial step in verifying system performance. Furthermore, organizations such as GNU and Linux distribution project that started voluntarily in 2016 contribute to this effort.",
    "The open source instruction set architecture, its bright future, has a broader term of Future. ASELSAN as a silver member and companies are collaborating to produce chips. Studies have a broader term of project, while Linux community has a broader term of communities. Extensions also have a broader term of producing proposed changes. Bilkent University is working with Physical Implementation and Optimizations to develop this work. Optimization methods were used in the process. Barcelona Supercomputing Center and IIT Madras are organizations that support research studies. Timer interrupts trigger response tasks, which rely on components like chips. R&D studies have a broader term of both studies and research. ASELSAN is also working with Bilkent University to produce chips. Western Digital is another company involved in the production process.",
    "The response tasks are part of a set of responsibilities or activities that need to be accomplished. Genpro from Israel, an Israeli company that manufactures processors, operates within the broader context of commercial organizations. Organizational use refers to the business or organization's activities, processes, or systems. Technology relevant companies like Western Digital and ASTC (Australia) are involved in research and development initiatives focused on improving, creating, or testing new products, processes, or technologies. The authors of this work, We, used QEMU as a software emulator that simulates a virtual machine, allowing for low-cost and easy setup of various architectures. They also chose Glibc version 2.29, a specific release of the GNU C Library, which provides standard library functions for programming. This research project or study is part of R&D studies conducted by universities like Akdeniz University, IIT Madras, ETH Zurich, and Berkeley University.",
    "This work, which has its roots in research and studies conducted by various organizations such as ASELSAN (Turkey), ASTC, and Akdeniz University BAP unit, explores the concept of proposals. A proposal can be a paper that presents ideas or suggestions for consideration, evaluation, or implementation. In this context, we use 4.0.0 version to produce chips using RISC-V architecture in collaboration with ASELSAN (Turkey) and Bilkent University. The starting point is often marked by timer interrupts, which signal the initiation of an activity. This research has its broader term as studies conducted by individuals or private users."
  ],
  "times": [
    431.1911144256592
  ]
}